
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  00001fc6  0000205a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800220  00800220  0000217a  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  0000217a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002b1  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c0  00000000  00000000  0000250b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fa  00000000  00000000  00002ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b22  00000000  00000000  000033c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00003ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ec       	ldi	r30, 0xC6	; 198
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 33       	cpi	r26, 0x34	; 52
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 46 03 	call	0x68c	; 0x68c <main>
      c6:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <CAN_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>

//Initialize the CAN bus
void CAN_init(void){
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <CAN_init+0x6>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
      d8:	0e 94 8a 01 	call	0x314	; 0x314 <CAN_reset>

	uint8_t data[2];

	//Acceptance mask for RXB0 (all 11 bits counts)
	//dette filteret blokkerer alt?!?
	data[0] = 0b11111111;
      dc:	8f ef       	ldi	r24, 0xFF	; 255
      de:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
      e0:	80 ee       	ldi	r24, 0xE0	; 224
      e2:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], MASK_RXF0);
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	60 e2       	ldi	r22, 0x20	; 32
      e8:	0e 94 25 02 	call	0x44a	; 0x44a <CAN_write>
	CAN_write(data[1], MASK_RXF0+1);
      ec:	8a 81       	ldd	r24, Y+2	; 0x02
      ee:	61 e2       	ldi	r22, 0x21	; 33
      f0:	0e 94 25 02 	call	0x44a	; 0x44a <CAN_write>


	//RXF0
	//Receive filter 0 hits when id = 0x1F (exactly)	
	data[0] = 0b00000011;
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
      f8:	80 ee       	ldi	r24, 0xE0	; 224
      fa:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF0);
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	0e 94 25 02 	call	0x44a	; 0x44a <CAN_write>
	CAN_write(data[1], RXF0+1);
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	0e 94 25 02 	call	0x44a	; 0x44a <CAN_write>
	data[1] = 0b01100000;
	CAN_write(data[0], RXF5);
	CAN_write(data[1], RXF5+1);*/


	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_NORMAL); //set loopback mode
     10c:	8f e0       	ldi	r24, 0x0F	; 15
     10e:	60 ee       	ldi	r22, 0xE0	; 224
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     116:	80 e6       	ldi	r24, 0x60	; 96
     118:	60 e6       	ldi	r22, 0x60	; 96
     11a:	40 e2       	ldi	r20, 0x20	; 32
     11c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <CAN_bit_modify>
	CAN_bit_modify(CANINTE, 0x01, 0xff); //enable interrupt on receive
     120:	8b e2       	ldi	r24, 0x2B	; 43
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	4f ef       	ldi	r20, 0xFF	; 255
     126:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <CAN_bit_modify>
	CAN_init_interrupt();
     12a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CAN_init_interrupt>
}
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	cf 91       	pop	r28
     134:	df 91       	pop	r29
     136:	08 95       	ret

00000138 <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     138:	df 93       	push	r29
     13a:	cf 93       	push	r28
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	27 97       	sbiw	r28, 0x07	; 7
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
//	printf("CAN_test started\n");
	int i;
	

	CAN_message message;
	message.id = 0;
     14c:	1c 82       	std	Y+4, r1	; 0x04
     14e:	1b 82       	std	Y+3, r1	; 0x03
	message.length = 8;
     150:	88 e0       	ldi	r24, 0x08	; 8
     152:	8d 83       	std	Y+5, r24	; 0x05
	message.data = " ";
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	9f 83       	std	Y+7, r25	; 0x07
     15a:	8e 83       	std	Y+6, r24	; 0x06
			return -1;
		}

		_delay_ms(800);
	}*/ 
	return 0;
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
}
     160:	27 96       	adiw	r28, 0x07	; 7
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <CAN_send>:

// Send string using CAN bus
int CAN_send(char* str, int id){
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	2e 97       	sbiw	r28, 0x0e	; 14
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
     186:	9a 87       	std	Y+10, r25	; 0x0a
     188:	89 87       	std	Y+9, r24	; 0x09
     18a:	7c 87       	std	Y+12, r23	; 0x0c
     18c:	6b 87       	std	Y+11, r22	; 0x0b
	
	unsigned int part, i;
	int done = 0;
     18e:	1c 82       	std	Y+4, r1	; 0x04
     190:	1b 82       	std	Y+3, r1	; 0x03

	char *messg = "\0\0\0\0\0\0\0";
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	9a 83       	std	Y+2, r25	; 0x02
     198:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < 8; i++){
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	15 c0       	rjmp	.+42     	; 0x1ca <CAN_send+0x58>
		messg[i] = str[i];
     1a0:	29 81       	ldd	r18, Y+1	; 0x01
     1a2:	3a 81       	ldd	r19, Y+2	; 0x02
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	d9 01       	movw	r26, r18
     1aa:	a8 0f       	add	r26, r24
     1ac:	b9 1f       	adc	r27, r25
     1ae:	29 85       	ldd	r18, Y+9	; 0x09
     1b0:	3a 85       	ldd	r19, Y+10	; 0x0a
     1b2:	8d 81       	ldd	r24, Y+5	; 0x05
     1b4:	9e 81       	ldd	r25, Y+6	; 0x06
     1b6:	f9 01       	movw	r30, r18
     1b8:	e8 0f       	add	r30, r24
     1ba:	f9 1f       	adc	r31, r25
     1bc:	80 81       	ld	r24, Z
     1be:	8c 93       	st	X, r24
	
	unsigned int part, i;
	int done = 0;

	char *messg = "\0\0\0\0\0\0\0";
	for(i = 0; i < 8; i++){
     1c0:	8d 81       	ldd	r24, Y+5	; 0x05
     1c2:	9e 81       	ldd	r25, Y+6	; 0x06
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	9e 83       	std	Y+6, r25	; 0x06
     1c8:	8d 83       	std	Y+5, r24	; 0x05
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	9e 81       	ldd	r25, Y+6	; 0x06
     1ce:	88 30       	cpi	r24, 0x08	; 8
     1d0:	91 05       	cpc	r25, r1
     1d2:	30 f3       	brcs	.-52     	; 0x1a0 <CAN_send+0x2e>
		/*if (messg[i] == '\0') {
			break;
		}*/
	}

	cli(); // disable interrupts, to protect SPI-communication 
     1d4:	f8 94       	cli

	CAN_bit_modify(TXB0SIDH, 0xFF, (id>>3)); //transmit buffer 0 id high
     1d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1d8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1da:	95 95       	asr	r25
     1dc:	87 95       	ror	r24
     1de:	95 95       	asr	r25
     1e0:	87 95       	ror	r24
     1e2:	95 95       	asr	r25
     1e4:	87 95       	ror	r24
     1e6:	98 2f       	mov	r25, r24
     1e8:	81 e3       	ldi	r24, 0x31	; 49
     1ea:	6f ef       	ldi	r22, 0xFF	; 255
     1ec:	49 2f       	mov	r20, r25
     1ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     1f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f4:	98 2f       	mov	r25, r24
     1f6:	92 95       	swap	r25
     1f8:	99 0f       	add	r25, r25
     1fa:	90 7e       	andi	r25, 0xE0	; 224
     1fc:	82 e3       	ldi	r24, 0x32	; 50
     1fe:	60 ee       	ldi	r22, 0xE0	; 224
     200:	49 2f       	mov	r20, r25
     202:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <CAN_bit_modify>
	//CAN_write((char)messg.length, TXB0DLC);	// data length
	CAN_write((char)8, TXB0DLC);	// data length
     206:	88 e0       	ldi	r24, 0x08	; 8
     208:	65 e3       	ldi	r22, 0x35	; 53
     20a:	0e 94 25 02 	call	0x44a	; 0x44a <CAN_write>
	CAN_load_tx(messg, 0); //load transmit buffer from channel 0
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	0e 94 42 02 	call	0x484	; 0x484 <CAN_load_tx>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	0e 94 83 02 	call	0x506	; 0x506 <CAN_rts>

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     21e:	1e 82       	std	Y+6, r1	; 0x06
     220:	1d 82       	std	Y+5, r1	; 0x05
     222:	0d c0       	rjmp	.+26     	; 0x23e <CAN_send+0xcc>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     224:	0e 94 a7 02 	call	0x54e	; 0x54e <CAN_read_status>
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	84 70       	andi	r24, 0x04	; 4
     22e:	90 70       	andi	r25, 0x00	; 0
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	59 f0       	breq	.+22     	; 0x24a <CAN_send+0xd8>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     234:	8d 81       	ldd	r24, Y+5	; 0x05
     236:	9e 81       	ldd	r25, Y+6	; 0x06
     238:	01 96       	adiw	r24, 0x01	; 1
     23a:	9e 83       	std	Y+6, r25	; 0x06
     23c:	8d 83       	std	Y+5, r24	; 0x05
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	2f ef       	ldi	r18, 0xFF	; 255
     244:	8f 3f       	cpi	r24, 0xFF	; 255
     246:	92 07       	cpc	r25, r18
     248:	69 f7       	brne	.-38     	; 0x224 <CAN_send+0xb2>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	sei(); // enable interrupts again
     24a:	78 94       	sei
	if(i == 0xffff) return -1;
     24c:	8d 81       	ldd	r24, Y+5	; 0x05
     24e:	9e 81       	ldd	r25, Y+6	; 0x06
     250:	2f ef       	ldi	r18, 0xFF	; 255
     252:	8f 3f       	cpi	r24, 0xFF	; 255
     254:	92 07       	cpc	r25, r18
     256:	29 f4       	brne	.+10     	; 0x262 <CAN_send+0xf0>
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	9e 87       	std	Y+14, r25	; 0x0e
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	02 c0       	rjmp	.+4      	; 0x266 <CAN_send+0xf4>
			if(i == 0xffff) return -1;
		}

		if(str[i] == '\0') break;
*/
	return 0;
     262:	1e 86       	std	Y+14, r1	; 0x0e
     264:	1d 86       	std	Y+13, r1	; 0x0d
     266:	8d 85       	ldd	r24, Y+13	; 0x0d
     268:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     26a:	2e 96       	adiw	r28, 0x0e	; 14
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	00 d0       	rcall	.+0      	; 0x282 <CAN_receive+0x6>
     282:	00 d0       	rcall	.+0      	; 0x284 <CAN_receive+0x8>
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	9a 83       	std	Y+2, r25	; 0x02
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	7c 83       	std	Y+4, r23	; 0x04
     28e:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF+2*rx) == 0); // loop until data received
     290:	0e 94 a7 02 	call	0x54e	; 0x54e <CAN_read_status>
     294:	28 2f       	mov	r18, r24
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	9c 81       	ldd	r25, Y+4	; 0x04
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	82 23       	and	r24, r18
     2a4:	93 23       	and	r25, r19
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	99 f3       	breq	.-26     	; 0x290 <CAN_receive+0x14>
	CAN_read_rx(msg, rx);
     2aa:	2b 81       	ldd	r18, Y+3	; 0x03
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	9a 81       	ldd	r25, Y+2	; 0x02
     2b0:	62 2f       	mov	r22, r18
     2b2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <CAN_read_rx>

	msg->id = 0x1F; //only id allowed
     2b6:	e9 81       	ldd	r30, Y+1	; 0x01
     2b8:	fa 81       	ldd	r31, Y+2	; 0x02
     2ba:	8f e1       	ldi	r24, 0x1F	; 31
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	80 83       	st	Z, r24
	
	return 0;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0

}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <CAN_init_interrupt>:





void CAN_init_interrupt(){
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
	//interrupt init
	DDRE = DDRE & 	0b11101111;
     2dc:	a2 e2       	ldi	r26, 0x22	; 34
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 7e       	andi	r24, 0xEF	; 239
     2e8:	8c 93       	st	X, r24
	PORTE = PORTE | 0b00010000;
     2ea:	a3 e2       	ldi	r26, 0x23	; 35
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
     2ee:	e3 e2       	ldi	r30, 0x23	; 35
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	80 61       	ori	r24, 0x10	; 16
     2f6:	8c 93       	st	X, r24
	EICRB = 0;// | (0<<ISC41) | (0<<ISC40); ////////////////fix: ikke or med 0
     2f8:	ea e5       	ldi	r30, 0x5A	; 90
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	10 82       	st	Z, r1
	EIMSK = EIMSK | (1<<INT4);
     2fe:	a9 e5       	ldi	r26, 0x59	; 89
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	e9 e5       	ldi	r30, 0x59	; 89
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	80 61       	ori	r24, 0x10	; 16
     30a:	8c 93       	st	X, r24
	sei();
     30c:	78 94       	sei
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <CAN_reset>:
#include "mcp2515.h"
#include "spi.h"

// Reset the CAN chip
void CAN_reset(void){
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
     31c:	83 e7       	ldi	r24, 0x73	; 115
     31e:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
     322:	80 ec       	ldi	r24, 0xC0	; 192
     324:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	SPI_NoSlave();
     328:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
}
     32c:	cf 91       	pop	r28
     32e:	df 91       	pop	r29
     330:	08 95       	ret

00000332 <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	27 97       	sbiw	r28, 0x07	; 7
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	9c 83       	std	Y+4, r25	; 0x04
     34c:	8b 83       	std	Y+3, r24	; 0x03
     34e:	6d 83       	std	Y+5, r22	; 0x05
     350:	5f 83       	std	Y+7, r21	; 0x07
     352:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     354:	83 e7       	ldi	r24, 0x73	; 115
     356:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     360:	8d 81       	ldd	r24, Y+5	; 0x05
     362:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     366:	1a 82       	std	Y+2, r1	; 0x02
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	10 c0       	rjmp	.+32     	; 0x38c <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
     36c:	29 81       	ldd	r18, Y+1	; 0x01
     36e:	3a 81       	ldd	r19, Y+2	; 0x02
     370:	8b 81       	ldd	r24, Y+3	; 0x03
     372:	9c 81       	ldd	r25, Y+4	; 0x04
     374:	8c 01       	movw	r16, r24
     376:	02 0f       	add	r16, r18
     378:	13 1f       	adc	r17, r19
     37a:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_MasterReceive>
     37e:	f8 01       	movw	r30, r16
     380:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	9a 83       	std	Y+2, r25	; 0x02
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	29 81       	ldd	r18, Y+1	; 0x01
     38e:	3a 81       	ldd	r19, Y+2	; 0x02
     390:	8e 81       	ldd	r24, Y+6	; 0x06
     392:	9f 81       	ldd	r25, Y+7	; 0x07
     394:	28 17       	cp	r18, r24
     396:	39 07       	cpc	r19, r25
     398:	4c f3       	brlt	.-46     	; 0x36c <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
     39a:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>

}
     39e:	27 96       	adiw	r28, 0x07	; 7
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	cf 91       	pop	r28
     3ac:	df 91       	pop	r29
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	00 d0       	rcall	.+0      	; 0x3be <CAN_read_rx+0xa>
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <CAN_read_rx+0xc>
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	9c 83       	std	Y+4, r25	; 0x04
     3c8:	8b 83       	std	Y+3, r24	; 0x03
     3ca:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
     3cc:	8d 81       	ldd	r24, Y+5	; 0x05
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	90 f5       	brcc	.+100    	; 0x436 <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
     3d2:	8d 81       	ldd	r24, Y+5	; 0x05
     3d4:	88 23       	and	r24, r24
     3d6:	19 f4       	brne	.+6      	; 0x3de <CAN_read_rx+0x2a>
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	8d 83       	std	Y+5, r24	; 0x05
     3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
     3de:	8d 81       	ldd	r24, Y+5	; 0x05
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <CAN_read_rx+0x34>
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
     3e8:	83 e7       	ldi	r24, 0x73	; 115
     3ea:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
     3ee:	8d 81       	ldd	r24, Y+5	; 0x05
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	80 69       	ori	r24, 0x90	; 144
     3fa:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
     3fe:	1a 82       	std	Y+2, r1	; 0x02
     400:	19 82       	std	Y+1, r1	; 0x01
     402:	12 c0       	rjmp	.+36     	; 0x428 <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
     404:	eb 81       	ldd	r30, Y+3	; 0x03
     406:	fc 81       	ldd	r31, Y+4	; 0x04
     408:	23 81       	ldd	r18, Z+3	; 0x03
     40a:	34 81       	ldd	r19, Z+4	; 0x04
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	9a 81       	ldd	r25, Y+2	; 0x02
     410:	89 01       	movw	r16, r18
     412:	08 0f       	add	r16, r24
     414:	19 1f       	adc	r17, r25
     416:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_MasterReceive>
     41a:	f8 01       	movw	r30, r16
     41c:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	88 30       	cpi	r24, 0x08	; 8
     42e:	91 05       	cpc	r25, r1
     430:	4c f3       	brlt	.-46     	; 0x404 <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
     432:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
}
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	cf 91       	pop	r28
     442:	df 91       	pop	r29
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <CAN_write>:

void CAN_write(char data, uint8_t address){
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	00 d0       	rcall	.+0      	; 0x450 <CAN_write+0x6>
     450:	00 d0       	rcall	.+0      	; 0x452 <CAN_write+0x8>
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	8b 83       	std	Y+3, r24	; 0x03
     458:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	SPI_SelectSlave(SPI_CAN);	
     45a:	83 e7       	ldi	r24, 0x73	; 115
     45c:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
		SPI_MasterTransmit(data);
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>

	SPI_NoSlave();
     472:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>

}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* msg, uint8_t tx){
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	00 d0       	rcall	.+0      	; 0x48a <CAN_load_tx+0x6>
     48a:	00 d0       	rcall	.+0      	; 0x48c <CAN_load_tx+0x8>
     48c:	0f 92       	push	r0
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	8b 83       	std	Y+3, r24	; 0x03
     496:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2)
     498:	8d 81       	ldd	r24, Y+5	; 0x05
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	60 f5       	brcc	.+88     	; 0x4f6 <CAN_load_tx+0x72>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
     49e:	8d 81       	ldd	r24, Y+5	; 0x05
     4a0:	88 2f       	mov	r24, r24
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
     4ae:	83 e7       	ldi	r24, 0x73	; 115
     4b0:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
     4b4:	8d 81       	ldd	r24, Y+5	; 0x05
     4b6:	80 64       	ori	r24, 0x40	; 64
     4b8:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	for(i = 0; i < 8; i++){
     4bc:	1a 82       	std	Y+2, r1	; 0x02
     4be:	19 82       	std	Y+1, r1	; 0x01
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <CAN_load_tx+0x5c>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
     4c2:	29 81       	ldd	r18, Y+1	; 0x01
     4c4:	3a 81       	ldd	r19, Y+2	; 0x02
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ca:	fc 01       	movw	r30, r24
     4cc:	e2 0f       	add	r30, r18
     4ce:	f3 1f       	adc	r31, r19
     4d0:	80 81       	ld	r24, Z
     4d2:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < 8; i++){
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
     4e4:	88 30       	cpi	r24, 0x08	; 8
     4e6:	91 05       	cpc	r25, r1
     4e8:	64 f3       	brlt	.-40     	; 0x4c2 <CAN_load_tx+0x3e>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
	}

	SPI_NoSlave();
     4ea:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
	printf("\n");
     4ee:	8a e0       	ldi	r24, 0x0A	; 10
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <putchar>
}
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	08 95       	ret

00000506 <CAN_rts>:

void CAN_rts(uint8_t tx){
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	0f 92       	push	r0
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	88 23       	and	r24, r24
     516:	19 f4       	brne	.+6      	; 0x51e <CAN_rts+0x18>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	0b c0       	rjmp	.+22     	; 0x534 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	19 f4       	brne	.+6      	; 0x52a <CAN_rts+0x24>
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	05 c0       	rjmp	.+10     	; 0x534 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	59 f4       	brne	.+22     	; 0x546 <CAN_rts+0x40>
     530:	84 e0       	ldi	r24, 0x04	; 4
     532:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
     534:	83 e7       	ldi	r24, 0x73	; 115
     536:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>

	SPI_NoSlave();
     542:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
}
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <CAN_read_status>:

uint8_t CAN_read_status(void){
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	0f 92       	push	r0
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
     558:	83 e7       	ldi	r24, 0x73	; 115
     55a:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     564:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_MasterReceive>
     568:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     56a:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
	
	return (uint8_t) status;
     56e:	89 81       	ldd	r24, Y+1	; 0x01

}
     570:	0f 90       	pop	r0
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <CAN_rx_status>:

uint8_t CAN_rx_status(void){
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	0f 92       	push	r0
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62

	char status;
	SPI_SelectSlave(SPI_CAN);
     582:	83 e7       	ldi	r24, 0x73	; 115
     584:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>

	SPI_MasterTransmit(INS_RX_STATUS);
     588:	80 eb       	ldi	r24, 0xB0	; 176
     58a:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     58e:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_MasterReceive>
     592:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     594:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
	
	return (uint8_t) status;
     598:	89 81       	ldd	r24, Y+1	; 0x01

}
     59a:	0f 90       	pop	r0
     59c:	cf 91       	pop	r28
     59e:	df 91       	pop	r29
     5a0:	08 95       	ret

000005a2 <CAN_bit_modify>:

void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <CAN_bit_modify+0x6>
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	6a 83       	std	Y+2, r22	; 0x02
     5b2:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
     5b4:	83 e7       	ldi	r24, 0x73	; 115
     5b6:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>

	SPI_NoSlave();
     5d2:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
}
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	08 95       	ret

000005e2 <SPI_MasterInit>:
#include <avr/interrupt.h>
#include "spi.h"

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO input, other pins output */
	DDRB = (0b11110111);;
     5ea:	e7 e3       	ldi	r30, 0x37	; 55
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	87 ef       	ldi	r24, 0xF7	; 247
     5f0:	80 83       	st	Z, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     5f2:	ed e2       	ldi	r30, 0x2D	; 45
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	81 e5       	ldi	r24, 0x51	; 81
     5f8:	80 83       	st	Z, r24
	SPI_NoSlave();
     5fa:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
}
     5fe:	cf 91       	pop	r28
     600:	df 91       	pop	r29
     602:	08 95       	ret

00000604 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
     604:	df 93       	push	r29
     606:	cf 93       	push	r28
     608:	0f 92       	push	r0
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     610:	ef e2       	ldi	r30, 0x2F	; 47
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     618:	ee e2       	ldi	r30, 0x2E	; 46
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	88 23       	and	r24, r24
     620:	dc f7       	brge	.-10     	; 0x618 <SPI_MasterTransmit+0x14>
}
     622:	0f 90       	pop	r0
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <SPI_MasterReceive>:

// Recieve char over SPI
char SPI_MasterReceive(void)
{
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     632:	80 e4       	ldi	r24, 0x40	; 64
     634:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     638:	ee e2       	ldi	r30, 0x2E	; 46
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 23       	and	r24, r24
     640:	dc f7       	brge	.-10     	; 0x638 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     642:	ef e2       	ldi	r30, 0x2F	; 47
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
}
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){ //remove argument!!
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	89 83       	std	Y+1, r24	; 0x01
		PORTB = PORTB & ~(1<<DDB0) ; // set SS for CAN low 
     65a:	a8 e3       	ldi	r26, 0x38	; 56
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e8 e3       	ldi	r30, 0x38	; 56
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	8e 7f       	andi	r24, 0xFE	; 254
     666:	8c 93       	st	X, r24
}
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <SPI_NoSlave>:

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB0);
     678:	a8 e3       	ldi	r26, 0x38	; 56
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	e8 e3       	ldi	r30, 0x38	; 56
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	81 60       	ori	r24, 0x01	; 1
     684:	8c 93       	st	X, r24
}
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	08 95       	ret

0000068c <main>:
#include "spi.h"
#include "servo.h"
#include "ir.h"


int main(void) {
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
     694:	0e 94 38 03 	call	0x670	; 0x670 <SPI_NoSlave>
	SPI_MasterInit();	
     698:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SPI_MasterInit>
	CAN_init();
     69c:	0e 94 67 00 	call	0xce	; 0xce <CAN_init>
	servo_init();
     6a0:	0e 94 b7 03 	call	0x76e	; 0x76e <servo_init>
	ir_init();
     6a4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <ir_init>
	solenoid_init();
     6a8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <solenoid_init>
     6ac:	ff cf       	rjmp	.-2      	; 0x6ac <main+0x20>

000006ae <__vector_5>:

	return 0;	
	
}

SIGNAL(SIG_INTERRUPT4) {
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	00 90 5b 00 	lds	r0, 0x005B
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
	sig_interrupt4();
     6de:	0e 94 8a 04 	call	0x914	; 0x914 <sig_interrupt4>
}
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	00 92 5b 00 	sts	0x005B, r0
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti

0000070e <__vector_21>:

SIGNAL(SIG_ADC) {	
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	00 90 5b 00 	lds	r0, 0x005B
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
	adc_interrupt();
     73e:	0e 94 32 05 	call	0xa64	; 0xa64 <adc_interrupt>
}
     742:	cf 91       	pop	r28
     744:	df 91       	pop	r29
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	00 92 5b 00 	sts	0x005B, r0
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <servo_init>:
#include "servo.h"
#include "can.h"
#include "ir.h"
#include "solenoid.h"

void servo_init(){
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0b00100010; //clear output on compare match, fast PWM - count to OCR
     776:	ef e4       	ldi	r30, 0x4F	; 79
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	82 e2       	ldi	r24, 0x22	; 34
     77c:	80 83       	st	Z, r24
	TCCR1B = 0b00011010; //fast PWM - count to OCR, prescaler: divide FCLK by 8 (counter 1 MHz)
     77e:	ee e4       	ldi	r30, 0x4E	; 78
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	8a e1       	ldi	r24, 0x1A	; 26
     784:	80 83       	st	Z, r24
	
	OCR1B = 1500+55; //start in mid position (+ tuning)
     786:	e8 e4       	ldi	r30, 0x48	; 72
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	83 e1       	ldi	r24, 0x13	; 19
     78c:	96 e0       	ldi	r25, 0x06	; 6
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	80 83       	st	Z, r24
	ICR1 = 20000+700; //count to 20000 (20 ms) (+ tuning)
     792:	e6 e4       	ldi	r30, 0x46	; 70
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	8c ed       	ldi	r24, 0xDC	; 220
     798:	90 e5       	ldi	r25, 0x50	; 80
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	80 83       	st	Z, r24
}
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <set_position>:

void set_position(int8_t position) {
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <set_position+0xe>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <set_position+0x10>
     7b4:	0f 92       	push	r0
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	8d 83       	std	Y+5, r24	; 0x05
	static float value = 0;
	float temp = (630.*position)/128;
     7bc:	8d 81       	ldd	r24, Y+5	; 0x05
     7be:	99 27       	eor	r25, r25
     7c0:	87 fd       	sbrc	r24, 7
     7c2:	90 95       	com	r25
     7c4:	a9 2f       	mov	r26, r25
     7c6:	b9 2f       	mov	r27, r25
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatsisf>
     7d0:	dc 01       	movw	r26, r24
     7d2:	cb 01       	movw	r24, r22
     7d4:	bc 01       	movw	r22, r24
     7d6:	cd 01       	movw	r24, r26
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e8       	ldi	r19, 0x80	; 128
     7dc:	4d e1       	ldi	r20, 0x1D	; 29
     7de:	54 e4       	ldi	r21, 0x44	; 68
     7e0:	0e 94 25 08 	call	0x104a	; 0x104a <__mulsf3>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	53 e4       	ldi	r21, 0x43	; 67
     7f4:	0e 94 1f 09 	call	0x123e	; 0x123e <__divsf3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	ab 83       	std	Y+3, r26	; 0x03
     802:	bc 83       	std	Y+4, r27	; 0x04
	temp += 1500+55;
     804:	69 81       	ldd	r22, Y+1	; 0x01
     806:	7a 81       	ldd	r23, Y+2	; 0x02
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	9c 81       	ldd	r25, Y+4	; 0x04
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e6       	ldi	r19, 0x60	; 96
     810:	42 ec       	ldi	r20, 0xC2	; 194
     812:	54 e4       	ldi	r21, 0x44	; 68
     814:	0e 94 f8 07 	call	0xff0	; 0xff0 <__addsf3>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	ab 83       	std	Y+3, r26	; 0x03
     822:	bc 83       	std	Y+4, r27	; 0x04
	if(temp < 935)
     824:	69 81       	ldd	r22, Y+1	; 0x01
     826:	7a 81       	ldd	r23, Y+2	; 0x02
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 ec       	ldi	r19, 0xC0	; 192
     830:	49 e6       	ldi	r20, 0x69	; 105
     832:	54 e4       	ldi	r21, 0x44	; 68
     834:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__ltsf2>
     838:	88 23       	and	r24, r24
     83a:	4c f4       	brge	.+18     	; 0x84e <set_position+0xaa>
		temp = 935;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 ec       	ldi	r25, 0xC0	; 192
     840:	a9 e6       	ldi	r26, 0x69	; 105
     842:	b4 e4       	ldi	r27, 0x44	; 68
     844:	89 83       	std	Y+1, r24	; 0x01
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	ab 83       	std	Y+3, r26	; 0x03
     84a:	bc 83       	std	Y+4, r27	; 0x04
     84c:	14 c0       	rjmp	.+40     	; 0x876 <set_position+0xd2>
	else if (temp > 2180)
     84e:	69 81       	ldd	r22, Y+1	; 0x01
     850:	7a 81       	ldd	r23, Y+2	; 0x02
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e4       	ldi	r19, 0x40	; 64
     85a:	48 e0       	ldi	r20, 0x08	; 8
     85c:	55 e4       	ldi	r21, 0x45	; 69
     85e:	0e 94 cb 09 	call	0x1396	; 0x1396 <__gtsf2>
     862:	18 16       	cp	r1, r24
     864:	44 f4       	brge	.+16     	; 0x876 <set_position+0xd2>
		temp = 2180;
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e4       	ldi	r25, 0x40	; 64
     86a:	a8 e0       	ldi	r26, 0x08	; 8
     86c:	b5 e4       	ldi	r27, 0x45	; 69
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	ab 83       	std	Y+3, r26	; 0x03
     874:	bc 83       	std	Y+4, r27	; 0x04

	value = value*A_SERVO_LP + temp*(1-A_SERVO_LP);
     876:	80 91 20 02 	lds	r24, 0x0220
     87a:	90 91 21 02 	lds	r25, 0x0221
     87e:	a0 91 22 02 	lds	r26, 0x0222
     882:	b0 91 23 02 	lds	r27, 0x0223
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	2a e9       	ldi	r18, 0x9A	; 154
     88c:	39 e9       	ldi	r19, 0x99	; 153
     88e:	49 e1       	ldi	r20, 0x19	; 25
     890:	5f e3       	ldi	r21, 0x3F	; 63
     892:	0e 94 25 08 	call	0x104a	; 0x104a <__mulsf3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	7c 01       	movw	r14, r24
     89c:	8d 01       	movw	r16, r26
     89e:	69 81       	ldd	r22, Y+1	; 0x01
     8a0:	7a 81       	ldd	r23, Y+2	; 0x02
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	2c ec       	ldi	r18, 0xCC	; 204
     8a8:	3c ec       	ldi	r19, 0xCC	; 204
     8aa:	4c ec       	ldi	r20, 0xCC	; 204
     8ac:	5e e3       	ldi	r21, 0x3E	; 62
     8ae:	0e 94 25 08 	call	0x104a	; 0x104a <__mulsf3>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	9c 01       	movw	r18, r24
     8b8:	ad 01       	movw	r20, r26
     8ba:	c8 01       	movw	r24, r16
     8bc:	b7 01       	movw	r22, r14
     8be:	0e 94 f8 07 	call	0xff0	; 0xff0 <__addsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	80 93 20 02 	sts	0x0220, r24
     8ca:	90 93 21 02 	sts	0x0221, r25
     8ce:	a0 93 22 02 	sts	0x0222, r26
     8d2:	b0 93 23 02 	sts	0x0223, r27
	OCR1B = (int)value;
     8d6:	08 e4       	ldi	r16, 0x48	; 72
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	80 91 20 02 	lds	r24, 0x0220
     8de:	90 91 21 02 	lds	r25, 0x0221
     8e2:	a0 91 22 02 	lds	r26, 0x0222
     8e6:	b0 91 23 02 	lds	r27, 0x0223
     8ea:	bc 01       	movw	r22, r24
     8ec:	cd 01       	movw	r24, r26
     8ee:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixsfsi>
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	f8 01       	movw	r30, r16
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	80 83       	st	Z, r24
}
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	cf 91       	pop	r28
     908:	df 91       	pop	r29
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <sig_interrupt4>:


void sig_interrupt4() {
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	27 97       	sbiw	r28, 0x07	; 7
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61

	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	9d 83       	std	Y+5, r25	; 0x05
     932:	8c 83       	std	Y+4, r24	; 0x04

    CAN_receive(&received, 0);
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_receive>

//	CAN_send(received.data, 0x1F);

	if (received.data[0] == (int)15) { //receive packet starting with 15 (our group number)
     940:	ec 81       	ldd	r30, Y+4	; 0x04
     942:	fd 81       	ldd	r31, Y+5	; 0x05
     944:	80 81       	ld	r24, Z
     946:	8f 30       	cpi	r24, 0x0F	; 15
     948:	09 f0       	breq	.+2      	; 0x94c <sig_interrupt4+0x38>
     94a:	48 c0       	rjmp	.+144    	; 0x9dc <sig_interrupt4+0xc8>
	
		switch (received.data[1]) {
     94c:	8c 81       	ldd	r24, Y+4	; 0x04
     94e:	9d 81       	ldd	r25, Y+5	; 0x05
     950:	fc 01       	movw	r30, r24
     952:	31 96       	adiw	r30, 0x01	; 1
     954:	80 81       	ld	r24, Z
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	3f 83       	std	Y+7, r19	; 0x07
     95c:	2e 83       	std	Y+6, r18	; 0x06
     95e:	8e 81       	ldd	r24, Y+6	; 0x06
     960:	9f 81       	ldd	r25, Y+7	; 0x07
     962:	82 36       	cpi	r24, 0x62	; 98
     964:	91 05       	cpc	r25, r1
     966:	c1 f1       	breq	.+112    	; 0x9d8 <sig_interrupt4+0xc4>
     968:	2e 81       	ldd	r18, Y+6	; 0x06
     96a:	3f 81       	ldd	r19, Y+7	; 0x07
     96c:	28 37       	cpi	r18, 0x78	; 120
     96e:	31 05       	cpc	r19, r1
     970:	31 f0       	breq	.+12     	; 0x97e <sig_interrupt4+0x6a>
     972:	8e 81       	ldd	r24, Y+6	; 0x06
     974:	9f 81       	ldd	r25, Y+7	; 0x07
     976:	81 36       	cpi	r24, 0x61	; 97
     978:	91 05       	cpc	r25, r1
     97a:	49 f0       	breq	.+18     	; 0x98e <sig_interrupt4+0x7a>
     97c:	2f c0       	rjmp	.+94     	; 0x9dc <sig_interrupt4+0xc8>
			case 'x': //receive joystic x-axis data
				set_position((int8_t) received.data[2]);
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	fc 01       	movw	r30, r24
     984:	32 96       	adiw	r30, 0x02	; 2
     986:	80 81       	ld	r24, Z
     988:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <set_position>
     98c:	27 c0       	rjmp	.+78     	; 0x9dc <sig_interrupt4+0xc8>
				break;
			case 'a': //read score
				sprintf(received.data, "%d", get_score());
     98e:	0c 81       	ldd	r16, Y+4	; 0x04
     990:	1d 81       	ldd	r17, Y+5	; 0x05
     992:	0e 94 1c 05 	call	0xa38	; 0xa38 <get_score>
     996:	9c 01       	movw	r18, r24
     998:	00 d0       	rcall	.+0      	; 0x99a <sig_interrupt4+0x86>
     99a:	00 d0       	rcall	.+0      	; 0x99c <sig_interrupt4+0x88>
     99c:	00 d0       	rcall	.+0      	; 0x99e <sig_interrupt4+0x8a>
     99e:	ed b7       	in	r30, 0x3d	; 61
     9a0:	fe b7       	in	r31, 0x3e	; 62
     9a2:	31 96       	adiw	r30, 0x01	; 1
     9a4:	11 83       	std	Z+1, r17	; 0x01
     9a6:	00 83       	st	Z, r16
     9a8:	83 e1       	ldi	r24, 0x13	; 19
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	93 83       	std	Z+3, r25	; 0x03
     9ae:	82 83       	std	Z+2, r24	; 0x02
     9b0:	35 83       	std	Z+5, r19	; 0x05
     9b2:	24 83       	std	Z+4, r18	; 0x04
     9b4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <sprintf>
     9b8:	2d b7       	in	r18, 0x3d	; 61
     9ba:	3e b7       	in	r19, 0x3e	; 62
     9bc:	2a 5f       	subi	r18, 0xFA	; 250
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	3e bf       	out	0x3e, r19	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	2d bf       	out	0x3d, r18	; 61
				CAN_send(received.data, 0x1F);
     9ca:	8c 81       	ldd	r24, Y+4	; 0x04
     9cc:	9d 81       	ldd	r25, Y+5	; 0x05
     9ce:	6f e1       	ldi	r22, 0x1F	; 31
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 b9 00 	call	0x172	; 0x172 <CAN_send>
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <sig_interrupt4+0xc8>
				break;
			case 'b': //joystick button pressed
				trig_solenoid();
     9d8:	0e 94 bc 05 	call	0xb78	; 0xb78 <trig_solenoid>
		}
	
	}


}
     9dc:	27 96       	adiw	r28, 0x07	; 7
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	08 95       	ret

000009f2 <ir_init>:

int ir_blocked = 0;
int score = 0;
int scoring_enabled = 0;

void ir_init(){
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0b11100000; //internal vref, left adjust, ADC0 single ended
     9fa:	e7 e2       	ldi	r30, 0x27	; 39
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 ee       	ldi	r24, 0xE0	; 224
     a00:	80 83       	st	Z, r24
	ADCSRA = 0b11101111;//ACD enable, start conversion, free running, Interrupt flag, interrupt enable, prescaler 128
     a02:	e6 e2       	ldi	r30, 0x26	; 38
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	8f ee       	ldi	r24, 0xEF	; 239
     a08:	80 83       	st	Z, r24
}
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	08 95       	ret

00000a10 <get_ir>:

uint8_t get_ir(){
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	0f 92       	push	r0
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
	if (ir_blocked)
     a1a:	80 91 24 02 	lds	r24, 0x0224
     a1e:	90 91 25 02 	lds	r25, 0x0225
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	11 f0       	breq	.+4      	; 0xa2a <get_ir+0x1a>
		return 0;
     a26:	19 82       	std	Y+1, r1	; 0x01
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <get_ir+0x1e>
	else 
		return 1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     a30:	0f 90       	pop	r0
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	08 95       	ret

00000a38 <get_score>:

//returns score as counted by ir-module
int get_score(){
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	return score;
     a40:	80 91 26 02 	lds	r24, 0x0226
     a44:	90 91 27 02 	lds	r25, 0x0227
}
     a48:	cf 91       	pop	r28
     a4a:	df 91       	pop	r29
     a4c:	08 95       	ret

00000a4e <reset_score>:

void reset_score(){
     a4e:	df 93       	push	r29
     a50:	cf 93       	push	r28
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	score = 0;
     a56:	10 92 27 02 	sts	0x0227, r1
     a5a:	10 92 26 02 	sts	0x0226, r1
}
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <adc_interrupt>:
/*void enable_scoring(){
	scoring_enabled = 1;
}*/

//method called from interrupt routine whenever an ADC-sample is ready
void adc_interrupt(){
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
	
	static int i = 0; //average counter
	static int mean = 4; //number of samples for adc
	static int value = 0;
	
	value += ADCH;
     a6c:	e5 e2       	ldi	r30, 0x25	; 37
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	80 91 2a 02 	lds	r24, 0x022A
     a7a:	90 91 2b 02 	lds	r25, 0x022B
     a7e:	82 0f       	add	r24, r18
     a80:	93 1f       	adc	r25, r19
     a82:	90 93 2b 02 	sts	0x022B, r25
     a86:	80 93 2a 02 	sts	0x022A, r24

	i++;
     a8a:	80 91 2c 02 	lds	r24, 0x022C
     a8e:	90 91 2d 02 	lds	r25, 0x022D
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	90 93 2d 02 	sts	0x022D, r25
     a98:	80 93 2c 02 	sts	0x022C, r24
	if (i >= mean){		
     a9c:	20 91 2c 02 	lds	r18, 0x022C
     aa0:	30 91 2d 02 	lds	r19, 0x022D
     aa4:	80 91 16 01 	lds	r24, 0x0116
     aa8:	90 91 17 01 	lds	r25, 0x0117
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	0c f4       	brge	.+2      	; 0xab4 <adc_interrupt+0x50>
     ab2:	4a c0       	rjmp	.+148    	; 0xb48 <adc_interrupt+0xe4>

		if ((ir_blocked == 1) && (value > 6*mean)){
     ab4:	80 91 24 02 	lds	r24, 0x0224
     ab8:	90 91 25 02 	lds	r25, 0x0225
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	91 05       	cpc	r25, r1
     ac0:	c1 f4       	brne	.+48     	; 0xaf2 <adc_interrupt+0x8e>
     ac2:	20 91 16 01 	lds	r18, 0x0116
     ac6:	30 91 17 01 	lds	r19, 0x0117
     aca:	c9 01       	movw	r24, r18
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	9c 01       	movw	r18, r24
     ada:	80 91 2a 02 	lds	r24, 0x022A
     ade:	90 91 2b 02 	lds	r25, 0x022B
     ae2:	28 17       	cp	r18, r24
     ae4:	39 07       	cpc	r19, r25
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <adc_interrupt+0x8e>
			ir_blocked = 0;			
     ae8:	10 92 25 02 	sts	0x0225, r1
     aec:	10 92 24 02 	sts	0x0224, r1
     af0:	23 c0       	rjmp	.+70     	; 0xb38 <adc_interrupt+0xd4>
		}
		else if ((ir_blocked == 0) && (value < 2*mean)){
     af2:	80 91 24 02 	lds	r24, 0x0224
     af6:	90 91 25 02 	lds	r25, 0x0225
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	e9 f4       	brne	.+58     	; 0xb38 <adc_interrupt+0xd4>
     afe:	80 91 16 01 	lds	r24, 0x0116
     b02:	90 91 17 01 	lds	r25, 0x0117
     b06:	9c 01       	movw	r18, r24
     b08:	22 0f       	add	r18, r18
     b0a:	33 1f       	adc	r19, r19
     b0c:	80 91 2a 02 	lds	r24, 0x022A
     b10:	90 91 2b 02 	lds	r25, 0x022B
     b14:	82 17       	cp	r24, r18
     b16:	93 07       	cpc	r25, r19
     b18:	7c f4       	brge	.+30     	; 0xb38 <adc_interrupt+0xd4>
			ir_blocked = 1;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 25 02 	sts	0x0225, r25
     b22:	80 93 24 02 	sts	0x0224, r24
			//if (scoring_enabled)
				score++;
     b26:	80 91 26 02 	lds	r24, 0x0226
     b2a:	90 91 27 02 	lds	r25, 0x0227
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	90 93 27 02 	sts	0x0227, r25
     b34:	80 93 26 02 	sts	0x0226, r24
			//scoring_enabled = 0;
		}

		value = 0;
     b38:	10 92 2b 02 	sts	0x022B, r1
     b3c:	10 92 2a 02 	sts	0x022A, r1
		i = 0;
     b40:	10 92 2d 02 	sts	0x022D, r1
     b44:	10 92 2c 02 	sts	0x022C, r1
	}
}
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <solenoid_init>:
#include "solenoid.h"
#include "settings.h"
#include <util/delay.h>
#include <avr/io.h>

void solenoid_init(){
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	//PF1 out
	PORTF |= 0b00000010;
     b56:	a2 e6       	ldi	r26, 0x62	; 98
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e2 e6       	ldi	r30, 0x62	; 98
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	8c 93       	st	X, r24
	DDRF |= 0b00000010;	
     b64:	a1 e6       	ldi	r26, 0x61	; 97
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e1 e6       	ldi	r30, 0x61	; 97
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	82 60       	ori	r24, 0x02	; 2
     b70:	8c 93       	st	X, r24
}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <trig_solenoid>:

void trig_solenoid(){
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	2e 97       	sbiw	r28, 0x0e	; 14
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
	PORTF &= 0b11111101;
     b8c:	a2 e6       	ldi	r26, 0x62	; 98
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e2 e6       	ldi	r30, 0x62	; 98
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8d 7f       	andi	r24, 0xFD	; 253
     b98:	8c 93       	st	X, r24
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a8 e4       	ldi	r26, 0x48	; 72
     ba0:	b2 e4       	ldi	r27, 0x42	; 66
     ba2:	8b 87       	std	Y+11, r24	; 0x0b
     ba4:	9c 87       	std	Y+12, r25	; 0x0c
     ba6:	ad 87       	std	Y+13, r26	; 0x0d
     ba8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     baa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bac:	7c 85       	ldd	r23, Y+12	; 0x0c
     bae:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	4a ef       	ldi	r20, 0xFA	; 250
     bb8:	54 e4       	ldi	r21, 0x44	; 68
     bba:	0e 94 25 08 	call	0x104a	; 0x104a <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	8f 83       	std	Y+7, r24	; 0x07
     bc4:	98 87       	std	Y+8, r25	; 0x08
     bc6:	a9 87       	std	Y+9, r26	; 0x09
     bc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bca:	6f 81       	ldd	r22, Y+7	; 0x07
     bcc:	78 85       	ldd	r23, Y+8	; 0x08
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e8       	ldi	r20, 0x80	; 128
     bd8:	5f e3       	ldi	r21, 0x3F	; 63
     bda:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__ltsf2>
     bde:	88 23       	and	r24, r24
     be0:	2c f4       	brge	.+10     	; 0xbec <trig_solenoid+0x74>
		__ticks = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9e 83       	std	Y+6, r25	; 0x06
     be8:	8d 83       	std	Y+5, r24	; 0x05
     bea:	3f c0       	rjmp	.+126    	; 0xc6a <trig_solenoid+0xf2>
	else if (__tmp > 65535)
     bec:	6f 81       	ldd	r22, Y+7	; 0x07
     bee:	78 85       	ldd	r23, Y+8	; 0x08
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	3f ef       	ldi	r19, 0xFF	; 255
     bf8:	4f e7       	ldi	r20, 0x7F	; 127
     bfa:	57 e4       	ldi	r21, 0x47	; 71
     bfc:	0e 94 cb 09 	call	0x1396	; 0x1396 <__gtsf2>
     c00:	18 16       	cp	r1, r24
     c02:	4c f5       	brge	.+82     	; 0xc56 <trig_solenoid+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c04:	6b 85       	ldd	r22, Y+11	; 0x0b
     c06:	7c 85       	ldd	r23, Y+12	; 0x0c
     c08:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e2       	ldi	r20, 0x20	; 32
     c12:	51 e4       	ldi	r21, 0x41	; 65
     c14:	0e 94 25 08 	call	0x104a	; 0x104a <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	0f c0       	rjmp	.+30     	; 0xc4c <trig_solenoid+0xd4>
     c2e:	88 ec       	ldi	r24, 0xC8	; 200
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <trig_solenoid+0xc2>
     c3e:	9c 83       	std	Y+4, r25	; 0x04
     c40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	69 f7       	brne	.-38     	; 0xc2e <trig_solenoid+0xb6>
     c54:	14 c0       	rjmp	.+40     	; 0xc7e <trig_solenoid+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c56:	6f 81       	ldd	r22, Y+7	; 0x07
     c58:	78 85       	ldd	r23, Y+8	; 0x08
     c5a:	89 85       	ldd	r24, Y+9	; 0x09
     c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9e 83       	std	Y+6, r25	; 0x06
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <trig_solenoid+0xfe>
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
	//_delay_ms(3);
	_delay_ms(50);
	PORTF |= 0b00000010;
     c7e:	a2 e6       	ldi	r26, 0x62	; 98
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e2 e6       	ldi	r30, 0x62	; 98
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	82 60       	ori	r24, 0x02	; 2
     c8a:	8c 93       	st	X, r24
}
     c8c:	2e 96       	adiw	r28, 0x0e	; 14
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <__fixunssfsi>:
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	7b 01       	movw	r14, r22
     ca8:	8c 01       	movw	r16, r24
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	5f e4       	ldi	r21, 0x4F	; 79
     cb2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__gesf2>
     cb6:	88 23       	and	r24, r24
     cb8:	8c f0       	brlt	.+34     	; 0xcdc <__fixunssfsi+0x3e>
     cba:	c8 01       	movw	r24, r16
     cbc:	b7 01       	movw	r22, r14
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	5f e4       	ldi	r21, 0x4F	; 79
     cc6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__subsf3>
     cca:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixsfsi>
     cce:	9b 01       	movw	r18, r22
     cd0:	ac 01       	movw	r20, r24
     cd2:	20 50       	subi	r18, 0x00	; 0
     cd4:	30 40       	sbci	r19, 0x00	; 0
     cd6:	40 40       	sbci	r20, 0x00	; 0
     cd8:	50 48       	sbci	r21, 0x80	; 128
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <__fixunssfsi+0x4a>
     cdc:	c8 01       	movw	r24, r16
     cde:	b7 01       	movw	r22, r14
     ce0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixsfsi>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	b9 01       	movw	r22, r18
     cea:	ca 01       	movw	r24, r20
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <_fpadd_parts>:
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e1 e8       	ldi	r30, 0x81	; 129
     cfc:	f6 e0       	ldi	r31, 0x06	; 6
     cfe:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__prologue_saves__>
     d02:	dc 01       	movw	r26, r24
     d04:	2b 01       	movw	r4, r22
     d06:	fa 01       	movw	r30, r20
     d08:	9c 91       	ld	r25, X
     d0a:	92 30       	cpi	r25, 0x02	; 2
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <_fpadd_parts+0x1a>
     d0e:	39 c1       	rjmp	.+626    	; 0xf82 <_fpadd_parts+0x28c>
     d10:	eb 01       	movw	r28, r22
     d12:	88 81       	ld	r24, Y
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	08 f4       	brcc	.+2      	; 0xd1a <_fpadd_parts+0x24>
     d18:	33 c1       	rjmp	.+614    	; 0xf80 <_fpadd_parts+0x28a>
     d1a:	94 30       	cpi	r25, 0x04	; 4
     d1c:	69 f4       	brne	.+26     	; 0xd38 <_fpadd_parts+0x42>
     d1e:	84 30       	cpi	r24, 0x04	; 4
     d20:	09 f0       	breq	.+2      	; 0xd24 <_fpadd_parts+0x2e>
     d22:	2f c1       	rjmp	.+606    	; 0xf82 <_fpadd_parts+0x28c>
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	9c 91       	ld	r25, X
     d28:	11 97       	sbiw	r26, 0x01	; 1
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	98 17       	cp	r25, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <_fpadd_parts+0x3c>
     d30:	28 c1       	rjmp	.+592    	; 0xf82 <_fpadd_parts+0x28c>
     d32:	a8 e1       	ldi	r26, 0x18	; 24
     d34:	b1 e0       	ldi	r27, 0x01	; 1
     d36:	25 c1       	rjmp	.+586    	; 0xf82 <_fpadd_parts+0x28c>
     d38:	84 30       	cpi	r24, 0x04	; 4
     d3a:	09 f4       	brne	.+2      	; 0xd3e <_fpadd_parts+0x48>
     d3c:	21 c1       	rjmp	.+578    	; 0xf80 <_fpadd_parts+0x28a>
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	a9 f4       	brne	.+42     	; 0xd6c <_fpadd_parts+0x76>
     d42:	92 30       	cpi	r25, 0x02	; 2
     d44:	09 f0       	breq	.+2      	; 0xd48 <_fpadd_parts+0x52>
     d46:	1d c1       	rjmp	.+570    	; 0xf82 <_fpadd_parts+0x28c>
     d48:	9a 01       	movw	r18, r20
     d4a:	ad 01       	movw	r20, r26
     d4c:	88 e0       	ldi	r24, 0x08	; 8
     d4e:	ea 01       	movw	r28, r20
     d50:	09 90       	ld	r0, Y+
     d52:	ae 01       	movw	r20, r28
     d54:	e9 01       	movw	r28, r18
     d56:	09 92       	st	Y+, r0
     d58:	9e 01       	movw	r18, r28
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	c1 f7       	brne	.-16     	; 0xd4e <_fpadd_parts+0x58>
     d5e:	e2 01       	movw	r28, r4
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	11 96       	adiw	r26, 0x01	; 1
     d64:	9c 91       	ld	r25, X
     d66:	89 23       	and	r24, r25
     d68:	81 83       	std	Z+1, r24	; 0x01
     d6a:	08 c1       	rjmp	.+528    	; 0xf7c <_fpadd_parts+0x286>
     d6c:	92 30       	cpi	r25, 0x02	; 2
     d6e:	09 f4       	brne	.+2      	; 0xd72 <_fpadd_parts+0x7c>
     d70:	07 c1       	rjmp	.+526    	; 0xf80 <_fpadd_parts+0x28a>
     d72:	12 96       	adiw	r26, 0x02	; 2
     d74:	2d 90       	ld	r2, X+
     d76:	3c 90       	ld	r3, X
     d78:	13 97       	sbiw	r26, 0x03	; 3
     d7a:	eb 01       	movw	r28, r22
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	9b 81       	ldd	r25, Y+3	; 0x03
     d80:	14 96       	adiw	r26, 0x04	; 4
     d82:	ad 90       	ld	r10, X+
     d84:	bd 90       	ld	r11, X+
     d86:	cd 90       	ld	r12, X+
     d88:	dc 90       	ld	r13, X
     d8a:	17 97       	sbiw	r26, 0x07	; 7
     d8c:	ec 80       	ldd	r14, Y+4	; 0x04
     d8e:	fd 80       	ldd	r15, Y+5	; 0x05
     d90:	0e 81       	ldd	r16, Y+6	; 0x06
     d92:	1f 81       	ldd	r17, Y+7	; 0x07
     d94:	91 01       	movw	r18, r2
     d96:	28 1b       	sub	r18, r24
     d98:	39 0b       	sbc	r19, r25
     d9a:	b9 01       	movw	r22, r18
     d9c:	37 ff       	sbrs	r19, 7
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <_fpadd_parts+0xb2>
     da0:	66 27       	eor	r22, r22
     da2:	77 27       	eor	r23, r23
     da4:	62 1b       	sub	r22, r18
     da6:	73 0b       	sbc	r23, r19
     da8:	60 32       	cpi	r22, 0x20	; 32
     daa:	71 05       	cpc	r23, r1
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <_fpadd_parts+0xba>
     dae:	61 c0       	rjmp	.+194    	; 0xe72 <_fpadd_parts+0x17c>
     db0:	12 16       	cp	r1, r18
     db2:	13 06       	cpc	r1, r19
     db4:	6c f5       	brge	.+90     	; 0xe10 <_fpadd_parts+0x11a>
     db6:	37 01       	movw	r6, r14
     db8:	48 01       	movw	r8, r16
     dba:	06 2e       	mov	r0, r22
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <_fpadd_parts+0xd0>
     dbe:	96 94       	lsr	r9
     dc0:	87 94       	ror	r8
     dc2:	77 94       	ror	r7
     dc4:	67 94       	ror	r6
     dc6:	0a 94       	dec	r0
     dc8:	d2 f7       	brpl	.-12     	; 0xdbe <_fpadd_parts+0xc8>
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	04 c0       	rjmp	.+8      	; 0xddc <_fpadd_parts+0xe6>
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	44 1f       	adc	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	6a 95       	dec	r22
     dde:	d2 f7       	brpl	.-12     	; 0xdd4 <_fpadd_parts+0xde>
     de0:	21 50       	subi	r18, 0x01	; 1
     de2:	30 40       	sbci	r19, 0x00	; 0
     de4:	40 40       	sbci	r20, 0x00	; 0
     de6:	50 40       	sbci	r21, 0x00	; 0
     de8:	2e 21       	and	r18, r14
     dea:	3f 21       	and	r19, r15
     dec:	40 23       	and	r20, r16
     dee:	51 23       	and	r21, r17
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	41 05       	cpc	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	21 f0       	breq	.+8      	; 0xe02 <_fpadd_parts+0x10c>
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	79 01       	movw	r14, r18
     e04:	8a 01       	movw	r16, r20
     e06:	e6 28       	or	r14, r6
     e08:	f7 28       	or	r15, r7
     e0a:	08 29       	or	r16, r8
     e0c:	19 29       	or	r17, r9
     e0e:	3c c0       	rjmp	.+120    	; 0xe88 <_fpadd_parts+0x192>
     e10:	23 2b       	or	r18, r19
     e12:	d1 f1       	breq	.+116    	; 0xe88 <_fpadd_parts+0x192>
     e14:	26 0e       	add	r2, r22
     e16:	37 1e       	adc	r3, r23
     e18:	35 01       	movw	r6, r10
     e1a:	46 01       	movw	r8, r12
     e1c:	06 2e       	mov	r0, r22
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <_fpadd_parts+0x132>
     e20:	96 94       	lsr	r9
     e22:	87 94       	ror	r8
     e24:	77 94       	ror	r7
     e26:	67 94       	ror	r6
     e28:	0a 94       	dec	r0
     e2a:	d2 f7       	brpl	.-12     	; 0xe20 <_fpadd_parts+0x12a>
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <_fpadd_parts+0x148>
     e36:	22 0f       	add	r18, r18
     e38:	33 1f       	adc	r19, r19
     e3a:	44 1f       	adc	r20, r20
     e3c:	55 1f       	adc	r21, r21
     e3e:	6a 95       	dec	r22
     e40:	d2 f7       	brpl	.-12     	; 0xe36 <_fpadd_parts+0x140>
     e42:	21 50       	subi	r18, 0x01	; 1
     e44:	30 40       	sbci	r19, 0x00	; 0
     e46:	40 40       	sbci	r20, 0x00	; 0
     e48:	50 40       	sbci	r21, 0x00	; 0
     e4a:	2a 21       	and	r18, r10
     e4c:	3b 21       	and	r19, r11
     e4e:	4c 21       	and	r20, r12
     e50:	5d 21       	and	r21, r13
     e52:	21 15       	cp	r18, r1
     e54:	31 05       	cpc	r19, r1
     e56:	41 05       	cpc	r20, r1
     e58:	51 05       	cpc	r21, r1
     e5a:	21 f0       	breq	.+8      	; 0xe64 <_fpadd_parts+0x16e>
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	59 01       	movw	r10, r18
     e66:	6a 01       	movw	r12, r20
     e68:	a6 28       	or	r10, r6
     e6a:	b7 28       	or	r11, r7
     e6c:	c8 28       	or	r12, r8
     e6e:	d9 28       	or	r13, r9
     e70:	0b c0       	rjmp	.+22     	; 0xe88 <_fpadd_parts+0x192>
     e72:	82 15       	cp	r24, r2
     e74:	93 05       	cpc	r25, r3
     e76:	2c f0       	brlt	.+10     	; 0xe82 <_fpadd_parts+0x18c>
     e78:	1c 01       	movw	r2, r24
     e7a:	aa 24       	eor	r10, r10
     e7c:	bb 24       	eor	r11, r11
     e7e:	65 01       	movw	r12, r10
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <_fpadd_parts+0x192>
     e82:	ee 24       	eor	r14, r14
     e84:	ff 24       	eor	r15, r15
     e86:	87 01       	movw	r16, r14
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	9c 91       	ld	r25, X
     e8c:	d2 01       	movw	r26, r4
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	8c 91       	ld	r24, X
     e92:	98 17       	cp	r25, r24
     e94:	09 f4       	brne	.+2      	; 0xe98 <_fpadd_parts+0x1a2>
     e96:	45 c0       	rjmp	.+138    	; 0xf22 <_fpadd_parts+0x22c>
     e98:	99 23       	and	r25, r25
     e9a:	39 f0       	breq	.+14     	; 0xeaa <_fpadd_parts+0x1b4>
     e9c:	a8 01       	movw	r20, r16
     e9e:	97 01       	movw	r18, r14
     ea0:	2a 19       	sub	r18, r10
     ea2:	3b 09       	sbc	r19, r11
     ea4:	4c 09       	sbc	r20, r12
     ea6:	5d 09       	sbc	r21, r13
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <_fpadd_parts+0x1c0>
     eaa:	a6 01       	movw	r20, r12
     eac:	95 01       	movw	r18, r10
     eae:	2e 19       	sub	r18, r14
     eb0:	3f 09       	sbc	r19, r15
     eb2:	40 0b       	sbc	r20, r16
     eb4:	51 0b       	sbc	r21, r17
     eb6:	57 fd       	sbrc	r21, 7
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <_fpadd_parts+0x1d4>
     eba:	11 82       	std	Z+1, r1	; 0x01
     ebc:	33 82       	std	Z+3, r3	; 0x03
     ebe:	22 82       	std	Z+2, r2	; 0x02
     ec0:	24 83       	std	Z+4, r18	; 0x04
     ec2:	35 83       	std	Z+5, r19	; 0x05
     ec4:	46 83       	std	Z+6, r20	; 0x06
     ec6:	57 83       	std	Z+7, r21	; 0x07
     ec8:	1d c0       	rjmp	.+58     	; 0xf04 <_fpadd_parts+0x20e>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	81 83       	std	Z+1, r24	; 0x01
     ece:	33 82       	std	Z+3, r3	; 0x03
     ed0:	22 82       	std	Z+2, r2	; 0x02
     ed2:	88 27       	eor	r24, r24
     ed4:	99 27       	eor	r25, r25
     ed6:	dc 01       	movw	r26, r24
     ed8:	82 1b       	sub	r24, r18
     eda:	93 0b       	sbc	r25, r19
     edc:	a4 0b       	sbc	r26, r20
     ede:	b5 0b       	sbc	r27, r21
     ee0:	84 83       	std	Z+4, r24	; 0x04
     ee2:	95 83       	std	Z+5, r25	; 0x05
     ee4:	a6 83       	std	Z+6, r26	; 0x06
     ee6:	b7 83       	std	Z+7, r27	; 0x07
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <_fpadd_parts+0x20e>
     eea:	22 0f       	add	r18, r18
     eec:	33 1f       	adc	r19, r19
     eee:	44 1f       	adc	r20, r20
     ef0:	55 1f       	adc	r21, r21
     ef2:	24 83       	std	Z+4, r18	; 0x04
     ef4:	35 83       	std	Z+5, r19	; 0x05
     ef6:	46 83       	std	Z+6, r20	; 0x06
     ef8:	57 83       	std	Z+7, r21	; 0x07
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	93 83       	std	Z+3, r25	; 0x03
     f02:	82 83       	std	Z+2, r24	; 0x02
     f04:	24 81       	ldd	r18, Z+4	; 0x04
     f06:	35 81       	ldd	r19, Z+5	; 0x05
     f08:	46 81       	ldd	r20, Z+6	; 0x06
     f0a:	57 81       	ldd	r21, Z+7	; 0x07
     f0c:	da 01       	movw	r26, r20
     f0e:	c9 01       	movw	r24, r18
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	a1 09       	sbc	r26, r1
     f14:	b1 09       	sbc	r27, r1
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	af 4f       	sbci	r26, 0xFF	; 255
     f1c:	bf 43       	sbci	r27, 0x3F	; 63
     f1e:	28 f3       	brcs	.-54     	; 0xeea <_fpadd_parts+0x1f4>
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <_fpadd_parts+0x242>
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	33 82       	std	Z+3, r3	; 0x03
     f26:	22 82       	std	Z+2, r2	; 0x02
     f28:	ea 0c       	add	r14, r10
     f2a:	fb 1c       	adc	r15, r11
     f2c:	0c 1d       	adc	r16, r12
     f2e:	1d 1d       	adc	r17, r13
     f30:	e4 82       	std	Z+4, r14	; 0x04
     f32:	f5 82       	std	Z+5, r15	; 0x05
     f34:	06 83       	std	Z+6, r16	; 0x06
     f36:	17 83       	std	Z+7, r17	; 0x07
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	80 83       	st	Z, r24
     f3c:	24 81       	ldd	r18, Z+4	; 0x04
     f3e:	35 81       	ldd	r19, Z+5	; 0x05
     f40:	46 81       	ldd	r20, Z+6	; 0x06
     f42:	57 81       	ldd	r21, Z+7	; 0x07
     f44:	57 ff       	sbrs	r21, 7
     f46:	1a c0       	rjmp	.+52     	; 0xf7c <_fpadd_parts+0x286>
     f48:	c9 01       	movw	r24, r18
     f4a:	aa 27       	eor	r26, r26
     f4c:	97 fd       	sbrc	r25, 7
     f4e:	a0 95       	com	r26
     f50:	ba 2f       	mov	r27, r26
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	90 70       	andi	r25, 0x00	; 0
     f56:	a0 70       	andi	r26, 0x00	; 0
     f58:	b0 70       	andi	r27, 0x00	; 0
     f5a:	56 95       	lsr	r21
     f5c:	47 95       	ror	r20
     f5e:	37 95       	ror	r19
     f60:	27 95       	ror	r18
     f62:	82 2b       	or	r24, r18
     f64:	93 2b       	or	r25, r19
     f66:	a4 2b       	or	r26, r20
     f68:	b5 2b       	or	r27, r21
     f6a:	84 83       	std	Z+4, r24	; 0x04
     f6c:	95 83       	std	Z+5, r25	; 0x05
     f6e:	a6 83       	std	Z+6, r26	; 0x06
     f70:	b7 83       	std	Z+7, r27	; 0x07
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	93 83       	std	Z+3, r25	; 0x03
     f7a:	82 83       	std	Z+2, r24	; 0x02
     f7c:	df 01       	movw	r26, r30
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <_fpadd_parts+0x28c>
     f80:	d2 01       	movw	r26, r4
     f82:	cd 01       	movw	r24, r26
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	e2 e1       	ldi	r30, 0x12	; 18
     f8a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__epilogue_restores__>

00000f8e <__subsf3>:
     f8e:	a0 e2       	ldi	r26, 0x20	; 32
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ed ec       	ldi	r30, 0xCD	; 205
     f94:	f7 e0       	ldi	r31, 0x07	; 7
     f96:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     f9a:	69 83       	std	Y+1, r22	; 0x01
     f9c:	7a 83       	std	Y+2, r23	; 0x02
     f9e:	8b 83       	std	Y+3, r24	; 0x03
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	2d 83       	std	Y+5, r18	; 0x05
     fa4:	3e 83       	std	Y+6, r19	; 0x06
     fa6:	4f 83       	std	Y+7, r20	; 0x07
     fa8:	58 87       	std	Y+8, r21	; 0x08
     faa:	e9 e0       	ldi	r30, 0x09	; 9
     fac:	ee 2e       	mov	r14, r30
     fae:	f1 2c       	mov	r15, r1
     fb0:	ec 0e       	add	r14, r28
     fb2:	fd 1e       	adc	r15, r29
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	b7 01       	movw	r22, r14
     fba:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
     fbe:	8e 01       	movw	r16, r28
     fc0:	0f 5e       	subi	r16, 0xEF	; 239
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	ce 01       	movw	r24, r28
     fc6:	05 96       	adiw	r24, 0x05	; 5
     fc8:	b8 01       	movw	r22, r16
     fca:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
     fce:	8a 89       	ldd	r24, Y+18	; 0x12
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	89 27       	eor	r24, r25
     fd4:	8a 8b       	std	Y+18, r24	; 0x12
     fd6:	c7 01       	movw	r24, r14
     fd8:	b8 01       	movw	r22, r16
     fda:	ae 01       	movw	r20, r28
     fdc:	47 5e       	subi	r20, 0xE7	; 231
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_fpadd_parts>
     fe4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__pack_f>
     fe8:	a0 96       	adiw	r28, 0x20	; 32
     fea:	e6 e0       	ldi	r30, 0x06	; 6
     fec:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

00000ff0 <__addsf3>:
     ff0:	a0 e2       	ldi	r26, 0x20	; 32
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee ef       	ldi	r30, 0xFE	; 254
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     ffc:	69 83       	std	Y+1, r22	; 0x01
     ffe:	7a 83       	std	Y+2, r23	; 0x02
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	2d 83       	std	Y+5, r18	; 0x05
    1006:	3e 83       	std	Y+6, r19	; 0x06
    1008:	4f 83       	std	Y+7, r20	; 0x07
    100a:	58 87       	std	Y+8, r21	; 0x08
    100c:	f9 e0       	ldi	r31, 0x09	; 9
    100e:	ef 2e       	mov	r14, r31
    1010:	f1 2c       	mov	r15, r1
    1012:	ec 0e       	add	r14, r28
    1014:	fd 1e       	adc	r15, r29
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	b7 01       	movw	r22, r14
    101c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1020:	8e 01       	movw	r16, r28
    1022:	0f 5e       	subi	r16, 0xEF	; 239
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	ce 01       	movw	r24, r28
    1028:	05 96       	adiw	r24, 0x05	; 5
    102a:	b8 01       	movw	r22, r16
    102c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1030:	c7 01       	movw	r24, r14
    1032:	b8 01       	movw	r22, r16
    1034:	ae 01       	movw	r20, r28
    1036:	47 5e       	subi	r20, 0xE7	; 231
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_fpadd_parts>
    103e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__pack_f>
    1042:	a0 96       	adiw	r28, 0x20	; 32
    1044:	e6 e0       	ldi	r30, 0x06	; 6
    1046:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

0000104a <__mulsf3>:
    104a:	a0 e2       	ldi	r26, 0x20	; 32
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e2       	ldi	r30, 0x2B	; 43
    1050:	f8 e0       	ldi	r31, 0x08	; 8
    1052:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__prologue_saves__>
    1056:	69 83       	std	Y+1, r22	; 0x01
    1058:	7a 83       	std	Y+2, r23	; 0x02
    105a:	8b 83       	std	Y+3, r24	; 0x03
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	2d 83       	std	Y+5, r18	; 0x05
    1060:	3e 83       	std	Y+6, r19	; 0x06
    1062:	4f 83       	std	Y+7, r20	; 0x07
    1064:	58 87       	std	Y+8, r21	; 0x08
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	be 01       	movw	r22, r28
    106c:	67 5f       	subi	r22, 0xF7	; 247
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1074:	ce 01       	movw	r24, r28
    1076:	05 96       	adiw	r24, 0x05	; 5
    1078:	be 01       	movw	r22, r28
    107a:	6f 5e       	subi	r22, 0xEF	; 239
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1082:	99 85       	ldd	r25, Y+9	; 0x09
    1084:	92 30       	cpi	r25, 0x02	; 2
    1086:	88 f0       	brcs	.+34     	; 0x10aa <__mulsf3+0x60>
    1088:	89 89       	ldd	r24, Y+17	; 0x11
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	c8 f0       	brcs	.+50     	; 0x10c0 <__mulsf3+0x76>
    108e:	94 30       	cpi	r25, 0x04	; 4
    1090:	19 f4       	brne	.+6      	; 0x1098 <__mulsf3+0x4e>
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	51 f4       	brne	.+20     	; 0x10aa <__mulsf3+0x60>
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <__mulsf3+0x56>
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	29 f4       	brne	.+10     	; 0x10a6 <__mulsf3+0x5c>
    109c:	92 30       	cpi	r25, 0x02	; 2
    109e:	81 f4       	brne	.+32     	; 0x10c0 <__mulsf3+0x76>
    10a0:	88 e1       	ldi	r24, 0x18	; 24
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	c6 c0       	rjmp	.+396    	; 0x1232 <__stack+0x133>
    10a6:	92 30       	cpi	r25, 0x02	; 2
    10a8:	49 f4       	brne	.+18     	; 0x10bc <__mulsf3+0x72>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	8a 89       	ldd	r24, Y+18	; 0x12
    10b0:	98 13       	cpse	r25, r24
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	2a 87       	std	Y+10, r18	; 0x0a
    10b6:	ce 01       	movw	r24, r28
    10b8:	09 96       	adiw	r24, 0x09	; 9
    10ba:	bb c0       	rjmp	.+374    	; 0x1232 <__stack+0x133>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	49 f4       	brne	.+18     	; 0x10d2 <__mulsf3+0x88>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	8a 89       	ldd	r24, Y+18	; 0x12
    10c6:	98 13       	cpse	r25, r24
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	2a 8b       	std	Y+18, r18	; 0x12
    10cc:	ce 01       	movw	r24, r28
    10ce:	41 96       	adiw	r24, 0x11	; 17
    10d0:	b0 c0       	rjmp	.+352    	; 0x1232 <__stack+0x133>
    10d2:	2d 84       	ldd	r2, Y+13	; 0x0d
    10d4:	3e 84       	ldd	r3, Y+14	; 0x0e
    10d6:	4f 84       	ldd	r4, Y+15	; 0x0f
    10d8:	58 88       	ldd	r5, Y+16	; 0x10
    10da:	6d 88       	ldd	r6, Y+21	; 0x15
    10dc:	7e 88       	ldd	r7, Y+22	; 0x16
    10de:	8f 88       	ldd	r8, Y+23	; 0x17
    10e0:	98 8c       	ldd	r9, Y+24	; 0x18
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	aa 24       	eor	r10, r10
    10ea:	bb 24       	eor	r11, r11
    10ec:	65 01       	movw	r12, r10
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	e0 e0       	ldi	r30, 0x00	; 0
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	c1 01       	movw	r24, r2
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	90 70       	andi	r25, 0x00	; 0
    1100:	89 2b       	or	r24, r25
    1102:	e9 f0       	breq	.+58     	; 0x113e <__stack+0x3f>
    1104:	e6 0c       	add	r14, r6
    1106:	f7 1c       	adc	r15, r7
    1108:	08 1d       	adc	r16, r8
    110a:	19 1d       	adc	r17, r9
    110c:	9a 01       	movw	r18, r20
    110e:	ab 01       	movw	r20, r22
    1110:	2a 0d       	add	r18, r10
    1112:	3b 1d       	adc	r19, r11
    1114:	4c 1d       	adc	r20, r12
    1116:	5d 1d       	adc	r21, r13
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a0 e0       	ldi	r26, 0x00	; 0
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e6 14       	cp	r14, r6
    1122:	f7 04       	cpc	r15, r7
    1124:	08 05       	cpc	r16, r8
    1126:	19 05       	cpc	r17, r9
    1128:	20 f4       	brcc	.+8      	; 0x1132 <__stack+0x33>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ba 01       	movw	r22, r20
    1134:	a9 01       	movw	r20, r18
    1136:	48 0f       	add	r20, r24
    1138:	59 1f       	adc	r21, r25
    113a:	6a 1f       	adc	r22, r26
    113c:	7b 1f       	adc	r23, r27
    113e:	aa 0c       	add	r10, r10
    1140:	bb 1c       	adc	r11, r11
    1142:	cc 1c       	adc	r12, r12
    1144:	dd 1c       	adc	r13, r13
    1146:	97 fe       	sbrs	r9, 7
    1148:	08 c0       	rjmp	.+16     	; 0x115a <__stack+0x5b>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	a8 2a       	or	r10, r24
    1154:	b9 2a       	or	r11, r25
    1156:	ca 2a       	or	r12, r26
    1158:	db 2a       	or	r13, r27
    115a:	31 96       	adiw	r30, 0x01	; 1
    115c:	e0 32       	cpi	r30, 0x20	; 32
    115e:	f1 05       	cpc	r31, r1
    1160:	49 f0       	breq	.+18     	; 0x1174 <__stack+0x75>
    1162:	66 0c       	add	r6, r6
    1164:	77 1c       	adc	r7, r7
    1166:	88 1c       	adc	r8, r8
    1168:	99 1c       	adc	r9, r9
    116a:	56 94       	lsr	r5
    116c:	47 94       	ror	r4
    116e:	37 94       	ror	r3
    1170:	27 94       	ror	r2
    1172:	c3 cf       	rjmp	.-122    	; 0x10fa <__mulsf3+0xb0>
    1174:	fa 85       	ldd	r31, Y+10	; 0x0a
    1176:	ea 89       	ldd	r30, Y+18	; 0x12
    1178:	2b 89       	ldd	r18, Y+19	; 0x13
    117a:	3c 89       	ldd	r19, Y+20	; 0x14
    117c:	8b 85       	ldd	r24, Y+11	; 0x0b
    117e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1180:	28 0f       	add	r18, r24
    1182:	39 1f       	adc	r19, r25
    1184:	2e 5f       	subi	r18, 0xFE	; 254
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	17 c0       	rjmp	.+46     	; 0x11b8 <__stack+0xb9>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	89 2b       	or	r24, r25
    1192:	61 f0       	breq	.+24     	; 0x11ac <__stack+0xad>
    1194:	16 95       	lsr	r17
    1196:	07 95       	ror	r16
    1198:	f7 94       	ror	r15
    119a:	e7 94       	ror	r14
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e8       	ldi	r27, 0x80	; 128
    11a4:	e8 2a       	or	r14, r24
    11a6:	f9 2a       	or	r15, r25
    11a8:	0a 2b       	or	r16, r26
    11aa:	1b 2b       	or	r17, r27
    11ac:	76 95       	lsr	r23
    11ae:	67 95       	ror	r22
    11b0:	57 95       	ror	r21
    11b2:	47 95       	ror	r20
    11b4:	2f 5f       	subi	r18, 0xFF	; 255
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    11b8:	77 fd       	sbrc	r23, 7
    11ba:	e7 cf       	rjmp	.-50     	; 0x118a <__stack+0x8b>
    11bc:	0c c0       	rjmp	.+24     	; 0x11d6 <__stack+0xd7>
    11be:	44 0f       	add	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	66 1f       	adc	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	17 fd       	sbrc	r17, 7
    11c8:	41 60       	ori	r20, 0x01	; 1
    11ca:	ee 0c       	add	r14, r14
    11cc:	ff 1c       	adc	r15, r15
    11ce:	00 1f       	adc	r16, r16
    11d0:	11 1f       	adc	r17, r17
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	30 40       	sbci	r19, 0x00	; 0
    11d6:	40 30       	cpi	r20, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	59 07       	cpc	r21, r25
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	69 07       	cpc	r22, r25
    11e0:	90 e4       	ldi	r25, 0x40	; 64
    11e2:	79 07       	cpc	r23, r25
    11e4:	60 f3       	brcs	.-40     	; 0x11be <__stack+0xbf>
    11e6:	2b 8f       	std	Y+27, r18	; 0x1b
    11e8:	3c 8f       	std	Y+28, r19	; 0x1c
    11ea:	db 01       	movw	r26, r22
    11ec:	ca 01       	movw	r24, r20
    11ee:	8f 77       	andi	r24, 0x7F	; 127
    11f0:	90 70       	andi	r25, 0x00	; 0
    11f2:	a0 70       	andi	r26, 0x00	; 0
    11f4:	b0 70       	andi	r27, 0x00	; 0
    11f6:	80 34       	cpi	r24, 0x40	; 64
    11f8:	91 05       	cpc	r25, r1
    11fa:	a1 05       	cpc	r26, r1
    11fc:	b1 05       	cpc	r27, r1
    11fe:	61 f4       	brne	.+24     	; 0x1218 <__stack+0x119>
    1200:	47 fd       	sbrc	r20, 7
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <__stack+0x119>
    1204:	e1 14       	cp	r14, r1
    1206:	f1 04       	cpc	r15, r1
    1208:	01 05       	cpc	r16, r1
    120a:	11 05       	cpc	r17, r1
    120c:	29 f0       	breq	.+10     	; 0x1218 <__stack+0x119>
    120e:	40 5c       	subi	r20, 0xC0	; 192
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	6f 4f       	sbci	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	40 78       	andi	r20, 0x80	; 128
    1218:	1a 8e       	std	Y+26, r1	; 0x1a
    121a:	fe 17       	cp	r31, r30
    121c:	11 f0       	breq	.+4      	; 0x1222 <__stack+0x123>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	8a 8f       	std	Y+26, r24	; 0x1a
    1222:	4d 8f       	std	Y+29, r20	; 0x1d
    1224:	5e 8f       	std	Y+30, r21	; 0x1e
    1226:	6f 8f       	std	Y+31, r22	; 0x1f
    1228:	78 a3       	std	Y+32, r23	; 0x20
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	89 8f       	std	Y+25, r24	; 0x19
    122e:	ce 01       	movw	r24, r28
    1230:	49 96       	adiw	r24, 0x19	; 25
    1232:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__pack_f>
    1236:	a0 96       	adiw	r28, 0x20	; 32
    1238:	e2 e1       	ldi	r30, 0x12	; 18
    123a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__epilogue_restores__>

0000123e <__divsf3>:
    123e:	a8 e1       	ldi	r26, 0x18	; 24
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e2       	ldi	r30, 0x25	; 37
    1244:	f9 e0       	ldi	r31, 0x09	; 9
    1246:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__prologue_saves__+0x10>
    124a:	69 83       	std	Y+1, r22	; 0x01
    124c:	7a 83       	std	Y+2, r23	; 0x02
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	2d 83       	std	Y+5, r18	; 0x05
    1254:	3e 83       	std	Y+6, r19	; 0x06
    1256:	4f 83       	std	Y+7, r20	; 0x07
    1258:	58 87       	std	Y+8, r21	; 0x08
    125a:	b9 e0       	ldi	r27, 0x09	; 9
    125c:	eb 2e       	mov	r14, r27
    125e:	f1 2c       	mov	r15, r1
    1260:	ec 0e       	add	r14, r28
    1262:	fd 1e       	adc	r15, r29
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	b7 01       	movw	r22, r14
    126a:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    126e:	8e 01       	movw	r16, r28
    1270:	0f 5e       	subi	r16, 0xEF	; 239
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	ce 01       	movw	r24, r28
    1276:	05 96       	adiw	r24, 0x05	; 5
    1278:	b8 01       	movw	r22, r16
    127a:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    127e:	29 85       	ldd	r18, Y+9	; 0x09
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	08 f4       	brcc	.+2      	; 0x1286 <__divsf3+0x48>
    1284:	7e c0       	rjmp	.+252    	; 0x1382 <__divsf3+0x144>
    1286:	39 89       	ldd	r19, Y+17	; 0x11
    1288:	32 30       	cpi	r19, 0x02	; 2
    128a:	10 f4       	brcc	.+4      	; 0x1290 <__divsf3+0x52>
    128c:	b8 01       	movw	r22, r16
    128e:	7c c0       	rjmp	.+248    	; 0x1388 <__divsf3+0x14a>
    1290:	8a 85       	ldd	r24, Y+10	; 0x0a
    1292:	9a 89       	ldd	r25, Y+18	; 0x12
    1294:	89 27       	eor	r24, r25
    1296:	8a 87       	std	Y+10, r24	; 0x0a
    1298:	24 30       	cpi	r18, 0x04	; 4
    129a:	11 f0       	breq	.+4      	; 0x12a0 <__divsf3+0x62>
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 f4       	brne	.+12     	; 0x12ac <__divsf3+0x6e>
    12a0:	23 17       	cp	r18, r19
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <__divsf3+0x68>
    12a4:	6e c0       	rjmp	.+220    	; 0x1382 <__divsf3+0x144>
    12a6:	68 e1       	ldi	r22, 0x18	; 24
    12a8:	71 e0       	ldi	r23, 0x01	; 1
    12aa:	6e c0       	rjmp	.+220    	; 0x1388 <__divsf3+0x14a>
    12ac:	34 30       	cpi	r19, 0x04	; 4
    12ae:	39 f4       	brne	.+14     	; 0x12be <__divsf3+0x80>
    12b0:	1d 86       	std	Y+13, r1	; 0x0d
    12b2:	1e 86       	std	Y+14, r1	; 0x0e
    12b4:	1f 86       	std	Y+15, r1	; 0x0f
    12b6:	18 8a       	std	Y+16, r1	; 0x10
    12b8:	1c 86       	std	Y+12, r1	; 0x0c
    12ba:	1b 86       	std	Y+11, r1	; 0x0b
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__divsf3+0x88>
    12be:	32 30       	cpi	r19, 0x02	; 2
    12c0:	21 f4       	brne	.+8      	; 0x12ca <__divsf3+0x8c>
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	89 87       	std	Y+9, r24	; 0x09
    12c6:	b7 01       	movw	r22, r14
    12c8:	5f c0       	rjmp	.+190    	; 0x1388 <__divsf3+0x14a>
    12ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    12cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    12ce:	8b 89       	ldd	r24, Y+19	; 0x13
    12d0:	9c 89       	ldd	r25, Y+20	; 0x14
    12d2:	28 1b       	sub	r18, r24
    12d4:	39 0b       	sbc	r19, r25
    12d6:	3c 87       	std	Y+12, r19	; 0x0c
    12d8:	2b 87       	std	Y+11, r18	; 0x0b
    12da:	ed 84       	ldd	r14, Y+13	; 0x0d
    12dc:	fe 84       	ldd	r15, Y+14	; 0x0e
    12de:	0f 85       	ldd	r16, Y+15	; 0x0f
    12e0:	18 89       	ldd	r17, Y+16	; 0x10
    12e2:	ad 88       	ldd	r10, Y+21	; 0x15
    12e4:	be 88       	ldd	r11, Y+22	; 0x16
    12e6:	cf 88       	ldd	r12, Y+23	; 0x17
    12e8:	d8 8c       	ldd	r13, Y+24	; 0x18
    12ea:	ea 14       	cp	r14, r10
    12ec:	fb 04       	cpc	r15, r11
    12ee:	0c 05       	cpc	r16, r12
    12f0:	1d 05       	cpc	r17, r13
    12f2:	40 f4       	brcc	.+16     	; 0x1304 <__divsf3+0xc6>
    12f4:	ee 0c       	add	r14, r14
    12f6:	ff 1c       	adc	r15, r15
    12f8:	00 1f       	adc	r16, r16
    12fa:	11 1f       	adc	r17, r17
    12fc:	21 50       	subi	r18, 0x01	; 1
    12fe:	30 40       	sbci	r19, 0x00	; 0
    1300:	3c 87       	std	Y+12, r19	; 0x0c
    1302:	2b 87       	std	Y+11, r18	; 0x0b
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b0 e4       	ldi	r27, 0x40	; 64
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	ea 14       	cp	r14, r10
    131a:	fb 04       	cpc	r15, r11
    131c:	0c 05       	cpc	r16, r12
    131e:	1d 05       	cpc	r17, r13
    1320:	40 f0       	brcs	.+16     	; 0x1332 <__divsf3+0xf4>
    1322:	28 2b       	or	r18, r24
    1324:	39 2b       	or	r19, r25
    1326:	4a 2b       	or	r20, r26
    1328:	5b 2b       	or	r21, r27
    132a:	ea 18       	sub	r14, r10
    132c:	fb 08       	sbc	r15, r11
    132e:	0c 09       	sbc	r16, r12
    1330:	1d 09       	sbc	r17, r13
    1332:	b6 95       	lsr	r27
    1334:	a7 95       	ror	r26
    1336:	97 95       	ror	r25
    1338:	87 95       	ror	r24
    133a:	ee 0c       	add	r14, r14
    133c:	ff 1c       	adc	r15, r15
    133e:	00 1f       	adc	r16, r16
    1340:	11 1f       	adc	r17, r17
    1342:	6f 5f       	subi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	6f 31       	cpi	r22, 0x1F	; 31
    1348:	71 05       	cpc	r23, r1
    134a:	31 f7       	brne	.-52     	; 0x1318 <__divsf3+0xda>
    134c:	da 01       	movw	r26, r20
    134e:	c9 01       	movw	r24, r18
    1350:	8f 77       	andi	r24, 0x7F	; 127
    1352:	90 70       	andi	r25, 0x00	; 0
    1354:	a0 70       	andi	r26, 0x00	; 0
    1356:	b0 70       	andi	r27, 0x00	; 0
    1358:	80 34       	cpi	r24, 0x40	; 64
    135a:	91 05       	cpc	r25, r1
    135c:	a1 05       	cpc	r26, r1
    135e:	b1 05       	cpc	r27, r1
    1360:	61 f4       	brne	.+24     	; 0x137a <__divsf3+0x13c>
    1362:	27 fd       	sbrc	r18, 7
    1364:	0a c0       	rjmp	.+20     	; 0x137a <__divsf3+0x13c>
    1366:	e1 14       	cp	r14, r1
    1368:	f1 04       	cpc	r15, r1
    136a:	01 05       	cpc	r16, r1
    136c:	11 05       	cpc	r17, r1
    136e:	29 f0       	breq	.+10     	; 0x137a <__divsf3+0x13c>
    1370:	20 5c       	subi	r18, 0xC0	; 192
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	4f 4f       	sbci	r20, 0xFF	; 255
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	20 78       	andi	r18, 0x80	; 128
    137a:	2d 87       	std	Y+13, r18	; 0x0d
    137c:	3e 87       	std	Y+14, r19	; 0x0e
    137e:	4f 87       	std	Y+15, r20	; 0x0f
    1380:	58 8b       	std	Y+16, r21	; 0x10
    1382:	be 01       	movw	r22, r28
    1384:	67 5f       	subi	r22, 0xF7	; 247
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	cb 01       	movw	r24, r22
    138a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__pack_f>
    138e:	68 96       	adiw	r28, 0x18	; 24
    1390:	ea e0       	ldi	r30, 0x0A	; 10
    1392:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__epilogue_restores__+0x10>

00001396 <__gtsf2>:
    1396:	a8 e1       	ldi	r26, 0x18	; 24
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 ed       	ldi	r30, 0xD1	; 209
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
    13a2:	69 83       	std	Y+1, r22	; 0x01
    13a4:	7a 83       	std	Y+2, r23	; 0x02
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	2d 83       	std	Y+5, r18	; 0x05
    13ac:	3e 83       	std	Y+6, r19	; 0x06
    13ae:	4f 83       	std	Y+7, r20	; 0x07
    13b0:	58 87       	std	Y+8, r21	; 0x08
    13b2:	89 e0       	ldi	r24, 0x09	; 9
    13b4:	e8 2e       	mov	r14, r24
    13b6:	f1 2c       	mov	r15, r1
    13b8:	ec 0e       	add	r14, r28
    13ba:	fd 1e       	adc	r15, r29
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	b7 01       	movw	r22, r14
    13c2:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    13c6:	8e 01       	movw	r16, r28
    13c8:	0f 5e       	subi	r16, 0xEF	; 239
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	ce 01       	movw	r24, r28
    13ce:	05 96       	adiw	r24, 0x05	; 5
    13d0:	b8 01       	movw	r22, r16
    13d2:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	40 f0       	brcs	.+16     	; 0x13ec <__gtsf2+0x56>
    13dc:	89 89       	ldd	r24, Y+17	; 0x11
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	28 f0       	brcs	.+10     	; 0x13ec <__gtsf2+0x56>
    13e2:	c7 01       	movw	r24, r14
    13e4:	b8 01       	movw	r22, r16
    13e6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fpcmp_parts_f>
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <__gtsf2+0x58>
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	68 96       	adiw	r28, 0x18	; 24
    13f0:	e6 e0       	ldi	r30, 0x06	; 6
    13f2:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

000013f6 <__gesf2>:
    13f6:	a8 e1       	ldi	r26, 0x18	; 24
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e1 e0       	ldi	r30, 0x01	; 1
    13fc:	fa e0       	ldi	r31, 0x0A	; 10
    13fe:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
    1402:	69 83       	std	Y+1, r22	; 0x01
    1404:	7a 83       	std	Y+2, r23	; 0x02
    1406:	8b 83       	std	Y+3, r24	; 0x03
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	2d 83       	std	Y+5, r18	; 0x05
    140c:	3e 83       	std	Y+6, r19	; 0x06
    140e:	4f 83       	std	Y+7, r20	; 0x07
    1410:	58 87       	std	Y+8, r21	; 0x08
    1412:	89 e0       	ldi	r24, 0x09	; 9
    1414:	e8 2e       	mov	r14, r24
    1416:	f1 2c       	mov	r15, r1
    1418:	ec 0e       	add	r14, r28
    141a:	fd 1e       	adc	r15, r29
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	b7 01       	movw	r22, r14
    1422:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1426:	8e 01       	movw	r16, r28
    1428:	0f 5e       	subi	r16, 0xEF	; 239
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	ce 01       	movw	r24, r28
    142e:	05 96       	adiw	r24, 0x05	; 5
    1430:	b8 01       	movw	r22, r16
    1432:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	40 f0       	brcs	.+16     	; 0x144c <__gesf2+0x56>
    143c:	89 89       	ldd	r24, Y+17	; 0x11
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	28 f0       	brcs	.+10     	; 0x144c <__gesf2+0x56>
    1442:	c7 01       	movw	r24, r14
    1444:	b8 01       	movw	r22, r16
    1446:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fpcmp_parts_f>
    144a:	01 c0       	rjmp	.+2      	; 0x144e <__gesf2+0x58>
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	68 96       	adiw	r28, 0x18	; 24
    1450:	e6 e0       	ldi	r30, 0x06	; 6
    1452:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

00001456 <__ltsf2>:
    1456:	a8 e1       	ldi	r26, 0x18	; 24
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e1 e3       	ldi	r30, 0x31	; 49
    145c:	fa e0       	ldi	r31, 0x0A	; 10
    145e:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
    1462:	69 83       	std	Y+1, r22	; 0x01
    1464:	7a 83       	std	Y+2, r23	; 0x02
    1466:	8b 83       	std	Y+3, r24	; 0x03
    1468:	9c 83       	std	Y+4, r25	; 0x04
    146a:	2d 83       	std	Y+5, r18	; 0x05
    146c:	3e 83       	std	Y+6, r19	; 0x06
    146e:	4f 83       	std	Y+7, r20	; 0x07
    1470:	58 87       	std	Y+8, r21	; 0x08
    1472:	89 e0       	ldi	r24, 0x09	; 9
    1474:	e8 2e       	mov	r14, r24
    1476:	f1 2c       	mov	r15, r1
    1478:	ec 0e       	add	r14, r28
    147a:	fd 1e       	adc	r15, r29
    147c:	ce 01       	movw	r24, r28
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	b7 01       	movw	r22, r14
    1482:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1486:	8e 01       	movw	r16, r28
    1488:	0f 5e       	subi	r16, 0xEF	; 239
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	ce 01       	movw	r24, r28
    148e:	05 96       	adiw	r24, 0x05	; 5
    1490:	b8 01       	movw	r22, r16
    1492:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	40 f0       	brcs	.+16     	; 0x14ac <__ltsf2+0x56>
    149c:	89 89       	ldd	r24, Y+17	; 0x11
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	28 f0       	brcs	.+10     	; 0x14ac <__ltsf2+0x56>
    14a2:	c7 01       	movw	r24, r14
    14a4:	b8 01       	movw	r22, r16
    14a6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fpcmp_parts_f>
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <__ltsf2+0x58>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	68 96       	adiw	r28, 0x18	; 24
    14b0:	e6 e0       	ldi	r30, 0x06	; 6
    14b2:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

000014b6 <__floatsisf>:
    14b6:	a8 e0       	ldi	r26, 0x08	; 8
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e6       	ldi	r30, 0x61	; 97
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__+0x12>
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	da 01       	movw	r26, r20
    14cc:	c9 01       	movw	r24, r18
    14ce:	88 27       	eor	r24, r24
    14d0:	b7 fd       	sbrc	r27, 7
    14d2:	83 95       	inc	r24
    14d4:	99 27       	eor	r25, r25
    14d6:	aa 27       	eor	r26, r26
    14d8:	bb 27       	eor	r27, r27
    14da:	b8 2e       	mov	r11, r24
    14dc:	21 15       	cp	r18, r1
    14de:	31 05       	cpc	r19, r1
    14e0:	41 05       	cpc	r20, r1
    14e2:	51 05       	cpc	r21, r1
    14e4:	19 f4       	brne	.+6      	; 0x14ec <__floatsisf+0x36>
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	3a c0       	rjmp	.+116    	; 0x1560 <__floatsisf+0xaa>
    14ec:	88 23       	and	r24, r24
    14ee:	a9 f0       	breq	.+42     	; 0x151a <__floatsisf+0x64>
    14f0:	20 30       	cpi	r18, 0x00	; 0
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	38 07       	cpc	r19, r24
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	48 07       	cpc	r20, r24
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	58 07       	cpc	r21, r24
    14fe:	29 f4       	brne	.+10     	; 0x150a <__floatsisf+0x54>
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	9f ec       	ldi	r25, 0xCF	; 207
    1508:	30 c0       	rjmp	.+96     	; 0x156a <__floatsisf+0xb4>
    150a:	ee 24       	eor	r14, r14
    150c:	ff 24       	eor	r15, r15
    150e:	87 01       	movw	r16, r14
    1510:	e2 1a       	sub	r14, r18
    1512:	f3 0a       	sbc	r15, r19
    1514:	04 0b       	sbc	r16, r20
    1516:	15 0b       	sbc	r17, r21
    1518:	02 c0       	rjmp	.+4      	; 0x151e <__floatsisf+0x68>
    151a:	79 01       	movw	r14, r18
    151c:	8a 01       	movw	r16, r20
    151e:	8e e1       	ldi	r24, 0x1E	; 30
    1520:	c8 2e       	mov	r12, r24
    1522:	d1 2c       	mov	r13, r1
    1524:	dc 82       	std	Y+4, r13	; 0x04
    1526:	cb 82       	std	Y+3, r12	; 0x03
    1528:	ed 82       	std	Y+5, r14	; 0x05
    152a:	fe 82       	std	Y+6, r15	; 0x06
    152c:	0f 83       	std	Y+7, r16	; 0x07
    152e:	18 87       	std	Y+8, r17	; 0x08
    1530:	c8 01       	movw	r24, r16
    1532:	b7 01       	movw	r22, r14
    1534:	0e 94 0d 0b 	call	0x161a	; 0x161a <__clzsi2>
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	18 16       	cp	r1, r24
    153c:	19 06       	cpc	r1, r25
    153e:	84 f4       	brge	.+32     	; 0x1560 <__floatsisf+0xaa>
    1540:	08 2e       	mov	r0, r24
    1542:	04 c0       	rjmp	.+8      	; 0x154c <__floatsisf+0x96>
    1544:	ee 0c       	add	r14, r14
    1546:	ff 1c       	adc	r15, r15
    1548:	00 1f       	adc	r16, r16
    154a:	11 1f       	adc	r17, r17
    154c:	0a 94       	dec	r0
    154e:	d2 f7       	brpl	.-12     	; 0x1544 <__floatsisf+0x8e>
    1550:	ed 82       	std	Y+5, r14	; 0x05
    1552:	fe 82       	std	Y+6, r15	; 0x06
    1554:	0f 83       	std	Y+7, r16	; 0x07
    1556:	18 87       	std	Y+8, r17	; 0x08
    1558:	c8 1a       	sub	r12, r24
    155a:	d9 0a       	sbc	r13, r25
    155c:	dc 82       	std	Y+4, r13	; 0x04
    155e:	cb 82       	std	Y+3, r12	; 0x03
    1560:	ba 82       	std	Y+2, r11	; 0x02
    1562:	ce 01       	movw	r24, r28
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__pack_f>
    156a:	28 96       	adiw	r28, 0x08	; 8
    156c:	e9 e0       	ldi	r30, 0x09	; 9
    156e:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__+0x12>

00001572 <__fixsfsi>:
    1572:	ac e0       	ldi	r26, 0x0C	; 12
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef eb       	ldi	r30, 0xBF	; 191
    1578:	fa e0       	ldi	r31, 0x0A	; 10
    157a:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__prologue_saves__+0x20>
    157e:	69 83       	std	Y+1, r22	; 0x01
    1580:	7a 83       	std	Y+2, r23	; 0x02
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	be 01       	movw	r22, r28
    158c:	6b 5f       	subi	r22, 0xFB	; 251
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	0e 94 31 0c 	call	0x1862	; 0x1862 <__unpack_f>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	61 f1       	breq	.+88     	; 0x15f2 <__fixsfsi+0x80>
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	50 f1       	brcs	.+84     	; 0x15f2 <__fixsfsi+0x80>
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	21 f4       	brne	.+8      	; 0x15aa <__fixsfsi+0x38>
    15a2:	8e 81       	ldd	r24, Y+6	; 0x06
    15a4:	88 23       	and	r24, r24
    15a6:	51 f1       	breq	.+84     	; 0x15fc <__fixsfsi+0x8a>
    15a8:	2e c0       	rjmp	.+92     	; 0x1606 <__fixsfsi+0x94>
    15aa:	2f 81       	ldd	r18, Y+7	; 0x07
    15ac:	38 85       	ldd	r19, Y+8	; 0x08
    15ae:	37 fd       	sbrc	r19, 7
    15b0:	20 c0       	rjmp	.+64     	; 0x15f2 <__fixsfsi+0x80>
    15b2:	6e 81       	ldd	r22, Y+6	; 0x06
    15b4:	2f 31       	cpi	r18, 0x1F	; 31
    15b6:	31 05       	cpc	r19, r1
    15b8:	1c f0       	brlt	.+6      	; 0x15c0 <__fixsfsi+0x4e>
    15ba:	66 23       	and	r22, r22
    15bc:	f9 f0       	breq	.+62     	; 0x15fc <__fixsfsi+0x8a>
    15be:	23 c0       	rjmp	.+70     	; 0x1606 <__fixsfsi+0x94>
    15c0:	8e e1       	ldi	r24, 0x1E	; 30
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	82 1b       	sub	r24, r18
    15c6:	93 0b       	sbc	r25, r19
    15c8:	29 85       	ldd	r18, Y+9	; 0x09
    15ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    15cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    15ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <__fixsfsi+0x68>
    15d2:	56 95       	lsr	r21
    15d4:	47 95       	ror	r20
    15d6:	37 95       	ror	r19
    15d8:	27 95       	ror	r18
    15da:	8a 95       	dec	r24
    15dc:	d2 f7       	brpl	.-12     	; 0x15d2 <__fixsfsi+0x60>
    15de:	66 23       	and	r22, r22
    15e0:	b1 f0       	breq	.+44     	; 0x160e <__fixsfsi+0x9c>
    15e2:	50 95       	com	r21
    15e4:	40 95       	com	r20
    15e6:	30 95       	com	r19
    15e8:	21 95       	neg	r18
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	4f 4f       	sbci	r20, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	0e c0       	rjmp	.+28     	; 0x160e <__fixsfsi+0x9c>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <__fixsfsi+0x9c>
    15fc:	2f ef       	ldi	r18, 0xFF	; 255
    15fe:	3f ef       	ldi	r19, 0xFF	; 255
    1600:	4f ef       	ldi	r20, 0xFF	; 255
    1602:	5f e7       	ldi	r21, 0x7F	; 127
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__fixsfsi+0x9c>
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e8       	ldi	r21, 0x80	; 128
    160e:	b9 01       	movw	r22, r18
    1610:	ca 01       	movw	r24, r20
    1612:	2c 96       	adiw	r28, 0x0c	; 12
    1614:	e2 e0       	ldi	r30, 0x02	; 2
    1616:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__epilogue_restores__+0x20>

0000161a <__clzsi2>:
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	7b 01       	movw	r14, r22
    1624:	8c 01       	movw	r16, r24
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	e8 16       	cp	r14, r24
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	f8 06       	cpc	r15, r24
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	08 07       	cpc	r16, r24
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	18 07       	cpc	r17, r24
    1636:	88 f4       	brcc	.+34     	; 0x165a <__clzsi2+0x40>
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	e8 16       	cp	r14, r24
    163c:	f1 04       	cpc	r15, r1
    163e:	01 05       	cpc	r16, r1
    1640:	11 05       	cpc	r17, r1
    1642:	31 f0       	breq	.+12     	; 0x1650 <__clzsi2+0x36>
    1644:	28 f0       	brcs	.+10     	; 0x1650 <__clzsi2+0x36>
    1646:	88 e0       	ldi	r24, 0x08	; 8
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	17 c0       	rjmp	.+46     	; 0x167e <__clzsi2+0x64>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	12 c0       	rjmp	.+36     	; 0x167e <__clzsi2+0x64>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	e8 16       	cp	r14, r24
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	f8 06       	cpc	r15, r24
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	08 07       	cpc	r16, r24
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	18 07       	cpc	r17, r24
    166a:	28 f0       	brcs	.+10     	; 0x1676 <__clzsi2+0x5c>
    166c:	88 e1       	ldi	r24, 0x18	; 24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__clzsi2+0x64>
    1676:	80 e1       	ldi	r24, 0x10	; 16
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	20 e2       	ldi	r18, 0x20	; 32
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	28 1b       	sub	r18, r24
    1688:	39 0b       	sbc	r19, r25
    168a:	4a 0b       	sbc	r20, r26
    168c:	5b 0b       	sbc	r21, r27
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <__clzsi2+0x7e>
    1690:	16 95       	lsr	r17
    1692:	07 95       	ror	r16
    1694:	f7 94       	ror	r15
    1696:	e7 94       	ror	r14
    1698:	8a 95       	dec	r24
    169a:	d2 f7       	brpl	.-12     	; 0x1690 <__clzsi2+0x76>
    169c:	f7 01       	movw	r30, r14
    169e:	e0 5e       	subi	r30, 0xE0	; 224
    16a0:	fe 4f       	sbci	r31, 0xFE	; 254
    16a2:	80 81       	ld	r24, Z
    16a4:	28 1b       	sub	r18, r24
    16a6:	31 09       	sbc	r19, r1
    16a8:	41 09       	sbc	r20, r1
    16aa:	51 09       	sbc	r21, r1
    16ac:	c9 01       	movw	r24, r18
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	08 95       	ret

000016b8 <__pack_f>:
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	fc 01       	movw	r30, r24
    16c4:	e4 80       	ldd	r14, Z+4	; 0x04
    16c6:	f5 80       	ldd	r15, Z+5	; 0x05
    16c8:	06 81       	ldd	r16, Z+6	; 0x06
    16ca:	17 81       	ldd	r17, Z+7	; 0x07
    16cc:	d1 80       	ldd	r13, Z+1	; 0x01
    16ce:	80 81       	ld	r24, Z
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	48 f4       	brcc	.+18     	; 0x16e6 <__pack_f+0x2e>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e1       	ldi	r26, 0x10	; 16
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e8 2a       	or	r14, r24
    16de:	f9 2a       	or	r15, r25
    16e0:	0a 2b       	or	r16, r26
    16e2:	1b 2b       	or	r17, r27
    16e4:	a5 c0       	rjmp	.+330    	; 0x1830 <__pack_f+0x178>
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	09 f4       	brne	.+2      	; 0x16ec <__pack_f+0x34>
    16ea:	9f c0       	rjmp	.+318    	; 0x182a <__pack_f+0x172>
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <__pack_f+0x40>
    16f0:	ee 24       	eor	r14, r14
    16f2:	ff 24       	eor	r15, r15
    16f4:	87 01       	movw	r16, r14
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <__pack_f+0x4a>
    16f8:	e1 14       	cp	r14, r1
    16fa:	f1 04       	cpc	r15, r1
    16fc:	01 05       	cpc	r16, r1
    16fe:	11 05       	cpc	r17, r1
    1700:	19 f4       	brne	.+6      	; 0x1708 <__pack_f+0x50>
    1702:	e0 e0       	ldi	r30, 0x00	; 0
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	96 c0       	rjmp	.+300    	; 0x1834 <__pack_f+0x17c>
    1708:	62 81       	ldd	r22, Z+2	; 0x02
    170a:	73 81       	ldd	r23, Z+3	; 0x03
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	62 38       	cpi	r22, 0x82	; 130
    1710:	79 07       	cpc	r23, r25
    1712:	0c f0       	brlt	.+2      	; 0x1716 <__pack_f+0x5e>
    1714:	5b c0       	rjmp	.+182    	; 0x17cc <__pack_f+0x114>
    1716:	22 e8       	ldi	r18, 0x82	; 130
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	26 1b       	sub	r18, r22
    171c:	37 0b       	sbc	r19, r23
    171e:	2a 31       	cpi	r18, 0x1A	; 26
    1720:	31 05       	cpc	r19, r1
    1722:	2c f0       	brlt	.+10     	; 0x172e <__pack_f+0x76>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	2a c0       	rjmp	.+84     	; 0x1782 <__pack_f+0xca>
    172e:	b8 01       	movw	r22, r16
    1730:	a7 01       	movw	r20, r14
    1732:	02 2e       	mov	r0, r18
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__pack_f+0x86>
    1736:	76 95       	lsr	r23
    1738:	67 95       	ror	r22
    173a:	57 95       	ror	r21
    173c:	47 95       	ror	r20
    173e:	0a 94       	dec	r0
    1740:	d2 f7       	brpl	.-12     	; 0x1736 <__pack_f+0x7e>
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__pack_f+0x9c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	aa 1f       	adc	r26, r26
    1752:	bb 1f       	adc	r27, r27
    1754:	2a 95       	dec	r18
    1756:	d2 f7       	brpl	.-12     	; 0x174c <__pack_f+0x94>
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	a1 09       	sbc	r26, r1
    175c:	b1 09       	sbc	r27, r1
    175e:	8e 21       	and	r24, r14
    1760:	9f 21       	and	r25, r15
    1762:	a0 23       	and	r26, r16
    1764:	b1 23       	and	r27, r17
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	a1 05       	cpc	r26, r1
    176a:	b1 05       	cpc	r27, r1
    176c:	21 f0       	breq	.+8      	; 0x1776 <__pack_f+0xbe>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	9a 01       	movw	r18, r20
    1778:	ab 01       	movw	r20, r22
    177a:	28 2b       	or	r18, r24
    177c:	39 2b       	or	r19, r25
    177e:	4a 2b       	or	r20, r26
    1780:	5b 2b       	or	r21, r27
    1782:	da 01       	movw	r26, r20
    1784:	c9 01       	movw	r24, r18
    1786:	8f 77       	andi	r24, 0x7F	; 127
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	a0 70       	andi	r26, 0x00	; 0
    178c:	b0 70       	andi	r27, 0x00	; 0
    178e:	80 34       	cpi	r24, 0x40	; 64
    1790:	91 05       	cpc	r25, r1
    1792:	a1 05       	cpc	r26, r1
    1794:	b1 05       	cpc	r27, r1
    1796:	39 f4       	brne	.+14     	; 0x17a6 <__pack_f+0xee>
    1798:	27 ff       	sbrs	r18, 7
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <__pack_f+0xf6>
    179c:	20 5c       	subi	r18, 0xC0	; 192
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	4f 4f       	sbci	r20, 0xFF	; 255
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <__pack_f+0xf6>
    17a6:	21 5c       	subi	r18, 0xC1	; 193
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	4f 4f       	sbci	r20, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	e0 e0       	ldi	r30, 0x00	; 0
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	20 30       	cpi	r18, 0x00	; 0
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	3a 07       	cpc	r19, r26
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	4a 07       	cpc	r20, r26
    17bc:	a0 e4       	ldi	r26, 0x40	; 64
    17be:	5a 07       	cpc	r21, r26
    17c0:	10 f0       	brcs	.+4      	; 0x17c6 <__pack_f+0x10e>
    17c2:	e1 e0       	ldi	r30, 0x01	; 1
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	79 01       	movw	r14, r18
    17c8:	8a 01       	movw	r16, r20
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <__pack_f+0x162>
    17cc:	60 38       	cpi	r22, 0x80	; 128
    17ce:	71 05       	cpc	r23, r1
    17d0:	64 f5       	brge	.+88     	; 0x182a <__pack_f+0x172>
    17d2:	fb 01       	movw	r30, r22
    17d4:	e1 58       	subi	r30, 0x81	; 129
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	d8 01       	movw	r26, r16
    17da:	c7 01       	movw	r24, r14
    17dc:	8f 77       	andi	r24, 0x7F	; 127
    17de:	90 70       	andi	r25, 0x00	; 0
    17e0:	a0 70       	andi	r26, 0x00	; 0
    17e2:	b0 70       	andi	r27, 0x00	; 0
    17e4:	80 34       	cpi	r24, 0x40	; 64
    17e6:	91 05       	cpc	r25, r1
    17e8:	a1 05       	cpc	r26, r1
    17ea:	b1 05       	cpc	r27, r1
    17ec:	39 f4       	brne	.+14     	; 0x17fc <__pack_f+0x144>
    17ee:	e7 fe       	sbrs	r14, 7
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <__pack_f+0x154>
    17f2:	80 e4       	ldi	r24, 0x40	; 64
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <__pack_f+0x14c>
    17fc:	8f e3       	ldi	r24, 0x3F	; 63
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e0       	ldi	r26, 0x00	; 0
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e8 0e       	add	r14, r24
    1806:	f9 1e       	adc	r15, r25
    1808:	0a 1f       	adc	r16, r26
    180a:	1b 1f       	adc	r17, r27
    180c:	17 ff       	sbrs	r17, 7
    180e:	05 c0       	rjmp	.+10     	; 0x181a <__pack_f+0x162>
    1810:	16 95       	lsr	r17
    1812:	07 95       	ror	r16
    1814:	f7 94       	ror	r15
    1816:	e7 94       	ror	r14
    1818:	31 96       	adiw	r30, 0x01	; 1
    181a:	87 e0       	ldi	r24, 0x07	; 7
    181c:	16 95       	lsr	r17
    181e:	07 95       	ror	r16
    1820:	f7 94       	ror	r15
    1822:	e7 94       	ror	r14
    1824:	8a 95       	dec	r24
    1826:	d1 f7       	brne	.-12     	; 0x181c <__pack_f+0x164>
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <__pack_f+0x17c>
    182a:	ee 24       	eor	r14, r14
    182c:	ff 24       	eor	r15, r15
    182e:	87 01       	movw	r16, r14
    1830:	ef ef       	ldi	r30, 0xFF	; 255
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	6e 2f       	mov	r22, r30
    1836:	67 95       	ror	r22
    1838:	66 27       	eor	r22, r22
    183a:	67 95       	ror	r22
    183c:	90 2f       	mov	r25, r16
    183e:	9f 77       	andi	r25, 0x7F	; 127
    1840:	d7 94       	ror	r13
    1842:	dd 24       	eor	r13, r13
    1844:	d7 94       	ror	r13
    1846:	8e 2f       	mov	r24, r30
    1848:	86 95       	lsr	r24
    184a:	49 2f       	mov	r20, r25
    184c:	46 2b       	or	r20, r22
    184e:	58 2f       	mov	r21, r24
    1850:	5d 29       	or	r21, r13
    1852:	b7 01       	movw	r22, r14
    1854:	ca 01       	movw	r24, r20
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	08 95       	ret

00001862 <__unpack_f>:
    1862:	fc 01       	movw	r30, r24
    1864:	db 01       	movw	r26, r22
    1866:	40 81       	ld	r20, Z
    1868:	51 81       	ldd	r21, Z+1	; 0x01
    186a:	22 81       	ldd	r18, Z+2	; 0x02
    186c:	62 2f       	mov	r22, r18
    186e:	6f 77       	andi	r22, 0x7F	; 127
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	22 1f       	adc	r18, r18
    1874:	22 27       	eor	r18, r18
    1876:	22 1f       	adc	r18, r18
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	89 2f       	mov	r24, r25
    187c:	88 0f       	add	r24, r24
    187e:	82 2b       	or	r24, r18
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	99 1f       	adc	r25, r25
    1886:	99 27       	eor	r25, r25
    1888:	99 1f       	adc	r25, r25
    188a:	11 96       	adiw	r26, 0x01	; 1
    188c:	9c 93       	st	X, r25
    188e:	11 97       	sbiw	r26, 0x01	; 1
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	a9 f5       	brne	.+106    	; 0x1900 <__unpack_f+0x9e>
    1896:	41 15       	cp	r20, r1
    1898:	51 05       	cpc	r21, r1
    189a:	61 05       	cpc	r22, r1
    189c:	71 05       	cpc	r23, r1
    189e:	11 f4       	brne	.+4      	; 0x18a4 <__unpack_f+0x42>
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	37 c0       	rjmp	.+110    	; 0x1912 <__unpack_f+0xb0>
    18a4:	82 e8       	ldi	r24, 0x82	; 130
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	13 96       	adiw	r26, 0x03	; 3
    18aa:	9c 93       	st	X, r25
    18ac:	8e 93       	st	-X, r24
    18ae:	12 97       	sbiw	r26, 0x02	; 2
    18b0:	9a 01       	movw	r18, r20
    18b2:	ab 01       	movw	r20, r22
    18b4:	67 e0       	ldi	r22, 0x07	; 7
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	44 1f       	adc	r20, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	6a 95       	dec	r22
    18c0:	d1 f7       	brne	.-12     	; 0x18b6 <__unpack_f+0x54>
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	8c 93       	st	X, r24
    18c6:	0d c0       	rjmp	.+26     	; 0x18e2 <__unpack_f+0x80>
    18c8:	22 0f       	add	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	44 1f       	adc	r20, r20
    18ce:	55 1f       	adc	r21, r21
    18d0:	12 96       	adiw	r26, 0x02	; 2
    18d2:	8d 91       	ld	r24, X+
    18d4:	9c 91       	ld	r25, X
    18d6:	13 97       	sbiw	r26, 0x03	; 3
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	13 96       	adiw	r26, 0x03	; 3
    18dc:	9c 93       	st	X, r25
    18de:	8e 93       	st	-X, r24
    18e0:	12 97       	sbiw	r26, 0x02	; 2
    18e2:	20 30       	cpi	r18, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	38 07       	cpc	r19, r24
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	48 07       	cpc	r20, r24
    18ec:	80 e4       	ldi	r24, 0x40	; 64
    18ee:	58 07       	cpc	r21, r24
    18f0:	58 f3       	brcs	.-42     	; 0x18c8 <__unpack_f+0x66>
    18f2:	14 96       	adiw	r26, 0x04	; 4
    18f4:	2d 93       	st	X+, r18
    18f6:	3d 93       	st	X+, r19
    18f8:	4d 93       	st	X+, r20
    18fa:	5c 93       	st	X, r21
    18fc:	17 97       	sbiw	r26, 0x07	; 7
    18fe:	08 95       	ret
    1900:	2f 3f       	cpi	r18, 0xFF	; 255
    1902:	31 05       	cpc	r19, r1
    1904:	79 f4       	brne	.+30     	; 0x1924 <__unpack_f+0xc2>
    1906:	41 15       	cp	r20, r1
    1908:	51 05       	cpc	r21, r1
    190a:	61 05       	cpc	r22, r1
    190c:	71 05       	cpc	r23, r1
    190e:	19 f4       	brne	.+6      	; 0x1916 <__unpack_f+0xb4>
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	8c 93       	st	X, r24
    1914:	08 95       	ret
    1916:	64 ff       	sbrs	r22, 4
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <__unpack_f+0xbe>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	8c 93       	st	X, r24
    191e:	12 c0       	rjmp	.+36     	; 0x1944 <__unpack_f+0xe2>
    1920:	1c 92       	st	X, r1
    1922:	10 c0       	rjmp	.+32     	; 0x1944 <__unpack_f+0xe2>
    1924:	2f 57       	subi	r18, 0x7F	; 127
    1926:	30 40       	sbci	r19, 0x00	; 0
    1928:	13 96       	adiw	r26, 0x03	; 3
    192a:	3c 93       	st	X, r19
    192c:	2e 93       	st	-X, r18
    192e:	12 97       	sbiw	r26, 0x02	; 2
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	8c 93       	st	X, r24
    1934:	87 e0       	ldi	r24, 0x07	; 7
    1936:	44 0f       	add	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	66 1f       	adc	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	8a 95       	dec	r24
    1940:	d1 f7       	brne	.-12     	; 0x1936 <__unpack_f+0xd4>
    1942:	70 64       	ori	r23, 0x40	; 64
    1944:	14 96       	adiw	r26, 0x04	; 4
    1946:	4d 93       	st	X+, r20
    1948:	5d 93       	st	X+, r21
    194a:	6d 93       	st	X+, r22
    194c:	7c 93       	st	X, r23
    194e:	17 97       	sbiw	r26, 0x07	; 7
    1950:	08 95       	ret

00001952 <__fpcmp_parts_f>:
    1952:	1f 93       	push	r17
    1954:	dc 01       	movw	r26, r24
    1956:	fb 01       	movw	r30, r22
    1958:	9c 91       	ld	r25, X
    195a:	92 30       	cpi	r25, 0x02	; 2
    195c:	08 f4       	brcc	.+2      	; 0x1960 <__fpcmp_parts_f+0xe>
    195e:	47 c0       	rjmp	.+142    	; 0x19ee <__fpcmp_parts_f+0x9c>
    1960:	80 81       	ld	r24, Z
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	08 f4       	brcc	.+2      	; 0x1968 <__fpcmp_parts_f+0x16>
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <__fpcmp_parts_f+0x9c>
    1968:	94 30       	cpi	r25, 0x04	; 4
    196a:	51 f4       	brne	.+20     	; 0x1980 <__fpcmp_parts_f+0x2e>
    196c:	11 96       	adiw	r26, 0x01	; 1
    196e:	1c 91       	ld	r17, X
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	99 f5       	brne	.+102    	; 0x19da <__fpcmp_parts_f+0x88>
    1974:	81 81       	ldd	r24, Z+1	; 0x01
    1976:	68 2f       	mov	r22, r24
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	61 1b       	sub	r22, r17
    197c:	71 09       	sbc	r23, r1
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <__fpcmp_parts_f+0xac>
    1980:	84 30       	cpi	r24, 0x04	; 4
    1982:	21 f0       	breq	.+8      	; 0x198c <__fpcmp_parts_f+0x3a>
    1984:	92 30       	cpi	r25, 0x02	; 2
    1986:	31 f4       	brne	.+12     	; 0x1994 <__fpcmp_parts_f+0x42>
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	b9 f1       	breq	.+110    	; 0x19fa <__fpcmp_parts_f+0xa8>
    198c:	81 81       	ldd	r24, Z+1	; 0x01
    198e:	88 23       	and	r24, r24
    1990:	89 f1       	breq	.+98     	; 0x19f4 <__fpcmp_parts_f+0xa2>
    1992:	2d c0       	rjmp	.+90     	; 0x19ee <__fpcmp_parts_f+0x9c>
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	1c 91       	ld	r17, X
    1998:	11 97       	sbiw	r26, 0x01	; 1
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	f1 f0       	breq	.+60     	; 0x19da <__fpcmp_parts_f+0x88>
    199e:	81 81       	ldd	r24, Z+1	; 0x01
    19a0:	18 17       	cp	r17, r24
    19a2:	d9 f4       	brne	.+54     	; 0x19da <__fpcmp_parts_f+0x88>
    19a4:	12 96       	adiw	r26, 0x02	; 2
    19a6:	2d 91       	ld	r18, X+
    19a8:	3c 91       	ld	r19, X
    19aa:	13 97       	sbiw	r26, 0x03	; 3
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	82 17       	cp	r24, r18
    19b2:	93 07       	cpc	r25, r19
    19b4:	94 f0       	brlt	.+36     	; 0x19da <__fpcmp_parts_f+0x88>
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	bc f0       	brlt	.+46     	; 0x19ea <__fpcmp_parts_f+0x98>
    19bc:	14 96       	adiw	r26, 0x04	; 4
    19be:	8d 91       	ld	r24, X+
    19c0:	9d 91       	ld	r25, X+
    19c2:	0d 90       	ld	r0, X+
    19c4:	bc 91       	ld	r27, X
    19c6:	a0 2d       	mov	r26, r0
    19c8:	24 81       	ldd	r18, Z+4	; 0x04
    19ca:	35 81       	ldd	r19, Z+5	; 0x05
    19cc:	46 81       	ldd	r20, Z+6	; 0x06
    19ce:	57 81       	ldd	r21, Z+7	; 0x07
    19d0:	28 17       	cp	r18, r24
    19d2:	39 07       	cpc	r19, r25
    19d4:	4a 07       	cpc	r20, r26
    19d6:	5b 07       	cpc	r21, r27
    19d8:	18 f4       	brcc	.+6      	; 0x19e0 <__fpcmp_parts_f+0x8e>
    19da:	11 23       	and	r17, r17
    19dc:	41 f0       	breq	.+16     	; 0x19ee <__fpcmp_parts_f+0x9c>
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <__fpcmp_parts_f+0xa2>
    19e0:	82 17       	cp	r24, r18
    19e2:	93 07       	cpc	r25, r19
    19e4:	a4 07       	cpc	r26, r20
    19e6:	b5 07       	cpc	r27, r21
    19e8:	40 f4       	brcc	.+16     	; 0x19fa <__fpcmp_parts_f+0xa8>
    19ea:	11 23       	and	r17, r17
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <__fpcmp_parts_f+0xa2>
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <__fpcmp_parts_f+0xac>
    19f4:	6f ef       	ldi	r22, 0xFF	; 255
    19f6:	7f ef       	ldi	r23, 0xFF	; 255
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <__fpcmp_parts_f+0xac>
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	cb 01       	movw	r24, r22
    1a00:	1f 91       	pop	r17
    1a02:	08 95       	ret

00001a04 <putchar>:
    1a04:	60 91 30 02 	lds	r22, 0x0230
    1a08:	70 91 31 02 	lds	r23, 0x0231
    1a0c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1a10:	08 95       	ret

00001a12 <sprintf>:
    1a12:	ae e0       	ldi	r26, 0x0E	; 14
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ef e0       	ldi	r30, 0x0F	; 15
    1a18:	fd e0       	ldi	r31, 0x0D	; 13
    1a1a:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__prologue_saves__+0x1c>
    1a1e:	0d 89       	ldd	r16, Y+21	; 0x15
    1a20:	1e 89       	ldd	r17, Y+22	; 0x16
    1a22:	86 e0       	ldi	r24, 0x06	; 6
    1a24:	8c 83       	std	Y+4, r24	; 0x04
    1a26:	1a 83       	std	Y+2, r17	; 0x02
    1a28:	09 83       	std	Y+1, r16	; 0x01
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	9f e7       	ldi	r25, 0x7F	; 127
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	9e 01       	movw	r18, r28
    1a34:	27 5e       	subi	r18, 0xE7	; 231
    1a36:	3f 4f       	sbci	r19, 0xFF	; 255
    1a38:	ce 01       	movw	r24, r28
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	6f 89       	ldd	r22, Y+23	; 0x17
    1a3e:	78 8d       	ldd	r23, Y+24	; 0x18
    1a40:	a9 01       	movw	r20, r18
    1a42:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vfprintf>
    1a46:	2f 81       	ldd	r18, Y+7	; 0x07
    1a48:	38 85       	ldd	r19, Y+8	; 0x08
    1a4a:	02 0f       	add	r16, r18
    1a4c:	13 1f       	adc	r17, r19
    1a4e:	f8 01       	movw	r30, r16
    1a50:	10 82       	st	Z, r1
    1a52:	2e 96       	adiw	r28, 0x0e	; 14
    1a54:	e4 e0       	ldi	r30, 0x04	; 4
    1a56:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__epilogue_restores__+0x1c>

00001a5a <vfprintf>:
    1a5a:	ab e0       	ldi	r26, 0x0B	; 11
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e3       	ldi	r30, 0x33	; 51
    1a60:	fd e0       	ldi	r31, 0x0D	; 13
    1a62:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__prologue_saves__>
    1a66:	3c 01       	movw	r6, r24
    1a68:	2b 01       	movw	r4, r22
    1a6a:	5a 01       	movw	r10, r20
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	17 82       	std	Z+7, r1	; 0x07
    1a70:	16 82       	std	Z+6, r1	; 0x06
    1a72:	83 81       	ldd	r24, Z+3	; 0x03
    1a74:	81 fd       	sbrc	r24, 1
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <vfprintf+0x24>
    1a78:	6f ef       	ldi	r22, 0xFF	; 255
    1a7a:	7f ef       	ldi	r23, 0xFF	; 255
    1a7c:	c6 c1       	rjmp	.+908    	; 0x1e0a <vfprintf+0x3b0>
    1a7e:	9a e0       	ldi	r25, 0x0A	; 10
    1a80:	89 2e       	mov	r8, r25
    1a82:	1e 01       	movw	r2, r28
    1a84:	08 94       	sec
    1a86:	21 1c       	adc	r2, r1
    1a88:	31 1c       	adc	r3, r1
    1a8a:	f3 01       	movw	r30, r6
    1a8c:	23 81       	ldd	r18, Z+3	; 0x03
    1a8e:	f2 01       	movw	r30, r4
    1a90:	23 fd       	sbrc	r18, 3
    1a92:	85 91       	lpm	r24, Z+
    1a94:	23 ff       	sbrs	r18, 3
    1a96:	81 91       	ld	r24, Z+
    1a98:	2f 01       	movw	r4, r30
    1a9a:	88 23       	and	r24, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <vfprintf+0x46>
    1a9e:	b2 c1       	rjmp	.+868    	; 0x1e04 <vfprintf+0x3aa>
    1aa0:	85 32       	cpi	r24, 0x25	; 37
    1aa2:	39 f4       	brne	.+14     	; 0x1ab2 <vfprintf+0x58>
    1aa4:	23 fd       	sbrc	r18, 3
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	23 ff       	sbrs	r18, 3
    1aaa:	81 91       	ld	r24, Z+
    1aac:	2f 01       	movw	r4, r30
    1aae:	85 32       	cpi	r24, 0x25	; 37
    1ab0:	29 f4       	brne	.+10     	; 0x1abc <vfprintf+0x62>
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	b3 01       	movw	r22, r6
    1ab6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1aba:	e7 cf       	rjmp	.-50     	; 0x1a8a <vfprintf+0x30>
    1abc:	98 2f       	mov	r25, r24
    1abe:	ff 24       	eor	r15, r15
    1ac0:	ee 24       	eor	r14, r14
    1ac2:	99 24       	eor	r9, r9
    1ac4:	ff e1       	ldi	r31, 0x1F	; 31
    1ac6:	ff 15       	cp	r31, r15
    1ac8:	d0 f0       	brcs	.+52     	; 0x1afe <vfprintf+0xa4>
    1aca:	9b 32       	cpi	r25, 0x2B	; 43
    1acc:	69 f0       	breq	.+26     	; 0x1ae8 <vfprintf+0x8e>
    1ace:	9c 32       	cpi	r25, 0x2C	; 44
    1ad0:	28 f4       	brcc	.+10     	; 0x1adc <vfprintf+0x82>
    1ad2:	90 32       	cpi	r25, 0x20	; 32
    1ad4:	59 f0       	breq	.+22     	; 0x1aec <vfprintf+0x92>
    1ad6:	93 32       	cpi	r25, 0x23	; 35
    1ad8:	91 f4       	brne	.+36     	; 0x1afe <vfprintf+0xa4>
    1ada:	0e c0       	rjmp	.+28     	; 0x1af8 <vfprintf+0x9e>
    1adc:	9d 32       	cpi	r25, 0x2D	; 45
    1ade:	49 f0       	breq	.+18     	; 0x1af2 <vfprintf+0x98>
    1ae0:	90 33       	cpi	r25, 0x30	; 48
    1ae2:	69 f4       	brne	.+26     	; 0x1afe <vfprintf+0xa4>
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	24 c0       	rjmp	.+72     	; 0x1b30 <vfprintf+0xd6>
    1ae8:	52 e0       	ldi	r21, 0x02	; 2
    1aea:	f5 2a       	or	r15, r21
    1aec:	84 e0       	ldi	r24, 0x04	; 4
    1aee:	f8 2a       	or	r15, r24
    1af0:	28 c0       	rjmp	.+80     	; 0x1b42 <vfprintf+0xe8>
    1af2:	98 e0       	ldi	r25, 0x08	; 8
    1af4:	f9 2a       	or	r15, r25
    1af6:	25 c0       	rjmp	.+74     	; 0x1b42 <vfprintf+0xe8>
    1af8:	e0 e1       	ldi	r30, 0x10	; 16
    1afa:	fe 2a       	or	r15, r30
    1afc:	22 c0       	rjmp	.+68     	; 0x1b42 <vfprintf+0xe8>
    1afe:	f7 fc       	sbrc	r15, 7
    1b00:	29 c0       	rjmp	.+82     	; 0x1b54 <vfprintf+0xfa>
    1b02:	89 2f       	mov	r24, r25
    1b04:	80 53       	subi	r24, 0x30	; 48
    1b06:	8a 30       	cpi	r24, 0x0A	; 10
    1b08:	70 f4       	brcc	.+28     	; 0x1b26 <vfprintf+0xcc>
    1b0a:	f6 fe       	sbrs	r15, 6
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <vfprintf+0xbe>
    1b0e:	98 9c       	mul	r9, r8
    1b10:	90 2c       	mov	r9, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	98 0e       	add	r9, r24
    1b16:	15 c0       	rjmp	.+42     	; 0x1b42 <vfprintf+0xe8>
    1b18:	e8 9c       	mul	r14, r8
    1b1a:	e0 2c       	mov	r14, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	e8 0e       	add	r14, r24
    1b20:	f0 e2       	ldi	r31, 0x20	; 32
    1b22:	ff 2a       	or	r15, r31
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <vfprintf+0xe8>
    1b26:	9e 32       	cpi	r25, 0x2E	; 46
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <vfprintf+0xda>
    1b2a:	f6 fc       	sbrc	r15, 6
    1b2c:	6b c1       	rjmp	.+726    	; 0x1e04 <vfprintf+0x3aa>
    1b2e:	40 e4       	ldi	r20, 0x40	; 64
    1b30:	f4 2a       	or	r15, r20
    1b32:	07 c0       	rjmp	.+14     	; 0x1b42 <vfprintf+0xe8>
    1b34:	9c 36       	cpi	r25, 0x6C	; 108
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <vfprintf+0xe4>
    1b38:	50 e8       	ldi	r21, 0x80	; 128
    1b3a:	f5 2a       	or	r15, r21
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <vfprintf+0xe8>
    1b3e:	98 36       	cpi	r25, 0x68	; 104
    1b40:	49 f4       	brne	.+18     	; 0x1b54 <vfprintf+0xfa>
    1b42:	f2 01       	movw	r30, r4
    1b44:	23 fd       	sbrc	r18, 3
    1b46:	95 91       	lpm	r25, Z+
    1b48:	23 ff       	sbrs	r18, 3
    1b4a:	91 91       	ld	r25, Z+
    1b4c:	2f 01       	movw	r4, r30
    1b4e:	99 23       	and	r25, r25
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <vfprintf+0xfa>
    1b52:	b8 cf       	rjmp	.-144    	; 0x1ac4 <vfprintf+0x6a>
    1b54:	89 2f       	mov	r24, r25
    1b56:	85 54       	subi	r24, 0x45	; 69
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	18 f0       	brcs	.+6      	; 0x1b62 <vfprintf+0x108>
    1b5c:	80 52       	subi	r24, 0x20	; 32
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	38 f4       	brcc	.+14     	; 0x1b70 <vfprintf+0x116>
    1b62:	44 e0       	ldi	r20, 0x04	; 4
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	a4 0e       	add	r10, r20
    1b68:	b5 1e       	adc	r11, r21
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	59 83       	std	Y+1, r21	; 0x01
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <vfprintf+0x134>
    1b70:	93 36       	cpi	r25, 0x63	; 99
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <vfprintf+0x126>
    1b74:	93 37       	cpi	r25, 0x73	; 115
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <vfprintf+0x13c>
    1b78:	93 35       	cpi	r25, 0x53	; 83
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <vfprintf+0x124>
    1b7c:	56 c0       	rjmp	.+172    	; 0x1c2a <vfprintf+0x1d0>
    1b7e:	20 c0       	rjmp	.+64     	; 0x1bc0 <vfprintf+0x166>
    1b80:	f5 01       	movw	r30, r10
    1b82:	80 81       	ld	r24, Z
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	42 e0       	ldi	r20, 0x02	; 2
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	a4 0e       	add	r10, r20
    1b8c:	b5 1e       	adc	r11, r21
    1b8e:	61 01       	movw	r12, r2
    1b90:	01 e0       	ldi	r16, 0x01	; 1
    1b92:	10 e0       	ldi	r17, 0x00	; 0
    1b94:	12 c0       	rjmp	.+36     	; 0x1bba <vfprintf+0x160>
    1b96:	f5 01       	movw	r30, r10
    1b98:	c0 80       	ld	r12, Z
    1b9a:	d1 80       	ldd	r13, Z+1	; 0x01
    1b9c:	f6 fc       	sbrc	r15, 6
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <vfprintf+0x14c>
    1ba0:	6f ef       	ldi	r22, 0xFF	; 255
    1ba2:	7f ef       	ldi	r23, 0xFF	; 255
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfprintf+0x150>
    1ba6:	69 2d       	mov	r22, r9
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	42 e0       	ldi	r20, 0x02	; 2
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	a4 0e       	add	r10, r20
    1bb0:	b5 1e       	adc	r11, r21
    1bb2:	c6 01       	movw	r24, r12
    1bb4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <strnlen>
    1bb8:	8c 01       	movw	r16, r24
    1bba:	5f e7       	ldi	r21, 0x7F	; 127
    1bbc:	f5 22       	and	r15, r21
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <vfprintf+0x18e>
    1bc0:	f5 01       	movw	r30, r10
    1bc2:	c0 80       	ld	r12, Z
    1bc4:	d1 80       	ldd	r13, Z+1	; 0x01
    1bc6:	f6 fc       	sbrc	r15, 6
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <vfprintf+0x176>
    1bca:	6f ef       	ldi	r22, 0xFF	; 255
    1bcc:	7f ef       	ldi	r23, 0xFF	; 255
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <vfprintf+0x17a>
    1bd0:	69 2d       	mov	r22, r9
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	42 e0       	ldi	r20, 0x02	; 2
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	a4 0e       	add	r10, r20
    1bda:	b5 1e       	adc	r11, r21
    1bdc:	c6 01       	movw	r24, r12
    1bde:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <strnlen_P>
    1be2:	8c 01       	movw	r16, r24
    1be4:	50 e8       	ldi	r21, 0x80	; 128
    1be6:	f5 2a       	or	r15, r21
    1be8:	f3 fe       	sbrs	r15, 3
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <vfprintf+0x1a0>
    1bec:	1a c0       	rjmp	.+52     	; 0x1c22 <vfprintf+0x1c8>
    1bee:	80 e2       	ldi	r24, 0x20	; 32
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	b3 01       	movw	r22, r6
    1bf4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1bf8:	ea 94       	dec	r14
    1bfa:	8e 2d       	mov	r24, r14
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	08 17       	cp	r16, r24
    1c00:	19 07       	cpc	r17, r25
    1c02:	a8 f3       	brcs	.-22     	; 0x1bee <vfprintf+0x194>
    1c04:	0e c0       	rjmp	.+28     	; 0x1c22 <vfprintf+0x1c8>
    1c06:	f6 01       	movw	r30, r12
    1c08:	f7 fc       	sbrc	r15, 7
    1c0a:	85 91       	lpm	r24, Z+
    1c0c:	f7 fe       	sbrs	r15, 7
    1c0e:	81 91       	ld	r24, Z+
    1c10:	6f 01       	movw	r12, r30
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	b3 01       	movw	r22, r6
    1c16:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1c1a:	e1 10       	cpse	r14, r1
    1c1c:	ea 94       	dec	r14
    1c1e:	01 50       	subi	r16, 0x01	; 1
    1c20:	10 40       	sbci	r17, 0x00	; 0
    1c22:	01 15       	cp	r16, r1
    1c24:	11 05       	cpc	r17, r1
    1c26:	79 f7       	brne	.-34     	; 0x1c06 <vfprintf+0x1ac>
    1c28:	ea c0       	rjmp	.+468    	; 0x1dfe <vfprintf+0x3a4>
    1c2a:	94 36       	cpi	r25, 0x64	; 100
    1c2c:	11 f0       	breq	.+4      	; 0x1c32 <vfprintf+0x1d8>
    1c2e:	99 36       	cpi	r25, 0x69	; 105
    1c30:	69 f5       	brne	.+90     	; 0x1c8c <vfprintf+0x232>
    1c32:	f7 fe       	sbrs	r15, 7
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <vfprintf+0x1ec>
    1c36:	f5 01       	movw	r30, r10
    1c38:	20 81       	ld	r18, Z
    1c3a:	31 81       	ldd	r19, Z+1	; 0x01
    1c3c:	42 81       	ldd	r20, Z+2	; 0x02
    1c3e:	53 81       	ldd	r21, Z+3	; 0x03
    1c40:	84 e0       	ldi	r24, 0x04	; 4
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0a c0       	rjmp	.+20     	; 0x1c5a <vfprintf+0x200>
    1c46:	f5 01       	movw	r30, r10
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	44 27       	eor	r20, r20
    1c50:	37 fd       	sbrc	r19, 7
    1c52:	40 95       	com	r20
    1c54:	54 2f       	mov	r21, r20
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a8 0e       	add	r10, r24
    1c5c:	b9 1e       	adc	r11, r25
    1c5e:	9f e6       	ldi	r25, 0x6F	; 111
    1c60:	f9 22       	and	r15, r25
    1c62:	57 ff       	sbrs	r21, 7
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <vfprintf+0x21e>
    1c66:	50 95       	com	r21
    1c68:	40 95       	com	r20
    1c6a:	30 95       	com	r19
    1c6c:	21 95       	neg	r18
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	4f 4f       	sbci	r20, 0xFF	; 255
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	e0 e8       	ldi	r30, 0x80	; 128
    1c76:	fe 2a       	or	r15, r30
    1c78:	ca 01       	movw	r24, r20
    1c7a:	b9 01       	movw	r22, r18
    1c7c:	a1 01       	movw	r20, r2
    1c7e:	2a e0       	ldi	r18, 0x0A	; 10
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__ultoa_invert>
    1c86:	d8 2e       	mov	r13, r24
    1c88:	d2 18       	sub	r13, r2
    1c8a:	40 c0       	rjmp	.+128    	; 0x1d0c <vfprintf+0x2b2>
    1c8c:	95 37       	cpi	r25, 0x75	; 117
    1c8e:	29 f4       	brne	.+10     	; 0x1c9a <vfprintf+0x240>
    1c90:	1f 2d       	mov	r17, r15
    1c92:	1f 7e       	andi	r17, 0xEF	; 239
    1c94:	2a e0       	ldi	r18, 0x0A	; 10
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	1d c0       	rjmp	.+58     	; 0x1cd4 <vfprintf+0x27a>
    1c9a:	1f 2d       	mov	r17, r15
    1c9c:	19 7f       	andi	r17, 0xF9	; 249
    1c9e:	9f 36       	cpi	r25, 0x6F	; 111
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <vfprintf+0x260>
    1ca2:	90 37       	cpi	r25, 0x70	; 112
    1ca4:	20 f4       	brcc	.+8      	; 0x1cae <vfprintf+0x254>
    1ca6:	98 35       	cpi	r25, 0x58	; 88
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <vfprintf+0x252>
    1caa:	ac c0       	rjmp	.+344    	; 0x1e04 <vfprintf+0x3aa>
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <vfprintf+0x272>
    1cae:	90 37       	cpi	r25, 0x70	; 112
    1cb0:	39 f0       	breq	.+14     	; 0x1cc0 <vfprintf+0x266>
    1cb2:	98 37       	cpi	r25, 0x78	; 120
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <vfprintf+0x25e>
    1cb6:	a6 c0       	rjmp	.+332    	; 0x1e04 <vfprintf+0x3aa>
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <vfprintf+0x268>
    1cba:	28 e0       	ldi	r18, 0x08	; 8
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	0a c0       	rjmp	.+20     	; 0x1cd4 <vfprintf+0x27a>
    1cc0:	10 61       	ori	r17, 0x10	; 16
    1cc2:	14 fd       	sbrc	r17, 4
    1cc4:	14 60       	ori	r17, 0x04	; 4
    1cc6:	20 e1       	ldi	r18, 0x10	; 16
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <vfprintf+0x27a>
    1ccc:	14 fd       	sbrc	r17, 4
    1cce:	16 60       	ori	r17, 0x06	; 6
    1cd0:	20 e1       	ldi	r18, 0x10	; 16
    1cd2:	32 e0       	ldi	r19, 0x02	; 2
    1cd4:	17 ff       	sbrs	r17, 7
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <vfprintf+0x28e>
    1cd8:	f5 01       	movw	r30, r10
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	44 e0       	ldi	r20, 0x04	; 4
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	08 c0       	rjmp	.+16     	; 0x1cf8 <vfprintf+0x29e>
    1ce8:	f5 01       	movw	r30, r10
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	bc 01       	movw	r22, r24
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	42 e0       	ldi	r20, 0x02	; 2
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	a4 0e       	add	r10, r20
    1cfa:	b5 1e       	adc	r11, r21
    1cfc:	a1 01       	movw	r20, r2
    1cfe:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__ultoa_invert>
    1d02:	d8 2e       	mov	r13, r24
    1d04:	d2 18       	sub	r13, r2
    1d06:	8f e7       	ldi	r24, 0x7F	; 127
    1d08:	f8 2e       	mov	r15, r24
    1d0a:	f1 22       	and	r15, r17
    1d0c:	f6 fe       	sbrs	r15, 6
    1d0e:	0b c0       	rjmp	.+22     	; 0x1d26 <vfprintf+0x2cc>
    1d10:	5e ef       	ldi	r21, 0xFE	; 254
    1d12:	f5 22       	and	r15, r21
    1d14:	d9 14       	cp	r13, r9
    1d16:	38 f4       	brcc	.+14     	; 0x1d26 <vfprintf+0x2cc>
    1d18:	f4 fe       	sbrs	r15, 4
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <vfprintf+0x2d0>
    1d1c:	f2 fc       	sbrc	r15, 2
    1d1e:	05 c0       	rjmp	.+10     	; 0x1d2a <vfprintf+0x2d0>
    1d20:	8f ee       	ldi	r24, 0xEF	; 239
    1d22:	f8 22       	and	r15, r24
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <vfprintf+0x2d0>
    1d26:	1d 2d       	mov	r17, r13
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vfprintf+0x2d2>
    1d2a:	19 2d       	mov	r17, r9
    1d2c:	f4 fe       	sbrs	r15, 4
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <vfprintf+0x2f0>
    1d30:	fe 01       	movw	r30, r28
    1d32:	ed 0d       	add	r30, r13
    1d34:	f1 1d       	adc	r31, r1
    1d36:	80 81       	ld	r24, Z
    1d38:	80 33       	cpi	r24, 0x30	; 48
    1d3a:	19 f4       	brne	.+6      	; 0x1d42 <vfprintf+0x2e8>
    1d3c:	99 ee       	ldi	r25, 0xE9	; 233
    1d3e:	f9 22       	and	r15, r25
    1d40:	08 c0       	rjmp	.+16     	; 0x1d52 <vfprintf+0x2f8>
    1d42:	1f 5f       	subi	r17, 0xFF	; 255
    1d44:	f2 fe       	sbrs	r15, 2
    1d46:	05 c0       	rjmp	.+10     	; 0x1d52 <vfprintf+0x2f8>
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <vfprintf+0x2f6>
    1d4a:	8f 2d       	mov	r24, r15
    1d4c:	86 78       	andi	r24, 0x86	; 134
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <vfprintf+0x2f8>
    1d50:	1f 5f       	subi	r17, 0xFF	; 255
    1d52:	0f 2d       	mov	r16, r15
    1d54:	f3 fc       	sbrc	r15, 3
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <vfprintf+0x326>
    1d58:	f0 fe       	sbrs	r15, 0
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <vfprintf+0x320>
    1d5c:	1e 15       	cp	r17, r14
    1d5e:	10 f0       	brcs	.+4      	; 0x1d64 <vfprintf+0x30a>
    1d60:	9d 2c       	mov	r9, r13
    1d62:	0b c0       	rjmp	.+22     	; 0x1d7a <vfprintf+0x320>
    1d64:	9d 2c       	mov	r9, r13
    1d66:	9e 0c       	add	r9, r14
    1d68:	91 1a       	sub	r9, r17
    1d6a:	1e 2d       	mov	r17, r14
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <vfprintf+0x320>
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	b3 01       	movw	r22, r6
    1d74:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1d78:	1f 5f       	subi	r17, 0xFF	; 255
    1d7a:	1e 15       	cp	r17, r14
    1d7c:	c0 f3       	brcs	.-16     	; 0x1d6e <vfprintf+0x314>
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <vfprintf+0x32e>
    1d80:	1e 15       	cp	r17, r14
    1d82:	10 f4       	brcc	.+4      	; 0x1d88 <vfprintf+0x32e>
    1d84:	e1 1a       	sub	r14, r17
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <vfprintf+0x330>
    1d88:	ee 24       	eor	r14, r14
    1d8a:	04 ff       	sbrs	r16, 4
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <vfprintf+0x352>
    1d8e:	80 e3       	ldi	r24, 0x30	; 48
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	b3 01       	movw	r22, r6
    1d94:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1d98:	02 ff       	sbrs	r16, 2
    1d9a:	1d c0       	rjmp	.+58     	; 0x1dd6 <vfprintf+0x37c>
    1d9c:	01 fd       	sbrc	r16, 1
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <vfprintf+0x34c>
    1da0:	88 e7       	ldi	r24, 0x78	; 120
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e c0       	rjmp	.+28     	; 0x1dc2 <vfprintf+0x368>
    1da6:	88 e5       	ldi	r24, 0x58	; 88
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0b c0       	rjmp	.+22     	; 0x1dc2 <vfprintf+0x368>
    1dac:	80 2f       	mov	r24, r16
    1dae:	86 78       	andi	r24, 0x86	; 134
    1db0:	91 f0       	breq	.+36     	; 0x1dd6 <vfprintf+0x37c>
    1db2:	01 ff       	sbrs	r16, 1
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <vfprintf+0x360>
    1db6:	8b e2       	ldi	r24, 0x2B	; 43
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <vfprintf+0x362>
    1dba:	80 e2       	ldi	r24, 0x20	; 32
    1dbc:	f7 fc       	sbrc	r15, 7
    1dbe:	8d e2       	ldi	r24, 0x2D	; 45
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	b3 01       	movw	r22, r6
    1dc4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <vfprintf+0x37c>
    1dca:	80 e3       	ldi	r24, 0x30	; 48
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	b3 01       	movw	r22, r6
    1dd0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1dd4:	9a 94       	dec	r9
    1dd6:	d9 14       	cp	r13, r9
    1dd8:	c0 f3       	brcs	.-16     	; 0x1dca <vfprintf+0x370>
    1dda:	da 94       	dec	r13
    1ddc:	f1 01       	movw	r30, r2
    1dde:	ed 0d       	add	r30, r13
    1de0:	f1 1d       	adc	r31, r1
    1de2:	80 81       	ld	r24, Z
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	b3 01       	movw	r22, r6
    1de8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1dec:	dd 20       	and	r13, r13
    1dee:	a9 f7       	brne	.-22     	; 0x1dda <vfprintf+0x380>
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <vfprintf+0x3a4>
    1df2:	80 e2       	ldi	r24, 0x20	; 32
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	b3 01       	movw	r22, r6
    1df8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
    1dfc:	ea 94       	dec	r14
    1dfe:	ee 20       	and	r14, r14
    1e00:	c1 f7       	brne	.-16     	; 0x1df2 <vfprintf+0x398>
    1e02:	43 ce       	rjmp	.-890    	; 0x1a8a <vfprintf+0x30>
    1e04:	f3 01       	movw	r30, r6
    1e06:	66 81       	ldd	r22, Z+6	; 0x06
    1e08:	77 81       	ldd	r23, Z+7	; 0x07
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	2b 96       	adiw	r28, 0x0b	; 11
    1e0e:	e2 e1       	ldi	r30, 0x12	; 18
    1e10:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__epilogue_restores__>

00001e14 <strnlen_P>:
    1e14:	fc 01       	movw	r30, r24
    1e16:	05 90       	lpm	r0, Z+
    1e18:	61 50       	subi	r22, 0x01	; 1
    1e1a:	70 40       	sbci	r23, 0x00	; 0
    1e1c:	01 10       	cpse	r0, r1
    1e1e:	d8 f7       	brcc	.-10     	; 0x1e16 <strnlen_P+0x2>
    1e20:	80 95       	com	r24
    1e22:	90 95       	com	r25
    1e24:	8e 0f       	add	r24, r30
    1e26:	9f 1f       	adc	r25, r31
    1e28:	08 95       	ret

00001e2a <strnlen>:
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	61 50       	subi	r22, 0x01	; 1
    1e2e:	70 40       	sbci	r23, 0x00	; 0
    1e30:	01 90       	ld	r0, Z+
    1e32:	01 10       	cpse	r0, r1
    1e34:	d8 f7       	brcc	.-10     	; 0x1e2c <strnlen+0x2>
    1e36:	80 95       	com	r24
    1e38:	90 95       	com	r25
    1e3a:	8e 0f       	add	r24, r30
    1e3c:	9f 1f       	adc	r25, r31
    1e3e:	08 95       	ret

00001e40 <fputc>:
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	8c 01       	movw	r16, r24
    1e4a:	eb 01       	movw	r28, r22
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	81 ff       	sbrs	r24, 1
    1e50:	1b c0       	rjmp	.+54     	; 0x1e88 <fputc+0x48>
    1e52:	82 ff       	sbrs	r24, 2
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <fputc+0x30>
    1e56:	2e 81       	ldd	r18, Y+6	; 0x06
    1e58:	3f 81       	ldd	r19, Y+7	; 0x07
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5e:	28 17       	cp	r18, r24
    1e60:	39 07       	cpc	r19, r25
    1e62:	64 f4       	brge	.+24     	; 0x1e7c <fputc+0x3c>
    1e64:	e8 81       	ld	r30, Y
    1e66:	f9 81       	ldd	r31, Y+1	; 0x01
    1e68:	01 93       	st	Z+, r16
    1e6a:	f9 83       	std	Y+1, r31	; 0x01
    1e6c:	e8 83       	st	Y, r30
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <fputc+0x3c>
    1e70:	e8 85       	ldd	r30, Y+8	; 0x08
    1e72:	f9 85       	ldd	r31, Y+9	; 0x09
    1e74:	80 2f       	mov	r24, r16
    1e76:	09 95       	icall
    1e78:	89 2b       	or	r24, r25
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <fputc+0x48>
    1e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	9f 83       	std	Y+7, r25	; 0x07
    1e84:	8e 83       	std	Y+6, r24	; 0x06
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <fputc+0x4c>
    1e88:	0f ef       	ldi	r16, 0xFF	; 255
    1e8a:	1f ef       	ldi	r17, 0xFF	; 255
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	08 95       	ret

00001e98 <__ultoa_invert>:
    1e98:	fa 01       	movw	r30, r20
    1e9a:	aa 27       	eor	r26, r26
    1e9c:	28 30       	cpi	r18, 0x08	; 8
    1e9e:	51 f1       	breq	.+84     	; 0x1ef4 <__ultoa_invert+0x5c>
    1ea0:	20 31       	cpi	r18, 0x10	; 16
    1ea2:	81 f1       	breq	.+96     	; 0x1f04 <__ultoa_invert+0x6c>
    1ea4:	e8 94       	clt
    1ea6:	6f 93       	push	r22
    1ea8:	6e 7f       	andi	r22, 0xFE	; 254
    1eaa:	6e 5f       	subi	r22, 0xFE	; 254
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	af 4f       	sbci	r26, 0xFF	; 255
    1eb4:	b1 e0       	ldi	r27, 0x01	; 1
    1eb6:	3e d0       	rcall	.+124    	; 0x1f34 <__ultoa_invert+0x9c>
    1eb8:	b4 e0       	ldi	r27, 0x04	; 4
    1eba:	3c d0       	rcall	.+120    	; 0x1f34 <__ultoa_invert+0x9c>
    1ebc:	67 0f       	add	r22, r23
    1ebe:	78 1f       	adc	r23, r24
    1ec0:	89 1f       	adc	r24, r25
    1ec2:	9a 1f       	adc	r25, r26
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	68 0f       	add	r22, r24
    1ec8:	79 1f       	adc	r23, r25
    1eca:	8a 1f       	adc	r24, r26
    1ecc:	91 1d       	adc	r25, r1
    1ece:	a1 1d       	adc	r26, r1
    1ed0:	6a 0f       	add	r22, r26
    1ed2:	71 1d       	adc	r23, r1
    1ed4:	81 1d       	adc	r24, r1
    1ed6:	91 1d       	adc	r25, r1
    1ed8:	a1 1d       	adc	r26, r1
    1eda:	20 d0       	rcall	.+64     	; 0x1f1c <__ultoa_invert+0x84>
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <__ultoa_invert+0x48>
    1ede:	68 94       	set
    1ee0:	3f 91       	pop	r19
    1ee2:	2a e0       	ldi	r18, 0x0A	; 10
    1ee4:	26 9f       	mul	r18, r22
    1ee6:	11 24       	eor	r1, r1
    1ee8:	30 19       	sub	r19, r0
    1eea:	30 5d       	subi	r19, 0xD0	; 208
    1eec:	31 93       	st	Z+, r19
    1eee:	de f6       	brtc	.-74     	; 0x1ea6 <__ultoa_invert+0xe>
    1ef0:	cf 01       	movw	r24, r30
    1ef2:	08 95       	ret
    1ef4:	46 2f       	mov	r20, r22
    1ef6:	47 70       	andi	r20, 0x07	; 7
    1ef8:	40 5d       	subi	r20, 0xD0	; 208
    1efa:	41 93       	st	Z+, r20
    1efc:	b3 e0       	ldi	r27, 0x03	; 3
    1efe:	0f d0       	rcall	.+30     	; 0x1f1e <__ultoa_invert+0x86>
    1f00:	c9 f7       	brne	.-14     	; 0x1ef4 <__ultoa_invert+0x5c>
    1f02:	f6 cf       	rjmp	.-20     	; 0x1ef0 <__ultoa_invert+0x58>
    1f04:	46 2f       	mov	r20, r22
    1f06:	4f 70       	andi	r20, 0x0F	; 15
    1f08:	40 5d       	subi	r20, 0xD0	; 208
    1f0a:	4a 33       	cpi	r20, 0x3A	; 58
    1f0c:	18 f0       	brcs	.+6      	; 0x1f14 <__ultoa_invert+0x7c>
    1f0e:	49 5d       	subi	r20, 0xD9	; 217
    1f10:	31 fd       	sbrc	r19, 1
    1f12:	40 52       	subi	r20, 0x20	; 32
    1f14:	41 93       	st	Z+, r20
    1f16:	02 d0       	rcall	.+4      	; 0x1f1c <__ultoa_invert+0x84>
    1f18:	a9 f7       	brne	.-22     	; 0x1f04 <__ultoa_invert+0x6c>
    1f1a:	ea cf       	rjmp	.-44     	; 0x1ef0 <__ultoa_invert+0x58>
    1f1c:	b4 e0       	ldi	r27, 0x04	; 4
    1f1e:	a6 95       	lsr	r26
    1f20:	97 95       	ror	r25
    1f22:	87 95       	ror	r24
    1f24:	77 95       	ror	r23
    1f26:	67 95       	ror	r22
    1f28:	ba 95       	dec	r27
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <__ultoa_invert+0x86>
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	61 05       	cpc	r22, r1
    1f30:	71 05       	cpc	r23, r1
    1f32:	08 95       	ret
    1f34:	9b 01       	movw	r18, r22
    1f36:	ac 01       	movw	r20, r24
    1f38:	0a 2e       	mov	r0, r26
    1f3a:	06 94       	lsr	r0
    1f3c:	57 95       	ror	r21
    1f3e:	47 95       	ror	r20
    1f40:	37 95       	ror	r19
    1f42:	27 95       	ror	r18
    1f44:	ba 95       	dec	r27
    1f46:	c9 f7       	brne	.-14     	; 0x1f3a <__ultoa_invert+0xa2>
    1f48:	62 0f       	add	r22, r18
    1f4a:	73 1f       	adc	r23, r19
    1f4c:	84 1f       	adc	r24, r20
    1f4e:	95 1f       	adc	r25, r21
    1f50:	a0 1d       	adc	r26, r0
    1f52:	08 95       	ret

00001f54 <__prologue_saves__>:
    1f54:	2f 92       	push	r2
    1f56:	3f 92       	push	r3
    1f58:	4f 92       	push	r4
    1f5a:	5f 92       	push	r5
    1f5c:	6f 92       	push	r6
    1f5e:	7f 92       	push	r7
    1f60:	8f 92       	push	r8
    1f62:	9f 92       	push	r9
    1f64:	af 92       	push	r10
    1f66:	bf 92       	push	r11
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	ca 1b       	sub	r28, r26
    1f7e:	db 0b       	sbc	r29, r27
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	09 94       	ijmp

00001f8c <__epilogue_restores__>:
    1f8c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f8e:	39 88       	ldd	r3, Y+17	; 0x11
    1f90:	48 88       	ldd	r4, Y+16	; 0x10
    1f92:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f94:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f96:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f98:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f9e:	b9 84       	ldd	r11, Y+9	; 0x09
    1fa0:	c8 84       	ldd	r12, Y+8	; 0x08
    1fa2:	df 80       	ldd	r13, Y+7	; 0x07
    1fa4:	ee 80       	ldd	r14, Y+6	; 0x06
    1fa6:	fd 80       	ldd	r15, Y+5	; 0x05
    1fa8:	0c 81       	ldd	r16, Y+4	; 0x04
    1faa:	1b 81       	ldd	r17, Y+3	; 0x03
    1fac:	aa 81       	ldd	r26, Y+2	; 0x02
    1fae:	b9 81       	ldd	r27, Y+1	; 0x01
    1fb0:	ce 0f       	add	r28, r30
    1fb2:	d1 1d       	adc	r29, r1
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	ed 01       	movw	r28, r26
    1fc0:	08 95       	ret

00001fc2 <_exit>:
    1fc2:	f8 94       	cli

00001fc4 <__stop_program>:
    1fc4:	ff cf       	rjmp	.-2      	; 0x1fc4 <__stop_program>
