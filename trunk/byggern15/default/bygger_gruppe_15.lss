
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00002728  000027bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002a4  008002a4  00002960  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6a  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  00003aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001090  00000000  00000000  000041b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00005248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_1>
       8:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e2       	ldi	r30, 0x28	; 40
      84:	f7 e2       	ldi	r31, 0x27	; 39
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a4 3a       	cpi	r26, 0xA4	; 164
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a4 ea       	ldi	r26, 0xA4	; 164
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ae 3a       	cpi	r26, 0xAE	; 174
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 92 13 	jmp	0x2724	; 0x2724 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 88 00 	call	0x110	; 0x110 <init_UART>
	init_SRAM();
      c2:	0e 94 3f 01 	call	0x27e	; 0x27e <init_SRAM>
	init_joystick();
      c6:	0e 94 35 02 	call	0x46a	; 0x46a <init_joystick>
	SPI_MasterInit();	
      ca:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_MasterInit>
	CAN_init();
      ce:	0e 94 24 03 	call	0x648	; 0x648 <CAN_init>



	printf("Initialization complete\n");
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <puts>


	printf("CAN_test: %d", CAN_test());
      da:	0e 94 3e 03 	call	0x67c	; 0x67c <CAN_test>
      de:	9c 01       	movw	r18, r24
      e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x34>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x36>
      e4:	ed b7       	in	r30, 0x3d	; 61
      e6:	fe b7       	in	r31, 0x3e	; 62
      e8:	31 96       	adiw	r30, 0x01	; 1
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	91 83       	std	Z+1, r25	; 0x01
      f0:	80 83       	st	Z, r24
      f2:	33 83       	std	Z+3, r19	; 0x03
      f4:	22 83       	std	Z+2, r18	; 0x02
      f6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0

	
	
	

	butterfly_menu();
     102:	0e 94 9a 05 	call	0xb34	; 0xb34 <butterfly_menu>

	return 0;	
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
	
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <init_UART>:
unsigned char buffer_stop;
unsigned char buffer_used;
*/

// Initialize UART interface
int init_UART(unsigned int baud){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9f 83       	std	Y+7, r25	; 0x07
     126:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	9f 81       	ldd	r25, Y+7	; 0x07
     12c:	cc 01       	movw	r24, r24
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	8a 83       	std	Y+2, r24	; 0x02
     134:	9b 83       	std	Y+3, r25	; 0x03
     136:	ac 83       	std	Y+4, r26	; 0x04
     138:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	ac 81       	ldd	r26, Y+4	; 0x04
     140:	bd 81       	ldd	r27, Y+5	; 0x05
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	aa 1f       	adc	r26, r26
     148:	bb 1f       	adc	r27, r27
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	aa 1f       	adc	r26, r26
     158:	bb 1f       	adc	r27, r27
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	9c 01       	movw	r18, r24
     164:	ad 01       	movw	r20, r26
     166:	8a ef       	ldi	r24, 0xFA	; 250
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	ab e4       	ldi	r26, 0x4B	; 75
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0e 94 39 13 	call	0x2672	; 0x2672 <__udivmodsi4>
     176:	da 01       	movw	r26, r20
     178:	c9 01       	movw	r24, r18
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	a1 09       	sbc	r26, r1
     17e:	b1 09       	sbc	r27, r1
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	ac 83       	std	Y+4, r26	; 0x04
     186:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     188:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	ac 81       	ldd	r26, Y+4	; 0x04
     194:	bd 81       	ldd	r27, Y+5	; 0x05
     196:	89 2f       	mov	r24, r25
     198:	9a 2f       	mov	r25, r26
     19a:	ab 2f       	mov	r26, r27
     19c:	bb 27       	eor	r27, r27
     19e:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     1a0:	e9 e2       	ldi	r30, 0x29	; 41
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     1a8:	ea e2       	ldi	r30, 0x2A	; 42
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stop bit, 1 for 2 stop bit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 number of databits in payload: 011 for 8 bits. S. 192 in data sheet */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	86 60       	ori	r24, 0x06	; 6
     1b4:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	80 62       	ori	r24, 0x20	; 32
     1ba:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     1c2:	e0 e4       	ldi	r30, 0x40	; 64
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     1ca:	87 ef       	ldi	r24, 0xF7	; 247
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	2e e1       	ldi	r18, 0x1E	; 30
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	b9 01       	movw	r22, r18
     1d4:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fdevopen>

	return 0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0

} 
     1dc:	27 96       	adiw	r28, 0x07	; 7
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_put_char>:

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_put_char+0x6>
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	7b 83       	std	Y+3, r23	; 0x03
     1fe:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	31 f4       	brne	.+12     	; 0x212 <UART_put_char+0x24>
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	3b 81       	ldd	r19, Y+3	; 0x03
     20a:	8d e0       	ldi	r24, 0x0D	; 13
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     212:	eb e2       	ldi	r30, 0x2B	; 43
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 72       	andi	r24, 0x20	; 32
     21e:	90 70       	andi	r25, 0x00	; 0
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	b9 f3       	breq	.-18     	; 0x212 <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     224:	ec e2       	ldi	r30, 0x2C	; 44
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	80 83       	st	Z, r24
	return 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
}
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <UART_get_char+0x6>
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     24c:	eb e2       	ldi	r30, 0x2B	; 43
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 23       	and	r24, r24
     254:	dc f7       	brge	.-10     	; 0x24c <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     256:	ec e2       	ldi	r30, 0x2C	; 44
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	8d 30       	cpi	r24, 0x0D	; 13
     262:	11 f4       	brne	.+4      	; 0x268 <UART_get_char+0x2c>
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     268:	ec e2       	ldi	r30, 0x2C	; 44
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <init_SRAM>:
#include <util/delay.h>
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     286:	a5 e5       	ldi	r26, 0x55	; 85
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e5       	ldi	r30, 0x55	; 85
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 6c       	ori	r24, 0xC0	; 192
     292:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     294:	a6 e5       	ldi	r26, 0x56	; 86
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     2a2:	a0 e5       	ldi	r26, 0x50	; 80
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 e5       	ldi	r30, 0x50	; 80
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	65 97       	sbiw	r28, 0x15	; 21
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e1       	ldi	r25, 0x10	; 16
     2ce:	9d 8b       	std	Y+21, r25	; 0x15
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
	printf("Starting...\n");
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <puts>

	int i;
	for(i=0;i<0x800;i++)
     2da:	1b 8a       	std	Y+19, r1	; 0x13
     2dc:	1a 8a       	std	Y+18, r1	; 0x12
     2de:	80 c0       	rjmp	.+256    	; 0x3e0 <SRAM_test+0x12a>
	{
		ram_address[i] = (char)0x83;
     2e0:	2a 89       	ldd	r18, Y+18	; 0x12
     2e2:	3b 89       	ldd	r19, Y+19	; 0x13
     2e4:	8c 89       	ldd	r24, Y+20	; 0x14
     2e6:	9d 89       	ldd	r25, Y+21	; 0x15
     2e8:	fc 01       	movw	r30, r24
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	83 e8       	ldi	r24, 0x83	; 131
     2f0:	80 83       	st	Z, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e4       	ldi	r27, 0x40	; 64
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
     2fc:	9c 87       	std	Y+12, r25	; 0x0c
     2fe:	ad 87       	std	Y+13, r26	; 0x0d
     300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     302:	6b 85       	ldd	r22, Y+11	; 0x0b
     304:	7c 85       	ldd	r23, Y+12	; 0x0c
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	9e 85       	ldd	r25, Y+14	; 0x0e
     30a:	2a e9       	ldi	r18, 0x9A	; 154
     30c:	3b e9       	ldi	r19, 0x9B	; 155
     30e:	49 e9       	ldi	r20, 0x99	; 153
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	8f 83       	std	Y+7, r24	; 0x07
     31c:	98 87       	std	Y+8, r25	; 0x08
     31e:	a9 87       	std	Y+9, r26	; 0x09
     320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     322:	6f 81       	ldd	r22, Y+7	; 0x07
     324:	78 85       	ldd	r23, Y+8	; 0x08
     326:	89 85       	ldd	r24, Y+9	; 0x09
     328:	9a 85       	ldd	r25, Y+10	; 0x0a
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 cd 0c 	call	0x199a	; 0x199a <__ltsf2>
     336:	88 23       	and	r24, r24
     338:	2c f4       	brge	.+10     	; 0x344 <SRAM_test+0x8e>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9e 83       	std	Y+6, r25	; 0x06
     340:	8d 83       	std	Y+5, r24	; 0x05
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <SRAM_test+0x10c>
	else if (__tmp > 65535)
     344:	6f 81       	ldd	r22, Y+7	; 0x07
     346:	78 85       	ldd	r23, Y+8	; 0x08
     348:	89 85       	ldd	r24, Y+9	; 0x09
     34a:	9a 85       	ldd	r25, Y+10	; 0x0a
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	57 e4       	ldi	r21, 0x47	; 71
     354:	0e 94 6d 0c 	call	0x18da	; 0x18da <__gtsf2>
     358:	18 16       	cp	r1, r24
     35a:	4c f5       	brge	.+82     	; 0x3ae <SRAM_test+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35c:	6b 85       	ldd	r22, Y+11	; 0x0b
     35e:	7c 85       	ldd	r23, Y+12	; 0x0c
     360:	8d 85       	ldd	r24, Y+13	; 0x0d
     362:	9e 85       	ldd	r25, Y+14	; 0x0e
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e2       	ldi	r20, 0x20	; 32
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	8d 83       	std	Y+5, r24	; 0x05
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <SRAM_test+0xee>
     386:	8a e7       	ldi	r24, 0x7A	; 122
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <SRAM_test+0xdc>
     396:	9c 83       	std	Y+4, r25	; 0x04
     398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	9e 83       	std	Y+6, r25	; 0x06
     3a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	69 f7       	brne	.-38     	; 0x386 <SRAM_test+0xd0>
     3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <SRAM_test+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ae:	6f 81       	ldd	r22, Y+7	; 0x07
     3b0:	78 85       	ldd	r23, Y+8	; 0x08
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9e 83       	std	Y+6, r25	; 0x06
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <SRAM_test+0x118>
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	9b 89       	ldd	r25, Y+19	; 0x13
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9b 8b       	std	Y+19, r25	; 0x13
     3de:	8a 8b       	std	Y+18, r24	; 0x12
     3e0:	8a 89       	ldd	r24, Y+18	; 0x12
     3e2:	9b 89       	ldd	r25, Y+19	; 0x13
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	80 30       	cpi	r24, 0x00	; 0
     3e8:	92 07       	cpc	r25, r18
     3ea:	0c f4       	brge	.+2      	; 0x3ee <SRAM_test+0x138>
     3ec:	79 cf       	rjmp	.-270    	; 0x2e0 <SRAM_test+0x2a>
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     3ee:	1b 8a       	std	Y+19, r1	; 0x13
     3f0:	1a 8a       	std	Y+18, r1	; 0x12
     3f2:	30 c0       	rjmp	.+96     	; 0x454 <SRAM_test+0x19e>
	{
		char c = (char)ram_address[i];
     3f4:	2a 89       	ldd	r18, Y+18	; 0x12
     3f6:	3b 89       	ldd	r19, Y+19	; 0x13
     3f8:	8c 89       	ldd	r24, Y+20	; 0x14
     3fa:	9d 89       	ldd	r25, Y+21	; 0x15
     3fc:	fc 01       	movw	r30, r24
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	80 81       	ld	r24, Z
     404:	89 8b       	std	Y+17, r24	; 0x11
		int j = (int)c;
     406:	89 89       	ldd	r24, Y+17	; 0x11
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	8f 87       	std	Y+15, r24	; 0x0f
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     410:	2a 89       	ldd	r18, Y+18	; 0x12
     412:	3b 89       	ldd	r19, Y+19	; 0x13
     414:	8c 89       	ldd	r24, Y+20	; 0x14
     416:	9d 89       	ldd	r25, Y+21	; 0x15
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	80 81       	ld	r24, Z
     420:	83 38       	cpi	r24, 0x83	; 131
     422:	99 f0       	breq	.+38     	; 0x44a <SRAM_test+0x194>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     424:	00 d0       	rcall	.+0      	; 0x426 <SRAM_test+0x170>
     426:	00 d0       	rcall	.+0      	; 0x428 <SRAM_test+0x172>
     428:	ed b7       	in	r30, 0x3d	; 61
     42a:	fe b7       	in	r31, 0x3e	; 62
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	8a 89       	ldd	r24, Y+18	; 0x12
     438:	9b 89       	ldd	r25, Y+19	; 0x13
     43a:	93 83       	std	Z+3, r25	; 0x03
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	9b 89       	ldd	r25, Y+19	; 0x13
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	9b 8b       	std	Y+19, r25	; 0x13
     452:	8a 8b       	std	Y+18, r24	; 0x12
     454:	8a 89       	ldd	r24, Y+18	; 0x12
     456:	9b 89       	ldd	r25, Y+19	; 0x13
     458:	28 e0       	ldi	r18, 0x08	; 8
     45a:	80 30       	cpi	r24, 0x00	; 0
     45c:	92 07       	cpc	r25, r18
     45e:	54 f2       	brlt	.-108    	; 0x3f4 <SRAM_test+0x13e>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     460:	88 e4       	ldi	r24, 0x48	; 72
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <puts>
     468:	ff cf       	rjmp	.-2      	; 0x468 <SRAM_test+0x1b2>

0000046a <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	// set port B: in
	DDRB = 0x00; //inputs
     472:	e7 e3       	ldi	r30, 0x37	; 55
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull-ups
     478:	e8 e3       	ldi	r30, 0x38	; 56
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
}
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <read_axis+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <read_axis+0x8>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	98 e1       	ldi	r25, 0x18	; 24
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	88 37       	cpi	r24, 0x78	; 120
     4a0:	b1 f4       	brne	.+44     	; 0x4ce <read_axis+0x48>
		adc_address[0] = 0x04;
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4aa:	e6 e3       	ldi	r30, 0x36	; 54
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	81 70       	andi	r24, 0x01	; 1
     4b6:	90 70       	andi	r25, 0x00	; 0
     4b8:	88 23       	and	r24, r24
     4ba:	b9 f7       	brne	.-18     	; 0x4aa <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	80 81       	ld	r24, Z
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	1d c0       	rjmp	.+58     	; 0x508 <__stack+0x9>
	}
	else if(axis == 'y'){
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	89 37       	cpi	r24, 0x79	; 121
     4d2:	c1 f4       	brne	.+48     	; 0x504 <__stack+0x5>
		adc_address[0] = 0x06;
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4dc:	e6 e3       	ldi	r30, 0x36	; 54
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	81 70       	andi	r24, 0x01	; 1
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	88 23       	and	r24, r24
     4ec:	b9 f7       	brne	.-18     	; 0x4dc <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     4ee:	e9 81       	ldd	r30, Y+1	; 0x01
     4f0:	fa 81       	ldd	r31, Y+2	; 0x02
     4f2:	80 81       	ld	r24, Z
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 50       	subi	r24, 0x00	; 0
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
	}
	return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	8c 83       	std	Y+4, r24	; 0x04
     508:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <eeprom_read_byte+0x6>
     51e:	0f 92       	push	r0
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     528:	ec e3       	ldi	r30, 0x3C	; 60
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 70       	andi	r24, 0x02	; 2
     534:	90 70       	andi	r25, 0x00	; 0
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	b9 f7       	brne	.-18     	; 0x528 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     53a:	ee e3       	ldi	r30, 0x3E	; 62
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     546:	e0 9a       	sbi	0x1c, 0	; 28
     548:	8d b3       	in	r24, 0x1d	; 29
     54a:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <read_buttons>:


// Read joystick buttons (Can be optimised with interrupt)
inline uint8_t read_buttons(){
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     562:	e6 e3       	ldi	r30, 0x36	; 54
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	86 70       	andi	r24, 0x06	; 6
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	95 95       	asr	r25
     572:	87 95       	ror	r24
}
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <SPI_MasterInit>:
#include <avr/interrupt.h>
#include "spi.h"

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     582:	a7 e3       	ldi	r26, 0x37	; 55
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e7 e3       	ldi	r30, 0x37	; 55
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	88 6b       	ori	r24, 0xB8	; 184
     590:	8c 93       	st	X, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     592:	ed e2       	ldi	r30, 0x2D	; 45
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	81 e5       	ldi	r24, 0x51	; 81
     598:	80 83       	st	Z, r24
	SPI_NoSlave();
     59a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     5b0:	ef e2       	ldi	r30, 0x2F	; 47
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     5b8:	ee e2       	ldi	r30, 0x2E	; 46
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	dc f7       	brge	.-10     	; 0x5b8 <SPI_MasterTransmit+0x14>
}
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <SPI_MasterReceive>:

// Recieve char over SPI
char SPI_MasterReceive(void)
{
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     5d8:	ee e2       	ldi	r30, 0x2E	; 46
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	dc f7       	brge	.-10     	; 0x5d8 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     5e2:	ef e2       	ldi	r30, 0x2F	; 47
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
}
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	0f 92       	push	r0
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	89 83       	std	Y+1, r24	; 0x01
	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	82 36       	cpi	r24, 0x62	; 98
     5fe:	41 f4       	brne	.+16     	; 0x610 <SPI_SelectSlave+0x22>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     600:	a8 e3       	ldi	r26, 0x38	; 56
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e3       	ldi	r30, 0x38	; 56
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	8c 93       	st	X, r24
     60e:	0a c0       	rjmp	.+20     	; 0x624 <SPI_SelectSlave+0x36>
	else if (slave == SPI_CAN)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	83 37       	cpi	r24, 0x73	; 115
     614:	39 f4       	brne	.+14     	; 0x624 <SPI_SelectSlave+0x36>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     616:	a8 e3       	ldi	r26, 0x38	; 56
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e3       	ldi	r30, 0x38	; 56
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8f 7e       	andi	r24, 0xEF	; 239
     622:	8c 93       	st	X, r24
}
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <SPI_NoSlave>:

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     634:	a8 e3       	ldi	r26, 0x38	; 56
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e8 e3       	ldi	r30, 0x38	; 56
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 61       	ori	r24, 0x18	; 24
     640:	8c 93       	st	X, r24
}
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <CAN_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>

//Initialize the CAN bus
void CAN_init(void){
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     650:	0e 94 43 08 	call	0x1086	; 0x1086 <CAN_reset>

	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     654:	8f e0       	ldi	r24, 0x0F	; 15
     656:	60 ee       	ldi	r22, 0xE0	; 224
     658:	40 e4       	ldi	r20, 0x40	; 64
     65a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     65e:	80 e6       	ldi	r24, 0x60	; 96
     660:	60 e6       	ldi	r22, 0x60	; 96
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CAN_bit_modify>
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
     668:	8c e0       	ldi	r24, 0x0C	; 12
     66a:	6f e0       	ldi	r22, 0x0F	; 15
     66c:	4f ef       	ldi	r20, 0xFF	; 255
     66e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CAN_bit_modify>
	CAN_init_interrupt();
     672:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <CAN_init_interrupt>
}
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	08 95       	ret

0000067c <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	2b 97       	sbiw	r28, 0x0b	; 11
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     690:	84 e5       	ldi	r24, 0x54	; 84
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <puts>
	int i;
	

	CAN_message message;
	message.id = 0;
     698:	1c 82       	std	Y+4, r1	; 0x04
     69a:	1b 82       	std	Y+3, r1	; 0x03
	message.length = 8;
     69c:	88 e0       	ldi	r24, 0x08	; 8
     69e:	8d 83       	std	Y+5, r24	; 0x05
	message.data = " ";
     6a0:	85 e6       	ldi	r24, 0x65	; 101
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9f 83       	std	Y+7, r25	; 0x07
     6a6:	8e 83       	std	Y+6, r24	; 0x06
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     6a8:	1a 82       	std	Y+2, r1	; 0x02
     6aa:	19 82       	std	Y+1, r1	; 0x01
     6ac:	d2 c0       	rjmp	.+420    	; 0x852 <CAN_test+0x1d6>
		switch (i) {
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	9b 87       	std	Y+11, r25	; 0x0b
     6b4:	8a 87       	std	Y+10, r24	; 0x0a
     6b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     6b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6ba:	84 30       	cpi	r24, 0x04	; 4
     6bc:	91 05       	cpc	r25, r1
     6be:	09 f4       	brne	.+2      	; 0x6c2 <CAN_test+0x46>
     6c0:	6b c0       	rjmp	.+214    	; 0x798 <CAN_test+0x11c>
     6c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     6c6:	85 30       	cpi	r24, 0x05	; 5
     6c8:	91 05       	cpc	r25, r1
     6ca:	ec f4       	brge	.+58     	; 0x706 <CAN_test+0x8a>
     6cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ce:	9b 85       	ldd	r25, Y+11	; 0x0b
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	91 05       	cpc	r25, r1
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <CAN_test+0x5c>
     6d6:	45 c0       	rjmp	.+138    	; 0x762 <CAN_test+0xe6>
     6d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6da:	9b 85       	ldd	r25, Y+11	; 0x0b
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	91 05       	cpc	r25, r1
     6e0:	2c f4       	brge	.+10     	; 0x6ec <CAN_test+0x70>
     6e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     6e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	99 f1       	breq	.+102    	; 0x750 <CAN_test+0xd4>
     6ea:	8b c0       	rjmp	.+278    	; 0x802 <CAN_test+0x186>
     6ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ee:	9b 85       	ldd	r25, Y+11	; 0x0b
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	91 05       	cpc	r25, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <CAN_test+0x7c>
     6f6:	3e c0       	rjmp	.+124    	; 0x774 <CAN_test+0xf8>
     6f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6fa:	9b 85       	ldd	r25, Y+11	; 0x0b
     6fc:	83 30       	cpi	r24, 0x03	; 3
     6fe:	91 05       	cpc	r25, r1
     700:	09 f4       	brne	.+2      	; 0x704 <CAN_test+0x88>
     702:	41 c0       	rjmp	.+130    	; 0x786 <CAN_test+0x10a>
     704:	7e c0       	rjmp	.+252    	; 0x802 <CAN_test+0x186>
     706:	8a 85       	ldd	r24, Y+10	; 0x0a
     708:	9b 85       	ldd	r25, Y+11	; 0x0b
     70a:	87 30       	cpi	r24, 0x07	; 7
     70c:	91 05       	cpc	r25, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <CAN_test+0x96>
     710:	5e c0       	rjmp	.+188    	; 0x7ce <CAN_test+0x152>
     712:	8a 85       	ldd	r24, Y+10	; 0x0a
     714:	9b 85       	ldd	r25, Y+11	; 0x0b
     716:	88 30       	cpi	r24, 0x08	; 8
     718:	91 05       	cpc	r25, r1
     71a:	6c f4       	brge	.+26     	; 0x736 <CAN_test+0xba>
     71c:	8a 85       	ldd	r24, Y+10	; 0x0a
     71e:	9b 85       	ldd	r25, Y+11	; 0x0b
     720:	85 30       	cpi	r24, 0x05	; 5
     722:	91 05       	cpc	r25, r1
     724:	09 f4       	brne	.+2      	; 0x728 <CAN_test+0xac>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <CAN_test+0x12e>
     728:	8a 85       	ldd	r24, Y+10	; 0x0a
     72a:	9b 85       	ldd	r25, Y+11	; 0x0b
     72c:	86 30       	cpi	r24, 0x06	; 6
     72e:	91 05       	cpc	r25, r1
     730:	09 f4       	brne	.+2      	; 0x734 <CAN_test+0xb8>
     732:	44 c0       	rjmp	.+136    	; 0x7bc <CAN_test+0x140>
     734:	66 c0       	rjmp	.+204    	; 0x802 <CAN_test+0x186>
     736:	8a 85       	ldd	r24, Y+10	; 0x0a
     738:	9b 85       	ldd	r25, Y+11	; 0x0b
     73a:	88 30       	cpi	r24, 0x08	; 8
     73c:	91 05       	cpc	r25, r1
     73e:	09 f4       	brne	.+2      	; 0x742 <CAN_test+0xc6>
     740:	4f c0       	rjmp	.+158    	; 0x7e0 <CAN_test+0x164>
     742:	8a 85       	ldd	r24, Y+10	; 0x0a
     744:	9b 85       	ldd	r25, Y+11	; 0x0b
     746:	89 30       	cpi	r24, 0x09	; 9
     748:	91 05       	cpc	r25, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <CAN_test+0xd2>
     74c:	52 c0       	rjmp	.+164    	; 0x7f2 <CAN_test+0x176>
     74e:	59 c0       	rjmp	.+178    	; 0x802 <CAN_test+0x186>
			case 0:
				message.data = "7";
     750:	87 e6       	ldi	r24, 0x67	; 103
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	9f 83       	std	Y+7, r25	; 0x07
     756:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 31;
     758:	8f e1       	ldi	r24, 0x1F	; 31
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9c 83       	std	Y+4, r25	; 0x04
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	50 c0       	rjmp	.+160    	; 0x802 <CAN_test+0x186>
				break;
			case 1:
				message.data = "1";
     762:	89 e6       	ldi	r24, 0x69	; 105
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	9f 83       	std	Y+7, r25	; 0x07
     768:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9c 83       	std	Y+4, r25	; 0x04
     770:	8b 83       	std	Y+3, r24	; 0x03
     772:	47 c0       	rjmp	.+142    	; 0x802 <CAN_test+0x186>
				break;
			case 2:
				message.data = "2";
     774:	8b e6       	ldi	r24, 0x6B	; 107
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	9f 83       	std	Y+7, r25	; 0x07
     77a:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 2;
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9c 83       	std	Y+4, r25	; 0x04
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	3e c0       	rjmp	.+124    	; 0x802 <CAN_test+0x186>
				break;
			case 3:
				message.data = "3";
     786:	8d e6       	ldi	r24, 0x6D	; 109
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	9f 83       	std	Y+7, r25	; 0x07
     78c:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 3;
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	9c 83       	std	Y+4, r25	; 0x04
     794:	8b 83       	std	Y+3, r24	; 0x03
     796:	35 c0       	rjmp	.+106    	; 0x802 <CAN_test+0x186>
				break;
			case 4:
				message.data = "4";
     798:	8f e6       	ldi	r24, 0x6F	; 111
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 83       	std	Y+7, r25	; 0x07
     79e:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 4;
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9c 83       	std	Y+4, r25	; 0x04
     7a6:	8b 83       	std	Y+3, r24	; 0x03
     7a8:	2c c0       	rjmp	.+88     	; 0x802 <CAN_test+0x186>
				break;
			case 5:
				message.data = "5";
     7aa:	81 e7       	ldi	r24, 0x71	; 113
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	9f 83       	std	Y+7, r25	; 0x07
     7b0:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 5;
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9c 83       	std	Y+4, r25	; 0x04
     7b8:	8b 83       	std	Y+3, r24	; 0x03
     7ba:	23 c0       	rjmp	.+70     	; 0x802 <CAN_test+0x186>
				break;
			case 6:
				message.data = "6";
     7bc:	83 e7       	ldi	r24, 0x73	; 115
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	9f 83       	std	Y+7, r25	; 0x07
     7c2:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 6;
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	9c 83       	std	Y+4, r25	; 0x04
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	1a c0       	rjmp	.+52     	; 0x802 <CAN_test+0x186>
				break;
			case 7:
				message.data = "7";
     7ce:	87 e6       	ldi	r24, 0x67	; 103
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	9f 83       	std	Y+7, r25	; 0x07
     7d4:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 7;
     7d6:	87 e0       	ldi	r24, 0x07	; 7
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	9c 83       	std	Y+4, r25	; 0x04
     7dc:	8b 83       	std	Y+3, r24	; 0x03
     7de:	11 c0       	rjmp	.+34     	; 0x802 <CAN_test+0x186>
				break;
			case 8:
				message.data = "8";
     7e0:	85 e7       	ldi	r24, 0x75	; 117
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	9f 83       	std	Y+7, r25	; 0x07
     7e6:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 8;
     7e8:	88 e0       	ldi	r24, 0x08	; 8
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	8b 83       	std	Y+3, r24	; 0x03
     7f0:	08 c0       	rjmp	.+16     	; 0x802 <CAN_test+0x186>
				break;
			case 9:
				message.data = "9";
     7f2:	87 e7       	ldi	r24, 0x77	; 119
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	9f 83       	std	Y+7, r25	; 0x07
     7f8:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 9;
     7fa:	89 e0       	ldi	r24, 0x09	; 9
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
		/*// Blanking out recieved buffer (really needed??)
		for (i = 0;(i < 9); i++)
			received[i] = '\0';	*/

		// Sending data in CAN bus
		printf("Sending string: %s", message.data);
     802:	2e 81       	ldd	r18, Y+6	; 0x06
     804:	3f 81       	ldd	r19, Y+7	; 0x07
     806:	00 d0       	rcall	.+0      	; 0x808 <CAN_test+0x18c>
     808:	00 d0       	rcall	.+0      	; 0x80a <CAN_test+0x18e>
     80a:	ed b7       	in	r30, 0x3d	; 61
     80c:	fe b7       	in	r31, 0x3e	; 62
     80e:	31 96       	adiw	r30, 0x01	; 1
     810:	89 e7       	ldi	r24, 0x79	; 121
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	80 83       	st	Z, r24
     818:	33 83       	std	Z+3, r19	; 0x03
     81a:	22 83       	std	Z+2, r18	; 0x02
     81c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
		if (CAN_send(message.data, message.id) != 0){
     828:	4e 81       	ldd	r20, Y+6	; 0x06
     82a:	5f 81       	ldd	r21, Y+7	; 0x07
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	9c 01       	movw	r18, r24
     832:	ca 01       	movw	r24, r20
     834:	b9 01       	movw	r22, r18
     836:	0e 94 3c 04 	call	0x878	; 0x878 <CAN_send>
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	29 f0       	breq	.+10     	; 0x848 <CAN_test+0x1cc>
			return -1;
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	9f ef       	ldi	r25, 0xFF	; 255
     842:	99 87       	std	Y+9, r25	; 0x09
     844:	88 87       	std	Y+8, r24	; 0x08
     846:	0d c0       	rjmp	.+26     	; 0x862 <CAN_test+0x1e6>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	8a 30       	cpi	r24, 0x0A	; 10
     858:	91 05       	cpc	r25, r1
     85a:	0c f4       	brge	.+2      	; 0x85e <CAN_test+0x1e2>
     85c:	28 cf       	rjmp	.-432    	; 0x6ae <CAN_test+0x32>
		printf("Sending string: %s", message.data);
		if (CAN_send(message.data, message.id) != 0){
			return -1;
		}
	}
	return 0;
     85e:	19 86       	std	Y+9, r1	; 0x09
     860:	18 86       	std	Y+8, r1	; 0x08
     862:	88 85       	ldd	r24, Y+8	; 0x08
     864:	99 85       	ldd	r25, Y+9	; 0x09
}
     866:	2b 96       	adiw	r28, 0x0b	; 11
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	08 95       	ret

00000878 <CAN_send>:

// Send string using CAN bus
int CAN_send(char* str, int id){
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	2e 97       	sbiw	r28, 0x0e	; 14
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	9a 87       	std	Y+10, r25	; 0x0a
     88e:	89 87       	std	Y+9, r24	; 0x09
     890:	7c 87       	std	Y+12, r23	; 0x0c
     892:	6b 87       	std	Y+11, r22	; 0x0b
	
	unsigned int part, i;
	int done = 0;
     894:	1c 82       	std	Y+4, r1	; 0x04
     896:	1b 82       	std	Y+3, r1	; 0x03

	char *messg = "\0\0\0\0\0\0\0";
     898:	8c e8       	ldi	r24, 0x8C	; 140
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < 8; i++){
     8a0:	1e 82       	std	Y+6, r1	; 0x06
     8a2:	1d 82       	std	Y+5, r1	; 0x05
     8a4:	1f c0       	rjmp	.+62     	; 0x8e4 <CAN_send+0x6c>
		messg[i] = str[i];
     8a6:	29 81       	ldd	r18, Y+1	; 0x01
     8a8:	3a 81       	ldd	r19, Y+2	; 0x02
     8aa:	8d 81       	ldd	r24, Y+5	; 0x05
     8ac:	9e 81       	ldd	r25, Y+6	; 0x06
     8ae:	d9 01       	movw	r26, r18
     8b0:	a8 0f       	add	r26, r24
     8b2:	b9 1f       	adc	r27, r25
     8b4:	29 85       	ldd	r18, Y+9	; 0x09
     8b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ba:	9e 81       	ldd	r25, Y+6	; 0x06
     8bc:	f9 01       	movw	r30, r18
     8be:	e8 0f       	add	r30, r24
     8c0:	f9 1f       	adc	r31, r25
     8c2:	80 81       	ld	r24, Z
     8c4:	8c 93       	st	X, r24
		if (messg[i] == '\0') {
     8c6:	29 81       	ldd	r18, Y+1	; 0x01
     8c8:	3a 81       	ldd	r19, Y+2	; 0x02
     8ca:	8d 81       	ldd	r24, Y+5	; 0x05
     8cc:	9e 81       	ldd	r25, Y+6	; 0x06
     8ce:	f9 01       	movw	r30, r18
     8d0:	e8 0f       	add	r30, r24
     8d2:	f9 1f       	adc	r31, r25
     8d4:	80 81       	ld	r24, Z
     8d6:	88 23       	and	r24, r24
     8d8:	51 f0       	breq	.+20     	; 0x8ee <CAN_send+0x76>
	
	unsigned int part, i;
	int done = 0;

	char *messg = "\0\0\0\0\0\0\0";
	for(i = 0; i < 8; i++){
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	9e 81       	ldd	r25, Y+6	; 0x06
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	9e 83       	std	Y+6, r25	; 0x06
     8e2:	8d 83       	std	Y+5, r24	; 0x05
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	9e 81       	ldd	r25, Y+6	; 0x06
     8e8:	88 30       	cpi	r24, 0x08	; 8
     8ea:	91 05       	cpc	r25, r1
     8ec:	e0 f2       	brcs	.-72     	; 0x8a6 <CAN_send+0x2e>
		if (messg[i] == '\0') {
			break;
		}
	}

	cli(); // disable interrupts, to protect SPI-communication 
     8ee:	f8 94       	cli

	CAN_bit_modify(TXB0SIDH, 0xFF, (id<<13)); //transmit buffer 0 id high
     8f0:	81 e3       	ldi	r24, 0x31	; 49
     8f2:	6f ef       	ldi	r22, 0xFF	; 255
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     8fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fc:	98 2f       	mov	r25, r24
     8fe:	92 95       	swap	r25
     900:	99 0f       	add	r25, r25
     902:	90 7e       	andi	r25, 0xE0	; 224
     904:	82 e3       	ldi	r24, 0x32	; 50
     906:	60 ee       	ldi	r22, 0xE0	; 224
     908:	49 2f       	mov	r20, r25
     90a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CAN_bit_modify>
	//CAN_write((char)messg.length, TXB0DLC);	// data length
	CAN_write((char)8, TXB0DLC);	// data length
     90e:	88 e0       	ldi	r24, 0x08	; 8
     910:	65 e3       	ldi	r22, 0x35	; 53
     912:	0e 94 de 08 	call	0x11bc	; 0x11bc <CAN_write>
	CAN_load_tx(messg, 0); //load transmit buffer from channel 0
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <CAN_load_tx>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 3c 09 	call	0x1278	; 0x1278 <CAN_rts>

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     926:	1e 82       	std	Y+6, r1	; 0x06
     928:	1d 82       	std	Y+5, r1	; 0x05
     92a:	0d c0       	rjmp	.+26     	; 0x946 <CAN_send+0xce>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     92c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CAN_read_status>
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	84 70       	andi	r24, 0x04	; 4
     936:	90 70       	andi	r25, 0x00	; 0
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	59 f0       	breq	.+22     	; 0x952 <CAN_send+0xda>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	9e 81       	ldd	r25, Y+6	; 0x06
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	9e 83       	std	Y+6, r25	; 0x06
     944:	8d 83       	std	Y+5, r24	; 0x05
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	8f 3f       	cpi	r24, 0xFF	; 255
     94e:	92 07       	cpc	r25, r18
     950:	69 f7       	brne	.-38     	; 0x92c <CAN_send+0xb4>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	sei(); // enable interrupts again
     952:	78 94       	sei
	if(i == 0xffff) return -1;
     954:	8d 81       	ldd	r24, Y+5	; 0x05
     956:	9e 81       	ldd	r25, Y+6	; 0x06
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	8f 3f       	cpi	r24, 0xFF	; 255
     95c:	92 07       	cpc	r25, r18
     95e:	29 f4       	brne	.+10     	; 0x96a <CAN_send+0xf2>
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	9f ef       	ldi	r25, 0xFF	; 255
     964:	9e 87       	std	Y+14, r25	; 0x0e
     966:	8d 87       	std	Y+13, r24	; 0x0d
     968:	02 c0       	rjmp	.+4      	; 0x96e <CAN_send+0xf6>
			if(i == 0xffff) return -1;
		}

		if(str[i] == '\0') break;
*/
	return 0;
     96a:	1e 86       	std	Y+14, r1	; 0x0e
     96c:	1d 86       	std	Y+13, r1	; 0x0d
     96e:	8d 85       	ldd	r24, Y+13	; 0x0d
     970:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     972:	2e 96       	adiw	r28, 0x0e	; 14
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	00 d0       	rcall	.+0      	; 0x98a <CAN_receive+0x6>
     98a:	00 d0       	rcall	.+0      	; 0x98c <CAN_receive+0x8>
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	7c 83       	std	Y+4, r23	; 0x04
     996:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF) == 0); // loop until data received
     998:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CAN_read_status>
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	81 70       	andi	r24, 0x01	; 1
     9a2:	90 70       	andi	r25, 0x00	; 0
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	c1 f3       	breq	.-16     	; 0x998 <CAN_receive+0x14>
	CAN_read_rx(msg, rx);
     9a8:	2b 81       	ldd	r18, Y+3	; 0x03
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	0e 94 93 08 	call	0x1126	; 0x1126 <CAN_read_rx>
	
	return 0;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0

}
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <CAN_init_interrupt>:
	GICR = GICR | (1<<INT0);
	sei();
}*/


void CAN_init_interrupt(){
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
//interrupt init
	PORTD = PORTD | 0b00001100;
     9ce:	a2 e3       	ldi	r26, 0x32	; 50
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	e2 e3       	ldi	r30, 0x32	; 50
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	8c 60       	ori	r24, 0x0C	; 12
     9da:	8c 93       	st	X, r24
	DDRD = DDRD & 	0b11110011;
     9dc:	a1 e3       	ldi	r26, 0x31	; 49
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e1 e3       	ldi	r30, 0x31	; 49
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	83 7f       	andi	r24, 0xF3	; 243
     9e8:	8c 93       	st	X, r24
	MCUCR = MCUCR | (0<<ISC01) | (0<<ISC00) | (0<<ISC11) | (0<<ISC10);
     9ea:	a5 e5       	ldi	r26, 0x55	; 85
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	e5 e5       	ldi	r30, 0x55	; 85
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	8c 93       	st	X, r24
	GICR = GICR | (1<<INT0) | (1<<INT1);
     9f6:	ab e5       	ldi	r26, 0x5B	; 91
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	eb e5       	ldi	r30, 0x5B	; 91
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	80 6c       	ori	r24, 0xC0	; 192
     a02:	8c 93       	st	X, r24
	sei();
     a04:	78 94       	sei
}
     a06:	cf 91       	pop	r28
     a08:	df 91       	pop	r29
     a0a:	08 95       	ret

00000a0c <__vector_1>:


SIGNAL(SIG_INTERRUPT0) {
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <__vector_1+0x28>
     a34:	00 d0       	rcall	.+0      	; 0xa36 <__vector_1+0x2a>
     a36:	0f 92       	push	r0
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     a3c:	84 e9       	ldi	r24, 0x94	; 148
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	9d 83       	std	Y+5, r25	; 0x05
     a42:	8c 83       	std	Y+4, r24	; 0x04

	printf("Received0: ");
     a44:	00 d0       	rcall	.+0      	; 0xa46 <__vector_1+0x3a>
     a46:	ed b7       	in	r30, 0x3d	; 61
     a48:	fe b7       	in	r31, 0x3e	; 62
     a4a:	31 96       	adiw	r30, 0x01	; 1
     a4c:	8d e9       	ldi	r24, 0x9D	; 157
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
     a54:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
    CAN_receive(&received, 0);
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	0e 94 c2 04 	call	0x984	; 0x984 <CAN_receive>
	printf("%s\n", received.data);
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	9d 81       	ldd	r25, Y+5	; 0x05
     a6c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <puts>

}
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_2>:
	printf("Received1: ");
    CAN_receive(&received, 1);
	printf("%s\n", received.data);

}*/
SIGNAL(SIG_INTERRUPT1) {
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <__vector_2+0x28>
     ac8:	00 d0       	rcall	.+0      	; 0xaca <__vector_2+0x2a>
     aca:	0f 92       	push	r0
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     ad0:	84 e9       	ldi	r24, 0x94	; 148
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	9d 83       	std	Y+5, r25	; 0x05
     ad6:	8c 83       	std	Y+4, r24	; 0x04

	printf("Received1: ");
     ad8:	00 d0       	rcall	.+0      	; 0xada <__vector_2+0x3a>
     ada:	ed b7       	in	r30, 0x3d	; 61
     adc:	fe b7       	in	r31, 0x3e	; 62
     ade:	31 96       	adiw	r30, 0x01	; 1
     ae0:	89 ea       	ldi	r24, 0xA9	; 169
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
     ae8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
    CAN_receive(&received, 1);
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 c2 04 	call	0x984	; 0x984 <CAN_receive>
	printf("%s\n", received.data);
     afc:	8c 81       	ldd	r24, Y+4	; 0x04
     afe:	9d 81       	ldd	r25, Y+5	; 0x05
     b00:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <puts>

}
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	27 97       	sbiw	r28, 0x07	; 7
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     b4c:	80 e3       	ldi	r24, 0x30	; 48
     b4e:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     b50:	85 eb       	ldi	r24, 0xB5	; 181
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>

	while(1){
		last_button = button;
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     b5c:	0e 94 f6 06 	call	0xdec	; 0xdec <butterfly_poll_joystick>
     b60:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	98 17       	cp	r25, r24
     b68:	b9 f3       	breq	.-18     	; 0xb58 <butterfly_menu+0x24>
			printf("state for: %d\n", menu_state);
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	28 2f       	mov	r18, r24
     b6e:	33 27       	eor	r19, r19
     b70:	27 fd       	sbrc	r18, 7
     b72:	30 95       	com	r19
     b74:	00 d0       	rcall	.+0      	; 0xb76 <butterfly_menu+0x42>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <butterfly_menu+0x44>
     b78:	ed b7       	in	r30, 0x3d	; 61
     b7a:	fe b7       	in	r31, 0x3e	; 62
     b7c:	31 96       	adiw	r30, 0x01	; 1
     b7e:	8f eb       	ldi	r24, 0xBF	; 191
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	80 83       	st	Z, r24
     b86:	33 83       	std	Z+3, r19	; 0x03
     b88:	22 83       	std	Z+2, r18	; 0x02
     b8a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
			switch(button) {
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3f 83       	std	Y+7, r19	; 0x07
     b9e:	2e 83       	std	Y+6, r18	; 0x06
     ba0:	8e 81       	ldd	r24, Y+6	; 0x06
     ba2:	9f 81       	ldd	r25, Y+7	; 0x07
     ba4:	85 36       	cpi	r24, 0x65	; 101
     ba6:	91 05       	cpc	r25, r1
     ba8:	49 f1       	breq	.+82     	; 0xbfc <butterfly_menu+0xc8>
     baa:	2e 81       	ldd	r18, Y+6	; 0x06
     bac:	3f 81       	ldd	r19, Y+7	; 0x07
     bae:	26 36       	cpi	r18, 0x66	; 102
     bb0:	31 05       	cpc	r19, r1
     bb2:	5c f4       	brge	.+22     	; 0xbca <butterfly_menu+0x96>
     bb4:	8e 81       	ldd	r24, Y+6	; 0x06
     bb6:	9f 81       	ldd	r25, Y+7	; 0x07
     bb8:	80 33       	cpi	r24, 0x30	; 48
     bba:	91 05       	cpc	r25, r1
     bbc:	69 f2       	breq	.-102    	; 0xb58 <butterfly_menu+0x24>
     bbe:	2e 81       	ldd	r18, Y+6	; 0x06
     bc0:	3f 81       	ldd	r19, Y+7	; 0x07
     bc2:	24 36       	cpi	r18, 0x64	; 100
     bc4:	31 05       	cpc	r19, r1
     bc6:	b1 f0       	breq	.+44     	; 0xbf4 <butterfly_menu+0xc0>
     bc8:	20 c0       	rjmp	.+64     	; 0xc0a <butterfly_menu+0xd6>
     bca:	8e 81       	ldd	r24, Y+6	; 0x06
     bcc:	9f 81       	ldd	r25, Y+7	; 0x07
     bce:	82 37       	cpi	r24, 0x72	; 114
     bd0:	91 05       	cpc	r25, r1
     bd2:	11 f2       	breq	.-124    	; 0xb58 <butterfly_menu+0x24>
     bd4:	2e 81       	ldd	r18, Y+6	; 0x06
     bd6:	3f 81       	ldd	r19, Y+7	; 0x07
     bd8:	25 37       	cpi	r18, 0x75	; 117
     bda:	31 05       	cpc	r19, r1
     bdc:	39 f0       	breq	.+14     	; 0xbec <butterfly_menu+0xb8>
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	9f 81       	ldd	r25, Y+7	; 0x07
     be2:	8c 36       	cpi	r24, 0x6C	; 108
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <butterfly_menu+0xb6>
     be8:	b7 cf       	rjmp	.-146    	; 0xb58 <butterfly_menu+0x24>
     bea:	0f c0       	rjmp	.+30     	; 0xc0a <butterfly_menu+0xd6>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	81 50       	subi	r24, 0x01	; 1
     bf0:	8b 83       	std	Y+3, r24	; 0x03
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <butterfly_menu+0xde>
				case 'd': menu_state++;				break;
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	0b c0       	rjmp	.+22     	; 0xc12 <butterfly_menu+0xde>
				case 'e': start_game(menu_state);	break;
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	99 27       	eor	r25, r25
     c00:	87 fd       	sbrc	r24, 7
     c02:	90 95       	com	r25
     c04:	0e 94 89 07 	call	0xf12	; 0xf12 <start_game>
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <butterfly_menu+0xde>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     c0a:	8e ec       	ldi	r24, 0xCE	; 206
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	33 27       	eor	r19, r19
     c18:	27 fd       	sbrc	r18, 7
     c1a:	30 95       	com	r19
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <butterfly_menu+0xea>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <butterfly_menu+0xec>
     c20:	ed b7       	in	r30, 0x3d	; 61
     c22:	fe b7       	in	r31, 0x3e	; 62
     c24:	31 96       	adiw	r30, 0x01	; 1
     c26:	84 ed       	ldi	r24, 0xD4	; 212
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
     c2e:	33 83       	std	Z+3, r19	; 0x03
     c30:	22 83       	std	Z+2, r18	; 0x02
     c32:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <printf>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	88 23       	and	r24, r24
     c42:	14 f4       	brge	.+4      	; 0xc48 <butterfly_menu+0x114>
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	0c f0       	brlt	.+2      	; 0xc50 <butterfly_menu+0x11c>
     c4e:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	28 2f       	mov	r18, r24
     c54:	33 27       	eor	r19, r19
     c56:	27 fd       	sbrc	r18, 7
     c58:	30 95       	com	r19
     c5a:	3d 83       	std	Y+5, r19	; 0x05
     c5c:	2c 83       	std	Y+4, r18	; 0x04
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	91 05       	cpc	r25, r1
     c66:	d1 f0       	breq	.+52     	; 0xc9c <butterfly_menu+0x168>
     c68:	2c 81       	ldd	r18, Y+4	; 0x04
     c6a:	3d 81       	ldd	r19, Y+5	; 0x05
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f4       	brge	.+10     	; 0xc7c <butterfly_menu+0x148>
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	61 f0       	breq	.+24     	; 0xc92 <butterfly_menu+0x15e>
     c7a:	1f c0       	rjmp	.+62     	; 0xcba <butterfly_menu+0x186>
     c7c:	2c 81       	ldd	r18, Y+4	; 0x04
     c7e:	3d 81       	ldd	r19, Y+5	; 0x05
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	81 f0       	breq	.+32     	; 0xca6 <butterfly_menu+0x172>
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	91 05       	cpc	r25, r1
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <butterfly_menu+0x17c>
     c90:	14 c0       	rjmp	.+40     	; 0xcba <butterfly_menu+0x186>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     c92:	85 ee       	ldi	r24, 0xE5	; 229
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     c9a:	5e cf       	rjmp	.-324    	; 0xb58 <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     c9c:	8d ef       	ldi	r24, 0xFD	; 253
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     ca4:	59 cf       	rjmp	.-334    	; 0xb58 <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     ca6:	84 e1       	ldi	r24, 0x14	; 20
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     cae:	54 cf       	rjmp	.-344    	; 0xb58 <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     cb0:	89 e2       	ldi	r24, 0x29	; 41
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     cb8:	4f cf       	rjmp	.-354    	; 0xb58 <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     cba:	1b 82       	std	Y+3, r1	; 0x03
     cbc:	4d cf       	rjmp	.-358    	; 0xb58 <butterfly_menu+0x24>

00000cbe <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <butterfly_joystick_test+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <butterfly_joystick_test+0x8>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     cca:	80 e3       	ldi	r24, 0x30	; 48
     ccc:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     cd2:	0e 94 f6 06 	call	0xdec	; 0xdec <butterfly_poll_joystick>
     cd6:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	98 17       	cp	r25, r24
     cde:	b9 f3       	breq	.-18     	; 0xcce <butterfly_joystick_test+0x10>
			switch(button) {
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3c 83       	std	Y+4, r19	; 0x04
     ce8:	2b 83       	std	Y+3, r18	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	85 36       	cpi	r24, 0x65	; 101
     cf0:	91 05       	cpc	r25, r1
     cf2:	99 f1       	breq	.+102    	; 0xd5a <butterfly_joystick_test+0x9c>
     cf4:	2b 81       	ldd	r18, Y+3	; 0x03
     cf6:	3c 81       	ldd	r19, Y+4	; 0x04
     cf8:	26 36       	cpi	r18, 0x66	; 102
     cfa:	31 05       	cpc	r19, r1
     cfc:	5c f4       	brge	.+22     	; 0xd14 <butterfly_joystick_test+0x56>
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	80 33       	cpi	r24, 0x30	; 48
     d04:	91 05       	cpc	r25, r1
     d06:	71 f1       	breq	.+92     	; 0xd64 <butterfly_joystick_test+0xa6>
     d08:	2b 81       	ldd	r18, Y+3	; 0x03
     d0a:	3c 81       	ldd	r19, Y+4	; 0x04
     d0c:	24 36       	cpi	r18, 0x64	; 100
     d0e:	31 05       	cpc	r19, r1
     d10:	f9 f0       	breq	.+62     	; 0xd50 <butterfly_joystick_test+0x92>
     d12:	2d c0       	rjmp	.+90     	; 0xd6e <butterfly_joystick_test+0xb0>
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	82 37       	cpi	r24, 0x72	; 114
     d1a:	91 05       	cpc	r25, r1
     d1c:	79 f0       	breq	.+30     	; 0xd3c <butterfly_joystick_test+0x7e>
     d1e:	2b 81       	ldd	r18, Y+3	; 0x03
     d20:	3c 81       	ldd	r19, Y+4	; 0x04
     d22:	25 37       	cpi	r18, 0x75	; 117
     d24:	31 05       	cpc	r19, r1
     d26:	79 f0       	breq	.+30     	; 0xd46 <butterfly_joystick_test+0x88>
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	8c 36       	cpi	r24, 0x6C	; 108
     d2e:	91 05       	cpc	r25, r1
     d30:	f1 f4       	brne	.+60     	; 0xd6e <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
     d32:	8d e3       	ldi	r24, 0x3D	; 61
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d3a:	c9 cf       	rjmp	.-110    	; 0xcce <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
     d3c:	82 e4       	ldi	r24, 0x42	; 66
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d44:	c4 cf       	rjmp	.-120    	; 0xcce <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
     d46:	88 e4       	ldi	r24, 0x48	; 72
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d4e:	bf cf       	rjmp	.-130    	; 0xcce <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
     d50:	8b e4       	ldi	r24, 0x4B	; 75
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d58:	ba cf       	rjmp	.-140    	; 0xcce <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
     d5a:	80 e5       	ldi	r24, 0x50	; 80
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d62:	b5 cf       	rjmp	.-150    	; 0xcce <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
     d64:	86 e5       	ldi	r24, 0x56	; 86
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d6c:	b0 cf       	rjmp	.-160    	; 0xcce <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
     d6e:	8e ec       	ldi	r24, 0xCE	; 206
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d76:	ab cf       	rjmp	.-170    	; 0xcce <butterfly_joystick_test+0x10>

00000d78 <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <butterfly_print+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <butterfly_print+0x8>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	cli(); //disable interrupts to protect SPI-communication
     d88:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     d8a:	82 e6       	ldi	r24, 0x62	; 98
     d8c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     d90:	1a 82       	std	Y+2, r1	; 0x02
     d92:	19 82       	std	Y+1, r1	; 0x01
     d94:	19 c0       	rjmp	.+50     	; 0xdc8 <butterfly_print+0x50>
		if (str[i] == '\0') break;
     d96:	29 81       	ldd	r18, Y+1	; 0x01
     d98:	3a 81       	ldd	r19, Y+2	; 0x02
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	fc 01       	movw	r30, r24
     da0:	e2 0f       	add	r30, r18
     da2:	f3 1f       	adc	r31, r19
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <butterfly_print+0x5a>
		SPI_MasterTransmit(str[i]);
     daa:	29 81       	ldd	r18, Y+1	; 0x01
     dac:	3a 81       	ldd	r19, Y+2	; 0x02
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	fc 01       	movw	r30, r24
     db4:	e2 0f       	add	r30, r18
     db6:	f3 1f       	adc	r31, r19
     db8:	80 81       	ld	r24, Z
     dba:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

void butterfly_print(char * str){
	int i;
	cli(); //disable interrupts to protect SPI-communication
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	88 31       	cpi	r24, 0x18	; 24
     dce:	91 05       	cpc	r25, r1
     dd0:	14 f3       	brlt	.-60     	; 0xd96 <butterfly_print+0x1e>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     dd8:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	

	sei(); //enable interrupts again
     ddc:	78 94       	sei
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	2f 97       	sbiw	r28, 0x0f	; 15
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
	char button;	

	cli(); //disable interrupts to protect SPI-communication
     e00:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     e02:	82 e6       	ldi	r24, 0x62	; 98
     e04:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     e08:	8e e2       	ldi	r24, 0x2E	; 46
     e0a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e2       	ldi	r26, 0x20	; 32
     e14:	b1 e4       	ldi	r27, 0x41	; 65
     e16:	8b 87       	std	Y+11, r24	; 0x0b
     e18:	9c 87       	std	Y+12, r25	; 0x0c
     e1a:	ad 87       	std	Y+13, r26	; 0x0d
     e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	2a e9       	ldi	r18, 0x9A	; 154
     e28:	3b e9       	ldi	r19, 0x9B	; 155
     e2a:	49 e9       	ldi	r20, 0x99	; 153
     e2c:	54 e4       	ldi	r21, 0x44	; 68
     e2e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	8f 83       	std	Y+7, r24	; 0x07
     e38:	98 87       	std	Y+8, r25	; 0x08
     e3a:	a9 87       	std	Y+9, r26	; 0x09
     e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	5f e3       	ldi	r21, 0x3F	; 63
     e4e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__ltsf2>
     e52:	88 23       	and	r24, r24
     e54:	2c f4       	brge	.+10     	; 0xe60 <butterfly_poll_joystick+0x74>
		__ticks = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	3f c0       	rjmp	.+126    	; 0xede <butterfly_poll_joystick+0xf2>
	else if (__tmp > 65535)
     e60:	6f 81       	ldd	r22, Y+7	; 0x07
     e62:	78 85       	ldd	r23, Y+8	; 0x08
     e64:	89 85       	ldd	r24, Y+9	; 0x09
     e66:	9a 85       	ldd	r25, Y+10	; 0x0a
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	3f ef       	ldi	r19, 0xFF	; 255
     e6c:	4f e7       	ldi	r20, 0x7F	; 127
     e6e:	57 e4       	ldi	r21, 0x47	; 71
     e70:	0e 94 6d 0c 	call	0x18da	; 0x18da <__gtsf2>
     e74:	18 16       	cp	r1, r24
     e76:	4c f5       	brge	.+82     	; 0xeca <butterfly_poll_joystick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e78:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e2       	ldi	r20, 0x20	; 32
     e86:	51 e4       	ldi	r21, 0x41	; 65
     e88:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <butterfly_poll_joystick+0xd4>
     ea2:	8a e7       	ldi	r24, 0x7A	; 122
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 83       	std	Y+4, r25	; 0x04
     ea8:	8b 83       	std	Y+3, r24	; 0x03
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <butterfly_poll_joystick+0xc2>
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f7       	brne	.-38     	; 0xea2 <butterfly_poll_joystick+0xb6>
     ec8:	14 c0       	rjmp	.+40     	; 0xef2 <butterfly_poll_joystick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eca:	6f 81       	ldd	r22, Y+7	; 0x07
     ecc:	78 85       	ldd	r23, Y+8	; 0x08
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <butterfly_poll_joystick+0xfe>
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
     ef2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     ef6:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
     ef8:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

	sei(); //enable interrupts again
     efc:	78 94       	sei
	return button;
     efe:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     f00:	2f 96       	adiw	r28, 0x0f	; 15
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <start_game>:

void start_game(enum menu_state_enum menu_state){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	61 97       	sbiw	r28, 0x11	; 17
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
     f28:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2a:	28 2f       	mov	r18, r24
     f2c:	33 27       	eor	r19, r19
     f2e:	27 fd       	sbrc	r18, 7
     f30:	30 95       	com	r19
     f32:	39 8b       	std	Y+17, r19	; 0x11
     f34:	28 8b       	std	Y+16, r18	; 0x10
     f36:	88 89       	ldd	r24, Y+16	; 0x10
     f38:	99 89       	ldd	r25, Y+17	; 0x11
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	91 05       	cpc	r25, r1
     f3e:	d1 f0       	breq	.+52     	; 0xf74 <start_game+0x62>
     f40:	28 89       	ldd	r18, Y+16	; 0x10
     f42:	39 89       	ldd	r19, Y+17	; 0x11
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	2c f4       	brge	.+10     	; 0xf54 <start_game+0x42>
     f4a:	88 89       	ldd	r24, Y+16	; 0x10
     f4c:	99 89       	ldd	r25, Y+17	; 0x11
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	61 f0       	breq	.+24     	; 0xf6a <start_game+0x58>
     f52:	90 c0       	rjmp	.+288    	; 0x1074 <start_game+0x162>
     f54:	28 89       	ldd	r18, Y+16	; 0x10
     f56:	39 89       	ldd	r19, Y+17	; 0x11
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	81 f0       	breq	.+32     	; 0xf7e <start_game+0x6c>
     f5e:	88 89       	ldd	r24, Y+16	; 0x10
     f60:	99 89       	ldd	r25, Y+17	; 0x11
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	81 f0       	breq	.+32     	; 0xf88 <start_game+0x76>
     f68:	85 c0       	rjmp	.+266    	; 0x1074 <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
     f6a:	8d e5       	ldi	r24, 0x5D	; 93
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
     f74:	8d e6       	ldi	r24, 0x6D	; 109
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
     f7e:	8c e7       	ldi	r24, 0x7C	; 124
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
     f88:	89 e8       	ldi	r24, 0x89	; 137
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
			break;
		default:			
			return;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	aa ef       	ldi	r26, 0xFA	; 250
     f96:	b4 e4       	ldi	r27, 0x44	; 68
     f98:	8b 87       	std	Y+11, r24	; 0x0b
     f9a:	9c 87       	std	Y+12, r25	; 0x0c
     f9c:	ad 87       	std	Y+13, r26	; 0x0d
     f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	2a e9       	ldi	r18, 0x9A	; 154
     faa:	3b e9       	ldi	r19, 0x9B	; 155
     fac:	49 e9       	ldi	r20, 0x99	; 153
     fae:	54 e4       	ldi	r21, 0x44	; 68
     fb0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	98 87       	std	Y+8, r25	; 0x08
     fbc:	a9 87       	std	Y+9, r26	; 0x09
     fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 cd 0c 	call	0x199a	; 0x199a <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <start_game+0xd0>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <start_game+0x14e>
	else if (__tmp > 65535)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 6d 0c 	call	0x18da	; 0x18da <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <start_game+0x130>
    1024:	8a e7       	ldi	r24, 0x7A	; 122
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <start_game+0x11e>
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <start_game+0x112>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <start_game+0x15a>
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
    1074:	61 96       	adiw	r28, 0x11	; 17
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <CAN_reset>:
#include "mcp2515.h"
#include "spi.h"

// Reset the CAN chip
void CAN_reset(void){
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
    108e:	83 e7       	ldi	r24, 0x73	; 115
    1090:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
    1094:	80 ec       	ldi	r24, 0xC0	; 192
    1096:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
    109a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	27 97       	sbiw	r28, 0x07	; 7
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	6d 83       	std	Y+5, r22	; 0x05
    10c2:	5f 83       	std	Y+7, r21	; 0x07
    10c4:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
    10c6:	83 e7       	ldi	r24, 0x73	; 115
    10c8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
    10d8:	1a 82       	std	Y+2, r1	; 0x02
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	10 c0       	rjmp	.+32     	; 0x10fe <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	8c 01       	movw	r16, r24
    10e8:	02 0f       	add	r16, r18
    10ea:	13 1f       	adc	r17, r19
    10ec:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    10f0:	f8 01       	movw	r30, r16
    10f2:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	29 81       	ldd	r18, Y+1	; 0x01
    1100:	3a 81       	ldd	r19, Y+2	; 0x02
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	9f 81       	ldd	r25, Y+7	; 0x07
    1106:	28 17       	cp	r18, r24
    1108:	39 07       	cpc	r19, r25
    110a:	4c f3       	brlt	.-46     	; 0x10de <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
    110c:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
    1110:	27 96       	adiw	r28, 0x07	; 7
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	08 95       	ret

00001126 <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <CAN_read_rx+0xa>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <CAN_read_rx+0xc>
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
    113c:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	90 f5       	brcc	.+100    	; 0x11a8 <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	88 23       	and	r24, r24
    1148:	19 f4       	brne	.+6      	; 0x1150 <CAN_read_rx+0x2a>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	05 c0       	rjmp	.+10     	; 0x115a <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	11 f4       	brne	.+4      	; 0x115a <CAN_read_rx+0x34>
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
    115a:	83 e7       	ldi	r24, 0x73	; 115
    115c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	80 69       	ori	r24, 0x90	; 144
    116c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
    1170:	1a 82       	std	Y+2, r1	; 0x02
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	12 c0       	rjmp	.+36     	; 0x119a <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
    1176:	eb 81       	ldd	r30, Y+3	; 0x03
    1178:	fc 81       	ldd	r31, Y+4	; 0x04
    117a:	23 81       	ldd	r18, Z+3	; 0x03
    117c:	34 81       	ldd	r19, Z+4	; 0x04
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	89 01       	movw	r16, r18
    1184:	08 0f       	add	r16, r24
    1186:	19 1f       	adc	r17, r25
    1188:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    118c:	f8 01       	movw	r30, r16
    118e:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	91 05       	cpc	r25, r1
    11a2:	4c f3       	brlt	.-46     	; 0x1176 <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
    11a4:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <CAN_write>:

void CAN_write(char data, uint8_t address){
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <CAN_write+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <CAN_write+0x8>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	8b 83       	std	Y+3, r24	; 0x03
    11ca:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	SPI_SelectSlave(SPI_CAN);	
    11cc:	83 e7       	ldi	r24, 0x73	; 115
    11ce:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		SPI_MasterTransmit(data);
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    11e4:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* msg, uint8_t tx){
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <CAN_load_tx+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <CAN_load_tx+0x8>
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
    1208:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2)
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	60 f5       	brcc	.+88     	; 0x1268 <CAN_load_tx+0x72>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
    1220:	83 e7       	ldi	r24, 0x73	; 115
    1222:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	80 64       	ori	r24, 0x40	; 64
    122a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < 8; i++){
    122e:	1a 82       	std	Y+2, r1	; 0x02
    1230:	19 82       	std	Y+1, r1	; 0x01
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <CAN_load_tx+0x5c>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
    1234:	29 81       	ldd	r18, Y+1	; 0x01
    1236:	3a 81       	ldd	r19, Y+2	; 0x02
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	80 81       	ld	r24, Z
    1244:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < 8; i++){
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	91 05       	cpc	r25, r1
    125a:	64 f3       	brlt	.-40     	; 0x1234 <CAN_load_tx+0x3e>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
	}

	SPI_NoSlave();
    125c:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	printf("\n");
    1260:	8a e0       	ldi	r24, 0x0A	; 10
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <putchar>
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <CAN_rts>:

void CAN_rts(uint8_t tx){
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 23       	and	r24, r24
    1288:	19 f4       	brne	.+6      	; 0x1290 <CAN_rts+0x18>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	0b c0       	rjmp	.+22     	; 0x12a6 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	19 f4       	brne	.+6      	; 0x129c <CAN_rts+0x24>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	59 f4       	brne	.+22     	; 0x12b8 <CAN_rts+0x40>
    12a2:	84 e0       	ldi	r24, 0x04	; 4
    12a4:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
    12a6:	83 e7       	ldi	r24, 0x73	; 115
    12a8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	80 68       	ori	r24, 0x80	; 128
    12b0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    12b4:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <CAN_read_status>:

uint8_t CAN_read_status(void){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
    12ca:	83 e7       	ldi	r24, 0x73	; 115
    12cc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
    12d0:	80 ea       	ldi	r24, 0xA0	; 160
    12d2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
    12d6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    12da:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
    12dc:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	
	return (uint8_t) status;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <CAN_rx_status>:

uint8_t CAN_rx_status(void){
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
return 0;
    12f2:	80 e0       	ldi	r24, 0x00	; 0

}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <CAN_bit_modify>:
void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <CAN_bit_modify+0x6>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	6a 83       	std	Y+2, r22	; 0x02
    130a:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
    130c:	83 e7       	ldi	r24, 0x73	; 115
    130e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
    1312:	85 e0       	ldi	r24, 0x05	; 5
    1314:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    132a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <__fixunssfsi>:
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	7b 01       	movw	r14, r22
    1344:	8c 01       	movw	r16, r24
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	5f e4       	ldi	r21, 0x4F	; 79
    134e:	0e 94 9d 0c 	call	0x193a	; 0x193a <__gesf2>
    1352:	88 23       	and	r24, r24
    1354:	8c f0       	brlt	.+34     	; 0x1378 <__fixunssfsi+0x3e>
    1356:	c8 01       	movw	r24, r16
    1358:	b7 01       	movw	r22, r14
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	5f e4       	ldi	r21, 0x4F	; 79
    1362:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
    1366:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fixsfsi>
    136a:	9b 01       	movw	r18, r22
    136c:	ac 01       	movw	r20, r24
    136e:	20 50       	subi	r18, 0x00	; 0
    1370:	30 40       	sbci	r19, 0x00	; 0
    1372:	40 40       	sbci	r20, 0x00	; 0
    1374:	50 48       	sbci	r21, 0x80	; 128
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <__fixunssfsi+0x4a>
    1378:	c8 01       	movw	r24, r16
    137a:	b7 01       	movw	r22, r14
    137c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fixsfsi>
    1380:	9b 01       	movw	r18, r22
    1382:	ac 01       	movw	r20, r24
    1384:	b9 01       	movw	r22, r18
    1386:	ca 01       	movw	r24, r20
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	08 95       	ret

00001392 <_fpadd_parts>:
    1392:	a0 e0       	ldi	r26, 0x00	; 0
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ef ec       	ldi	r30, 0xCF	; 207
    1398:	f9 e0       	ldi	r31, 0x09	; 9
    139a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__>
    139e:	dc 01       	movw	r26, r24
    13a0:	2b 01       	movw	r4, r22
    13a2:	fa 01       	movw	r30, r20
    13a4:	9c 91       	ld	r25, X
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <_fpadd_parts+0x1a>
    13aa:	39 c1       	rjmp	.+626    	; 0x161e <_fpadd_parts+0x28c>
    13ac:	eb 01       	movw	r28, r22
    13ae:	88 81       	ld	r24, Y
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <_fpadd_parts+0x24>
    13b4:	33 c1       	rjmp	.+614    	; 0x161c <_fpadd_parts+0x28a>
    13b6:	94 30       	cpi	r25, 0x04	; 4
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <_fpadd_parts+0x42>
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <_fpadd_parts+0x2e>
    13be:	2f c1       	rjmp	.+606    	; 0x161e <_fpadd_parts+0x28c>
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	9c 91       	ld	r25, X
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	98 17       	cp	r25, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <_fpadd_parts+0x3c>
    13cc:	28 c1       	rjmp	.+592    	; 0x161e <_fpadd_parts+0x28c>
    13ce:	a5 e9       	ldi	r26, 0x95	; 149
    13d0:	b2 e0       	ldi	r27, 0x02	; 2
    13d2:	25 c1       	rjmp	.+586    	; 0x161e <_fpadd_parts+0x28c>
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	09 f4       	brne	.+2      	; 0x13da <_fpadd_parts+0x48>
    13d8:	21 c1       	rjmp	.+578    	; 0x161c <_fpadd_parts+0x28a>
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	a9 f4       	brne	.+42     	; 0x1408 <_fpadd_parts+0x76>
    13de:	92 30       	cpi	r25, 0x02	; 2
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <_fpadd_parts+0x52>
    13e2:	1d c1       	rjmp	.+570    	; 0x161e <_fpadd_parts+0x28c>
    13e4:	9a 01       	movw	r18, r20
    13e6:	ad 01       	movw	r20, r26
    13e8:	88 e0       	ldi	r24, 0x08	; 8
    13ea:	ea 01       	movw	r28, r20
    13ec:	09 90       	ld	r0, Y+
    13ee:	ae 01       	movw	r20, r28
    13f0:	e9 01       	movw	r28, r18
    13f2:	09 92       	st	Y+, r0
    13f4:	9e 01       	movw	r18, r28
    13f6:	81 50       	subi	r24, 0x01	; 1
    13f8:	c1 f7       	brne	.-16     	; 0x13ea <_fpadd_parts+0x58>
    13fa:	e2 01       	movw	r28, r4
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	9c 91       	ld	r25, X
    1402:	89 23       	and	r24, r25
    1404:	81 83       	std	Z+1, r24	; 0x01
    1406:	08 c1       	rjmp	.+528    	; 0x1618 <_fpadd_parts+0x286>
    1408:	92 30       	cpi	r25, 0x02	; 2
    140a:	09 f4       	brne	.+2      	; 0x140e <_fpadd_parts+0x7c>
    140c:	07 c1       	rjmp	.+526    	; 0x161c <_fpadd_parts+0x28a>
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	2d 90       	ld	r2, X+
    1412:	3c 90       	ld	r3, X
    1414:	13 97       	sbiw	r26, 0x03	; 3
    1416:	eb 01       	movw	r28, r22
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	9b 81       	ldd	r25, Y+3	; 0x03
    141c:	14 96       	adiw	r26, 0x04	; 4
    141e:	ad 90       	ld	r10, X+
    1420:	bd 90       	ld	r11, X+
    1422:	cd 90       	ld	r12, X+
    1424:	dc 90       	ld	r13, X
    1426:	17 97       	sbiw	r26, 0x07	; 7
    1428:	ec 80       	ldd	r14, Y+4	; 0x04
    142a:	fd 80       	ldd	r15, Y+5	; 0x05
    142c:	0e 81       	ldd	r16, Y+6	; 0x06
    142e:	1f 81       	ldd	r17, Y+7	; 0x07
    1430:	91 01       	movw	r18, r2
    1432:	28 1b       	sub	r18, r24
    1434:	39 0b       	sbc	r19, r25
    1436:	b9 01       	movw	r22, r18
    1438:	37 ff       	sbrs	r19, 7
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <_fpadd_parts+0xb2>
    143c:	66 27       	eor	r22, r22
    143e:	77 27       	eor	r23, r23
    1440:	62 1b       	sub	r22, r18
    1442:	73 0b       	sbc	r23, r19
    1444:	60 32       	cpi	r22, 0x20	; 32
    1446:	71 05       	cpc	r23, r1
    1448:	0c f0       	brlt	.+2      	; 0x144c <_fpadd_parts+0xba>
    144a:	61 c0       	rjmp	.+194    	; 0x150e <_fpadd_parts+0x17c>
    144c:	12 16       	cp	r1, r18
    144e:	13 06       	cpc	r1, r19
    1450:	6c f5       	brge	.+90     	; 0x14ac <_fpadd_parts+0x11a>
    1452:	37 01       	movw	r6, r14
    1454:	48 01       	movw	r8, r16
    1456:	06 2e       	mov	r0, r22
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <_fpadd_parts+0xd0>
    145a:	96 94       	lsr	r9
    145c:	87 94       	ror	r8
    145e:	77 94       	ror	r7
    1460:	67 94       	ror	r6
    1462:	0a 94       	dec	r0
    1464:	d2 f7       	brpl	.-12     	; 0x145a <_fpadd_parts+0xc8>
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <_fpadd_parts+0xe6>
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	44 1f       	adc	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	6a 95       	dec	r22
    147a:	d2 f7       	brpl	.-12     	; 0x1470 <_fpadd_parts+0xde>
    147c:	21 50       	subi	r18, 0x01	; 1
    147e:	30 40       	sbci	r19, 0x00	; 0
    1480:	40 40       	sbci	r20, 0x00	; 0
    1482:	50 40       	sbci	r21, 0x00	; 0
    1484:	2e 21       	and	r18, r14
    1486:	3f 21       	and	r19, r15
    1488:	40 23       	and	r20, r16
    148a:	51 23       	and	r21, r17
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	41 05       	cpc	r20, r1
    1492:	51 05       	cpc	r21, r1
    1494:	21 f0       	breq	.+8      	; 0x149e <_fpadd_parts+0x10c>
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	79 01       	movw	r14, r18
    14a0:	8a 01       	movw	r16, r20
    14a2:	e6 28       	or	r14, r6
    14a4:	f7 28       	or	r15, r7
    14a6:	08 29       	or	r16, r8
    14a8:	19 29       	or	r17, r9
    14aa:	3c c0       	rjmp	.+120    	; 0x1524 <_fpadd_parts+0x192>
    14ac:	23 2b       	or	r18, r19
    14ae:	d1 f1       	breq	.+116    	; 0x1524 <_fpadd_parts+0x192>
    14b0:	26 0e       	add	r2, r22
    14b2:	37 1e       	adc	r3, r23
    14b4:	35 01       	movw	r6, r10
    14b6:	46 01       	movw	r8, r12
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <_fpadd_parts+0x132>
    14bc:	96 94       	lsr	r9
    14be:	87 94       	ror	r8
    14c0:	77 94       	ror	r7
    14c2:	67 94       	ror	r6
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <_fpadd_parts+0x12a>
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <_fpadd_parts+0x148>
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	44 1f       	adc	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	6a 95       	dec	r22
    14dc:	d2 f7       	brpl	.-12     	; 0x14d2 <_fpadd_parts+0x140>
    14de:	21 50       	subi	r18, 0x01	; 1
    14e0:	30 40       	sbci	r19, 0x00	; 0
    14e2:	40 40       	sbci	r20, 0x00	; 0
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	2a 21       	and	r18, r10
    14e8:	3b 21       	and	r19, r11
    14ea:	4c 21       	and	r20, r12
    14ec:	5d 21       	and	r21, r13
    14ee:	21 15       	cp	r18, r1
    14f0:	31 05       	cpc	r19, r1
    14f2:	41 05       	cpc	r20, r1
    14f4:	51 05       	cpc	r21, r1
    14f6:	21 f0       	breq	.+8      	; 0x1500 <_fpadd_parts+0x16e>
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	59 01       	movw	r10, r18
    1502:	6a 01       	movw	r12, r20
    1504:	a6 28       	or	r10, r6
    1506:	b7 28       	or	r11, r7
    1508:	c8 28       	or	r12, r8
    150a:	d9 28       	or	r13, r9
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <_fpadd_parts+0x192>
    150e:	82 15       	cp	r24, r2
    1510:	93 05       	cpc	r25, r3
    1512:	2c f0       	brlt	.+10     	; 0x151e <_fpadd_parts+0x18c>
    1514:	1c 01       	movw	r2, r24
    1516:	aa 24       	eor	r10, r10
    1518:	bb 24       	eor	r11, r11
    151a:	65 01       	movw	r12, r10
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <_fpadd_parts+0x192>
    151e:	ee 24       	eor	r14, r14
    1520:	ff 24       	eor	r15, r15
    1522:	87 01       	movw	r16, r14
    1524:	11 96       	adiw	r26, 0x01	; 1
    1526:	9c 91       	ld	r25, X
    1528:	d2 01       	movw	r26, r4
    152a:	11 96       	adiw	r26, 0x01	; 1
    152c:	8c 91       	ld	r24, X
    152e:	98 17       	cp	r25, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <_fpadd_parts+0x1a2>
    1532:	45 c0       	rjmp	.+138    	; 0x15be <_fpadd_parts+0x22c>
    1534:	99 23       	and	r25, r25
    1536:	39 f0       	breq	.+14     	; 0x1546 <_fpadd_parts+0x1b4>
    1538:	a8 01       	movw	r20, r16
    153a:	97 01       	movw	r18, r14
    153c:	2a 19       	sub	r18, r10
    153e:	3b 09       	sbc	r19, r11
    1540:	4c 09       	sbc	r20, r12
    1542:	5d 09       	sbc	r21, r13
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <_fpadd_parts+0x1c0>
    1546:	a6 01       	movw	r20, r12
    1548:	95 01       	movw	r18, r10
    154a:	2e 19       	sub	r18, r14
    154c:	3f 09       	sbc	r19, r15
    154e:	40 0b       	sbc	r20, r16
    1550:	51 0b       	sbc	r21, r17
    1552:	57 fd       	sbrc	r21, 7
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <_fpadd_parts+0x1d4>
    1556:	11 82       	std	Z+1, r1	; 0x01
    1558:	33 82       	std	Z+3, r3	; 0x03
    155a:	22 82       	std	Z+2, r2	; 0x02
    155c:	24 83       	std	Z+4, r18	; 0x04
    155e:	35 83       	std	Z+5, r19	; 0x05
    1560:	46 83       	std	Z+6, r20	; 0x06
    1562:	57 83       	std	Z+7, r21	; 0x07
    1564:	1d c0       	rjmp	.+58     	; 0x15a0 <_fpadd_parts+0x20e>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	81 83       	std	Z+1, r24	; 0x01
    156a:	33 82       	std	Z+3, r3	; 0x03
    156c:	22 82       	std	Z+2, r2	; 0x02
    156e:	88 27       	eor	r24, r24
    1570:	99 27       	eor	r25, r25
    1572:	dc 01       	movw	r26, r24
    1574:	82 1b       	sub	r24, r18
    1576:	93 0b       	sbc	r25, r19
    1578:	a4 0b       	sbc	r26, r20
    157a:	b5 0b       	sbc	r27, r21
    157c:	84 83       	std	Z+4, r24	; 0x04
    157e:	95 83       	std	Z+5, r25	; 0x05
    1580:	a6 83       	std	Z+6, r26	; 0x06
    1582:	b7 83       	std	Z+7, r27	; 0x07
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <_fpadd_parts+0x20e>
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	44 1f       	adc	r20, r20
    158c:	55 1f       	adc	r21, r21
    158e:	24 83       	std	Z+4, r18	; 0x04
    1590:	35 83       	std	Z+5, r19	; 0x05
    1592:	46 83       	std	Z+6, r20	; 0x06
    1594:	57 83       	std	Z+7, r21	; 0x07
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	93 83       	std	Z+3, r25	; 0x03
    159e:	82 83       	std	Z+2, r24	; 0x02
    15a0:	24 81       	ldd	r18, Z+4	; 0x04
    15a2:	35 81       	ldd	r19, Z+5	; 0x05
    15a4:	46 81       	ldd	r20, Z+6	; 0x06
    15a6:	57 81       	ldd	r21, Z+7	; 0x07
    15a8:	da 01       	movw	r26, r20
    15aa:	c9 01       	movw	r24, r18
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	a1 09       	sbc	r26, r1
    15b0:	b1 09       	sbc	r27, r1
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	af 4f       	sbci	r26, 0xFF	; 255
    15b8:	bf 43       	sbci	r27, 0x3F	; 63
    15ba:	28 f3       	brcs	.-54     	; 0x1586 <_fpadd_parts+0x1f4>
    15bc:	0b c0       	rjmp	.+22     	; 0x15d4 <_fpadd_parts+0x242>
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	33 82       	std	Z+3, r3	; 0x03
    15c2:	22 82       	std	Z+2, r2	; 0x02
    15c4:	ea 0c       	add	r14, r10
    15c6:	fb 1c       	adc	r15, r11
    15c8:	0c 1d       	adc	r16, r12
    15ca:	1d 1d       	adc	r17, r13
    15cc:	e4 82       	std	Z+4, r14	; 0x04
    15ce:	f5 82       	std	Z+5, r15	; 0x05
    15d0:	06 83       	std	Z+6, r16	; 0x06
    15d2:	17 83       	std	Z+7, r17	; 0x07
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	80 83       	st	Z, r24
    15d8:	24 81       	ldd	r18, Z+4	; 0x04
    15da:	35 81       	ldd	r19, Z+5	; 0x05
    15dc:	46 81       	ldd	r20, Z+6	; 0x06
    15de:	57 81       	ldd	r21, Z+7	; 0x07
    15e0:	57 ff       	sbrs	r21, 7
    15e2:	1a c0       	rjmp	.+52     	; 0x1618 <_fpadd_parts+0x286>
    15e4:	c9 01       	movw	r24, r18
    15e6:	aa 27       	eor	r26, r26
    15e8:	97 fd       	sbrc	r25, 7
    15ea:	a0 95       	com	r26
    15ec:	ba 2f       	mov	r27, r26
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	a0 70       	andi	r26, 0x00	; 0
    15f4:	b0 70       	andi	r27, 0x00	; 0
    15f6:	56 95       	lsr	r21
    15f8:	47 95       	ror	r20
    15fa:	37 95       	ror	r19
    15fc:	27 95       	ror	r18
    15fe:	82 2b       	or	r24, r18
    1600:	93 2b       	or	r25, r19
    1602:	a4 2b       	or	r26, r20
    1604:	b5 2b       	or	r27, r21
    1606:	84 83       	std	Z+4, r24	; 0x04
    1608:	95 83       	std	Z+5, r25	; 0x05
    160a:	a6 83       	std	Z+6, r26	; 0x06
    160c:	b7 83       	std	Z+7, r27	; 0x07
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	93 83       	std	Z+3, r25	; 0x03
    1616:	82 83       	std	Z+2, r24	; 0x02
    1618:	df 01       	movw	r26, r30
    161a:	01 c0       	rjmp	.+2      	; 0x161e <_fpadd_parts+0x28c>
    161c:	d2 01       	movw	r26, r4
    161e:	cd 01       	movw	r24, r26
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	e2 e1       	ldi	r30, 0x12	; 18
    1626:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__>

0000162a <__subsf3>:
    162a:	a0 e2       	ldi	r26, 0x20	; 32
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e1       	ldi	r30, 0x1B	; 27
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	3e 83       	std	Y+6, r19	; 0x06
    1642:	4f 83       	std	Y+7, r20	; 0x07
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	e9 e0       	ldi	r30, 0x09	; 9
    1648:	ee 2e       	mov	r14, r30
    164a:	f1 2c       	mov	r15, r1
    164c:	ec 0e       	add	r14, r28
    164e:	fd 1e       	adc	r15, r29
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	b7 01       	movw	r22, r14
    1656:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    165a:	8e 01       	movw	r16, r28
    165c:	0f 5e       	subi	r16, 0xEF	; 239
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	ce 01       	movw	r24, r28
    1662:	05 96       	adiw	r24, 0x05	; 5
    1664:	b8 01       	movw	r22, r16
    1666:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    166a:	8a 89       	ldd	r24, Y+18	; 0x12
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	89 27       	eor	r24, r25
    1670:	8a 8b       	std	Y+18, r24	; 0x12
    1672:	c7 01       	movw	r24, r14
    1674:	b8 01       	movw	r22, r16
    1676:	ae 01       	movw	r20, r28
    1678:	47 5e       	subi	r20, 0xE7	; 231
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	0e 94 c9 09 	call	0x1392	; 0x1392 <_fpadd_parts>
    1680:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__pack_f>
    1684:	a0 96       	adiw	r28, 0x20	; 32
    1686:	e6 e0       	ldi	r30, 0x06	; 6
    1688:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

0000168c <__addsf3>:
    168c:	a0 e2       	ldi	r26, 0x20	; 32
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ec e4       	ldi	r30, 0x4C	; 76
    1692:	fb e0       	ldi	r31, 0x0B	; 11
    1694:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
    1698:	69 83       	std	Y+1, r22	; 0x01
    169a:	7a 83       	std	Y+2, r23	; 0x02
    169c:	8b 83       	std	Y+3, r24	; 0x03
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	2d 83       	std	Y+5, r18	; 0x05
    16a2:	3e 83       	std	Y+6, r19	; 0x06
    16a4:	4f 83       	std	Y+7, r20	; 0x07
    16a6:	58 87       	std	Y+8, r21	; 0x08
    16a8:	f9 e0       	ldi	r31, 0x09	; 9
    16aa:	ef 2e       	mov	r14, r31
    16ac:	f1 2c       	mov	r15, r1
    16ae:	ec 0e       	add	r14, r28
    16b0:	fd 1e       	adc	r15, r29
    16b2:	ce 01       	movw	r24, r28
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	b7 01       	movw	r22, r14
    16b8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    16bc:	8e 01       	movw	r16, r28
    16be:	0f 5e       	subi	r16, 0xEF	; 239
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	ce 01       	movw	r24, r28
    16c4:	05 96       	adiw	r24, 0x05	; 5
    16c6:	b8 01       	movw	r22, r16
    16c8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    16cc:	c7 01       	movw	r24, r14
    16ce:	b8 01       	movw	r22, r16
    16d0:	ae 01       	movw	r20, r28
    16d2:	47 5e       	subi	r20, 0xE7	; 231
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	0e 94 c9 09 	call	0x1392	; 0x1392 <_fpadd_parts>
    16da:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__pack_f>
    16de:	a0 96       	adiw	r28, 0x20	; 32
    16e0:	e6 e0       	ldi	r30, 0x06	; 6
    16e2:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

000016e6 <__mulsf3>:
    16e6:	a0 e2       	ldi	r26, 0x20	; 32
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e9 e7       	ldi	r30, 0x79	; 121
    16ec:	fb e0       	ldi	r31, 0x0B	; 11
    16ee:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__>
    16f2:	69 83       	std	Y+1, r22	; 0x01
    16f4:	7a 83       	std	Y+2, r23	; 0x02
    16f6:	8b 83       	std	Y+3, r24	; 0x03
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	2d 83       	std	Y+5, r18	; 0x05
    16fc:	3e 83       	std	Y+6, r19	; 0x06
    16fe:	4f 83       	std	Y+7, r20	; 0x07
    1700:	58 87       	std	Y+8, r21	; 0x08
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	be 01       	movw	r22, r28
    1708:	67 5f       	subi	r22, 0xF7	; 247
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    1710:	ce 01       	movw	r24, r28
    1712:	05 96       	adiw	r24, 0x05	; 5
    1714:	be 01       	movw	r22, r28
    1716:	6f 5e       	subi	r22, 0xEF	; 239
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    171e:	99 85       	ldd	r25, Y+9	; 0x09
    1720:	92 30       	cpi	r25, 0x02	; 2
    1722:	88 f0       	brcs	.+34     	; 0x1746 <__mulsf3+0x60>
    1724:	89 89       	ldd	r24, Y+17	; 0x11
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	c8 f0       	brcs	.+50     	; 0x175c <__mulsf3+0x76>
    172a:	94 30       	cpi	r25, 0x04	; 4
    172c:	19 f4       	brne	.+6      	; 0x1734 <__mulsf3+0x4e>
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	51 f4       	brne	.+20     	; 0x1746 <__mulsf3+0x60>
    1732:	04 c0       	rjmp	.+8      	; 0x173c <__mulsf3+0x56>
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	29 f4       	brne	.+10     	; 0x1742 <__mulsf3+0x5c>
    1738:	92 30       	cpi	r25, 0x02	; 2
    173a:	81 f4       	brne	.+32     	; 0x175c <__mulsf3+0x76>
    173c:	85 e9       	ldi	r24, 0x95	; 149
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	c6 c0       	rjmp	.+396    	; 0x18ce <__mulsf3+0x1e8>
    1742:	92 30       	cpi	r25, 0x02	; 2
    1744:	49 f4       	brne	.+18     	; 0x1758 <__mulsf3+0x72>
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	8a 89       	ldd	r24, Y+18	; 0x12
    174c:	98 13       	cpse	r25, r24
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	2a 87       	std	Y+10, r18	; 0x0a
    1752:	ce 01       	movw	r24, r28
    1754:	09 96       	adiw	r24, 0x09	; 9
    1756:	bb c0       	rjmp	.+374    	; 0x18ce <__mulsf3+0x1e8>
    1758:	82 30       	cpi	r24, 0x02	; 2
    175a:	49 f4       	brne	.+18     	; 0x176e <__mulsf3+0x88>
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	8a 89       	ldd	r24, Y+18	; 0x12
    1762:	98 13       	cpse	r25, r24
    1764:	21 e0       	ldi	r18, 0x01	; 1
    1766:	2a 8b       	std	Y+18, r18	; 0x12
    1768:	ce 01       	movw	r24, r28
    176a:	41 96       	adiw	r24, 0x11	; 17
    176c:	b0 c0       	rjmp	.+352    	; 0x18ce <__mulsf3+0x1e8>
    176e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1770:	3e 84       	ldd	r3, Y+14	; 0x0e
    1772:	4f 84       	ldd	r4, Y+15	; 0x0f
    1774:	58 88       	ldd	r5, Y+16	; 0x10
    1776:	6d 88       	ldd	r6, Y+21	; 0x15
    1778:	7e 88       	ldd	r7, Y+22	; 0x16
    177a:	8f 88       	ldd	r8, Y+23	; 0x17
    177c:	98 8c       	ldd	r9, Y+24	; 0x18
    177e:	ee 24       	eor	r14, r14
    1780:	ff 24       	eor	r15, r15
    1782:	87 01       	movw	r16, r14
    1784:	aa 24       	eor	r10, r10
    1786:	bb 24       	eor	r11, r11
    1788:	65 01       	movw	r12, r10
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	e0 e0       	ldi	r30, 0x00	; 0
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	c1 01       	movw	r24, r2
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	89 2b       	or	r24, r25
    179e:	e9 f0       	breq	.+58     	; 0x17da <__mulsf3+0xf4>
    17a0:	e6 0c       	add	r14, r6
    17a2:	f7 1c       	adc	r15, r7
    17a4:	08 1d       	adc	r16, r8
    17a6:	19 1d       	adc	r17, r9
    17a8:	9a 01       	movw	r18, r20
    17aa:	ab 01       	movw	r20, r22
    17ac:	2a 0d       	add	r18, r10
    17ae:	3b 1d       	adc	r19, r11
    17b0:	4c 1d       	adc	r20, r12
    17b2:	5d 1d       	adc	r21, r13
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e6 14       	cp	r14, r6
    17be:	f7 04       	cpc	r15, r7
    17c0:	08 05       	cpc	r16, r8
    17c2:	19 05       	cpc	r17, r9
    17c4:	20 f4       	brcc	.+8      	; 0x17ce <__mulsf3+0xe8>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ba 01       	movw	r22, r20
    17d0:	a9 01       	movw	r20, r18
    17d2:	48 0f       	add	r20, r24
    17d4:	59 1f       	adc	r21, r25
    17d6:	6a 1f       	adc	r22, r26
    17d8:	7b 1f       	adc	r23, r27
    17da:	aa 0c       	add	r10, r10
    17dc:	bb 1c       	adc	r11, r11
    17de:	cc 1c       	adc	r12, r12
    17e0:	dd 1c       	adc	r13, r13
    17e2:	97 fe       	sbrs	r9, 7
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <__mulsf3+0x110>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	a8 2a       	or	r10, r24
    17f0:	b9 2a       	or	r11, r25
    17f2:	ca 2a       	or	r12, r26
    17f4:	db 2a       	or	r13, r27
    17f6:	31 96       	adiw	r30, 0x01	; 1
    17f8:	e0 32       	cpi	r30, 0x20	; 32
    17fa:	f1 05       	cpc	r31, r1
    17fc:	49 f0       	breq	.+18     	; 0x1810 <__mulsf3+0x12a>
    17fe:	66 0c       	add	r6, r6
    1800:	77 1c       	adc	r7, r7
    1802:	88 1c       	adc	r8, r8
    1804:	99 1c       	adc	r9, r9
    1806:	56 94       	lsr	r5
    1808:	47 94       	ror	r4
    180a:	37 94       	ror	r3
    180c:	27 94       	ror	r2
    180e:	c3 cf       	rjmp	.-122    	; 0x1796 <__mulsf3+0xb0>
    1810:	fa 85       	ldd	r31, Y+10	; 0x0a
    1812:	ea 89       	ldd	r30, Y+18	; 0x12
    1814:	2b 89       	ldd	r18, Y+19	; 0x13
    1816:	3c 89       	ldd	r19, Y+20	; 0x14
    1818:	8b 85       	ldd	r24, Y+11	; 0x0b
    181a:	9c 85       	ldd	r25, Y+12	; 0x0c
    181c:	28 0f       	add	r18, r24
    181e:	39 1f       	adc	r19, r25
    1820:	2e 5f       	subi	r18, 0xFE	; 254
    1822:	3f 4f       	sbci	r19, 0xFF	; 255
    1824:	17 c0       	rjmp	.+46     	; 0x1854 <__mulsf3+0x16e>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	90 70       	andi	r25, 0x00	; 0
    182c:	89 2b       	or	r24, r25
    182e:	61 f0       	breq	.+24     	; 0x1848 <__mulsf3+0x162>
    1830:	16 95       	lsr	r17
    1832:	07 95       	ror	r16
    1834:	f7 94       	ror	r15
    1836:	e7 94       	ror	r14
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e8       	ldi	r27, 0x80	; 128
    1840:	e8 2a       	or	r14, r24
    1842:	f9 2a       	or	r15, r25
    1844:	0a 2b       	or	r16, r26
    1846:	1b 2b       	or	r17, r27
    1848:	76 95       	lsr	r23
    184a:	67 95       	ror	r22
    184c:	57 95       	ror	r21
    184e:	47 95       	ror	r20
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	77 fd       	sbrc	r23, 7
    1856:	e7 cf       	rjmp	.-50     	; 0x1826 <__mulsf3+0x140>
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <__mulsf3+0x18c>
    185a:	44 0f       	add	r20, r20
    185c:	55 1f       	adc	r21, r21
    185e:	66 1f       	adc	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	17 fd       	sbrc	r17, 7
    1864:	41 60       	ori	r20, 0x01	; 1
    1866:	ee 0c       	add	r14, r14
    1868:	ff 1c       	adc	r15, r15
    186a:	00 1f       	adc	r16, r16
    186c:	11 1f       	adc	r17, r17
    186e:	21 50       	subi	r18, 0x01	; 1
    1870:	30 40       	sbci	r19, 0x00	; 0
    1872:	40 30       	cpi	r20, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	59 07       	cpc	r21, r25
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	69 07       	cpc	r22, r25
    187c:	90 e4       	ldi	r25, 0x40	; 64
    187e:	79 07       	cpc	r23, r25
    1880:	60 f3       	brcs	.-40     	; 0x185a <__mulsf3+0x174>
    1882:	2b 8f       	std	Y+27, r18	; 0x1b
    1884:	3c 8f       	std	Y+28, r19	; 0x1c
    1886:	db 01       	movw	r26, r22
    1888:	ca 01       	movw	r24, r20
    188a:	8f 77       	andi	r24, 0x7F	; 127
    188c:	90 70       	andi	r25, 0x00	; 0
    188e:	a0 70       	andi	r26, 0x00	; 0
    1890:	b0 70       	andi	r27, 0x00	; 0
    1892:	80 34       	cpi	r24, 0x40	; 64
    1894:	91 05       	cpc	r25, r1
    1896:	a1 05       	cpc	r26, r1
    1898:	b1 05       	cpc	r27, r1
    189a:	61 f4       	brne	.+24     	; 0x18b4 <__mulsf3+0x1ce>
    189c:	47 fd       	sbrc	r20, 7
    189e:	0a c0       	rjmp	.+20     	; 0x18b4 <__mulsf3+0x1ce>
    18a0:	e1 14       	cp	r14, r1
    18a2:	f1 04       	cpc	r15, r1
    18a4:	01 05       	cpc	r16, r1
    18a6:	11 05       	cpc	r17, r1
    18a8:	29 f0       	breq	.+10     	; 0x18b4 <__mulsf3+0x1ce>
    18aa:	40 5c       	subi	r20, 0xC0	; 192
    18ac:	5f 4f       	sbci	r21, 0xFF	; 255
    18ae:	6f 4f       	sbci	r22, 0xFF	; 255
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	40 78       	andi	r20, 0x80	; 128
    18b4:	1a 8e       	std	Y+26, r1	; 0x1a
    18b6:	fe 17       	cp	r31, r30
    18b8:	11 f0       	breq	.+4      	; 0x18be <__mulsf3+0x1d8>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	8a 8f       	std	Y+26, r24	; 0x1a
    18be:	4d 8f       	std	Y+29, r20	; 0x1d
    18c0:	5e 8f       	std	Y+30, r21	; 0x1e
    18c2:	6f 8f       	std	Y+31, r22	; 0x1f
    18c4:	78 a3       	std	Y+32, r23	; 0x20
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	89 8f       	std	Y+25, r24	; 0x19
    18ca:	ce 01       	movw	r24, r28
    18cc:	49 96       	adiw	r24, 0x19	; 25
    18ce:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__pack_f>
    18d2:	a0 96       	adiw	r28, 0x20	; 32
    18d4:	e2 e1       	ldi	r30, 0x12	; 18
    18d6:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__>

000018da <__gtsf2>:
    18da:	a8 e1       	ldi	r26, 0x18	; 24
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e3 e7       	ldi	r30, 0x73	; 115
    18e0:	fc e0       	ldi	r31, 0x0C	; 12
    18e2:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
    18e6:	69 83       	std	Y+1, r22	; 0x01
    18e8:	7a 83       	std	Y+2, r23	; 0x02
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	9c 83       	std	Y+4, r25	; 0x04
    18ee:	2d 83       	std	Y+5, r18	; 0x05
    18f0:	3e 83       	std	Y+6, r19	; 0x06
    18f2:	4f 83       	std	Y+7, r20	; 0x07
    18f4:	58 87       	std	Y+8, r21	; 0x08
    18f6:	89 e0       	ldi	r24, 0x09	; 9
    18f8:	e8 2e       	mov	r14, r24
    18fa:	f1 2c       	mov	r15, r1
    18fc:	ec 0e       	add	r14, r28
    18fe:	fd 1e       	adc	r15, r29
    1900:	ce 01       	movw	r24, r28
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	b7 01       	movw	r22, r14
    1906:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    190a:	8e 01       	movw	r16, r28
    190c:	0f 5e       	subi	r16, 0xEF	; 239
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	ce 01       	movw	r24, r28
    1912:	05 96       	adiw	r24, 0x05	; 5
    1914:	b8 01       	movw	r22, r16
    1916:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	40 f0       	brcs	.+16     	; 0x1930 <__gtsf2+0x56>
    1920:	89 89       	ldd	r24, Y+17	; 0x11
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	28 f0       	brcs	.+10     	; 0x1930 <__gtsf2+0x56>
    1926:	c7 01       	movw	r24, r14
    1928:	b8 01       	movw	r22, r16
    192a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fpcmp_parts_f>
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <__gtsf2+0x58>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	68 96       	adiw	r28, 0x18	; 24
    1934:	e6 e0       	ldi	r30, 0x06	; 6
    1936:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

0000193a <__gesf2>:
    193a:	a8 e1       	ldi	r26, 0x18	; 24
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e3 ea       	ldi	r30, 0xA3	; 163
    1940:	fc e0       	ldi	r31, 0x0C	; 12
    1942:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
    1946:	69 83       	std	Y+1, r22	; 0x01
    1948:	7a 83       	std	Y+2, r23	; 0x02
    194a:	8b 83       	std	Y+3, r24	; 0x03
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	2d 83       	std	Y+5, r18	; 0x05
    1950:	3e 83       	std	Y+6, r19	; 0x06
    1952:	4f 83       	std	Y+7, r20	; 0x07
    1954:	58 87       	std	Y+8, r21	; 0x08
    1956:	89 e0       	ldi	r24, 0x09	; 9
    1958:	e8 2e       	mov	r14, r24
    195a:	f1 2c       	mov	r15, r1
    195c:	ec 0e       	add	r14, r28
    195e:	fd 1e       	adc	r15, r29
    1960:	ce 01       	movw	r24, r28
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	b7 01       	movw	r22, r14
    1966:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    196a:	8e 01       	movw	r16, r28
    196c:	0f 5e       	subi	r16, 0xEF	; 239
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	ce 01       	movw	r24, r28
    1972:	05 96       	adiw	r24, 0x05	; 5
    1974:	b8 01       	movw	r22, r16
    1976:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	40 f0       	brcs	.+16     	; 0x1990 <__gesf2+0x56>
    1980:	89 89       	ldd	r24, Y+17	; 0x11
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	28 f0       	brcs	.+10     	; 0x1990 <__gesf2+0x56>
    1986:	c7 01       	movw	r24, r14
    1988:	b8 01       	movw	r22, r16
    198a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fpcmp_parts_f>
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <__gesf2+0x58>
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	68 96       	adiw	r28, 0x18	; 24
    1994:	e6 e0       	ldi	r30, 0x06	; 6
    1996:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

0000199a <__ltsf2>:
    199a:	a8 e1       	ldi	r26, 0x18	; 24
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 ed       	ldi	r30, 0xD3	; 211
    19a0:	fc e0       	ldi	r31, 0x0C	; 12
    19a2:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
    19a6:	69 83       	std	Y+1, r22	; 0x01
    19a8:	7a 83       	std	Y+2, r23	; 0x02
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	2d 83       	std	Y+5, r18	; 0x05
    19b0:	3e 83       	std	Y+6, r19	; 0x06
    19b2:	4f 83       	std	Y+7, r20	; 0x07
    19b4:	58 87       	std	Y+8, r21	; 0x08
    19b6:	89 e0       	ldi	r24, 0x09	; 9
    19b8:	e8 2e       	mov	r14, r24
    19ba:	f1 2c       	mov	r15, r1
    19bc:	ec 0e       	add	r14, r28
    19be:	fd 1e       	adc	r15, r29
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	b7 01       	movw	r22, r14
    19c6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    19ca:	8e 01       	movw	r16, r28
    19cc:	0f 5e       	subi	r16, 0xEF	; 239
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	ce 01       	movw	r24, r28
    19d2:	05 96       	adiw	r24, 0x05	; 5
    19d4:	b8 01       	movw	r22, r16
    19d6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    19da:	89 85       	ldd	r24, Y+9	; 0x09
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	40 f0       	brcs	.+16     	; 0x19f0 <__ltsf2+0x56>
    19e0:	89 89       	ldd	r24, Y+17	; 0x11
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	28 f0       	brcs	.+10     	; 0x19f0 <__ltsf2+0x56>
    19e6:	c7 01       	movw	r24, r14
    19e8:	b8 01       	movw	r22, r16
    19ea:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fpcmp_parts_f>
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <__ltsf2+0x58>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	68 96       	adiw	r28, 0x18	; 24
    19f4:	e6 e0       	ldi	r30, 0x06	; 6
    19f6:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

000019fa <__fixsfsi>:
    19fa:	ac e0       	ldi	r26, 0x0C	; 12
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e3 e0       	ldi	r30, 0x03	; 3
    1a00:	fd e0       	ldi	r31, 0x0D	; 13
    1a02:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x20>
    1a06:	69 83       	std	Y+1, r22	; 0x01
    1a08:	7a 83       	std	Y+2, r23	; 0x02
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	ce 01       	movw	r24, r28
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	be 01       	movw	r22, r28
    1a14:	6b 5f       	subi	r22, 0xFB	; 251
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__unpack_f>
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	61 f1       	breq	.+88     	; 0x1a7a <__fixsfsi+0x80>
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	50 f1       	brcs	.+84     	; 0x1a7a <__fixsfsi+0x80>
    1a26:	84 30       	cpi	r24, 0x04	; 4
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <__fixsfsi+0x38>
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	88 23       	and	r24, r24
    1a2e:	51 f1       	breq	.+84     	; 0x1a84 <__fixsfsi+0x8a>
    1a30:	2e c0       	rjmp	.+92     	; 0x1a8e <__fixsfsi+0x94>
    1a32:	2f 81       	ldd	r18, Y+7	; 0x07
    1a34:	38 85       	ldd	r19, Y+8	; 0x08
    1a36:	37 fd       	sbrc	r19, 7
    1a38:	20 c0       	rjmp	.+64     	; 0x1a7a <__fixsfsi+0x80>
    1a3a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a3c:	2f 31       	cpi	r18, 0x1F	; 31
    1a3e:	31 05       	cpc	r19, r1
    1a40:	1c f0       	brlt	.+6      	; 0x1a48 <__fixsfsi+0x4e>
    1a42:	66 23       	and	r22, r22
    1a44:	f9 f0       	breq	.+62     	; 0x1a84 <__fixsfsi+0x8a>
    1a46:	23 c0       	rjmp	.+70     	; 0x1a8e <__fixsfsi+0x94>
    1a48:	8e e1       	ldi	r24, 0x1E	; 30
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	82 1b       	sub	r24, r18
    1a4e:	93 0b       	sbc	r25, r19
    1a50:	29 85       	ldd	r18, Y+9	; 0x09
    1a52:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a54:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a56:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <__fixsfsi+0x68>
    1a5a:	56 95       	lsr	r21
    1a5c:	47 95       	ror	r20
    1a5e:	37 95       	ror	r19
    1a60:	27 95       	ror	r18
    1a62:	8a 95       	dec	r24
    1a64:	d2 f7       	brpl	.-12     	; 0x1a5a <__fixsfsi+0x60>
    1a66:	66 23       	and	r22, r22
    1a68:	b1 f0       	breq	.+44     	; 0x1a96 <__fixsfsi+0x9c>
    1a6a:	50 95       	com	r21
    1a6c:	40 95       	com	r20
    1a6e:	30 95       	com	r19
    1a70:	21 95       	neg	r18
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	4f 4f       	sbci	r20, 0xFF	; 255
    1a76:	5f 4f       	sbci	r21, 0xFF	; 255
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <__fixsfsi+0x9c>
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <__fixsfsi+0x9c>
    1a84:	2f ef       	ldi	r18, 0xFF	; 255
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f ef       	ldi	r20, 0xFF	; 255
    1a8a:	5f e7       	ldi	r21, 0x7F	; 127
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <__fixsfsi+0x9c>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	50 e8       	ldi	r21, 0x80	; 128
    1a96:	b9 01       	movw	r22, r18
    1a98:	ca 01       	movw	r24, r20
    1a9a:	2c 96       	adiw	r28, 0x0c	; 12
    1a9c:	e2 e0       	ldi	r30, 0x02	; 2
    1a9e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x20>

00001aa2 <__pack_f>:
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	fc 01       	movw	r30, r24
    1aae:	e4 80       	ldd	r14, Z+4	; 0x04
    1ab0:	f5 80       	ldd	r15, Z+5	; 0x05
    1ab2:	06 81       	ldd	r16, Z+6	; 0x06
    1ab4:	17 81       	ldd	r17, Z+7	; 0x07
    1ab6:	d1 80       	ldd	r13, Z+1	; 0x01
    1ab8:	80 81       	ld	r24, Z
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	48 f4       	brcc	.+18     	; 0x1ad0 <__pack_f+0x2e>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a0 e1       	ldi	r26, 0x10	; 16
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e8 2a       	or	r14, r24
    1ac8:	f9 2a       	or	r15, r25
    1aca:	0a 2b       	or	r16, r26
    1acc:	1b 2b       	or	r17, r27
    1ace:	a5 c0       	rjmp	.+330    	; 0x1c1a <__pack_f+0x178>
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <__pack_f+0x34>
    1ad4:	9f c0       	rjmp	.+318    	; 0x1c14 <__pack_f+0x172>
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <__pack_f+0x40>
    1ada:	ee 24       	eor	r14, r14
    1adc:	ff 24       	eor	r15, r15
    1ade:	87 01       	movw	r16, r14
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <__pack_f+0x4a>
    1ae2:	e1 14       	cp	r14, r1
    1ae4:	f1 04       	cpc	r15, r1
    1ae6:	01 05       	cpc	r16, r1
    1ae8:	11 05       	cpc	r17, r1
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <__pack_f+0x50>
    1aec:	e0 e0       	ldi	r30, 0x00	; 0
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	96 c0       	rjmp	.+300    	; 0x1c1e <__pack_f+0x17c>
    1af2:	62 81       	ldd	r22, Z+2	; 0x02
    1af4:	73 81       	ldd	r23, Z+3	; 0x03
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	62 38       	cpi	r22, 0x82	; 130
    1afa:	79 07       	cpc	r23, r25
    1afc:	0c f0       	brlt	.+2      	; 0x1b00 <__pack_f+0x5e>
    1afe:	5b c0       	rjmp	.+182    	; 0x1bb6 <__pack_f+0x114>
    1b00:	22 e8       	ldi	r18, 0x82	; 130
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	26 1b       	sub	r18, r22
    1b06:	37 0b       	sbc	r19, r23
    1b08:	2a 31       	cpi	r18, 0x1A	; 26
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	2c f0       	brlt	.+10     	; 0x1b18 <__pack_f+0x76>
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	2a c0       	rjmp	.+84     	; 0x1b6c <__pack_f+0xca>
    1b18:	b8 01       	movw	r22, r16
    1b1a:	a7 01       	movw	r20, r14
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <__pack_f+0x86>
    1b20:	76 95       	lsr	r23
    1b22:	67 95       	ror	r22
    1b24:	57 95       	ror	r21
    1b26:	47 95       	ror	r20
    1b28:	0a 94       	dec	r0
    1b2a:	d2 f7       	brpl	.-12     	; 0x1b20 <__pack_f+0x7e>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <__pack_f+0x9c>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	2a 95       	dec	r18
    1b40:	d2 f7       	brpl	.-12     	; 0x1b36 <__pack_f+0x94>
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	a1 09       	sbc	r26, r1
    1b46:	b1 09       	sbc	r27, r1
    1b48:	8e 21       	and	r24, r14
    1b4a:	9f 21       	and	r25, r15
    1b4c:	a0 23       	and	r26, r16
    1b4e:	b1 23       	and	r27, r17
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	a1 05       	cpc	r26, r1
    1b54:	b1 05       	cpc	r27, r1
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <__pack_f+0xbe>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	9a 01       	movw	r18, r20
    1b62:	ab 01       	movw	r20, r22
    1b64:	28 2b       	or	r18, r24
    1b66:	39 2b       	or	r19, r25
    1b68:	4a 2b       	or	r20, r26
    1b6a:	5b 2b       	or	r21, r27
    1b6c:	da 01       	movw	r26, r20
    1b6e:	c9 01       	movw	r24, r18
    1b70:	8f 77       	andi	r24, 0x7F	; 127
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	a0 70       	andi	r26, 0x00	; 0
    1b76:	b0 70       	andi	r27, 0x00	; 0
    1b78:	80 34       	cpi	r24, 0x40	; 64
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	a1 05       	cpc	r26, r1
    1b7e:	b1 05       	cpc	r27, r1
    1b80:	39 f4       	brne	.+14     	; 0x1b90 <__pack_f+0xee>
    1b82:	27 ff       	sbrs	r18, 7
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <__pack_f+0xf6>
    1b86:	20 5c       	subi	r18, 0xC0	; 192
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <__pack_f+0xf6>
    1b90:	21 5c       	subi	r18, 0xC1	; 193
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	4f 4f       	sbci	r20, 0xFF	; 255
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	e0 e0       	ldi	r30, 0x00	; 0
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	20 30       	cpi	r18, 0x00	; 0
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	3a 07       	cpc	r19, r26
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	4a 07       	cpc	r20, r26
    1ba6:	a0 e4       	ldi	r26, 0x40	; 64
    1ba8:	5a 07       	cpc	r21, r26
    1baa:	10 f0       	brcs	.+4      	; 0x1bb0 <__pack_f+0x10e>
    1bac:	e1 e0       	ldi	r30, 0x01	; 1
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	79 01       	movw	r14, r18
    1bb2:	8a 01       	movw	r16, r20
    1bb4:	27 c0       	rjmp	.+78     	; 0x1c04 <__pack_f+0x162>
    1bb6:	60 38       	cpi	r22, 0x80	; 128
    1bb8:	71 05       	cpc	r23, r1
    1bba:	64 f5       	brge	.+88     	; 0x1c14 <__pack_f+0x172>
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	e1 58       	subi	r30, 0x81	; 129
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	d8 01       	movw	r26, r16
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	8f 77       	andi	r24, 0x7F	; 127
    1bc8:	90 70       	andi	r25, 0x00	; 0
    1bca:	a0 70       	andi	r26, 0x00	; 0
    1bcc:	b0 70       	andi	r27, 0x00	; 0
    1bce:	80 34       	cpi	r24, 0x40	; 64
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	a1 05       	cpc	r26, r1
    1bd4:	b1 05       	cpc	r27, r1
    1bd6:	39 f4       	brne	.+14     	; 0x1be6 <__pack_f+0x144>
    1bd8:	e7 fe       	sbrs	r14, 7
    1bda:	0d c0       	rjmp	.+26     	; 0x1bf6 <__pack_f+0x154>
    1bdc:	80 e4       	ldi	r24, 0x40	; 64
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <__pack_f+0x14c>
    1be6:	8f e3       	ldi	r24, 0x3F	; 63
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e8 0e       	add	r14, r24
    1bf0:	f9 1e       	adc	r15, r25
    1bf2:	0a 1f       	adc	r16, r26
    1bf4:	1b 1f       	adc	r17, r27
    1bf6:	17 ff       	sbrs	r17, 7
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <__pack_f+0x162>
    1bfa:	16 95       	lsr	r17
    1bfc:	07 95       	ror	r16
    1bfe:	f7 94       	ror	r15
    1c00:	e7 94       	ror	r14
    1c02:	31 96       	adiw	r30, 0x01	; 1
    1c04:	87 e0       	ldi	r24, 0x07	; 7
    1c06:	16 95       	lsr	r17
    1c08:	07 95       	ror	r16
    1c0a:	f7 94       	ror	r15
    1c0c:	e7 94       	ror	r14
    1c0e:	8a 95       	dec	r24
    1c10:	d1 f7       	brne	.-12     	; 0x1c06 <__pack_f+0x164>
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e <__pack_f+0x17c>
    1c14:	ee 24       	eor	r14, r14
    1c16:	ff 24       	eor	r15, r15
    1c18:	87 01       	movw	r16, r14
    1c1a:	ef ef       	ldi	r30, 0xFF	; 255
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	6e 2f       	mov	r22, r30
    1c20:	67 95       	ror	r22
    1c22:	66 27       	eor	r22, r22
    1c24:	67 95       	ror	r22
    1c26:	90 2f       	mov	r25, r16
    1c28:	9f 77       	andi	r25, 0x7F	; 127
    1c2a:	d7 94       	ror	r13
    1c2c:	dd 24       	eor	r13, r13
    1c2e:	d7 94       	ror	r13
    1c30:	8e 2f       	mov	r24, r30
    1c32:	86 95       	lsr	r24
    1c34:	49 2f       	mov	r20, r25
    1c36:	46 2b       	or	r20, r22
    1c38:	58 2f       	mov	r21, r24
    1c3a:	5d 29       	or	r21, r13
    1c3c:	b7 01       	movw	r22, r14
    1c3e:	ca 01       	movw	r24, r20
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	08 95       	ret

00001c4c <__unpack_f>:
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	db 01       	movw	r26, r22
    1c50:	40 81       	ld	r20, Z
    1c52:	51 81       	ldd	r21, Z+1	; 0x01
    1c54:	22 81       	ldd	r18, Z+2	; 0x02
    1c56:	62 2f       	mov	r22, r18
    1c58:	6f 77       	andi	r22, 0x7F	; 127
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	22 1f       	adc	r18, r18
    1c5e:	22 27       	eor	r18, r18
    1c60:	22 1f       	adc	r18, r18
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	89 2f       	mov	r24, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	82 2b       	or	r24, r18
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	99 1f       	adc	r25, r25
    1c70:	99 27       	eor	r25, r25
    1c72:	99 1f       	adc	r25, r25
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	9c 93       	st	X, r25
    1c78:	11 97       	sbiw	r26, 0x01	; 1
    1c7a:	21 15       	cp	r18, r1
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	a9 f5       	brne	.+106    	; 0x1cea <__unpack_f+0x9e>
    1c80:	41 15       	cp	r20, r1
    1c82:	51 05       	cpc	r21, r1
    1c84:	61 05       	cpc	r22, r1
    1c86:	71 05       	cpc	r23, r1
    1c88:	11 f4       	brne	.+4      	; 0x1c8e <__unpack_f+0x42>
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	37 c0       	rjmp	.+110    	; 0x1cfc <__unpack_f+0xb0>
    1c8e:	82 e8       	ldi	r24, 0x82	; 130
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	13 96       	adiw	r26, 0x03	; 3
    1c94:	9c 93       	st	X, r25
    1c96:	8e 93       	st	-X, r24
    1c98:	12 97       	sbiw	r26, 0x02	; 2
    1c9a:	9a 01       	movw	r18, r20
    1c9c:	ab 01       	movw	r20, r22
    1c9e:	67 e0       	ldi	r22, 0x07	; 7
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	44 1f       	adc	r20, r20
    1ca6:	55 1f       	adc	r21, r21
    1ca8:	6a 95       	dec	r22
    1caa:	d1 f7       	brne	.-12     	; 0x1ca0 <__unpack_f+0x54>
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	8c 93       	st	X, r24
    1cb0:	0d c0       	rjmp	.+26     	; 0x1ccc <__unpack_f+0x80>
    1cb2:	22 0f       	add	r18, r18
    1cb4:	33 1f       	adc	r19, r19
    1cb6:	44 1f       	adc	r20, r20
    1cb8:	55 1f       	adc	r21, r21
    1cba:	12 96       	adiw	r26, 0x02	; 2
    1cbc:	8d 91       	ld	r24, X+
    1cbe:	9c 91       	ld	r25, X
    1cc0:	13 97       	sbiw	r26, 0x03	; 3
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	13 96       	adiw	r26, 0x03	; 3
    1cc6:	9c 93       	st	X, r25
    1cc8:	8e 93       	st	-X, r24
    1cca:	12 97       	sbiw	r26, 0x02	; 2
    1ccc:	20 30       	cpi	r18, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	38 07       	cpc	r19, r24
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	48 07       	cpc	r20, r24
    1cd6:	80 e4       	ldi	r24, 0x40	; 64
    1cd8:	58 07       	cpc	r21, r24
    1cda:	58 f3       	brcs	.-42     	; 0x1cb2 <__unpack_f+0x66>
    1cdc:	14 96       	adiw	r26, 0x04	; 4
    1cde:	2d 93       	st	X+, r18
    1ce0:	3d 93       	st	X+, r19
    1ce2:	4d 93       	st	X+, r20
    1ce4:	5c 93       	st	X, r21
    1ce6:	17 97       	sbiw	r26, 0x07	; 7
    1ce8:	08 95       	ret
    1cea:	2f 3f       	cpi	r18, 0xFF	; 255
    1cec:	31 05       	cpc	r19, r1
    1cee:	79 f4       	brne	.+30     	; 0x1d0e <__unpack_f+0xc2>
    1cf0:	41 15       	cp	r20, r1
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	61 05       	cpc	r22, r1
    1cf6:	71 05       	cpc	r23, r1
    1cf8:	19 f4       	brne	.+6      	; 0x1d00 <__unpack_f+0xb4>
    1cfa:	84 e0       	ldi	r24, 0x04	; 4
    1cfc:	8c 93       	st	X, r24
    1cfe:	08 95       	ret
    1d00:	64 ff       	sbrs	r22, 4
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <__unpack_f+0xbe>
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	8c 93       	st	X, r24
    1d08:	12 c0       	rjmp	.+36     	; 0x1d2e <__unpack_f+0xe2>
    1d0a:	1c 92       	st	X, r1
    1d0c:	10 c0       	rjmp	.+32     	; 0x1d2e <__unpack_f+0xe2>
    1d0e:	2f 57       	subi	r18, 0x7F	; 127
    1d10:	30 40       	sbci	r19, 0x00	; 0
    1d12:	13 96       	adiw	r26, 0x03	; 3
    1d14:	3c 93       	st	X, r19
    1d16:	2e 93       	st	-X, r18
    1d18:	12 97       	sbiw	r26, 0x02	; 2
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	8c 93       	st	X, r24
    1d1e:	87 e0       	ldi	r24, 0x07	; 7
    1d20:	44 0f       	add	r20, r20
    1d22:	55 1f       	adc	r21, r21
    1d24:	66 1f       	adc	r22, r22
    1d26:	77 1f       	adc	r23, r23
    1d28:	8a 95       	dec	r24
    1d2a:	d1 f7       	brne	.-12     	; 0x1d20 <__unpack_f+0xd4>
    1d2c:	70 64       	ori	r23, 0x40	; 64
    1d2e:	14 96       	adiw	r26, 0x04	; 4
    1d30:	4d 93       	st	X+, r20
    1d32:	5d 93       	st	X+, r21
    1d34:	6d 93       	st	X+, r22
    1d36:	7c 93       	st	X, r23
    1d38:	17 97       	sbiw	r26, 0x07	; 7
    1d3a:	08 95       	ret

00001d3c <__fpcmp_parts_f>:
    1d3c:	1f 93       	push	r17
    1d3e:	dc 01       	movw	r26, r24
    1d40:	fb 01       	movw	r30, r22
    1d42:	9c 91       	ld	r25, X
    1d44:	92 30       	cpi	r25, 0x02	; 2
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <__fpcmp_parts_f+0xe>
    1d48:	47 c0       	rjmp	.+142    	; 0x1dd8 <__fpcmp_parts_f+0x9c>
    1d4a:	80 81       	ld	r24, Z
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <__fpcmp_parts_f+0x16>
    1d50:	43 c0       	rjmp	.+134    	; 0x1dd8 <__fpcmp_parts_f+0x9c>
    1d52:	94 30       	cpi	r25, 0x04	; 4
    1d54:	51 f4       	brne	.+20     	; 0x1d6a <__fpcmp_parts_f+0x2e>
    1d56:	11 96       	adiw	r26, 0x01	; 1
    1d58:	1c 91       	ld	r17, X
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	99 f5       	brne	.+102    	; 0x1dc4 <__fpcmp_parts_f+0x88>
    1d5e:	81 81       	ldd	r24, Z+1	; 0x01
    1d60:	68 2f       	mov	r22, r24
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	61 1b       	sub	r22, r17
    1d66:	71 09       	sbc	r23, r1
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <__fpcmp_parts_f+0xac>
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	21 f0       	breq	.+8      	; 0x1d76 <__fpcmp_parts_f+0x3a>
    1d6e:	92 30       	cpi	r25, 0x02	; 2
    1d70:	31 f4       	brne	.+12     	; 0x1d7e <__fpcmp_parts_f+0x42>
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	b9 f1       	breq	.+110    	; 0x1de4 <__fpcmp_parts_f+0xa8>
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	88 23       	and	r24, r24
    1d7a:	89 f1       	breq	.+98     	; 0x1dde <__fpcmp_parts_f+0xa2>
    1d7c:	2d c0       	rjmp	.+90     	; 0x1dd8 <__fpcmp_parts_f+0x9c>
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	1c 91       	ld	r17, X
    1d82:	11 97       	sbiw	r26, 0x01	; 1
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	f1 f0       	breq	.+60     	; 0x1dc4 <__fpcmp_parts_f+0x88>
    1d88:	81 81       	ldd	r24, Z+1	; 0x01
    1d8a:	18 17       	cp	r17, r24
    1d8c:	d9 f4       	brne	.+54     	; 0x1dc4 <__fpcmp_parts_f+0x88>
    1d8e:	12 96       	adiw	r26, 0x02	; 2
    1d90:	2d 91       	ld	r18, X+
    1d92:	3c 91       	ld	r19, X
    1d94:	13 97       	sbiw	r26, 0x03	; 3
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	82 17       	cp	r24, r18
    1d9c:	93 07       	cpc	r25, r19
    1d9e:	94 f0       	brlt	.+36     	; 0x1dc4 <__fpcmp_parts_f+0x88>
    1da0:	28 17       	cp	r18, r24
    1da2:	39 07       	cpc	r19, r25
    1da4:	bc f0       	brlt	.+46     	; 0x1dd4 <__fpcmp_parts_f+0x98>
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	8d 91       	ld	r24, X+
    1daa:	9d 91       	ld	r25, X+
    1dac:	0d 90       	ld	r0, X+
    1dae:	bc 91       	ld	r27, X
    1db0:	a0 2d       	mov	r26, r0
    1db2:	24 81       	ldd	r18, Z+4	; 0x04
    1db4:	35 81       	ldd	r19, Z+5	; 0x05
    1db6:	46 81       	ldd	r20, Z+6	; 0x06
    1db8:	57 81       	ldd	r21, Z+7	; 0x07
    1dba:	28 17       	cp	r18, r24
    1dbc:	39 07       	cpc	r19, r25
    1dbe:	4a 07       	cpc	r20, r26
    1dc0:	5b 07       	cpc	r21, r27
    1dc2:	18 f4       	brcc	.+6      	; 0x1dca <__fpcmp_parts_f+0x8e>
    1dc4:	11 23       	and	r17, r17
    1dc6:	41 f0       	breq	.+16     	; 0x1dd8 <__fpcmp_parts_f+0x9c>
    1dc8:	0a c0       	rjmp	.+20     	; 0x1dde <__fpcmp_parts_f+0xa2>
    1dca:	82 17       	cp	r24, r18
    1dcc:	93 07       	cpc	r25, r19
    1dce:	a4 07       	cpc	r26, r20
    1dd0:	b5 07       	cpc	r27, r21
    1dd2:	40 f4       	brcc	.+16     	; 0x1de4 <__fpcmp_parts_f+0xa8>
    1dd4:	11 23       	and	r17, r17
    1dd6:	19 f0       	breq	.+6      	; 0x1dde <__fpcmp_parts_f+0xa2>
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <__fpcmp_parts_f+0xac>
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	7f ef       	ldi	r23, 0xFF	; 255
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <__fpcmp_parts_f+0xac>
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	cb 01       	movw	r24, r22
    1dea:	1f 91       	pop	r17
    1dec:	08 95       	ret

00001dee <fdevopen>:
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	8c 01       	movw	r16, r24
    1df8:	eb 01       	movw	r28, r22
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	31 f4       	brne	.+12     	; 0x1e0a <fdevopen+0x1c>
    1dfe:	61 15       	cp	r22, r1
    1e00:	71 05       	cpc	r23, r1
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <fdevopen+0x1c>
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	38 c0       	rjmp	.+112    	; 0x1e7a <fdevopen+0x8c>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	6e e0       	ldi	r22, 0x0E	; 14
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	0e 94 71 11 	call	0x22e2	; 0x22e2 <calloc>
    1e16:	fc 01       	movw	r30, r24
    1e18:	9c 01       	movw	r18, r24
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	71 f1       	breq	.+92     	; 0x1e7a <fdevopen+0x8c>
    1e1e:	80 e8       	ldi	r24, 0x80	; 128
    1e20:	83 83       	std	Z+3, r24	; 0x03
    1e22:	20 97       	sbiw	r28, 0x00	; 0
    1e24:	71 f0       	breq	.+28     	; 0x1e42 <fdevopen+0x54>
    1e26:	d3 87       	std	Z+11, r29	; 0x0b
    1e28:	c2 87       	std	Z+10, r28	; 0x0a
    1e2a:	81 e8       	ldi	r24, 0x81	; 129
    1e2c:	83 83       	std	Z+3, r24	; 0x03
    1e2e:	80 91 a4 02 	lds	r24, 0x02A4
    1e32:	90 91 a5 02 	lds	r25, 0x02A5
    1e36:	89 2b       	or	r24, r25
    1e38:	21 f4       	brne	.+8      	; 0x1e42 <fdevopen+0x54>
    1e3a:	f0 93 a5 02 	sts	0x02A5, r31
    1e3e:	e0 93 a4 02 	sts	0x02A4, r30
    1e42:	01 15       	cp	r16, r1
    1e44:	11 05       	cpc	r17, r1
    1e46:	c9 f0       	breq	.+50     	; 0x1e7a <fdevopen+0x8c>
    1e48:	11 87       	std	Z+9, r17	; 0x09
    1e4a:	00 87       	std	Z+8, r16	; 0x08
    1e4c:	83 81       	ldd	r24, Z+3	; 0x03
    1e4e:	82 60       	ori	r24, 0x02	; 2
    1e50:	83 83       	std	Z+3, r24	; 0x03
    1e52:	80 91 a6 02 	lds	r24, 0x02A6
    1e56:	90 91 a7 02 	lds	r25, 0x02A7
    1e5a:	89 2b       	or	r24, r25
    1e5c:	71 f4       	brne	.+28     	; 0x1e7a <fdevopen+0x8c>
    1e5e:	f0 93 a7 02 	sts	0x02A7, r31
    1e62:	e0 93 a6 02 	sts	0x02A6, r30
    1e66:	80 91 a8 02 	lds	r24, 0x02A8
    1e6a:	90 91 a9 02 	lds	r25, 0x02A9
    1e6e:	89 2b       	or	r24, r25
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <fdevopen+0x8c>
    1e72:	f0 93 a9 02 	sts	0x02A9, r31
    1e76:	e0 93 a8 02 	sts	0x02A8, r30
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <printf>:
    1e86:	a0 e0       	ldi	r26, 0x00	; 0
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e9 e4       	ldi	r30, 0x49	; 73
    1e8c:	ff e0       	ldi	r31, 0x0F	; 15
    1e8e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x20>
    1e92:	fe 01       	movw	r30, r28
    1e94:	35 96       	adiw	r30, 0x05	; 5
    1e96:	61 91       	ld	r22, Z+
    1e98:	71 91       	ld	r23, Z+
    1e9a:	80 91 a6 02 	lds	r24, 0x02A6
    1e9e:	90 91 a7 02 	lds	r25, 0x02A7
    1ea2:	af 01       	movw	r20, r30
    1ea4:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <vfprintf>
    1ea8:	20 96       	adiw	r28, 0x00	; 0
    1eaa:	e2 e0       	ldi	r30, 0x02	; 2
    1eac:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x20>

00001eb0 <putchar>:
    1eb0:	60 91 a6 02 	lds	r22, 0x02A6
    1eb4:	70 91 a7 02 	lds	r23, 0x02A7
    1eb8:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    1ebc:	08 95       	ret

00001ebe <puts>:
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	8c 01       	movw	r16, r24
    1ec8:	e0 91 a6 02 	lds	r30, 0x02A6
    1ecc:	f0 91 a7 02 	lds	r31, 0x02A7
    1ed0:	83 81       	ldd	r24, Z+3	; 0x03
    1ed2:	81 ff       	sbrs	r24, 1
    1ed4:	21 c0       	rjmp	.+66     	; 0x1f18 <puts+0x5a>
    1ed6:	c0 e0       	ldi	r28, 0x00	; 0
    1ed8:	d0 e0       	ldi	r29, 0x00	; 0
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <puts+0x38>
    1edc:	e0 91 a6 02 	lds	r30, 0x02A6
    1ee0:	f0 91 a7 02 	lds	r31, 0x02A7
    1ee4:	20 85       	ldd	r18, Z+8	; 0x08
    1ee6:	31 85       	ldd	r19, Z+9	; 0x09
    1ee8:	bf 01       	movw	r22, r30
    1eea:	f9 01       	movw	r30, r18
    1eec:	09 95       	icall
    1eee:	89 2b       	or	r24, r25
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <puts+0x38>
    1ef2:	cf ef       	ldi	r28, 0xFF	; 255
    1ef4:	df ef       	ldi	r29, 0xFF	; 255
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	81 91       	ld	r24, Z+
    1efa:	8f 01       	movw	r16, r30
    1efc:	88 23       	and	r24, r24
    1efe:	71 f7       	brne	.-36     	; 0x1edc <puts+0x1e>
    1f00:	e0 91 a6 02 	lds	r30, 0x02A6
    1f04:	f0 91 a7 02 	lds	r31, 0x02A7
    1f08:	20 85       	ldd	r18, Z+8	; 0x08
    1f0a:	31 85       	ldd	r19, Z+9	; 0x09
    1f0c:	8a e0       	ldi	r24, 0x0A	; 10
    1f0e:	bf 01       	movw	r22, r30
    1f10:	f9 01       	movw	r30, r18
    1f12:	09 95       	icall
    1f14:	89 2b       	or	r24, r25
    1f16:	11 f0       	breq	.+4      	; 0x1f1c <puts+0x5e>
    1f18:	cf ef       	ldi	r28, 0xFF	; 255
    1f1a:	df ef       	ldi	r29, 0xFF	; 255
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <vfprintf>:
    1f28:	ab e0       	ldi	r26, 0x0B	; 11
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ea e9       	ldi	r30, 0x9A	; 154
    1f2e:	ff e0       	ldi	r31, 0x0F	; 15
    1f30:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__>
    1f34:	3c 01       	movw	r6, r24
    1f36:	2b 01       	movw	r4, r22
    1f38:	5a 01       	movw	r10, r20
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	17 82       	std	Z+7, r1	; 0x07
    1f3e:	16 82       	std	Z+6, r1	; 0x06
    1f40:	83 81       	ldd	r24, Z+3	; 0x03
    1f42:	81 fd       	sbrc	r24, 1
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <vfprintf+0x24>
    1f46:	6f ef       	ldi	r22, 0xFF	; 255
    1f48:	7f ef       	ldi	r23, 0xFF	; 255
    1f4a:	c6 c1       	rjmp	.+908    	; 0x22d8 <vfprintf+0x3b0>
    1f4c:	9a e0       	ldi	r25, 0x0A	; 10
    1f4e:	89 2e       	mov	r8, r25
    1f50:	1e 01       	movw	r2, r28
    1f52:	08 94       	sec
    1f54:	21 1c       	adc	r2, r1
    1f56:	31 1c       	adc	r3, r1
    1f58:	f3 01       	movw	r30, r6
    1f5a:	23 81       	ldd	r18, Z+3	; 0x03
    1f5c:	f2 01       	movw	r30, r4
    1f5e:	23 fd       	sbrc	r18, 3
    1f60:	85 91       	lpm	r24, Z+
    1f62:	23 ff       	sbrs	r18, 3
    1f64:	81 91       	ld	r24, Z+
    1f66:	2f 01       	movw	r4, r30
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <vfprintf+0x46>
    1f6c:	b2 c1       	rjmp	.+868    	; 0x22d2 <vfprintf+0x3aa>
    1f6e:	85 32       	cpi	r24, 0x25	; 37
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <vfprintf+0x58>
    1f72:	23 fd       	sbrc	r18, 3
    1f74:	85 91       	lpm	r24, Z+
    1f76:	23 ff       	sbrs	r18, 3
    1f78:	81 91       	ld	r24, Z+
    1f7a:	2f 01       	movw	r4, r30
    1f7c:	85 32       	cpi	r24, 0x25	; 37
    1f7e:	29 f4       	brne	.+10     	; 0x1f8a <vfprintf+0x62>
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	b3 01       	movw	r22, r6
    1f84:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    1f88:	e7 cf       	rjmp	.-50     	; 0x1f58 <vfprintf+0x30>
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	ff 24       	eor	r15, r15
    1f8e:	ee 24       	eor	r14, r14
    1f90:	99 24       	eor	r9, r9
    1f92:	ff e1       	ldi	r31, 0x1F	; 31
    1f94:	ff 15       	cp	r31, r15
    1f96:	d0 f0       	brcs	.+52     	; 0x1fcc <vfprintf+0xa4>
    1f98:	9b 32       	cpi	r25, 0x2B	; 43
    1f9a:	69 f0       	breq	.+26     	; 0x1fb6 <vfprintf+0x8e>
    1f9c:	9c 32       	cpi	r25, 0x2C	; 44
    1f9e:	28 f4       	brcc	.+10     	; 0x1faa <vfprintf+0x82>
    1fa0:	90 32       	cpi	r25, 0x20	; 32
    1fa2:	59 f0       	breq	.+22     	; 0x1fba <vfprintf+0x92>
    1fa4:	93 32       	cpi	r25, 0x23	; 35
    1fa6:	91 f4       	brne	.+36     	; 0x1fcc <vfprintf+0xa4>
    1fa8:	0e c0       	rjmp	.+28     	; 0x1fc6 <vfprintf+0x9e>
    1faa:	9d 32       	cpi	r25, 0x2D	; 45
    1fac:	49 f0       	breq	.+18     	; 0x1fc0 <vfprintf+0x98>
    1fae:	90 33       	cpi	r25, 0x30	; 48
    1fb0:	69 f4       	brne	.+26     	; 0x1fcc <vfprintf+0xa4>
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	24 c0       	rjmp	.+72     	; 0x1ffe <vfprintf+0xd6>
    1fb6:	52 e0       	ldi	r21, 0x02	; 2
    1fb8:	f5 2a       	or	r15, r21
    1fba:	84 e0       	ldi	r24, 0x04	; 4
    1fbc:	f8 2a       	or	r15, r24
    1fbe:	28 c0       	rjmp	.+80     	; 0x2010 <vfprintf+0xe8>
    1fc0:	98 e0       	ldi	r25, 0x08	; 8
    1fc2:	f9 2a       	or	r15, r25
    1fc4:	25 c0       	rjmp	.+74     	; 0x2010 <vfprintf+0xe8>
    1fc6:	e0 e1       	ldi	r30, 0x10	; 16
    1fc8:	fe 2a       	or	r15, r30
    1fca:	22 c0       	rjmp	.+68     	; 0x2010 <vfprintf+0xe8>
    1fcc:	f7 fc       	sbrc	r15, 7
    1fce:	29 c0       	rjmp	.+82     	; 0x2022 <vfprintf+0xfa>
    1fd0:	89 2f       	mov	r24, r25
    1fd2:	80 53       	subi	r24, 0x30	; 48
    1fd4:	8a 30       	cpi	r24, 0x0A	; 10
    1fd6:	70 f4       	brcc	.+28     	; 0x1ff4 <vfprintf+0xcc>
    1fd8:	f6 fe       	sbrs	r15, 6
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <vfprintf+0xbe>
    1fdc:	98 9c       	mul	r9, r8
    1fde:	90 2c       	mov	r9, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	98 0e       	add	r9, r24
    1fe4:	15 c0       	rjmp	.+42     	; 0x2010 <vfprintf+0xe8>
    1fe6:	e8 9c       	mul	r14, r8
    1fe8:	e0 2c       	mov	r14, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	e8 0e       	add	r14, r24
    1fee:	f0 e2       	ldi	r31, 0x20	; 32
    1ff0:	ff 2a       	or	r15, r31
    1ff2:	0e c0       	rjmp	.+28     	; 0x2010 <vfprintf+0xe8>
    1ff4:	9e 32       	cpi	r25, 0x2E	; 46
    1ff6:	29 f4       	brne	.+10     	; 0x2002 <vfprintf+0xda>
    1ff8:	f6 fc       	sbrc	r15, 6
    1ffa:	6b c1       	rjmp	.+726    	; 0x22d2 <vfprintf+0x3aa>
    1ffc:	40 e4       	ldi	r20, 0x40	; 64
    1ffe:	f4 2a       	or	r15, r20
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <vfprintf+0xe8>
    2002:	9c 36       	cpi	r25, 0x6C	; 108
    2004:	19 f4       	brne	.+6      	; 0x200c <vfprintf+0xe4>
    2006:	50 e8       	ldi	r21, 0x80	; 128
    2008:	f5 2a       	or	r15, r21
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <vfprintf+0xe8>
    200c:	98 36       	cpi	r25, 0x68	; 104
    200e:	49 f4       	brne	.+18     	; 0x2022 <vfprintf+0xfa>
    2010:	f2 01       	movw	r30, r4
    2012:	23 fd       	sbrc	r18, 3
    2014:	95 91       	lpm	r25, Z+
    2016:	23 ff       	sbrs	r18, 3
    2018:	91 91       	ld	r25, Z+
    201a:	2f 01       	movw	r4, r30
    201c:	99 23       	and	r25, r25
    201e:	09 f0       	breq	.+2      	; 0x2022 <vfprintf+0xfa>
    2020:	b8 cf       	rjmp	.-144    	; 0x1f92 <vfprintf+0x6a>
    2022:	89 2f       	mov	r24, r25
    2024:	85 54       	subi	r24, 0x45	; 69
    2026:	83 30       	cpi	r24, 0x03	; 3
    2028:	18 f0       	brcs	.+6      	; 0x2030 <vfprintf+0x108>
    202a:	80 52       	subi	r24, 0x20	; 32
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	38 f4       	brcc	.+14     	; 0x203e <vfprintf+0x116>
    2030:	44 e0       	ldi	r20, 0x04	; 4
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	a4 0e       	add	r10, r20
    2036:	b5 1e       	adc	r11, r21
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	59 83       	std	Y+1, r21	; 0x01
    203c:	0f c0       	rjmp	.+30     	; 0x205c <vfprintf+0x134>
    203e:	93 36       	cpi	r25, 0x63	; 99
    2040:	31 f0       	breq	.+12     	; 0x204e <vfprintf+0x126>
    2042:	93 37       	cpi	r25, 0x73	; 115
    2044:	79 f0       	breq	.+30     	; 0x2064 <vfprintf+0x13c>
    2046:	93 35       	cpi	r25, 0x53	; 83
    2048:	09 f0       	breq	.+2      	; 0x204c <vfprintf+0x124>
    204a:	56 c0       	rjmp	.+172    	; 0x20f8 <vfprintf+0x1d0>
    204c:	20 c0       	rjmp	.+64     	; 0x208e <vfprintf+0x166>
    204e:	f5 01       	movw	r30, r10
    2050:	80 81       	ld	r24, Z
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	42 e0       	ldi	r20, 0x02	; 2
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	a4 0e       	add	r10, r20
    205a:	b5 1e       	adc	r11, r21
    205c:	61 01       	movw	r12, r2
    205e:	01 e0       	ldi	r16, 0x01	; 1
    2060:	10 e0       	ldi	r17, 0x00	; 0
    2062:	12 c0       	rjmp	.+36     	; 0x2088 <vfprintf+0x160>
    2064:	f5 01       	movw	r30, r10
    2066:	c0 80       	ld	r12, Z
    2068:	d1 80       	ldd	r13, Z+1	; 0x01
    206a:	f6 fc       	sbrc	r15, 6
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <vfprintf+0x14c>
    206e:	6f ef       	ldi	r22, 0xFF	; 255
    2070:	7f ef       	ldi	r23, 0xFF	; 255
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x150>
    2074:	69 2d       	mov	r22, r9
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	42 e0       	ldi	r20, 0x02	; 2
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	a4 0e       	add	r10, r20
    207e:	b5 1e       	adc	r11, r21
    2080:	c6 01       	movw	r24, r12
    2082:	0e 94 a4 12 	call	0x2548	; 0x2548 <strnlen>
    2086:	8c 01       	movw	r16, r24
    2088:	5f e7       	ldi	r21, 0x7F	; 127
    208a:	f5 22       	and	r15, r21
    208c:	14 c0       	rjmp	.+40     	; 0x20b6 <vfprintf+0x18e>
    208e:	f5 01       	movw	r30, r10
    2090:	c0 80       	ld	r12, Z
    2092:	d1 80       	ldd	r13, Z+1	; 0x01
    2094:	f6 fc       	sbrc	r15, 6
    2096:	03 c0       	rjmp	.+6      	; 0x209e <vfprintf+0x176>
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	7f ef       	ldi	r23, 0xFF	; 255
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <vfprintf+0x17a>
    209e:	69 2d       	mov	r22, r9
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	42 e0       	ldi	r20, 0x02	; 2
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	a4 0e       	add	r10, r20
    20a8:	b5 1e       	adc	r11, r21
    20aa:	c6 01       	movw	r24, r12
    20ac:	0e 94 92 12 	call	0x2524	; 0x2524 <strnlen_P>
    20b0:	8c 01       	movw	r16, r24
    20b2:	50 e8       	ldi	r21, 0x80	; 128
    20b4:	f5 2a       	or	r15, r21
    20b6:	f3 fe       	sbrs	r15, 3
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <vfprintf+0x1a0>
    20ba:	1a c0       	rjmp	.+52     	; 0x20f0 <vfprintf+0x1c8>
    20bc:	80 e2       	ldi	r24, 0x20	; 32
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	b3 01       	movw	r22, r6
    20c2:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    20c6:	ea 94       	dec	r14
    20c8:	8e 2d       	mov	r24, r14
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	08 17       	cp	r16, r24
    20ce:	19 07       	cpc	r17, r25
    20d0:	a8 f3       	brcs	.-22     	; 0x20bc <vfprintf+0x194>
    20d2:	0e c0       	rjmp	.+28     	; 0x20f0 <vfprintf+0x1c8>
    20d4:	f6 01       	movw	r30, r12
    20d6:	f7 fc       	sbrc	r15, 7
    20d8:	85 91       	lpm	r24, Z+
    20da:	f7 fe       	sbrs	r15, 7
    20dc:	81 91       	ld	r24, Z+
    20de:	6f 01       	movw	r12, r30
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	b3 01       	movw	r22, r6
    20e4:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    20e8:	e1 10       	cpse	r14, r1
    20ea:	ea 94       	dec	r14
    20ec:	01 50       	subi	r16, 0x01	; 1
    20ee:	10 40       	sbci	r17, 0x00	; 0
    20f0:	01 15       	cp	r16, r1
    20f2:	11 05       	cpc	r17, r1
    20f4:	79 f7       	brne	.-34     	; 0x20d4 <vfprintf+0x1ac>
    20f6:	ea c0       	rjmp	.+468    	; 0x22cc <vfprintf+0x3a4>
    20f8:	94 36       	cpi	r25, 0x64	; 100
    20fa:	11 f0       	breq	.+4      	; 0x2100 <vfprintf+0x1d8>
    20fc:	99 36       	cpi	r25, 0x69	; 105
    20fe:	69 f5       	brne	.+90     	; 0x215a <vfprintf+0x232>
    2100:	f7 fe       	sbrs	r15, 7
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <vfprintf+0x1ec>
    2104:	f5 01       	movw	r30, r10
    2106:	20 81       	ld	r18, Z
    2108:	31 81       	ldd	r19, Z+1	; 0x01
    210a:	42 81       	ldd	r20, Z+2	; 0x02
    210c:	53 81       	ldd	r21, Z+3	; 0x03
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0a c0       	rjmp	.+20     	; 0x2128 <vfprintf+0x200>
    2114:	f5 01       	movw	r30, r10
    2116:	80 81       	ld	r24, Z
    2118:	91 81       	ldd	r25, Z+1	; 0x01
    211a:	9c 01       	movw	r18, r24
    211c:	44 27       	eor	r20, r20
    211e:	37 fd       	sbrc	r19, 7
    2120:	40 95       	com	r20
    2122:	54 2f       	mov	r21, r20
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a8 0e       	add	r10, r24
    212a:	b9 1e       	adc	r11, r25
    212c:	9f e6       	ldi	r25, 0x6F	; 111
    212e:	f9 22       	and	r15, r25
    2130:	57 ff       	sbrs	r21, 7
    2132:	09 c0       	rjmp	.+18     	; 0x2146 <vfprintf+0x21e>
    2134:	50 95       	com	r21
    2136:	40 95       	com	r20
    2138:	30 95       	com	r19
    213a:	21 95       	neg	r18
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	4f 4f       	sbci	r20, 0xFF	; 255
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	e0 e8       	ldi	r30, 0x80	; 128
    2144:	fe 2a       	or	r15, r30
    2146:	ca 01       	movw	r24, r20
    2148:	b9 01       	movw	r22, r18
    214a:	a1 01       	movw	r20, r2
    214c:	2a e0       	ldi	r18, 0x0A	; 10
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__ultoa_invert>
    2154:	d8 2e       	mov	r13, r24
    2156:	d2 18       	sub	r13, r2
    2158:	40 c0       	rjmp	.+128    	; 0x21da <vfprintf+0x2b2>
    215a:	95 37       	cpi	r25, 0x75	; 117
    215c:	29 f4       	brne	.+10     	; 0x2168 <vfprintf+0x240>
    215e:	1f 2d       	mov	r17, r15
    2160:	1f 7e       	andi	r17, 0xEF	; 239
    2162:	2a e0       	ldi	r18, 0x0A	; 10
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	1d c0       	rjmp	.+58     	; 0x21a2 <vfprintf+0x27a>
    2168:	1f 2d       	mov	r17, r15
    216a:	19 7f       	andi	r17, 0xF9	; 249
    216c:	9f 36       	cpi	r25, 0x6F	; 111
    216e:	61 f0       	breq	.+24     	; 0x2188 <vfprintf+0x260>
    2170:	90 37       	cpi	r25, 0x70	; 112
    2172:	20 f4       	brcc	.+8      	; 0x217c <vfprintf+0x254>
    2174:	98 35       	cpi	r25, 0x58	; 88
    2176:	09 f0       	breq	.+2      	; 0x217a <vfprintf+0x252>
    2178:	ac c0       	rjmp	.+344    	; 0x22d2 <vfprintf+0x3aa>
    217a:	0f c0       	rjmp	.+30     	; 0x219a <vfprintf+0x272>
    217c:	90 37       	cpi	r25, 0x70	; 112
    217e:	39 f0       	breq	.+14     	; 0x218e <vfprintf+0x266>
    2180:	98 37       	cpi	r25, 0x78	; 120
    2182:	09 f0       	breq	.+2      	; 0x2186 <vfprintf+0x25e>
    2184:	a6 c0       	rjmp	.+332    	; 0x22d2 <vfprintf+0x3aa>
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <vfprintf+0x268>
    2188:	28 e0       	ldi	r18, 0x08	; 8
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	0a c0       	rjmp	.+20     	; 0x21a2 <vfprintf+0x27a>
    218e:	10 61       	ori	r17, 0x10	; 16
    2190:	14 fd       	sbrc	r17, 4
    2192:	14 60       	ori	r17, 0x04	; 4
    2194:	20 e1       	ldi	r18, 0x10	; 16
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <vfprintf+0x27a>
    219a:	14 fd       	sbrc	r17, 4
    219c:	16 60       	ori	r17, 0x06	; 6
    219e:	20 e1       	ldi	r18, 0x10	; 16
    21a0:	32 e0       	ldi	r19, 0x02	; 2
    21a2:	17 ff       	sbrs	r17, 7
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <vfprintf+0x28e>
    21a6:	f5 01       	movw	r30, r10
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	44 e0       	ldi	r20, 0x04	; 4
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	08 c0       	rjmp	.+16     	; 0x21c6 <vfprintf+0x29e>
    21b6:	f5 01       	movw	r30, r10
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	bc 01       	movw	r22, r24
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	42 e0       	ldi	r20, 0x02	; 2
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	a4 0e       	add	r10, r20
    21c8:	b5 1e       	adc	r11, r21
    21ca:	a1 01       	movw	r20, r2
    21cc:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__ultoa_invert>
    21d0:	d8 2e       	mov	r13, r24
    21d2:	d2 18       	sub	r13, r2
    21d4:	8f e7       	ldi	r24, 0x7F	; 127
    21d6:	f8 2e       	mov	r15, r24
    21d8:	f1 22       	and	r15, r17
    21da:	f6 fe       	sbrs	r15, 6
    21dc:	0b c0       	rjmp	.+22     	; 0x21f4 <vfprintf+0x2cc>
    21de:	5e ef       	ldi	r21, 0xFE	; 254
    21e0:	f5 22       	and	r15, r21
    21e2:	d9 14       	cp	r13, r9
    21e4:	38 f4       	brcc	.+14     	; 0x21f4 <vfprintf+0x2cc>
    21e6:	f4 fe       	sbrs	r15, 4
    21e8:	07 c0       	rjmp	.+14     	; 0x21f8 <vfprintf+0x2d0>
    21ea:	f2 fc       	sbrc	r15, 2
    21ec:	05 c0       	rjmp	.+10     	; 0x21f8 <vfprintf+0x2d0>
    21ee:	8f ee       	ldi	r24, 0xEF	; 239
    21f0:	f8 22       	and	r15, r24
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <vfprintf+0x2d0>
    21f4:	1d 2d       	mov	r17, r13
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <vfprintf+0x2d2>
    21f8:	19 2d       	mov	r17, r9
    21fa:	f4 fe       	sbrs	r15, 4
    21fc:	0d c0       	rjmp	.+26     	; 0x2218 <vfprintf+0x2f0>
    21fe:	fe 01       	movw	r30, r28
    2200:	ed 0d       	add	r30, r13
    2202:	f1 1d       	adc	r31, r1
    2204:	80 81       	ld	r24, Z
    2206:	80 33       	cpi	r24, 0x30	; 48
    2208:	19 f4       	brne	.+6      	; 0x2210 <vfprintf+0x2e8>
    220a:	99 ee       	ldi	r25, 0xE9	; 233
    220c:	f9 22       	and	r15, r25
    220e:	08 c0       	rjmp	.+16     	; 0x2220 <vfprintf+0x2f8>
    2210:	1f 5f       	subi	r17, 0xFF	; 255
    2212:	f2 fe       	sbrs	r15, 2
    2214:	05 c0       	rjmp	.+10     	; 0x2220 <vfprintf+0x2f8>
    2216:	03 c0       	rjmp	.+6      	; 0x221e <vfprintf+0x2f6>
    2218:	8f 2d       	mov	r24, r15
    221a:	86 78       	andi	r24, 0x86	; 134
    221c:	09 f0       	breq	.+2      	; 0x2220 <vfprintf+0x2f8>
    221e:	1f 5f       	subi	r17, 0xFF	; 255
    2220:	0f 2d       	mov	r16, r15
    2222:	f3 fc       	sbrc	r15, 3
    2224:	14 c0       	rjmp	.+40     	; 0x224e <vfprintf+0x326>
    2226:	f0 fe       	sbrs	r15, 0
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <vfprintf+0x320>
    222a:	1e 15       	cp	r17, r14
    222c:	10 f0       	brcs	.+4      	; 0x2232 <vfprintf+0x30a>
    222e:	9d 2c       	mov	r9, r13
    2230:	0b c0       	rjmp	.+22     	; 0x2248 <vfprintf+0x320>
    2232:	9d 2c       	mov	r9, r13
    2234:	9e 0c       	add	r9, r14
    2236:	91 1a       	sub	r9, r17
    2238:	1e 2d       	mov	r17, r14
    223a:	06 c0       	rjmp	.+12     	; 0x2248 <vfprintf+0x320>
    223c:	80 e2       	ldi	r24, 0x20	; 32
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	b3 01       	movw	r22, r6
    2242:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    2246:	1f 5f       	subi	r17, 0xFF	; 255
    2248:	1e 15       	cp	r17, r14
    224a:	c0 f3       	brcs	.-16     	; 0x223c <vfprintf+0x314>
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <vfprintf+0x32e>
    224e:	1e 15       	cp	r17, r14
    2250:	10 f4       	brcc	.+4      	; 0x2256 <vfprintf+0x32e>
    2252:	e1 1a       	sub	r14, r17
    2254:	01 c0       	rjmp	.+2      	; 0x2258 <vfprintf+0x330>
    2256:	ee 24       	eor	r14, r14
    2258:	04 ff       	sbrs	r16, 4
    225a:	0f c0       	rjmp	.+30     	; 0x227a <vfprintf+0x352>
    225c:	80 e3       	ldi	r24, 0x30	; 48
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	b3 01       	movw	r22, r6
    2262:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    2266:	02 ff       	sbrs	r16, 2
    2268:	1d c0       	rjmp	.+58     	; 0x22a4 <vfprintf+0x37c>
    226a:	01 fd       	sbrc	r16, 1
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <vfprintf+0x34c>
    226e:	88 e7       	ldi	r24, 0x78	; 120
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e c0       	rjmp	.+28     	; 0x2290 <vfprintf+0x368>
    2274:	88 e5       	ldi	r24, 0x58	; 88
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0b c0       	rjmp	.+22     	; 0x2290 <vfprintf+0x368>
    227a:	80 2f       	mov	r24, r16
    227c:	86 78       	andi	r24, 0x86	; 134
    227e:	91 f0       	breq	.+36     	; 0x22a4 <vfprintf+0x37c>
    2280:	01 ff       	sbrs	r16, 1
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <vfprintf+0x360>
    2284:	8b e2       	ldi	r24, 0x2B	; 43
    2286:	01 c0       	rjmp	.+2      	; 0x228a <vfprintf+0x362>
    2288:	80 e2       	ldi	r24, 0x20	; 32
    228a:	f7 fc       	sbrc	r15, 7
    228c:	8d e2       	ldi	r24, 0x2D	; 45
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	b3 01       	movw	r22, r6
    2292:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    2296:	06 c0       	rjmp	.+12     	; 0x22a4 <vfprintf+0x37c>
    2298:	80 e3       	ldi	r24, 0x30	; 48
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	b3 01       	movw	r22, r6
    229e:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    22a2:	9a 94       	dec	r9
    22a4:	d9 14       	cp	r13, r9
    22a6:	c0 f3       	brcs	.-16     	; 0x2298 <vfprintf+0x370>
    22a8:	da 94       	dec	r13
    22aa:	f1 01       	movw	r30, r2
    22ac:	ed 0d       	add	r30, r13
    22ae:	f1 1d       	adc	r31, r1
    22b0:	80 81       	ld	r24, Z
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	b3 01       	movw	r22, r6
    22b6:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    22ba:	dd 20       	and	r13, r13
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <vfprintf+0x380>
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <vfprintf+0x3a4>
    22c0:	80 e2       	ldi	r24, 0x20	; 32
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	b3 01       	movw	r22, r6
    22c6:	0e 94 af 12 	call	0x255e	; 0x255e <fputc>
    22ca:	ea 94       	dec	r14
    22cc:	ee 20       	and	r14, r14
    22ce:	c1 f7       	brne	.-16     	; 0x22c0 <vfprintf+0x398>
    22d0:	43 ce       	rjmp	.-890    	; 0x1f58 <vfprintf+0x30>
    22d2:	f3 01       	movw	r30, r6
    22d4:	66 81       	ldd	r22, Z+6	; 0x06
    22d6:	77 81       	ldd	r23, Z+7	; 0x07
    22d8:	cb 01       	movw	r24, r22
    22da:	2b 96       	adiw	r28, 0x0b	; 11
    22dc:	e2 e1       	ldi	r30, 0x12	; 18
    22de:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__>

000022e2 <calloc>:
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	68 9f       	mul	r22, r24
    22ec:	80 01       	movw	r16, r0
    22ee:	69 9f       	mul	r22, r25
    22f0:	10 0d       	add	r17, r0
    22f2:	78 9f       	mul	r23, r24
    22f4:	10 0d       	add	r17, r0
    22f6:	11 24       	eor	r1, r1
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 8d 11 	call	0x231a	; 0x231a <malloc>
    22fe:	ec 01       	movw	r28, r24
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	29 f0       	breq	.+10     	; 0x230e <calloc+0x2c>
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	a8 01       	movw	r20, r16
    230a:	0e 94 9d 12 	call	0x253a	; 0x253a <memset>
    230e:	ce 01       	movw	r24, r28
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <malloc>:
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	bc 01       	movw	r22, r24
    2320:	82 30       	cpi	r24, 0x02	; 2
    2322:	91 05       	cpc	r25, r1
    2324:	10 f4       	brcc	.+4      	; 0x232a <malloc+0x10>
    2326:	62 e0       	ldi	r22, 0x02	; 2
    2328:	70 e0       	ldi	r23, 0x00	; 0
    232a:	a0 91 ac 02 	lds	r26, 0x02AC
    232e:	b0 91 ad 02 	lds	r27, 0x02AD
    2332:	ed 01       	movw	r28, r26
    2334:	e0 e0       	ldi	r30, 0x00	; 0
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	21 c0       	rjmp	.+66     	; 0x2380 <malloc+0x66>
    233e:	88 81       	ld	r24, Y
    2340:	99 81       	ldd	r25, Y+1	; 0x01
    2342:	86 17       	cp	r24, r22
    2344:	97 07       	cpc	r25, r23
    2346:	69 f4       	brne	.+26     	; 0x2362 <malloc+0x48>
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	30 97       	sbiw	r30, 0x00	; 0
    234e:	19 f0       	breq	.+6      	; 0x2356 <malloc+0x3c>
    2350:	93 83       	std	Z+3, r25	; 0x03
    2352:	82 83       	std	Z+2, r24	; 0x02
    2354:	04 c0       	rjmp	.+8      	; 0x235e <malloc+0x44>
    2356:	90 93 ad 02 	sts	0x02AD, r25
    235a:	80 93 ac 02 	sts	0x02AC, r24
    235e:	fe 01       	movw	r30, r28
    2360:	34 c0       	rjmp	.+104    	; 0x23ca <malloc+0xb0>
    2362:	68 17       	cp	r22, r24
    2364:	79 07       	cpc	r23, r25
    2366:	38 f4       	brcc	.+14     	; 0x2376 <malloc+0x5c>
    2368:	41 15       	cp	r20, r1
    236a:	51 05       	cpc	r21, r1
    236c:	19 f0       	breq	.+6      	; 0x2374 <malloc+0x5a>
    236e:	84 17       	cp	r24, r20
    2370:	95 07       	cpc	r25, r21
    2372:	08 f4       	brcc	.+2      	; 0x2376 <malloc+0x5c>
    2374:	ac 01       	movw	r20, r24
    2376:	fe 01       	movw	r30, r28
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	9c 01       	movw	r18, r24
    237e:	e9 01       	movw	r28, r18
    2380:	20 97       	sbiw	r28, 0x00	; 0
    2382:	e9 f6       	brne	.-70     	; 0x233e <malloc+0x24>
    2384:	41 15       	cp	r20, r1
    2386:	51 05       	cpc	r21, r1
    2388:	a9 f1       	breq	.+106    	; 0x23f4 <malloc+0xda>
    238a:	ca 01       	movw	r24, r20
    238c:	86 1b       	sub	r24, r22
    238e:	97 0b       	sbc	r25, r23
    2390:	04 97       	sbiw	r24, 0x04	; 4
    2392:	08 f4       	brcc	.+2      	; 0x2396 <malloc+0x7c>
    2394:	ba 01       	movw	r22, r20
    2396:	e0 e0       	ldi	r30, 0x00	; 0
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	2a c0       	rjmp	.+84     	; 0x23f0 <malloc+0xd6>
    239c:	8d 91       	ld	r24, X+
    239e:	9c 91       	ld	r25, X
    23a0:	11 97       	sbiw	r26, 0x01	; 1
    23a2:	84 17       	cp	r24, r20
    23a4:	95 07       	cpc	r25, r21
    23a6:	f9 f4       	brne	.+62     	; 0x23e6 <malloc+0xcc>
    23a8:	64 17       	cp	r22, r20
    23aa:	75 07       	cpc	r23, r21
    23ac:	81 f4       	brne	.+32     	; 0x23ce <malloc+0xb4>
    23ae:	12 96       	adiw	r26, 0x02	; 2
    23b0:	8d 91       	ld	r24, X+
    23b2:	9c 91       	ld	r25, X
    23b4:	13 97       	sbiw	r26, 0x03	; 3
    23b6:	30 97       	sbiw	r30, 0x00	; 0
    23b8:	19 f0       	breq	.+6      	; 0x23c0 <malloc+0xa6>
    23ba:	93 83       	std	Z+3, r25	; 0x03
    23bc:	82 83       	std	Z+2, r24	; 0x02
    23be:	04 c0       	rjmp	.+8      	; 0x23c8 <malloc+0xae>
    23c0:	90 93 ad 02 	sts	0x02AD, r25
    23c4:	80 93 ac 02 	sts	0x02AC, r24
    23c8:	fd 01       	movw	r30, r26
    23ca:	32 96       	adiw	r30, 0x02	; 2
    23cc:	4f c0       	rjmp	.+158    	; 0x246c <malloc+0x152>
    23ce:	ca 01       	movw	r24, r20
    23d0:	86 1b       	sub	r24, r22
    23d2:	97 0b       	sbc	r25, r23
    23d4:	fd 01       	movw	r30, r26
    23d6:	e8 0f       	add	r30, r24
    23d8:	f9 1f       	adc	r31, r25
    23da:	61 93       	st	Z+, r22
    23dc:	71 93       	st	Z+, r23
    23de:	02 97       	sbiw	r24, 0x02	; 2
    23e0:	8d 93       	st	X+, r24
    23e2:	9c 93       	st	X, r25
    23e4:	43 c0       	rjmp	.+134    	; 0x246c <malloc+0x152>
    23e6:	fd 01       	movw	r30, r26
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	9c 01       	movw	r18, r24
    23ee:	d9 01       	movw	r26, r18
    23f0:	10 97       	sbiw	r26, 0x00	; 0
    23f2:	a1 f6       	brne	.-88     	; 0x239c <malloc+0x82>
    23f4:	80 91 aa 02 	lds	r24, 0x02AA
    23f8:	90 91 ab 02 	lds	r25, 0x02AB
    23fc:	89 2b       	or	r24, r25
    23fe:	41 f4       	brne	.+16     	; 0x2410 <malloc+0xf6>
    2400:	80 91 9f 02 	lds	r24, 0x029F
    2404:	90 91 a0 02 	lds	r25, 0x02A0
    2408:	90 93 ab 02 	sts	0x02AB, r25
    240c:	80 93 aa 02 	sts	0x02AA, r24
    2410:	40 91 a1 02 	lds	r20, 0x02A1
    2414:	50 91 a2 02 	lds	r21, 0x02A2
    2418:	41 15       	cp	r20, r1
    241a:	51 05       	cpc	r21, r1
    241c:	41 f4       	brne	.+16     	; 0x242e <malloc+0x114>
    241e:	4d b7       	in	r20, 0x3d	; 61
    2420:	5e b7       	in	r21, 0x3e	; 62
    2422:	80 91 9d 02 	lds	r24, 0x029D
    2426:	90 91 9e 02 	lds	r25, 0x029E
    242a:	48 1b       	sub	r20, r24
    242c:	59 0b       	sbc	r21, r25
    242e:	20 91 aa 02 	lds	r18, 0x02AA
    2432:	30 91 ab 02 	lds	r19, 0x02AB
    2436:	24 17       	cp	r18, r20
    2438:	35 07       	cpc	r19, r21
    243a:	b0 f4       	brcc	.+44     	; 0x2468 <malloc+0x14e>
    243c:	ca 01       	movw	r24, r20
    243e:	82 1b       	sub	r24, r18
    2440:	93 0b       	sbc	r25, r19
    2442:	86 17       	cp	r24, r22
    2444:	97 07       	cpc	r25, r23
    2446:	80 f0       	brcs	.+32     	; 0x2468 <malloc+0x14e>
    2448:	ab 01       	movw	r20, r22
    244a:	4e 5f       	subi	r20, 0xFE	; 254
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	84 17       	cp	r24, r20
    2450:	95 07       	cpc	r25, r21
    2452:	50 f0       	brcs	.+20     	; 0x2468 <malloc+0x14e>
    2454:	42 0f       	add	r20, r18
    2456:	53 1f       	adc	r21, r19
    2458:	50 93 ab 02 	sts	0x02AB, r21
    245c:	40 93 aa 02 	sts	0x02AA, r20
    2460:	f9 01       	movw	r30, r18
    2462:	61 93       	st	Z+, r22
    2464:	71 93       	st	Z+, r23
    2466:	02 c0       	rjmp	.+4      	; 0x246c <malloc+0x152>
    2468:	e0 e0       	ldi	r30, 0x00	; 0
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	cf 01       	movw	r24, r30
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <free>:
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	09 f4       	brne	.+2      	; 0x247e <free+0xa>
    247c:	50 c0       	rjmp	.+160    	; 0x251e <free+0xaa>
    247e:	ec 01       	movw	r28, r24
    2480:	22 97       	sbiw	r28, 0x02	; 2
    2482:	1b 82       	std	Y+3, r1	; 0x03
    2484:	1a 82       	std	Y+2, r1	; 0x02
    2486:	a0 91 ac 02 	lds	r26, 0x02AC
    248a:	b0 91 ad 02 	lds	r27, 0x02AD
    248e:	10 97       	sbiw	r26, 0x00	; 0
    2490:	09 f1       	breq	.+66     	; 0x24d4 <free+0x60>
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	ac 17       	cp	r26, r28
    2498:	bd 07       	cpc	r27, r29
    249a:	08 f1       	brcs	.+66     	; 0x24de <free+0x6a>
    249c:	bb 83       	std	Y+3, r27	; 0x03
    249e:	aa 83       	std	Y+2, r26	; 0x02
    24a0:	fe 01       	movw	r30, r28
    24a2:	21 91       	ld	r18, Z+
    24a4:	31 91       	ld	r19, Z+
    24a6:	e2 0f       	add	r30, r18
    24a8:	f3 1f       	adc	r31, r19
    24aa:	ae 17       	cp	r26, r30
    24ac:	bf 07       	cpc	r27, r31
    24ae:	79 f4       	brne	.+30     	; 0x24ce <free+0x5a>
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	11 97       	sbiw	r26, 0x01	; 1
    24b6:	28 0f       	add	r18, r24
    24b8:	39 1f       	adc	r19, r25
    24ba:	2e 5f       	subi	r18, 0xFE	; 254
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	39 83       	std	Y+1, r19	; 0x01
    24c0:	28 83       	st	Y, r18
    24c2:	12 96       	adiw	r26, 0x02	; 2
    24c4:	8d 91       	ld	r24, X+
    24c6:	9c 91       	ld	r25, X
    24c8:	13 97       	sbiw	r26, 0x03	; 3
    24ca:	9b 83       	std	Y+3, r25	; 0x03
    24cc:	8a 83       	std	Y+2, r24	; 0x02
    24ce:	41 15       	cp	r20, r1
    24d0:	51 05       	cpc	r21, r1
    24d2:	71 f4       	brne	.+28     	; 0x24f0 <free+0x7c>
    24d4:	d0 93 ad 02 	sts	0x02AD, r29
    24d8:	c0 93 ac 02 	sts	0x02AC, r28
    24dc:	20 c0       	rjmp	.+64     	; 0x251e <free+0xaa>
    24de:	12 96       	adiw	r26, 0x02	; 2
    24e0:	8d 91       	ld	r24, X+
    24e2:	9c 91       	ld	r25, X
    24e4:	13 97       	sbiw	r26, 0x03	; 3
    24e6:	ad 01       	movw	r20, r26
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	11 f0       	breq	.+4      	; 0x24f0 <free+0x7c>
    24ec:	dc 01       	movw	r26, r24
    24ee:	d3 cf       	rjmp	.-90     	; 0x2496 <free+0x22>
    24f0:	fa 01       	movw	r30, r20
    24f2:	d3 83       	std	Z+3, r29	; 0x03
    24f4:	c2 83       	std	Z+2, r28	; 0x02
    24f6:	21 91       	ld	r18, Z+
    24f8:	31 91       	ld	r19, Z+
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	ce 17       	cp	r28, r30
    2500:	df 07       	cpc	r29, r31
    2502:	69 f4       	brne	.+26     	; 0x251e <free+0xaa>
    2504:	88 81       	ld	r24, Y
    2506:	99 81       	ldd	r25, Y+1	; 0x01
    2508:	28 0f       	add	r18, r24
    250a:	39 1f       	adc	r19, r25
    250c:	2e 5f       	subi	r18, 0xFE	; 254
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	fa 01       	movw	r30, r20
    2512:	31 83       	std	Z+1, r19	; 0x01
    2514:	20 83       	st	Z, r18
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	93 83       	std	Z+3, r25	; 0x03
    251c:	82 83       	std	Z+2, r24	; 0x02
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <strnlen_P>:
    2524:	fc 01       	movw	r30, r24
    2526:	05 90       	lpm	r0, Z+
    2528:	61 50       	subi	r22, 0x01	; 1
    252a:	70 40       	sbci	r23, 0x00	; 0
    252c:	01 10       	cpse	r0, r1
    252e:	d8 f7       	brcc	.-10     	; 0x2526 <strnlen_P+0x2>
    2530:	80 95       	com	r24
    2532:	90 95       	com	r25
    2534:	8e 0f       	add	r24, r30
    2536:	9f 1f       	adc	r25, r31
    2538:	08 95       	ret

0000253a <memset>:
    253a:	dc 01       	movw	r26, r24
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <memset+0x6>
    253e:	6d 93       	st	X+, r22
    2540:	41 50       	subi	r20, 0x01	; 1
    2542:	50 40       	sbci	r21, 0x00	; 0
    2544:	e0 f7       	brcc	.-8      	; 0x253e <memset+0x4>
    2546:	08 95       	ret

00002548 <strnlen>:
    2548:	fc 01       	movw	r30, r24
    254a:	61 50       	subi	r22, 0x01	; 1
    254c:	70 40       	sbci	r23, 0x00	; 0
    254e:	01 90       	ld	r0, Z+
    2550:	01 10       	cpse	r0, r1
    2552:	d8 f7       	brcc	.-10     	; 0x254a <strnlen+0x2>
    2554:	80 95       	com	r24
    2556:	90 95       	com	r25
    2558:	8e 0f       	add	r24, r30
    255a:	9f 1f       	adc	r25, r31
    255c:	08 95       	ret

0000255e <fputc>:
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	8c 01       	movw	r16, r24
    2568:	eb 01       	movw	r28, r22
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	81 ff       	sbrs	r24, 1
    256e:	1b c0       	rjmp	.+54     	; 0x25a6 <fputc+0x48>
    2570:	82 ff       	sbrs	r24, 2
    2572:	0d c0       	rjmp	.+26     	; 0x258e <fputc+0x30>
    2574:	2e 81       	ldd	r18, Y+6	; 0x06
    2576:	3f 81       	ldd	r19, Y+7	; 0x07
    2578:	8c 81       	ldd	r24, Y+4	; 0x04
    257a:	9d 81       	ldd	r25, Y+5	; 0x05
    257c:	28 17       	cp	r18, r24
    257e:	39 07       	cpc	r19, r25
    2580:	64 f4       	brge	.+24     	; 0x259a <fputc+0x3c>
    2582:	e8 81       	ld	r30, Y
    2584:	f9 81       	ldd	r31, Y+1	; 0x01
    2586:	01 93       	st	Z+, r16
    2588:	f9 83       	std	Y+1, r31	; 0x01
    258a:	e8 83       	st	Y, r30
    258c:	06 c0       	rjmp	.+12     	; 0x259a <fputc+0x3c>
    258e:	e8 85       	ldd	r30, Y+8	; 0x08
    2590:	f9 85       	ldd	r31, Y+9	; 0x09
    2592:	80 2f       	mov	r24, r16
    2594:	09 95       	icall
    2596:	89 2b       	or	r24, r25
    2598:	31 f4       	brne	.+12     	; 0x25a6 <fputc+0x48>
    259a:	8e 81       	ldd	r24, Y+6	; 0x06
    259c:	9f 81       	ldd	r25, Y+7	; 0x07
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	9f 83       	std	Y+7, r25	; 0x07
    25a2:	8e 83       	std	Y+6, r24	; 0x06
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <fputc+0x4c>
    25a6:	0f ef       	ldi	r16, 0xFF	; 255
    25a8:	1f ef       	ldi	r17, 0xFF	; 255
    25aa:	c8 01       	movw	r24, r16
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	08 95       	ret

000025b6 <__ultoa_invert>:
    25b6:	fa 01       	movw	r30, r20
    25b8:	aa 27       	eor	r26, r26
    25ba:	28 30       	cpi	r18, 0x08	; 8
    25bc:	51 f1       	breq	.+84     	; 0x2612 <__ultoa_invert+0x5c>
    25be:	20 31       	cpi	r18, 0x10	; 16
    25c0:	81 f1       	breq	.+96     	; 0x2622 <__ultoa_invert+0x6c>
    25c2:	e8 94       	clt
    25c4:	6f 93       	push	r22
    25c6:	6e 7f       	andi	r22, 0xFE	; 254
    25c8:	6e 5f       	subi	r22, 0xFE	; 254
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	8f 4f       	sbci	r24, 0xFF	; 255
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	af 4f       	sbci	r26, 0xFF	; 255
    25d2:	b1 e0       	ldi	r27, 0x01	; 1
    25d4:	3e d0       	rcall	.+124    	; 0x2652 <__ultoa_invert+0x9c>
    25d6:	b4 e0       	ldi	r27, 0x04	; 4
    25d8:	3c d0       	rcall	.+120    	; 0x2652 <__ultoa_invert+0x9c>
    25da:	67 0f       	add	r22, r23
    25dc:	78 1f       	adc	r23, r24
    25de:	89 1f       	adc	r24, r25
    25e0:	9a 1f       	adc	r25, r26
    25e2:	a1 1d       	adc	r26, r1
    25e4:	68 0f       	add	r22, r24
    25e6:	79 1f       	adc	r23, r25
    25e8:	8a 1f       	adc	r24, r26
    25ea:	91 1d       	adc	r25, r1
    25ec:	a1 1d       	adc	r26, r1
    25ee:	6a 0f       	add	r22, r26
    25f0:	71 1d       	adc	r23, r1
    25f2:	81 1d       	adc	r24, r1
    25f4:	91 1d       	adc	r25, r1
    25f6:	a1 1d       	adc	r26, r1
    25f8:	20 d0       	rcall	.+64     	; 0x263a <__ultoa_invert+0x84>
    25fa:	09 f4       	brne	.+2      	; 0x25fe <__ultoa_invert+0x48>
    25fc:	68 94       	set
    25fe:	3f 91       	pop	r19
    2600:	2a e0       	ldi	r18, 0x0A	; 10
    2602:	26 9f       	mul	r18, r22
    2604:	11 24       	eor	r1, r1
    2606:	30 19       	sub	r19, r0
    2608:	30 5d       	subi	r19, 0xD0	; 208
    260a:	31 93       	st	Z+, r19
    260c:	de f6       	brtc	.-74     	; 0x25c4 <__ultoa_invert+0xe>
    260e:	cf 01       	movw	r24, r30
    2610:	08 95       	ret
    2612:	46 2f       	mov	r20, r22
    2614:	47 70       	andi	r20, 0x07	; 7
    2616:	40 5d       	subi	r20, 0xD0	; 208
    2618:	41 93       	st	Z+, r20
    261a:	b3 e0       	ldi	r27, 0x03	; 3
    261c:	0f d0       	rcall	.+30     	; 0x263c <__ultoa_invert+0x86>
    261e:	c9 f7       	brne	.-14     	; 0x2612 <__ultoa_invert+0x5c>
    2620:	f6 cf       	rjmp	.-20     	; 0x260e <__ultoa_invert+0x58>
    2622:	46 2f       	mov	r20, r22
    2624:	4f 70       	andi	r20, 0x0F	; 15
    2626:	40 5d       	subi	r20, 0xD0	; 208
    2628:	4a 33       	cpi	r20, 0x3A	; 58
    262a:	18 f0       	brcs	.+6      	; 0x2632 <__ultoa_invert+0x7c>
    262c:	49 5d       	subi	r20, 0xD9	; 217
    262e:	31 fd       	sbrc	r19, 1
    2630:	40 52       	subi	r20, 0x20	; 32
    2632:	41 93       	st	Z+, r20
    2634:	02 d0       	rcall	.+4      	; 0x263a <__ultoa_invert+0x84>
    2636:	a9 f7       	brne	.-22     	; 0x2622 <__ultoa_invert+0x6c>
    2638:	ea cf       	rjmp	.-44     	; 0x260e <__ultoa_invert+0x58>
    263a:	b4 e0       	ldi	r27, 0x04	; 4
    263c:	a6 95       	lsr	r26
    263e:	97 95       	ror	r25
    2640:	87 95       	ror	r24
    2642:	77 95       	ror	r23
    2644:	67 95       	ror	r22
    2646:	ba 95       	dec	r27
    2648:	c9 f7       	brne	.-14     	; 0x263c <__ultoa_invert+0x86>
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	61 05       	cpc	r22, r1
    264e:	71 05       	cpc	r23, r1
    2650:	08 95       	ret
    2652:	9b 01       	movw	r18, r22
    2654:	ac 01       	movw	r20, r24
    2656:	0a 2e       	mov	r0, r26
    2658:	06 94       	lsr	r0
    265a:	57 95       	ror	r21
    265c:	47 95       	ror	r20
    265e:	37 95       	ror	r19
    2660:	27 95       	ror	r18
    2662:	ba 95       	dec	r27
    2664:	c9 f7       	brne	.-14     	; 0x2658 <__ultoa_invert+0xa2>
    2666:	62 0f       	add	r22, r18
    2668:	73 1f       	adc	r23, r19
    266a:	84 1f       	adc	r24, r20
    266c:	95 1f       	adc	r25, r21
    266e:	a0 1d       	adc	r26, r0
    2670:	08 95       	ret

00002672 <__udivmodsi4>:
    2672:	a1 e2       	ldi	r26, 0x21	; 33
    2674:	1a 2e       	mov	r1, r26
    2676:	aa 1b       	sub	r26, r26
    2678:	bb 1b       	sub	r27, r27
    267a:	fd 01       	movw	r30, r26
    267c:	0d c0       	rjmp	.+26     	; 0x2698 <__udivmodsi4_ep>

0000267e <__udivmodsi4_loop>:
    267e:	aa 1f       	adc	r26, r26
    2680:	bb 1f       	adc	r27, r27
    2682:	ee 1f       	adc	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	a2 17       	cp	r26, r18
    2688:	b3 07       	cpc	r27, r19
    268a:	e4 07       	cpc	r30, r20
    268c:	f5 07       	cpc	r31, r21
    268e:	20 f0       	brcs	.+8      	; 0x2698 <__udivmodsi4_ep>
    2690:	a2 1b       	sub	r26, r18
    2692:	b3 0b       	sbc	r27, r19
    2694:	e4 0b       	sbc	r30, r20
    2696:	f5 0b       	sbc	r31, r21

00002698 <__udivmodsi4_ep>:
    2698:	66 1f       	adc	r22, r22
    269a:	77 1f       	adc	r23, r23
    269c:	88 1f       	adc	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	1a 94       	dec	r1
    26a2:	69 f7       	brne	.-38     	; 0x267e <__udivmodsi4_loop>
    26a4:	60 95       	com	r22
    26a6:	70 95       	com	r23
    26a8:	80 95       	com	r24
    26aa:	90 95       	com	r25
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	bd 01       	movw	r22, r26
    26b2:	cf 01       	movw	r24, r30
    26b4:	08 95       	ret

000026b6 <__prologue_saves__>:
    26b6:	2f 92       	push	r2
    26b8:	3f 92       	push	r3
    26ba:	4f 92       	push	r4
    26bc:	5f 92       	push	r5
    26be:	6f 92       	push	r6
    26c0:	7f 92       	push	r7
    26c2:	8f 92       	push	r8
    26c4:	9f 92       	push	r9
    26c6:	af 92       	push	r10
    26c8:	bf 92       	push	r11
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	ca 1b       	sub	r28, r26
    26e0:	db 0b       	sbc	r29, r27
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	09 94       	ijmp

000026ee <__epilogue_restores__>:
    26ee:	2a 88       	ldd	r2, Y+18	; 0x12
    26f0:	39 88       	ldd	r3, Y+17	; 0x11
    26f2:	48 88       	ldd	r4, Y+16	; 0x10
    26f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    26fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2700:	b9 84       	ldd	r11, Y+9	; 0x09
    2702:	c8 84       	ldd	r12, Y+8	; 0x08
    2704:	df 80       	ldd	r13, Y+7	; 0x07
    2706:	ee 80       	ldd	r14, Y+6	; 0x06
    2708:	fd 80       	ldd	r15, Y+5	; 0x05
    270a:	0c 81       	ldd	r16, Y+4	; 0x04
    270c:	1b 81       	ldd	r17, Y+3	; 0x03
    270e:	aa 81       	ldd	r26, Y+2	; 0x02
    2710:	b9 81       	ldd	r27, Y+1	; 0x01
    2712:	ce 0f       	add	r28, r30
    2714:	d1 1d       	adc	r29, r1
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	ed 01       	movw	r28, r26
    2722:	08 95       	ret

00002724 <_exit>:
    2724:	f8 94       	cli

00002726 <__stop_program>:
    2726:	ff cf       	rjmp	.-2      	; 0x2726 <__stop_program>
