
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a8  00800100  00002788  0000281c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002a8  008002a8  000029c4  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d92  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00003b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010f8  00000000  00000000  0000426c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00005364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00005624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__vector_1>
       8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e8       	ldi	r30, 0x88	; 136
      84:	f7 e2       	ldi	r31, 0x27	; 39
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a8 3a       	cpi	r26, 0xA8	; 168
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a8 ea       	ldi	r26, 0xA8	; 168
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a2 3b       	cpi	r26, 0xB2	; 178
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 88 00 	call	0x110	; 0x110 <init_UART>
	init_SRAM();
      c2:	0e 94 3f 01 	call	0x27e	; 0x27e <init_SRAM>
	init_joystick();
      c6:	0e 94 35 02 	call	0x46a	; 0x46a <init_joystick>
	SPI_MasterInit();	
      ca:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_MasterInit>
	CAN_init();
      ce:	0e 94 24 03 	call	0x648	; 0x648 <CAN_init>



	printf("Initialization complete\n");
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>


	printf("CAN_test: %d", CAN_test());
      da:	0e 94 65 03 	call	0x6ca	; 0x6ca <CAN_test>
      de:	9c 01       	movw	r18, r24
      e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x34>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x36>
      e4:	ed b7       	in	r30, 0x3d	; 61
      e6:	fe b7       	in	r31, 0x3e	; 62
      e8:	31 96       	adiw	r30, 0x01	; 1
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	91 83       	std	Z+1, r25	; 0x01
      f0:	80 83       	st	Z, r24
      f2:	33 83       	std	Z+3, r19	; 0x03
      f4:	22 83       	std	Z+2, r18	; 0x02
      f6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0

	
	
	

	butterfly_menu();
     102:	0e 94 ca 05 	call	0xb94	; 0xb94 <butterfly_menu>

	return 0;	
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
	
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <init_UART>:
unsigned char buffer_stop;
unsigned char buffer_used;
*/

// Initialize UART interface
int init_UART(unsigned int baud){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9f 83       	std	Y+7, r25	; 0x07
     126:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	9f 81       	ldd	r25, Y+7	; 0x07
     12c:	cc 01       	movw	r24, r24
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	8a 83       	std	Y+2, r24	; 0x02
     134:	9b 83       	std	Y+3, r25	; 0x03
     136:	ac 83       	std	Y+4, r26	; 0x04
     138:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	ac 81       	ldd	r26, Y+4	; 0x04
     140:	bd 81       	ldd	r27, Y+5	; 0x05
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	aa 1f       	adc	r26, r26
     148:	bb 1f       	adc	r27, r27
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	aa 1f       	adc	r26, r26
     158:	bb 1f       	adc	r27, r27
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	9c 01       	movw	r18, r24
     164:	ad 01       	movw	r20, r26
     166:	8a ef       	ldi	r24, 0xFA	; 250
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	ab e4       	ldi	r26, 0x4B	; 75
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__udivmodsi4>
     176:	da 01       	movw	r26, r20
     178:	c9 01       	movw	r24, r18
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	a1 09       	sbc	r26, r1
     17e:	b1 09       	sbc	r27, r1
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	ac 83       	std	Y+4, r26	; 0x04
     186:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     188:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	ac 81       	ldd	r26, Y+4	; 0x04
     194:	bd 81       	ldd	r27, Y+5	; 0x05
     196:	89 2f       	mov	r24, r25
     198:	9a 2f       	mov	r25, r26
     19a:	ab 2f       	mov	r26, r27
     19c:	bb 27       	eor	r27, r27
     19e:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     1a0:	e9 e2       	ldi	r30, 0x29	; 41
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     1a8:	ea e2       	ldi	r30, 0x2A	; 42
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stop bit, 1 for 2 stop bit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 number of databits in payload: 011 for 8 bits. S. 192 in data sheet */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	86 60       	ori	r24, 0x06	; 6
     1b4:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	80 62       	ori	r24, 0x20	; 32
     1ba:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     1c2:	e0 e4       	ldi	r30, 0x40	; 64
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     1ca:	87 ef       	ldi	r24, 0xF7	; 247
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	2e e1       	ldi	r18, 0x1E	; 30
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	b9 01       	movw	r22, r18
     1d4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <fdevopen>

	return 0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0

} 
     1dc:	27 96       	adiw	r28, 0x07	; 7
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_put_char>:

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_put_char+0x6>
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	7b 83       	std	Y+3, r23	; 0x03
     1fe:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	31 f4       	brne	.+12     	; 0x212 <UART_put_char+0x24>
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	3b 81       	ldd	r19, Y+3	; 0x03
     20a:	8d e0       	ldi	r24, 0x0D	; 13
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     212:	eb e2       	ldi	r30, 0x2B	; 43
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 72       	andi	r24, 0x20	; 32
     21e:	90 70       	andi	r25, 0x00	; 0
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	b9 f3       	breq	.-18     	; 0x212 <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     224:	ec e2       	ldi	r30, 0x2C	; 44
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	80 83       	st	Z, r24
	return 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
}
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <UART_get_char+0x6>
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     24c:	eb e2       	ldi	r30, 0x2B	; 43
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 23       	and	r24, r24
     254:	dc f7       	brge	.-10     	; 0x24c <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     256:	ec e2       	ldi	r30, 0x2C	; 44
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	8d 30       	cpi	r24, 0x0D	; 13
     262:	11 f4       	brne	.+4      	; 0x268 <UART_get_char+0x2c>
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     268:	ec e2       	ldi	r30, 0x2C	; 44
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <init_SRAM>:
#include <util/delay.h>
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     286:	a5 e5       	ldi	r26, 0x55	; 85
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e5       	ldi	r30, 0x55	; 85
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 6c       	ori	r24, 0xC0	; 192
     292:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     294:	a6 e5       	ldi	r26, 0x56	; 86
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     2a2:	a0 e5       	ldi	r26, 0x50	; 80
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 e5       	ldi	r30, 0x50	; 80
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	65 97       	sbiw	r28, 0x15	; 21
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e1       	ldi	r25, 0x10	; 16
     2ce:	9d 8b       	std	Y+21, r25	; 0x15
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
	printf("Starting...\n");
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>

	int i;
	for(i=0;i<0x800;i++)
     2da:	1b 8a       	std	Y+19, r1	; 0x13
     2dc:	1a 8a       	std	Y+18, r1	; 0x12
     2de:	80 c0       	rjmp	.+256    	; 0x3e0 <SRAM_test+0x12a>
	{
		ram_address[i] = (char)0x83;
     2e0:	2a 89       	ldd	r18, Y+18	; 0x12
     2e2:	3b 89       	ldd	r19, Y+19	; 0x13
     2e4:	8c 89       	ldd	r24, Y+20	; 0x14
     2e6:	9d 89       	ldd	r25, Y+21	; 0x15
     2e8:	fc 01       	movw	r30, r24
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	83 e8       	ldi	r24, 0x83	; 131
     2f0:	80 83       	st	Z, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e4       	ldi	r27, 0x40	; 64
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
     2fc:	9c 87       	std	Y+12, r25	; 0x0c
     2fe:	ad 87       	std	Y+13, r26	; 0x0d
     300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     302:	6b 85       	ldd	r22, Y+11	; 0x0b
     304:	7c 85       	ldd	r23, Y+12	; 0x0c
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	9e 85       	ldd	r25, Y+14	; 0x0e
     30a:	2a e9       	ldi	r18, 0x9A	; 154
     30c:	3b e9       	ldi	r19, 0x9B	; 155
     30e:	49 e9       	ldi	r20, 0x99	; 153
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	8f 83       	std	Y+7, r24	; 0x07
     31c:	98 87       	std	Y+8, r25	; 0x08
     31e:	a9 87       	std	Y+9, r26	; 0x09
     320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     322:	6f 81       	ldd	r22, Y+7	; 0x07
     324:	78 85       	ldd	r23, Y+8	; 0x08
     326:	89 85       	ldd	r24, Y+9	; 0x09
     328:	9a 85       	ldd	r25, Y+10	; 0x0a
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__ltsf2>
     336:	88 23       	and	r24, r24
     338:	2c f4       	brge	.+10     	; 0x344 <SRAM_test+0x8e>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9e 83       	std	Y+6, r25	; 0x06
     340:	8d 83       	std	Y+5, r24	; 0x05
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <SRAM_test+0x10c>
	else if (__tmp > 65535)
     344:	6f 81       	ldd	r22, Y+7	; 0x07
     346:	78 85       	ldd	r23, Y+8	; 0x08
     348:	89 85       	ldd	r24, Y+9	; 0x09
     34a:	9a 85       	ldd	r25, Y+10	; 0x0a
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	57 e4       	ldi	r21, 0x47	; 71
     354:	0e 94 9d 0c 	call	0x193a	; 0x193a <__gtsf2>
     358:	18 16       	cp	r1, r24
     35a:	4c f5       	brge	.+82     	; 0x3ae <SRAM_test+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35c:	6b 85       	ldd	r22, Y+11	; 0x0b
     35e:	7c 85       	ldd	r23, Y+12	; 0x0c
     360:	8d 85       	ldd	r24, Y+13	; 0x0d
     362:	9e 85       	ldd	r25, Y+14	; 0x0e
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e2       	ldi	r20, 0x20	; 32
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	8d 83       	std	Y+5, r24	; 0x05
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <SRAM_test+0xee>
     386:	8a e7       	ldi	r24, 0x7A	; 122
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <SRAM_test+0xdc>
     396:	9c 83       	std	Y+4, r25	; 0x04
     398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	9e 83       	std	Y+6, r25	; 0x06
     3a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	69 f7       	brne	.-38     	; 0x386 <SRAM_test+0xd0>
     3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <SRAM_test+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ae:	6f 81       	ldd	r22, Y+7	; 0x07
     3b0:	78 85       	ldd	r23, Y+8	; 0x08
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9e 83       	std	Y+6, r25	; 0x06
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <SRAM_test+0x118>
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	9b 89       	ldd	r25, Y+19	; 0x13
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9b 8b       	std	Y+19, r25	; 0x13
     3de:	8a 8b       	std	Y+18, r24	; 0x12
     3e0:	8a 89       	ldd	r24, Y+18	; 0x12
     3e2:	9b 89       	ldd	r25, Y+19	; 0x13
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	80 30       	cpi	r24, 0x00	; 0
     3e8:	92 07       	cpc	r25, r18
     3ea:	0c f4       	brge	.+2      	; 0x3ee <SRAM_test+0x138>
     3ec:	79 cf       	rjmp	.-270    	; 0x2e0 <SRAM_test+0x2a>
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     3ee:	1b 8a       	std	Y+19, r1	; 0x13
     3f0:	1a 8a       	std	Y+18, r1	; 0x12
     3f2:	30 c0       	rjmp	.+96     	; 0x454 <SRAM_test+0x19e>
	{
		char c = (char)ram_address[i];
     3f4:	2a 89       	ldd	r18, Y+18	; 0x12
     3f6:	3b 89       	ldd	r19, Y+19	; 0x13
     3f8:	8c 89       	ldd	r24, Y+20	; 0x14
     3fa:	9d 89       	ldd	r25, Y+21	; 0x15
     3fc:	fc 01       	movw	r30, r24
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	80 81       	ld	r24, Z
     404:	89 8b       	std	Y+17, r24	; 0x11
		int j = (int)c;
     406:	89 89       	ldd	r24, Y+17	; 0x11
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	8f 87       	std	Y+15, r24	; 0x0f
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     410:	2a 89       	ldd	r18, Y+18	; 0x12
     412:	3b 89       	ldd	r19, Y+19	; 0x13
     414:	8c 89       	ldd	r24, Y+20	; 0x14
     416:	9d 89       	ldd	r25, Y+21	; 0x15
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	80 81       	ld	r24, Z
     420:	83 38       	cpi	r24, 0x83	; 131
     422:	99 f0       	breq	.+38     	; 0x44a <SRAM_test+0x194>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     424:	00 d0       	rcall	.+0      	; 0x426 <SRAM_test+0x170>
     426:	00 d0       	rcall	.+0      	; 0x428 <SRAM_test+0x172>
     428:	ed b7       	in	r30, 0x3d	; 61
     42a:	fe b7       	in	r31, 0x3e	; 62
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	8a 89       	ldd	r24, Y+18	; 0x12
     438:	9b 89       	ldd	r25, Y+19	; 0x13
     43a:	93 83       	std	Z+3, r25	; 0x03
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	9b 89       	ldd	r25, Y+19	; 0x13
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	9b 8b       	std	Y+19, r25	; 0x13
     452:	8a 8b       	std	Y+18, r24	; 0x12
     454:	8a 89       	ldd	r24, Y+18	; 0x12
     456:	9b 89       	ldd	r25, Y+19	; 0x13
     458:	28 e0       	ldi	r18, 0x08	; 8
     45a:	80 30       	cpi	r24, 0x00	; 0
     45c:	92 07       	cpc	r25, r18
     45e:	54 f2       	brlt	.-108    	; 0x3f4 <SRAM_test+0x13e>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     460:	88 e4       	ldi	r24, 0x48	; 72
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>
     468:	ff cf       	rjmp	.-2      	; 0x468 <SRAM_test+0x1b2>

0000046a <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	// set port B: in
	DDRB = 0x00; //inputs
     472:	e7 e3       	ldi	r30, 0x37	; 55
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull-ups
     478:	e8 e3       	ldi	r30, 0x38	; 56
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
}
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <read_axis+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <read_axis+0x8>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	98 e1       	ldi	r25, 0x18	; 24
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	88 37       	cpi	r24, 0x78	; 120
     4a0:	b1 f4       	brne	.+44     	; 0x4ce <read_axis+0x48>
		adc_address[0] = 0x04;
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4aa:	e6 e3       	ldi	r30, 0x36	; 54
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	81 70       	andi	r24, 0x01	; 1
     4b6:	90 70       	andi	r25, 0x00	; 0
     4b8:	88 23       	and	r24, r24
     4ba:	b9 f7       	brne	.-18     	; 0x4aa <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	80 81       	ld	r24, Z
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	1d c0       	rjmp	.+58     	; 0x508 <__stack+0x9>
	}
	else if(axis == 'y'){
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	89 37       	cpi	r24, 0x79	; 121
     4d2:	c1 f4       	brne	.+48     	; 0x504 <__stack+0x5>
		adc_address[0] = 0x06;
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4dc:	e6 e3       	ldi	r30, 0x36	; 54
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	81 70       	andi	r24, 0x01	; 1
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	88 23       	and	r24, r24
     4ec:	b9 f7       	brne	.-18     	; 0x4dc <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     4ee:	e9 81       	ldd	r30, Y+1	; 0x01
     4f0:	fa 81       	ldd	r31, Y+2	; 0x02
     4f2:	80 81       	ld	r24, Z
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 50       	subi	r24, 0x00	; 0
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
	}
	return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	8c 83       	std	Y+4, r24	; 0x04
     508:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <eeprom_read_byte+0x6>
     51e:	0f 92       	push	r0
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     528:	ec e3       	ldi	r30, 0x3C	; 60
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 70       	andi	r24, 0x02	; 2
     534:	90 70       	andi	r25, 0x00	; 0
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	b9 f7       	brne	.-18     	; 0x528 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     53a:	ee e3       	ldi	r30, 0x3E	; 62
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     546:	e0 9a       	sbi	0x1c, 0	; 28
     548:	8d b3       	in	r24, 0x1d	; 29
     54a:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <read_buttons>:


// Read joystick buttons (Can be optimised with interrupt)
inline uint8_t read_buttons(){
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     562:	e6 e3       	ldi	r30, 0x36	; 54
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	86 70       	andi	r24, 0x06	; 6
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	95 95       	asr	r25
     572:	87 95       	ror	r24
}
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <SPI_MasterInit>:
#include <avr/interrupt.h>
#include "spi.h"

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     582:	a7 e3       	ldi	r26, 0x37	; 55
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e7 e3       	ldi	r30, 0x37	; 55
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	88 6b       	ori	r24, 0xB8	; 184
     590:	8c 93       	st	X, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     592:	ed e2       	ldi	r30, 0x2D	; 45
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	81 e5       	ldi	r24, 0x51	; 81
     598:	80 83       	st	Z, r24
	SPI_NoSlave();
     59a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     5b0:	ef e2       	ldi	r30, 0x2F	; 47
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     5b8:	ee e2       	ldi	r30, 0x2E	; 46
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	dc f7       	brge	.-10     	; 0x5b8 <SPI_MasterTransmit+0x14>
}
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <SPI_MasterReceive>:

// Recieve char over SPI
char SPI_MasterReceive(void)
{
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     5d8:	ee e2       	ldi	r30, 0x2E	; 46
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	dc f7       	brge	.-10     	; 0x5d8 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     5e2:	ef e2       	ldi	r30, 0x2F	; 47
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
}
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	0f 92       	push	r0
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	89 83       	std	Y+1, r24	; 0x01
	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	82 36       	cpi	r24, 0x62	; 98
     5fe:	41 f4       	brne	.+16     	; 0x610 <SPI_SelectSlave+0x22>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     600:	a8 e3       	ldi	r26, 0x38	; 56
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e3       	ldi	r30, 0x38	; 56
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	8c 93       	st	X, r24
     60e:	0a c0       	rjmp	.+20     	; 0x624 <SPI_SelectSlave+0x36>
	else if (slave == SPI_CAN)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	83 37       	cpi	r24, 0x73	; 115
     614:	39 f4       	brne	.+14     	; 0x624 <SPI_SelectSlave+0x36>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     616:	a8 e3       	ldi	r26, 0x38	; 56
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e3       	ldi	r30, 0x38	; 56
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8f 7e       	andi	r24, 0xEF	; 239
     622:	8c 93       	st	X, r24
}
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <SPI_NoSlave>:

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     634:	a8 e3       	ldi	r26, 0x38	; 56
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e8 e3       	ldi	r30, 0x38	; 56
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 61       	ori	r24, 0x18	; 24
     640:	8c 93       	st	X, r24
}
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <CAN_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>

//Initialize the CAN bus
void CAN_init(void){
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	00 d0       	rcall	.+0      	; 0x64e <CAN_init+0x6>
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     652:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CAN_reset>

	uint8_t data[2];

	//Acceptance mask for RXB0 (all 11 bits counts)
	data[0] = 0b11111111;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     65a:	80 ee       	ldi	r24, 0xE0	; 224
     65c:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], MASK_RXF0);
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	60 e2       	ldi	r22, 0x20	; 32
     662:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>
	CAN_write(data[1], MASK_RXF0+1);
     666:	8a 81       	ldd	r24, Y+2	; 0x02
     668:	61 e2       	ldi	r22, 0x21	; 33
     66a:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>


	//RXF0
	//Receive filter 0 hits when id = 0x1F (exactly)	
	data[0] = 0b00111111;
     66e:	8f e3       	ldi	r24, 0x3F	; 63
     670:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     672:	80 ee       	ldi	r24, 0xE0	; 224
     674:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF0);
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>
	CAN_write(data[1], RXF0+1);
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>

	//RXF1
	//Receive filter 1 hits when id = 1E (exactly)
	data[0] = 0b00111111;
     686:	8f e3       	ldi	r24, 0x3F	; 63
     688:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11000000; 
     68a:	80 ec       	ldi	r24, 0xC0	; 192
     68c:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF1);
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	64 e0       	ldi	r22, 0x04	; 4
     692:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>
	CAN_write(data[1], RXF1+1);
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	65 e0       	ldi	r22, 0x05	; 5
     69a:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>
	data[1] = 0b01100000;
	CAN_write(data[0], RXF5);
	CAN_write(data[1], RXF5+1);
*/

	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     69e:	8f e0       	ldi	r24, 0x0F	; 15
     6a0:	60 ee       	ldi	r22, 0xE0	; 224
     6a2:	40 e4       	ldi	r20, 0x40	; 64
     6a4:	0e 94 ad 09 	call	0x135a	; 0x135a <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     6a8:	80 e6       	ldi	r24, 0x60	; 96
     6aa:	60 e6       	ldi	r22, 0x60	; 96
     6ac:	40 e2       	ldi	r20, 0x20	; 32
     6ae:	0e 94 ad 09 	call	0x135a	; 0x135a <CAN_bit_modify>
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
     6b2:	8c e0       	ldi	r24, 0x0C	; 12
     6b4:	6f e0       	ldi	r22, 0x0F	; 15
     6b6:	4f ef       	ldi	r20, 0xFF	; 255
     6b8:	0e 94 ad 09 	call	0x135a	; 0x135a <CAN_bit_modify>
	CAN_init_interrupt();
     6bc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <CAN_init_interrupt>
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	2b 97       	sbiw	r28, 0x0b	; 11
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     6de:	84 e5       	ldi	r24, 0x54	; 84
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>
	int i;
	

	CAN_message message;
	message.id = 0;
     6e6:	1c 82       	std	Y+4, r1	; 0x04
     6e8:	1b 82       	std	Y+3, r1	; 0x03
	message.length = 8;
     6ea:	88 e0       	ldi	r24, 0x08	; 8
     6ec:	8d 83       	std	Y+5, r24	; 0x05
	message.data = " ";
     6ee:	85 e6       	ldi	r24, 0x65	; 101
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	9f 83       	std	Y+7, r25	; 0x07
     6f4:	8e 83       	std	Y+6, r24	; 0x06
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     6f6:	1a 82       	std	Y+2, r1	; 0x02
     6f8:	19 82       	std	Y+1, r1	; 0x01
     6fa:	d2 c0       	rjmp	.+420    	; 0x8a0 <CAN_test+0x1d6>
		switch (i) {
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	9b 87       	std	Y+11, r25	; 0x0b
     702:	8a 87       	std	Y+10, r24	; 0x0a
     704:	8a 85       	ldd	r24, Y+10	; 0x0a
     706:	9b 85       	ldd	r25, Y+11	; 0x0b
     708:	84 30       	cpi	r24, 0x04	; 4
     70a:	91 05       	cpc	r25, r1
     70c:	09 f4       	brne	.+2      	; 0x710 <CAN_test+0x46>
     70e:	6b c0       	rjmp	.+214    	; 0x7e6 <CAN_test+0x11c>
     710:	8a 85       	ldd	r24, Y+10	; 0x0a
     712:	9b 85       	ldd	r25, Y+11	; 0x0b
     714:	85 30       	cpi	r24, 0x05	; 5
     716:	91 05       	cpc	r25, r1
     718:	ec f4       	brge	.+58     	; 0x754 <CAN_test+0x8a>
     71a:	8a 85       	ldd	r24, Y+10	; 0x0a
     71c:	9b 85       	ldd	r25, Y+11	; 0x0b
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 05       	cpc	r25, r1
     722:	09 f4       	brne	.+2      	; 0x726 <CAN_test+0x5c>
     724:	45 c0       	rjmp	.+138    	; 0x7b0 <CAN_test+0xe6>
     726:	8a 85       	ldd	r24, Y+10	; 0x0a
     728:	9b 85       	ldd	r25, Y+11	; 0x0b
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	91 05       	cpc	r25, r1
     72e:	2c f4       	brge	.+10     	; 0x73a <CAN_test+0x70>
     730:	8a 85       	ldd	r24, Y+10	; 0x0a
     732:	9b 85       	ldd	r25, Y+11	; 0x0b
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	99 f1       	breq	.+102    	; 0x79e <CAN_test+0xd4>
     738:	8b c0       	rjmp	.+278    	; 0x850 <CAN_test+0x186>
     73a:	8a 85       	ldd	r24, Y+10	; 0x0a
     73c:	9b 85       	ldd	r25, Y+11	; 0x0b
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	91 05       	cpc	r25, r1
     742:	09 f4       	brne	.+2      	; 0x746 <CAN_test+0x7c>
     744:	3e c0       	rjmp	.+124    	; 0x7c2 <CAN_test+0xf8>
     746:	8a 85       	ldd	r24, Y+10	; 0x0a
     748:	9b 85       	ldd	r25, Y+11	; 0x0b
     74a:	83 30       	cpi	r24, 0x03	; 3
     74c:	91 05       	cpc	r25, r1
     74e:	09 f4       	brne	.+2      	; 0x752 <CAN_test+0x88>
     750:	41 c0       	rjmp	.+130    	; 0x7d4 <CAN_test+0x10a>
     752:	7e c0       	rjmp	.+252    	; 0x850 <CAN_test+0x186>
     754:	8a 85       	ldd	r24, Y+10	; 0x0a
     756:	9b 85       	ldd	r25, Y+11	; 0x0b
     758:	87 30       	cpi	r24, 0x07	; 7
     75a:	91 05       	cpc	r25, r1
     75c:	09 f4       	brne	.+2      	; 0x760 <CAN_test+0x96>
     75e:	5e c0       	rjmp	.+188    	; 0x81c <CAN_test+0x152>
     760:	8a 85       	ldd	r24, Y+10	; 0x0a
     762:	9b 85       	ldd	r25, Y+11	; 0x0b
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	91 05       	cpc	r25, r1
     768:	6c f4       	brge	.+26     	; 0x784 <CAN_test+0xba>
     76a:	8a 85       	ldd	r24, Y+10	; 0x0a
     76c:	9b 85       	ldd	r25, Y+11	; 0x0b
     76e:	85 30       	cpi	r24, 0x05	; 5
     770:	91 05       	cpc	r25, r1
     772:	09 f4       	brne	.+2      	; 0x776 <CAN_test+0xac>
     774:	41 c0       	rjmp	.+130    	; 0x7f8 <CAN_test+0x12e>
     776:	8a 85       	ldd	r24, Y+10	; 0x0a
     778:	9b 85       	ldd	r25, Y+11	; 0x0b
     77a:	86 30       	cpi	r24, 0x06	; 6
     77c:	91 05       	cpc	r25, r1
     77e:	09 f4       	brne	.+2      	; 0x782 <CAN_test+0xb8>
     780:	44 c0       	rjmp	.+136    	; 0x80a <CAN_test+0x140>
     782:	66 c0       	rjmp	.+204    	; 0x850 <CAN_test+0x186>
     784:	8a 85       	ldd	r24, Y+10	; 0x0a
     786:	9b 85       	ldd	r25, Y+11	; 0x0b
     788:	88 30       	cpi	r24, 0x08	; 8
     78a:	91 05       	cpc	r25, r1
     78c:	09 f4       	brne	.+2      	; 0x790 <CAN_test+0xc6>
     78e:	4f c0       	rjmp	.+158    	; 0x82e <CAN_test+0x164>
     790:	8a 85       	ldd	r24, Y+10	; 0x0a
     792:	9b 85       	ldd	r25, Y+11	; 0x0b
     794:	89 30       	cpi	r24, 0x09	; 9
     796:	91 05       	cpc	r25, r1
     798:	09 f4       	brne	.+2      	; 0x79c <CAN_test+0xd2>
     79a:	52 c0       	rjmp	.+164    	; 0x840 <CAN_test+0x176>
     79c:	59 c0       	rjmp	.+178    	; 0x850 <CAN_test+0x186>
			case 0:
				message.data = "7";
     79e:	87 e6       	ldi	r24, 0x67	; 103
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	9f 83       	std	Y+7, r25	; 0x07
     7a4:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 31;
     7a6:	8f e1       	ldi	r24, 0x1F	; 31
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9c 83       	std	Y+4, r25	; 0x04
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	50 c0       	rjmp	.+160    	; 0x850 <CAN_test+0x186>
				break;
			case 1:
				message.data = "1";
     7b0:	89 e6       	ldi	r24, 0x69	; 105
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	9f 83       	std	Y+7, r25	; 0x07
     7b6:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 1;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9c 83       	std	Y+4, r25	; 0x04
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	47 c0       	rjmp	.+142    	; 0x850 <CAN_test+0x186>
				break;
			case 2:
				message.data = "2";
     7c2:	8b e6       	ldi	r24, 0x6B	; 107
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	9f 83       	std	Y+7, r25	; 0x07
     7c8:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 2;
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9c 83       	std	Y+4, r25	; 0x04
     7d0:	8b 83       	std	Y+3, r24	; 0x03
     7d2:	3e c0       	rjmp	.+124    	; 0x850 <CAN_test+0x186>
				break;
			case 3:
				message.data = "3";
     7d4:	8d e6       	ldi	r24, 0x6D	; 109
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	9f 83       	std	Y+7, r25	; 0x07
     7da:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 3;
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	9c 83       	std	Y+4, r25	; 0x04
     7e2:	8b 83       	std	Y+3, r24	; 0x03
     7e4:	35 c0       	rjmp	.+106    	; 0x850 <CAN_test+0x186>
				break;
			case 4:
				message.data = "4";
     7e6:	8f e6       	ldi	r24, 0x6F	; 111
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	9f 83       	std	Y+7, r25	; 0x07
     7ec:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 4;
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9c 83       	std	Y+4, r25	; 0x04
     7f4:	8b 83       	std	Y+3, r24	; 0x03
     7f6:	2c c0       	rjmp	.+88     	; 0x850 <CAN_test+0x186>
				break;
			case 5:
				message.data = "5";
     7f8:	81 e7       	ldi	r24, 0x71	; 113
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 83       	std	Y+7, r25	; 0x07
     7fe:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 5;
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9c 83       	std	Y+4, r25	; 0x04
     806:	8b 83       	std	Y+3, r24	; 0x03
     808:	23 c0       	rjmp	.+70     	; 0x850 <CAN_test+0x186>
				break;
			case 6:
				message.data = "6";
     80a:	83 e7       	ldi	r24, 0x73	; 115
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	9f 83       	std	Y+7, r25	; 0x07
     810:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 6;
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9c 83       	std	Y+4, r25	; 0x04
     818:	8b 83       	std	Y+3, r24	; 0x03
     81a:	1a c0       	rjmp	.+52     	; 0x850 <CAN_test+0x186>
				break;
			case 7:
				message.data = "7";
     81c:	87 e6       	ldi	r24, 0x67	; 103
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	9f 83       	std	Y+7, r25	; 0x07
     822:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 7;
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9c 83       	std	Y+4, r25	; 0x04
     82a:	8b 83       	std	Y+3, r24	; 0x03
     82c:	11 c0       	rjmp	.+34     	; 0x850 <CAN_test+0x186>
				break;
			case 8:
				message.data = "8";
     82e:	85 e7       	ldi	r24, 0x75	; 117
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	9f 83       	std	Y+7, r25	; 0x07
     834:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 8;
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	9c 83       	std	Y+4, r25	; 0x04
     83c:	8b 83       	std	Y+3, r24	; 0x03
     83e:	08 c0       	rjmp	.+16     	; 0x850 <CAN_test+0x186>
				break;
			case 9:
				message.data = "9";
     840:	87 e7       	ldi	r24, 0x77	; 119
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 83       	std	Y+7, r25	; 0x07
     846:	8e 83       	std	Y+6, r24	; 0x06
				message.id = 9;
     848:	89 e0       	ldi	r24, 0x09	; 9
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	8b 83       	std	Y+3, r24	; 0x03
		/*// Blanking out recieved buffer (really needed??)
		for (i = 0;(i < 9); i++)
			received[i] = '\0';	*/

		// Sending data in CAN bus
		printf("Sending string: %s", message.data);
     850:	2e 81       	ldd	r18, Y+6	; 0x06
     852:	3f 81       	ldd	r19, Y+7	; 0x07
     854:	00 d0       	rcall	.+0      	; 0x856 <CAN_test+0x18c>
     856:	00 d0       	rcall	.+0      	; 0x858 <CAN_test+0x18e>
     858:	ed b7       	in	r30, 0x3d	; 61
     85a:	fe b7       	in	r31, 0x3e	; 62
     85c:	31 96       	adiw	r30, 0x01	; 1
     85e:	89 e7       	ldi	r24, 0x79	; 121
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	91 83       	std	Z+1, r25	; 0x01
     864:	80 83       	st	Z, r24
     866:	33 83       	std	Z+3, r19	; 0x03
     868:	22 83       	std	Z+2, r18	; 0x02
     86a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
		if (CAN_send(message.data, message.id) != 0){
     876:	4e 81       	ldd	r20, Y+6	; 0x06
     878:	5f 81       	ldd	r21, Y+7	; 0x07
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	9c 01       	movw	r18, r24
     880:	ca 01       	movw	r24, r20
     882:	b9 01       	movw	r22, r18
     884:	0e 94 63 04 	call	0x8c6	; 0x8c6 <CAN_send>
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	29 f0       	breq	.+10     	; 0x896 <CAN_test+0x1cc>
			return -1;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	9f ef       	ldi	r25, 0xFF	; 255
     890:	99 87       	std	Y+9, r25	; 0x09
     892:	88 87       	std	Y+8, r24	; 0x08
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <CAN_test+0x1e6>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	91 05       	cpc	r25, r1
     8a8:	0c f4       	brge	.+2      	; 0x8ac <CAN_test+0x1e2>
     8aa:	28 cf       	rjmp	.-432    	; 0x6fc <CAN_test+0x32>
		printf("Sending string: %s", message.data);
		if (CAN_send(message.data, message.id) != 0){
			return -1;
		}
	}
	return 0;
     8ac:	19 86       	std	Y+9, r1	; 0x09
     8ae:	18 86       	std	Y+8, r1	; 0x08
     8b0:	88 85       	ldd	r24, Y+8	; 0x08
     8b2:	99 85       	ldd	r25, Y+9	; 0x09
}
     8b4:	2b 96       	adiw	r28, 0x0b	; 11
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	08 95       	ret

000008c6 <CAN_send>:

// Send string using CAN bus
int CAN_send(char* str, int id){
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	2e 97       	sbiw	r28, 0x0e	; 14
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	9a 87       	std	Y+10, r25	; 0x0a
     8dc:	89 87       	std	Y+9, r24	; 0x09
     8de:	7c 87       	std	Y+12, r23	; 0x0c
     8e0:	6b 87       	std	Y+11, r22	; 0x0b
	
	unsigned int part, i;
	int done = 0;
     8e2:	1c 82       	std	Y+4, r1	; 0x04
     8e4:	1b 82       	std	Y+3, r1	; 0x03

	char *messg = "\0\0\0\0\0\0\0";
     8e6:	8c e8       	ldi	r24, 0x8C	; 140
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < 8; i++){
     8ee:	1e 82       	std	Y+6, r1	; 0x06
     8f0:	1d 82       	std	Y+5, r1	; 0x05
     8f2:	1f c0       	rjmp	.+62     	; 0x932 <CAN_send+0x6c>
		messg[i] = str[i];
     8f4:	29 81       	ldd	r18, Y+1	; 0x01
     8f6:	3a 81       	ldd	r19, Y+2	; 0x02
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	9e 81       	ldd	r25, Y+6	; 0x06
     8fc:	d9 01       	movw	r26, r18
     8fe:	a8 0f       	add	r26, r24
     900:	b9 1f       	adc	r27, r25
     902:	29 85       	ldd	r18, Y+9	; 0x09
     904:	3a 85       	ldd	r19, Y+10	; 0x0a
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	9e 81       	ldd	r25, Y+6	; 0x06
     90a:	f9 01       	movw	r30, r18
     90c:	e8 0f       	add	r30, r24
     90e:	f9 1f       	adc	r31, r25
     910:	80 81       	ld	r24, Z
     912:	8c 93       	st	X, r24
		if (messg[i] == '\0') {
     914:	29 81       	ldd	r18, Y+1	; 0x01
     916:	3a 81       	ldd	r19, Y+2	; 0x02
     918:	8d 81       	ldd	r24, Y+5	; 0x05
     91a:	9e 81       	ldd	r25, Y+6	; 0x06
     91c:	f9 01       	movw	r30, r18
     91e:	e8 0f       	add	r30, r24
     920:	f9 1f       	adc	r31, r25
     922:	80 81       	ld	r24, Z
     924:	88 23       	and	r24, r24
     926:	51 f0       	breq	.+20     	; 0x93c <CAN_send+0x76>
	
	unsigned int part, i;
	int done = 0;

	char *messg = "\0\0\0\0\0\0\0";
	for(i = 0; i < 8; i++){
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	9e 81       	ldd	r25, Y+6	; 0x06
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	9e 83       	std	Y+6, r25	; 0x06
     930:	8d 83       	std	Y+5, r24	; 0x05
     932:	8d 81       	ldd	r24, Y+5	; 0x05
     934:	9e 81       	ldd	r25, Y+6	; 0x06
     936:	88 30       	cpi	r24, 0x08	; 8
     938:	91 05       	cpc	r25, r1
     93a:	e0 f2       	brcs	.-72     	; 0x8f4 <CAN_send+0x2e>
		if (messg[i] == '\0') {
			break;
		}
	}

	cli(); // disable interrupts, to protect SPI-communication 
     93c:	f8 94       	cli

	CAN_bit_modify(TXB0SIDH, 0xFF, (id<<13)); //transmit buffer 0 id high
     93e:	81 e3       	ldi	r24, 0x31	; 49
     940:	6f ef       	ldi	r22, 0xFF	; 255
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	0e 94 ad 09 	call	0x135a	; 0x135a <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     948:	8b 85       	ldd	r24, Y+11	; 0x0b
     94a:	98 2f       	mov	r25, r24
     94c:	92 95       	swap	r25
     94e:	99 0f       	add	r25, r25
     950:	90 7e       	andi	r25, 0xE0	; 224
     952:	82 e3       	ldi	r24, 0x32	; 50
     954:	60 ee       	ldi	r22, 0xE0	; 224
     956:	49 2f       	mov	r20, r25
     958:	0e 94 ad 09 	call	0x135a	; 0x135a <CAN_bit_modify>
	//CAN_write((char)messg.length, TXB0DLC);	// data length
	CAN_write((char)8, TXB0DLC);	// data length
     95c:	88 e0       	ldi	r24, 0x08	; 8
     95e:	65 e3       	ldi	r22, 0x35	; 53
     960:	0e 94 0e 09 	call	0x121c	; 0x121c <CAN_write>
	CAN_load_tx(messg, 0); //load transmit buffer from channel 0
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	0e 94 2b 09 	call	0x1256	; 0x1256 <CAN_load_tx>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <CAN_rts>

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     974:	1e 82       	std	Y+6, r1	; 0x06
     976:	1d 82       	std	Y+5, r1	; 0x05
     978:	0d c0       	rjmp	.+26     	; 0x994 <CAN_send+0xce>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     97a:	0e 94 90 09 	call	0x1320	; 0x1320 <CAN_read_status>
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	84 70       	andi	r24, 0x04	; 4
     984:	90 70       	andi	r25, 0x00	; 0
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	59 f0       	breq	.+22     	; 0x9a0 <CAN_send+0xda>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	9e 81       	ldd	r25, Y+6	; 0x06
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	9e 83       	std	Y+6, r25	; 0x06
     992:	8d 83       	std	Y+5, r24	; 0x05
     994:	8d 81       	ldd	r24, Y+5	; 0x05
     996:	9e 81       	ldd	r25, Y+6	; 0x06
     998:	2f ef       	ldi	r18, 0xFF	; 255
     99a:	8f 3f       	cpi	r24, 0xFF	; 255
     99c:	92 07       	cpc	r25, r18
     99e:	69 f7       	brne	.-38     	; 0x97a <CAN_send+0xb4>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	sei(); // enable interrupts again
     9a0:	78 94       	sei
	if(i == 0xffff) return -1;
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	2f ef       	ldi	r18, 0xFF	; 255
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	92 07       	cpc	r25, r18
     9ac:	29 f4       	brne	.+10     	; 0x9b8 <CAN_send+0xf2>
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	9e 87       	std	Y+14, r25	; 0x0e
     9b4:	8d 87       	std	Y+13, r24	; 0x0d
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <CAN_send+0xf6>
			if(i == 0xffff) return -1;
		}

		if(str[i] == '\0') break;
*/
	return 0;
     9b8:	1e 86       	std	Y+14, r1	; 0x0e
     9ba:	1d 86       	std	Y+13, r1	; 0x0d
     9bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9be:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     9c0:	2e 96       	adiw	r28, 0x0e	; 14
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	cf 91       	pop	r28
     9ce:	df 91       	pop	r29
     9d0:	08 95       	ret

000009d2 <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <CAN_receive+0x6>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <CAN_receive+0x8>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	9a 83       	std	Y+2, r25	; 0x02
     9e0:	89 83       	std	Y+1, r24	; 0x01
     9e2:	7c 83       	std	Y+4, r23	; 0x04
     9e4:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF+2*rx) == 0); // loop until data received
     9e6:	0e 94 90 09 	call	0x1320	; 0x1320 <CAN_read_status>
     9ea:	28 2f       	mov	r18, r24
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	82 23       	and	r24, r18
     9fa:	93 23       	and	r25, r19
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	99 f3       	breq	.-26     	; 0x9e6 <CAN_receive+0x14>
	CAN_read_rx(msg, rx);
     a00:	2b 81       	ldd	r18, Y+3	; 0x03
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	62 2f       	mov	r22, r18
     a08:	0e 94 c3 08 	call	0x1186	; 0x1186 <CAN_read_rx>
	
	return 0;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0

}
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	08 95       	ret

00000a1e <CAN_init_interrupt>:
	GICR = GICR | (1<<INT0);
	sei();
}*/


void CAN_init_interrupt(){
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
//interrupt init
	PORTD = PORTD | 0b00001100;
     a26:	a2 e3       	ldi	r26, 0x32	; 50
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e2 e3       	ldi	r30, 0x32	; 50
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	8c 60       	ori	r24, 0x0C	; 12
     a32:	8c 93       	st	X, r24
	DDRD = DDRD & 	0b11110011;
     a34:	a1 e3       	ldi	r26, 0x31	; 49
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e1 e3       	ldi	r30, 0x31	; 49
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	83 7f       	andi	r24, 0xF3	; 243
     a40:	8c 93       	st	X, r24
	MCUCR = MCUCR | (0<<ISC01) | (0<<ISC00) | (0<<ISC11) | (0<<ISC10);
     a42:	a5 e5       	ldi	r26, 0x55	; 85
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e5 e5       	ldi	r30, 0x55	; 85
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	8c 93       	st	X, r24
	GICR = GICR | (1<<INT0) | (1<<INT1);
     a4e:	ab e5       	ldi	r26, 0x5B	; 91
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	eb e5       	ldi	r30, 0x5B	; 91
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	80 6c       	ori	r24, 0xC0	; 192
     a5a:	8c 93       	st	X, r24
	sei();
     a5c:	78 94       	sei
}
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <__vector_1>:


SIGNAL(SIG_INTERRUPT0) {
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	df 93       	push	r29
     a88:	cf 93       	push	r28
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <__vector_1+0x28>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <__vector_1+0x2a>
     a8e:	0f 92       	push	r0
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     a94:	84 e9       	ldi	r24, 0x94	; 148
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	9d 83       	std	Y+5, r25	; 0x05
     a9a:	8c 83       	std	Y+4, r24	; 0x04

	printf("Received0: ");
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <__vector_1+0x3a>
     a9e:	ed b7       	in	r30, 0x3d	; 61
     aa0:	fe b7       	in	r31, 0x3e	; 62
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	8d e9       	ldi	r24, 0x9D	; 157
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	91 83       	std	Z+1, r25	; 0x01
     aaa:	80 83       	st	Z, r24
     aac:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
    CAN_receive(&received, 0);
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <CAN_receive>
	printf("%s\n", received.data);
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	9d 81       	ldd	r25, Y+5	; 0x05
     ac4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>

}
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	7f 91       	pop	r23
     ae4:	6f 91       	pop	r22
     ae6:	5f 91       	pop	r21
     ae8:	4f 91       	pop	r20
     aea:	3f 91       	pop	r19
     aec:	2f 91       	pop	r18
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti

00000af8 <__vector_2>:

SIGNAL(SIG_INTERRUPT1) {
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <__vector_2+0x28>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <__vector_2+0x2a>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     b28:	84 e9       	ldi	r24, 0x94	; 148
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	9d 83       	std	Y+5, r25	; 0x05
     b2e:	8c 83       	std	Y+4, r24	; 0x04

	printf("Received1: ");
     b30:	00 d0       	rcall	.+0      	; 0xb32 <__vector_2+0x3a>
     b32:	ed b7       	in	r30, 0x3d	; 61
     b34:	fe b7       	in	r31, 0x3e	; 62
     b36:	31 96       	adiw	r30, 0x01	; 1
     b38:	89 ea       	ldi	r24, 0xA9	; 169
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	80 83       	st	Z, r24
     b40:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
    CAN_receive(&received, 1);
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <CAN_receive>
	printf("%s\n", received.data);
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>
	printf("lala\n");
     b5c:	85 eb       	ldi	r24, 0xB5	; 181
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>

}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	27 97       	sbiw	r28, 0x07	; 7
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     bac:	80 e3       	ldi	r24, 0x30	; 48
     bae:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     bb0:	8a eb       	ldi	r24, 0xBA	; 186
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>

	while(1){
		last_button = button;
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     bbc:	0e 94 26 07 	call	0xe4c	; 0xe4c <butterfly_poll_joystick>
     bc0:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	98 17       	cp	r25, r24
     bc8:	b9 f3       	breq	.-18     	; 0xbb8 <butterfly_menu+0x24>
			printf("state for: %d\n", menu_state);
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	28 2f       	mov	r18, r24
     bce:	33 27       	eor	r19, r19
     bd0:	27 fd       	sbrc	r18, 7
     bd2:	30 95       	com	r19
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <butterfly_menu+0x42>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <butterfly_menu+0x44>
     bd8:	ed b7       	in	r30, 0x3d	; 61
     bda:	fe b7       	in	r31, 0x3e	; 62
     bdc:	31 96       	adiw	r30, 0x01	; 1
     bde:	84 ec       	ldi	r24, 0xC4	; 196
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
     be6:	33 83       	std	Z+3, r19	; 0x03
     be8:	22 83       	std	Z+2, r18	; 0x02
     bea:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
			switch(button) {
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3f 83       	std	Y+7, r19	; 0x07
     bfe:	2e 83       	std	Y+6, r18	; 0x06
     c00:	8e 81       	ldd	r24, Y+6	; 0x06
     c02:	9f 81       	ldd	r25, Y+7	; 0x07
     c04:	85 36       	cpi	r24, 0x65	; 101
     c06:	91 05       	cpc	r25, r1
     c08:	49 f1       	breq	.+82     	; 0xc5c <butterfly_menu+0xc8>
     c0a:	2e 81       	ldd	r18, Y+6	; 0x06
     c0c:	3f 81       	ldd	r19, Y+7	; 0x07
     c0e:	26 36       	cpi	r18, 0x66	; 102
     c10:	31 05       	cpc	r19, r1
     c12:	5c f4       	brge	.+22     	; 0xc2a <butterfly_menu+0x96>
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	9f 81       	ldd	r25, Y+7	; 0x07
     c18:	80 33       	cpi	r24, 0x30	; 48
     c1a:	91 05       	cpc	r25, r1
     c1c:	69 f2       	breq	.-102    	; 0xbb8 <butterfly_menu+0x24>
     c1e:	2e 81       	ldd	r18, Y+6	; 0x06
     c20:	3f 81       	ldd	r19, Y+7	; 0x07
     c22:	24 36       	cpi	r18, 0x64	; 100
     c24:	31 05       	cpc	r19, r1
     c26:	b1 f0       	breq	.+44     	; 0xc54 <butterfly_menu+0xc0>
     c28:	20 c0       	rjmp	.+64     	; 0xc6a <butterfly_menu+0xd6>
     c2a:	8e 81       	ldd	r24, Y+6	; 0x06
     c2c:	9f 81       	ldd	r25, Y+7	; 0x07
     c2e:	82 37       	cpi	r24, 0x72	; 114
     c30:	91 05       	cpc	r25, r1
     c32:	11 f2       	breq	.-124    	; 0xbb8 <butterfly_menu+0x24>
     c34:	2e 81       	ldd	r18, Y+6	; 0x06
     c36:	3f 81       	ldd	r19, Y+7	; 0x07
     c38:	25 37       	cpi	r18, 0x75	; 117
     c3a:	31 05       	cpc	r19, r1
     c3c:	39 f0       	breq	.+14     	; 0xc4c <butterfly_menu+0xb8>
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	8c 36       	cpi	r24, 0x6C	; 108
     c44:	91 05       	cpc	r25, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <butterfly_menu+0xb6>
     c48:	b7 cf       	rjmp	.-146    	; 0xbb8 <butterfly_menu+0x24>
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <butterfly_menu+0xd6>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	81 50       	subi	r24, 0x01	; 1
     c50:	8b 83       	std	Y+3, r24	; 0x03
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <butterfly_menu+0xde>
				case 'd': menu_state++;				break;
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	0b c0       	rjmp	.+22     	; 0xc72 <butterfly_menu+0xde>
				case 'e': start_game(menu_state);	break;
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	99 27       	eor	r25, r25
     c60:	87 fd       	sbrc	r24, 7
     c62:	90 95       	com	r25
     c64:	0e 94 b9 07 	call	0xf72	; 0xf72 <start_game>
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <butterfly_menu+0xde>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     c6a:	83 ed       	ldi	r24, 0xD3	; 211
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	28 2f       	mov	r18, r24
     c76:	33 27       	eor	r19, r19
     c78:	27 fd       	sbrc	r18, 7
     c7a:	30 95       	com	r19
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <butterfly_menu+0xea>
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <butterfly_menu+0xec>
     c80:	ed b7       	in	r30, 0x3d	; 61
     c82:	fe b7       	in	r31, 0x3e	; 62
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	89 ed       	ldi	r24, 0xD9	; 217
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
     c8e:	33 83       	std	Z+3, r19	; 0x03
     c90:	22 83       	std	Z+2, r18	; 0x02
     c92:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <printf>
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	88 23       	and	r24, r24
     ca2:	14 f4       	brge	.+4      	; 0xca8 <butterfly_menu+0x114>
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	0c f0       	brlt	.+2      	; 0xcb0 <butterfly_menu+0x11c>
     cae:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	28 2f       	mov	r18, r24
     cb4:	33 27       	eor	r19, r19
     cb6:	27 fd       	sbrc	r18, 7
     cb8:	30 95       	com	r19
     cba:	3d 83       	std	Y+5, r19	; 0x05
     cbc:	2c 83       	std	Y+4, r18	; 0x04
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	9d 81       	ldd	r25, Y+5	; 0x05
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	91 05       	cpc	r25, r1
     cc6:	d1 f0       	breq	.+52     	; 0xcfc <butterfly_menu+0x168>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <butterfly_menu+0x148>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	61 f0       	breq	.+24     	; 0xcf2 <butterfly_menu+0x15e>
     cda:	1f c0       	rjmp	.+62     	; 0xd1a <butterfly_menu+0x186>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	81 f0       	breq	.+32     	; 0xd06 <butterfly_menu+0x172>
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	81 f0       	breq	.+32     	; 0xd10 <butterfly_menu+0x17c>
     cf0:	14 c0       	rjmp	.+40     	; 0xd1a <butterfly_menu+0x186>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     cf2:	8a ee       	ldi	r24, 0xEA	; 234
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     cfa:	5e cf       	rjmp	.-324    	; 0xbb8 <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     d04:	59 cf       	rjmp	.-334    	; 0xbb8 <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     d06:	89 e1       	ldi	r24, 0x19	; 25
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     d0e:	54 cf       	rjmp	.-344    	; 0xbb8 <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     d10:	8e e2       	ldi	r24, 0x2E	; 46
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     d18:	4f cf       	rjmp	.-354    	; 0xbb8 <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     d1a:	1b 82       	std	Y+3, r1	; 0x03
     d1c:	4d cf       	rjmp	.-358    	; 0xbb8 <butterfly_menu+0x24>

00000d1e <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <butterfly_joystick_test+0x6>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <butterfly_joystick_test+0x8>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     d2a:	80 e3       	ldi	r24, 0x30	; 48
     d2c:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     d32:	0e 94 26 07 	call	0xe4c	; 0xe4c <butterfly_poll_joystick>
     d36:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	98 17       	cp	r25, r24
     d3e:	b9 f3       	breq	.-18     	; 0xd2e <butterfly_joystick_test+0x10>
			switch(button) {
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3c 83       	std	Y+4, r19	; 0x04
     d48:	2b 83       	std	Y+3, r18	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	85 36       	cpi	r24, 0x65	; 101
     d50:	91 05       	cpc	r25, r1
     d52:	99 f1       	breq	.+102    	; 0xdba <butterfly_joystick_test+0x9c>
     d54:	2b 81       	ldd	r18, Y+3	; 0x03
     d56:	3c 81       	ldd	r19, Y+4	; 0x04
     d58:	26 36       	cpi	r18, 0x66	; 102
     d5a:	31 05       	cpc	r19, r1
     d5c:	5c f4       	brge	.+22     	; 0xd74 <butterfly_joystick_test+0x56>
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	80 33       	cpi	r24, 0x30	; 48
     d64:	91 05       	cpc	r25, r1
     d66:	71 f1       	breq	.+92     	; 0xdc4 <butterfly_joystick_test+0xa6>
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	24 36       	cpi	r18, 0x64	; 100
     d6e:	31 05       	cpc	r19, r1
     d70:	f9 f0       	breq	.+62     	; 0xdb0 <butterfly_joystick_test+0x92>
     d72:	2d c0       	rjmp	.+90     	; 0xdce <butterfly_joystick_test+0xb0>
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	82 37       	cpi	r24, 0x72	; 114
     d7a:	91 05       	cpc	r25, r1
     d7c:	79 f0       	breq	.+30     	; 0xd9c <butterfly_joystick_test+0x7e>
     d7e:	2b 81       	ldd	r18, Y+3	; 0x03
     d80:	3c 81       	ldd	r19, Y+4	; 0x04
     d82:	25 37       	cpi	r18, 0x75	; 117
     d84:	31 05       	cpc	r19, r1
     d86:	79 f0       	breq	.+30     	; 0xda6 <butterfly_joystick_test+0x88>
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	8c 36       	cpi	r24, 0x6C	; 108
     d8e:	91 05       	cpc	r25, r1
     d90:	f1 f4       	brne	.+60     	; 0xdce <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
     d92:	82 e4       	ldi	r24, 0x42	; 66
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     d9a:	c9 cf       	rjmp	.-110    	; 0xd2e <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
     d9c:	87 e4       	ldi	r24, 0x47	; 71
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     da4:	c4 cf       	rjmp	.-120    	; 0xd2e <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
     da6:	8d e4       	ldi	r24, 0x4D	; 77
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     dae:	bf cf       	rjmp	.-130    	; 0xd2e <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
     db0:	80 e5       	ldi	r24, 0x50	; 80
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     db8:	ba cf       	rjmp	.-140    	; 0xd2e <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
     dba:	85 e5       	ldi	r24, 0x55	; 85
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     dc2:	b5 cf       	rjmp	.-150    	; 0xd2e <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
     dc4:	8b e5       	ldi	r24, 0x5B	; 91
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     dcc:	b0 cf       	rjmp	.-160    	; 0xd2e <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
     dce:	83 ed       	ldi	r24, 0xD3	; 211
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     dd6:	ab cf       	rjmp	.-170    	; 0xd2e <butterfly_joystick_test+0x10>

00000dd8 <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <butterfly_print+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <butterfly_print+0x8>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	cli(); //disable interrupts to protect SPI-communication
     de8:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     dea:	82 e6       	ldi	r24, 0x62	; 98
     dec:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     df0:	1a 82       	std	Y+2, r1	; 0x02
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	19 c0       	rjmp	.+50     	; 0xe28 <butterfly_print+0x50>
		if (str[i] == '\0') break;
     df6:	29 81       	ldd	r18, Y+1	; 0x01
     df8:	3a 81       	ldd	r19, Y+2	; 0x02
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	fc 01       	movw	r30, r24
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	a1 f0       	breq	.+40     	; 0xe32 <butterfly_print+0x5a>
		SPI_MasterTransmit(str[i]);
     e0a:	29 81       	ldd	r18, Y+1	; 0x01
     e0c:	3a 81       	ldd	r19, Y+2	; 0x02
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	fc 01       	movw	r30, r24
     e14:	e2 0f       	add	r30, r18
     e16:	f3 1f       	adc	r31, r19
     e18:	80 81       	ld	r24, Z
     e1a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

void butterfly_print(char * str){
	int i;
	cli(); //disable interrupts to protect SPI-communication
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	88 31       	cpi	r24, 0x18	; 24
     e2e:	91 05       	cpc	r25, r1
     e30:	14 f3       	brlt	.-60     	; 0xdf6 <butterfly_print+0x1e>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     e38:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	

	sei(); //enable interrupts again
     e3c:	78 94       	sei
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2f 97       	sbiw	r28, 0x0f	; 15
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
	char button;	

	cli(); //disable interrupts to protect SPI-communication
     e60:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     e62:	82 e6       	ldi	r24, 0x62	; 98
     e64:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     e68:	8e e2       	ldi	r24, 0x2E	; 46
     e6a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e2       	ldi	r26, 0x20	; 32
     e74:	b1 e4       	ldi	r27, 0x41	; 65
     e76:	8b 87       	std	Y+11, r24	; 0x0b
     e78:	9c 87       	std	Y+12, r25	; 0x0c
     e7a:	ad 87       	std	Y+13, r26	; 0x0d
     e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e80:	7c 85       	ldd	r23, Y+12	; 0x0c
     e82:	8d 85       	ldd	r24, Y+13	; 0x0d
     e84:	9e 85       	ldd	r25, Y+14	; 0x0e
     e86:	2a e9       	ldi	r18, 0x9A	; 154
     e88:	3b e9       	ldi	r19, 0x9B	; 155
     e8a:	49 e9       	ldi	r20, 0x99	; 153
     e8c:	54 e4       	ldi	r21, 0x44	; 68
     e8e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	8f 83       	std	Y+7, r24	; 0x07
     e98:	98 87       	std	Y+8, r25	; 0x08
     e9a:	a9 87       	std	Y+9, r26	; 0x09
     e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__ltsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	2c f4       	brge	.+10     	; 0xec0 <butterfly_poll_joystick+0x74>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	3f c0       	rjmp	.+126    	; 0xf3e <butterfly_poll_joystick+0xf2>
	else if (__tmp > 65535)
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	0e 94 9d 0c 	call	0x193a	; 0x193a <__gtsf2>
     ed4:	18 16       	cp	r1, r24
     ed6:	4c f5       	brge	.+82     	; 0xf2a <butterfly_poll_joystick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eda:	7c 85       	ldd	r23, Y+12	; 0x0c
     edc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ede:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <butterfly_poll_joystick+0xd4>
     f02:	8a e7       	ldi	r24, 0x7A	; 122
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9c 83       	std	Y+4, r25	; 0x04
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <butterfly_poll_joystick+0xc2>
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	69 f7       	brne	.-38     	; 0xf02 <butterfly_poll_joystick+0xb6>
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <butterfly_poll_joystick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2a:	6f 81       	ldd	r22, Y+7	; 0x07
     f2c:	78 85       	ldd	r23, Y+8	; 0x08
     f2e:	89 85       	ldd	r24, Y+9	; 0x09
     f30:	9a 85       	ldd	r25, Y+10	; 0x0a
     f32:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <butterfly_poll_joystick+0xfe>
     f4e:	9a 83       	std	Y+2, r25	; 0x02
     f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
     f52:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     f56:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
     f58:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

	sei(); //enable interrupts again
     f5c:	78 94       	sei
	return button;
     f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     f60:	2f 96       	adiw	r28, 0x0f	; 15
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <start_game>:

void start_game(enum menu_state_enum menu_state){
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	61 97       	sbiw	r28, 0x11	; 17
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
     f88:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8a:	28 2f       	mov	r18, r24
     f8c:	33 27       	eor	r19, r19
     f8e:	27 fd       	sbrc	r18, 7
     f90:	30 95       	com	r19
     f92:	39 8b       	std	Y+17, r19	; 0x11
     f94:	28 8b       	std	Y+16, r18	; 0x10
     f96:	88 89       	ldd	r24, Y+16	; 0x10
     f98:	99 89       	ldd	r25, Y+17	; 0x11
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	d1 f0       	breq	.+52     	; 0xfd4 <start_game+0x62>
     fa0:	28 89       	ldd	r18, Y+16	; 0x10
     fa2:	39 89       	ldd	r19, Y+17	; 0x11
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <start_game+0x42>
     faa:	88 89       	ldd	r24, Y+16	; 0x10
     fac:	99 89       	ldd	r25, Y+17	; 0x11
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	61 f0       	breq	.+24     	; 0xfca <start_game+0x58>
     fb2:	90 c0       	rjmp	.+288    	; 0x10d4 <start_game+0x162>
     fb4:	28 89       	ldd	r18, Y+16	; 0x10
     fb6:	39 89       	ldd	r19, Y+17	; 0x11
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	81 f0       	breq	.+32     	; 0xfde <start_game+0x6c>
     fbe:	88 89       	ldd	r24, Y+16	; 0x10
     fc0:	99 89       	ldd	r25, Y+17	; 0x11
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	81 f0       	breq	.+32     	; 0xfe8 <start_game+0x76>
     fc8:	85 c0       	rjmp	.+266    	; 0x10d4 <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
     fca:	82 e6       	ldi	r24, 0x62	; 98
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
     fd4:	82 e7       	ldi	r24, 0x72	; 114
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
     fde:	81 e8       	ldi	r24, 0x81	; 129
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
     fe8:	8e e8       	ldi	r24, 0x8E	; 142
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <butterfly_print>
			break;
		default:			
			return;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	aa ef       	ldi	r26, 0xFA	; 250
     ff6:	b4 e4       	ldi	r27, 0x44	; 68
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
     ffa:	9c 87       	std	Y+12, r25	; 0x0c
     ffc:	ad 87       	std	Y+13, r26	; 0x0d
     ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1000:	6b 85       	ldd	r22, Y+11	; 0x0b
    1002:	7c 85       	ldd	r23, Y+12	; 0x0c
    1004:	8d 85       	ldd	r24, Y+13	; 0x0d
    1006:	9e 85       	ldd	r25, Y+14	; 0x0e
    1008:	2a e9       	ldi	r18, 0x9A	; 154
    100a:	3b e9       	ldi	r19, 0x9B	; 155
    100c:	49 e9       	ldi	r20, 0x99	; 153
    100e:	54 e4       	ldi	r21, 0x44	; 68
    1010:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	8f 83       	std	Y+7, r24	; 0x07
    101a:	98 87       	std	Y+8, r25	; 0x08
    101c:	a9 87       	std	Y+9, r26	; 0x09
    101e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1020:	6f 81       	ldd	r22, Y+7	; 0x07
    1022:	78 85       	ldd	r23, Y+8	; 0x08
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f e3       	ldi	r21, 0x3F	; 63
    1030:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__ltsf2>
    1034:	88 23       	and	r24, r24
    1036:	2c f4       	brge	.+10     	; 0x1042 <start_game+0xd0>
		__ticks = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	3f c0       	rjmp	.+126    	; 0x10c0 <start_game+0x14e>
	else if (__tmp > 65535)
    1042:	6f 81       	ldd	r22, Y+7	; 0x07
    1044:	78 85       	ldd	r23, Y+8	; 0x08
    1046:	89 85       	ldd	r24, Y+9	; 0x09
    1048:	9a 85       	ldd	r25, Y+10	; 0x0a
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	4f e7       	ldi	r20, 0x7F	; 127
    1050:	57 e4       	ldi	r21, 0x47	; 71
    1052:	0e 94 9d 0c 	call	0x193a	; 0x193a <__gtsf2>
    1056:	18 16       	cp	r1, r24
    1058:	4c f5       	brge	.+82     	; 0x10ac <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105a:	6b 85       	ldd	r22, Y+11	; 0x0b
    105c:	7c 85       	ldd	r23, Y+12	; 0x0c
    105e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1060:	9e 85       	ldd	r25, Y+14	; 0x0e
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e2       	ldi	r20, 0x20	; 32
    1068:	51 e4       	ldi	r21, 0x41	; 65
    106a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	0f c0       	rjmp	.+30     	; 0x10a2 <start_game+0x130>
    1084:	8a e7       	ldi	r24, 0x7A	; 122
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9c 83       	std	Y+4, r25	; 0x04
    108a:	8b 83       	std	Y+3, r24	; 0x03
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <start_game+0x11e>
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	9e 83       	std	Y+6, r25	; 0x06
    10a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	69 f7       	brne	.-38     	; 0x1084 <start_game+0x112>
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ac:	6f 81       	ldd	r22, Y+7	; 0x07
    10ae:	78 85       	ldd	r23, Y+8	; 0x08
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <start_game+0x15a>
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
    10d4:	61 96       	adiw	r28, 0x11	; 17
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <CAN_reset>:
#include "mcp2515.h"
#include "spi.h"

// Reset the CAN chip
void CAN_reset(void){
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
    10ee:	83 e7       	ldi	r24, 0x73	; 115
    10f0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
    10f4:	80 ec       	ldi	r24, 0xC0	; 192
    10f6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
    10fa:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	27 97       	sbiw	r28, 0x07	; 7
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	6d 83       	std	Y+5, r22	; 0x05
    1122:	5f 83       	std	Y+7, r21	; 0x07
    1124:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
    1126:	83 e7       	ldi	r24, 0x73	; 115
    1128:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	10 c0       	rjmp	.+32     	; 0x115e <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
    113e:	29 81       	ldd	r18, Y+1	; 0x01
    1140:	3a 81       	ldd	r19, Y+2	; 0x02
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	8c 01       	movw	r16, r24
    1148:	02 0f       	add	r16, r18
    114a:	13 1f       	adc	r17, r19
    114c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    1150:	f8 01       	movw	r30, r16
    1152:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	29 81       	ldd	r18, Y+1	; 0x01
    1160:	3a 81       	ldd	r19, Y+2	; 0x02
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
    1164:	9f 81       	ldd	r25, Y+7	; 0x07
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	4c f3       	brlt	.-46     	; 0x113e <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
    116c:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
    1170:	27 96       	adiw	r28, 0x07	; 7
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <CAN_read_rx+0xa>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <CAN_read_rx+0xc>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
    119c:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	90 f5       	brcc	.+100    	; 0x1208 <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	88 23       	and	r24, r24
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <CAN_read_rx+0x2a>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	11 f4       	brne	.+4      	; 0x11ba <CAN_read_rx+0x34>
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
    11ba:	83 e7       	ldi	r24, 0x73	; 115
    11bc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	80 69       	ori	r24, 0x90	; 144
    11cc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
    11d0:	1a 82       	std	Y+2, r1	; 0x02
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	12 c0       	rjmp	.+36     	; 0x11fa <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
    11d6:	eb 81       	ldd	r30, Y+3	; 0x03
    11d8:	fc 81       	ldd	r31, Y+4	; 0x04
    11da:	23 81       	ldd	r18, Z+3	; 0x03
    11dc:	34 81       	ldd	r19, Z+4	; 0x04
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	89 01       	movw	r16, r18
    11e4:	08 0f       	add	r16, r24
    11e6:	19 1f       	adc	r17, r25
    11e8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	91 05       	cpc	r25, r1
    1202:	4c f3       	brlt	.-46     	; 0x11d6 <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
    1204:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	08 95       	ret

0000121c <CAN_write>:

void CAN_write(char data, uint8_t address){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <CAN_write+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <CAN_write+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	8b 83       	std	Y+3, r24	; 0x03
    122a:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	SPI_SelectSlave(SPI_CAN);	
    122c:	83 e7       	ldi	r24, 0x73	; 115
    122e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		SPI_MasterTransmit(data);
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    1244:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* msg, uint8_t tx){
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <CAN_load_tx+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <CAN_load_tx+0x8>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2)
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	60 f5       	brcc	.+88     	; 0x12c8 <CAN_load_tx+0x72>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	81 50       	subi	r24, 0x01	; 1
    127e:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
    1280:	83 e7       	ldi	r24, 0x73	; 115
    1282:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	80 64       	ori	r24, 0x40	; 64
    128a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < 8; i++){
    128e:	1a 82       	std	Y+2, r1	; 0x02
    1290:	19 82       	std	Y+1, r1	; 0x01
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <CAN_load_tx+0x5c>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
    1294:	29 81       	ldd	r18, Y+1	; 0x01
    1296:	3a 81       	ldd	r19, Y+2	; 0x02
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	fc 01       	movw	r30, r24
    129e:	e2 0f       	add	r30, r18
    12a0:	f3 1f       	adc	r31, r19
    12a2:	80 81       	ld	r24, Z
    12a4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < 8; i++){
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	88 30       	cpi	r24, 0x08	; 8
    12b8:	91 05       	cpc	r25, r1
    12ba:	64 f3       	brlt	.-40     	; 0x1294 <CAN_load_tx+0x3e>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
	}

	SPI_NoSlave();
    12bc:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	printf("\n");
    12c0:	8a e0       	ldi	r24, 0x0A	; 10
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <putchar>
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <CAN_rts>:

void CAN_rts(uint8_t tx){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	88 23       	and	r24, r24
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <CAN_rts+0x18>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	0b c0       	rjmp	.+22     	; 0x1306 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	19 f4       	brne	.+6      	; 0x12fc <CAN_rts+0x24>
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	59 f4       	brne	.+22     	; 0x1318 <CAN_rts+0x40>
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
    1306:	83 e7       	ldi	r24, 0x73	; 115
    1308:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    1314:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <CAN_read_status>:

uint8_t CAN_read_status(void){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
    132a:	83 e7       	ldi	r24, 0x73	; 115
    132c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
    1330:	80 ea       	ldi	r24, 0xA0	; 160
    1332:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
    1336:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    133a:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
    133c:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	
	return (uint8_t) status;
    1340:	89 81       	ldd	r24, Y+1	; 0x01

}
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <CAN_rx_status>:

uint8_t CAN_rx_status(void){
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
return 0;
    1352:	80 e0       	ldi	r24, 0x00	; 0

}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <CAN_bit_modify>:
void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <CAN_bit_modify+0x6>
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
    136a:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
    136c:	83 e7       	ldi	r24, 0x73	; 115
    136e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    138a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <__fixunssfsi>:
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	7b 01       	movw	r14, r22
    13a4:	8c 01       	movw	r16, r24
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	5f e4       	ldi	r21, 0x4F	; 79
    13ae:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    13b2:	88 23       	and	r24, r24
    13b4:	8c f0       	brlt	.+34     	; 0x13d8 <__fixunssfsi+0x3e>
    13b6:	c8 01       	movw	r24, r16
    13b8:	b7 01       	movw	r22, r14
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	5f e4       	ldi	r21, 0x4F	; 79
    13c2:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
    13c6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__fixsfsi>
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	20 50       	subi	r18, 0x00	; 0
    13d0:	30 40       	sbci	r19, 0x00	; 0
    13d2:	40 40       	sbci	r20, 0x00	; 0
    13d4:	50 48       	sbci	r21, 0x80	; 128
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <__fixunssfsi+0x4a>
    13d8:	c8 01       	movw	r24, r16
    13da:	b7 01       	movw	r22, r14
    13dc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__fixsfsi>
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
    13e4:	b9 01       	movw	r22, r18
    13e6:	ca 01       	movw	r24, r20
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	08 95       	ret

000013f2 <_fpadd_parts>:
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef ef       	ldi	r30, 0xFF	; 255
    13f8:	f9 e0       	ldi	r31, 0x09	; 9
    13fa:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__>
    13fe:	dc 01       	movw	r26, r24
    1400:	2b 01       	movw	r4, r22
    1402:	fa 01       	movw	r30, r20
    1404:	9c 91       	ld	r25, X
    1406:	92 30       	cpi	r25, 0x02	; 2
    1408:	08 f4       	brcc	.+2      	; 0x140c <_fpadd_parts+0x1a>
    140a:	39 c1       	rjmp	.+626    	; 0x167e <_fpadd_parts+0x28c>
    140c:	eb 01       	movw	r28, r22
    140e:	88 81       	ld	r24, Y
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	08 f4       	brcc	.+2      	; 0x1416 <_fpadd_parts+0x24>
    1414:	33 c1       	rjmp	.+614    	; 0x167c <_fpadd_parts+0x28a>
    1416:	94 30       	cpi	r25, 0x04	; 4
    1418:	69 f4       	brne	.+26     	; 0x1434 <_fpadd_parts+0x42>
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	09 f0       	breq	.+2      	; 0x1420 <_fpadd_parts+0x2e>
    141e:	2f c1       	rjmp	.+606    	; 0x167e <_fpadd_parts+0x28c>
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	9c 91       	ld	r25, X
    1424:	11 97       	sbiw	r26, 0x01	; 1
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	98 17       	cp	r25, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <_fpadd_parts+0x3c>
    142c:	28 c1       	rjmp	.+592    	; 0x167e <_fpadd_parts+0x28c>
    142e:	aa e9       	ldi	r26, 0x9A	; 154
    1430:	b2 e0       	ldi	r27, 0x02	; 2
    1432:	25 c1       	rjmp	.+586    	; 0x167e <_fpadd_parts+0x28c>
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	09 f4       	brne	.+2      	; 0x143a <_fpadd_parts+0x48>
    1438:	21 c1       	rjmp	.+578    	; 0x167c <_fpadd_parts+0x28a>
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	a9 f4       	brne	.+42     	; 0x1468 <_fpadd_parts+0x76>
    143e:	92 30       	cpi	r25, 0x02	; 2
    1440:	09 f0       	breq	.+2      	; 0x1444 <_fpadd_parts+0x52>
    1442:	1d c1       	rjmp	.+570    	; 0x167e <_fpadd_parts+0x28c>
    1444:	9a 01       	movw	r18, r20
    1446:	ad 01       	movw	r20, r26
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	ea 01       	movw	r28, r20
    144c:	09 90       	ld	r0, Y+
    144e:	ae 01       	movw	r20, r28
    1450:	e9 01       	movw	r28, r18
    1452:	09 92       	st	Y+, r0
    1454:	9e 01       	movw	r18, r28
    1456:	81 50       	subi	r24, 0x01	; 1
    1458:	c1 f7       	brne	.-16     	; 0x144a <_fpadd_parts+0x58>
    145a:	e2 01       	movw	r28, r4
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	9c 91       	ld	r25, X
    1462:	89 23       	and	r24, r25
    1464:	81 83       	std	Z+1, r24	; 0x01
    1466:	08 c1       	rjmp	.+528    	; 0x1678 <_fpadd_parts+0x286>
    1468:	92 30       	cpi	r25, 0x02	; 2
    146a:	09 f4       	brne	.+2      	; 0x146e <_fpadd_parts+0x7c>
    146c:	07 c1       	rjmp	.+526    	; 0x167c <_fpadd_parts+0x28a>
    146e:	12 96       	adiw	r26, 0x02	; 2
    1470:	2d 90       	ld	r2, X+
    1472:	3c 90       	ld	r3, X
    1474:	13 97       	sbiw	r26, 0x03	; 3
    1476:	eb 01       	movw	r28, r22
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	9b 81       	ldd	r25, Y+3	; 0x03
    147c:	14 96       	adiw	r26, 0x04	; 4
    147e:	ad 90       	ld	r10, X+
    1480:	bd 90       	ld	r11, X+
    1482:	cd 90       	ld	r12, X+
    1484:	dc 90       	ld	r13, X
    1486:	17 97       	sbiw	r26, 0x07	; 7
    1488:	ec 80       	ldd	r14, Y+4	; 0x04
    148a:	fd 80       	ldd	r15, Y+5	; 0x05
    148c:	0e 81       	ldd	r16, Y+6	; 0x06
    148e:	1f 81       	ldd	r17, Y+7	; 0x07
    1490:	91 01       	movw	r18, r2
    1492:	28 1b       	sub	r18, r24
    1494:	39 0b       	sbc	r19, r25
    1496:	b9 01       	movw	r22, r18
    1498:	37 ff       	sbrs	r19, 7
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <_fpadd_parts+0xb2>
    149c:	66 27       	eor	r22, r22
    149e:	77 27       	eor	r23, r23
    14a0:	62 1b       	sub	r22, r18
    14a2:	73 0b       	sbc	r23, r19
    14a4:	60 32       	cpi	r22, 0x20	; 32
    14a6:	71 05       	cpc	r23, r1
    14a8:	0c f0       	brlt	.+2      	; 0x14ac <_fpadd_parts+0xba>
    14aa:	61 c0       	rjmp	.+194    	; 0x156e <_fpadd_parts+0x17c>
    14ac:	12 16       	cp	r1, r18
    14ae:	13 06       	cpc	r1, r19
    14b0:	6c f5       	brge	.+90     	; 0x150c <_fpadd_parts+0x11a>
    14b2:	37 01       	movw	r6, r14
    14b4:	48 01       	movw	r8, r16
    14b6:	06 2e       	mov	r0, r22
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <_fpadd_parts+0xd0>
    14ba:	96 94       	lsr	r9
    14bc:	87 94       	ror	r8
    14be:	77 94       	ror	r7
    14c0:	67 94       	ror	r6
    14c2:	0a 94       	dec	r0
    14c4:	d2 f7       	brpl	.-12     	; 0x14ba <_fpadd_parts+0xc8>
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <_fpadd_parts+0xe6>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	6a 95       	dec	r22
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <_fpadd_parts+0xde>
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	40 40       	sbci	r20, 0x00	; 0
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	2e 21       	and	r18, r14
    14e6:	3f 21       	and	r19, r15
    14e8:	40 23       	and	r20, r16
    14ea:	51 23       	and	r21, r17
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	41 05       	cpc	r20, r1
    14f2:	51 05       	cpc	r21, r1
    14f4:	21 f0       	breq	.+8      	; 0x14fe <_fpadd_parts+0x10c>
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	79 01       	movw	r14, r18
    1500:	8a 01       	movw	r16, r20
    1502:	e6 28       	or	r14, r6
    1504:	f7 28       	or	r15, r7
    1506:	08 29       	or	r16, r8
    1508:	19 29       	or	r17, r9
    150a:	3c c0       	rjmp	.+120    	; 0x1584 <_fpadd_parts+0x192>
    150c:	23 2b       	or	r18, r19
    150e:	d1 f1       	breq	.+116    	; 0x1584 <_fpadd_parts+0x192>
    1510:	26 0e       	add	r2, r22
    1512:	37 1e       	adc	r3, r23
    1514:	35 01       	movw	r6, r10
    1516:	46 01       	movw	r8, r12
    1518:	06 2e       	mov	r0, r22
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <_fpadd_parts+0x132>
    151c:	96 94       	lsr	r9
    151e:	87 94       	ror	r8
    1520:	77 94       	ror	r7
    1522:	67 94       	ror	r6
    1524:	0a 94       	dec	r0
    1526:	d2 f7       	brpl	.-12     	; 0x151c <_fpadd_parts+0x12a>
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	04 c0       	rjmp	.+8      	; 0x153a <_fpadd_parts+0x148>
    1532:	22 0f       	add	r18, r18
    1534:	33 1f       	adc	r19, r19
    1536:	44 1f       	adc	r20, r20
    1538:	55 1f       	adc	r21, r21
    153a:	6a 95       	dec	r22
    153c:	d2 f7       	brpl	.-12     	; 0x1532 <_fpadd_parts+0x140>
    153e:	21 50       	subi	r18, 0x01	; 1
    1540:	30 40       	sbci	r19, 0x00	; 0
    1542:	40 40       	sbci	r20, 0x00	; 0
    1544:	50 40       	sbci	r21, 0x00	; 0
    1546:	2a 21       	and	r18, r10
    1548:	3b 21       	and	r19, r11
    154a:	4c 21       	and	r20, r12
    154c:	5d 21       	and	r21, r13
    154e:	21 15       	cp	r18, r1
    1550:	31 05       	cpc	r19, r1
    1552:	41 05       	cpc	r20, r1
    1554:	51 05       	cpc	r21, r1
    1556:	21 f0       	breq	.+8      	; 0x1560 <_fpadd_parts+0x16e>
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	59 01       	movw	r10, r18
    1562:	6a 01       	movw	r12, r20
    1564:	a6 28       	or	r10, r6
    1566:	b7 28       	or	r11, r7
    1568:	c8 28       	or	r12, r8
    156a:	d9 28       	or	r13, r9
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <_fpadd_parts+0x192>
    156e:	82 15       	cp	r24, r2
    1570:	93 05       	cpc	r25, r3
    1572:	2c f0       	brlt	.+10     	; 0x157e <_fpadd_parts+0x18c>
    1574:	1c 01       	movw	r2, r24
    1576:	aa 24       	eor	r10, r10
    1578:	bb 24       	eor	r11, r11
    157a:	65 01       	movw	r12, r10
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <_fpadd_parts+0x192>
    157e:	ee 24       	eor	r14, r14
    1580:	ff 24       	eor	r15, r15
    1582:	87 01       	movw	r16, r14
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	9c 91       	ld	r25, X
    1588:	d2 01       	movw	r26, r4
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	8c 91       	ld	r24, X
    158e:	98 17       	cp	r25, r24
    1590:	09 f4       	brne	.+2      	; 0x1594 <_fpadd_parts+0x1a2>
    1592:	45 c0       	rjmp	.+138    	; 0x161e <_fpadd_parts+0x22c>
    1594:	99 23       	and	r25, r25
    1596:	39 f0       	breq	.+14     	; 0x15a6 <_fpadd_parts+0x1b4>
    1598:	a8 01       	movw	r20, r16
    159a:	97 01       	movw	r18, r14
    159c:	2a 19       	sub	r18, r10
    159e:	3b 09       	sbc	r19, r11
    15a0:	4c 09       	sbc	r20, r12
    15a2:	5d 09       	sbc	r21, r13
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <_fpadd_parts+0x1c0>
    15a6:	a6 01       	movw	r20, r12
    15a8:	95 01       	movw	r18, r10
    15aa:	2e 19       	sub	r18, r14
    15ac:	3f 09       	sbc	r19, r15
    15ae:	40 0b       	sbc	r20, r16
    15b0:	51 0b       	sbc	r21, r17
    15b2:	57 fd       	sbrc	r21, 7
    15b4:	08 c0       	rjmp	.+16     	; 0x15c6 <_fpadd_parts+0x1d4>
    15b6:	11 82       	std	Z+1, r1	; 0x01
    15b8:	33 82       	std	Z+3, r3	; 0x03
    15ba:	22 82       	std	Z+2, r2	; 0x02
    15bc:	24 83       	std	Z+4, r18	; 0x04
    15be:	35 83       	std	Z+5, r19	; 0x05
    15c0:	46 83       	std	Z+6, r20	; 0x06
    15c2:	57 83       	std	Z+7, r21	; 0x07
    15c4:	1d c0       	rjmp	.+58     	; 0x1600 <_fpadd_parts+0x20e>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	81 83       	std	Z+1, r24	; 0x01
    15ca:	33 82       	std	Z+3, r3	; 0x03
    15cc:	22 82       	std	Z+2, r2	; 0x02
    15ce:	88 27       	eor	r24, r24
    15d0:	99 27       	eor	r25, r25
    15d2:	dc 01       	movw	r26, r24
    15d4:	82 1b       	sub	r24, r18
    15d6:	93 0b       	sbc	r25, r19
    15d8:	a4 0b       	sbc	r26, r20
    15da:	b5 0b       	sbc	r27, r21
    15dc:	84 83       	std	Z+4, r24	; 0x04
    15de:	95 83       	std	Z+5, r25	; 0x05
    15e0:	a6 83       	std	Z+6, r26	; 0x06
    15e2:	b7 83       	std	Z+7, r27	; 0x07
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <_fpadd_parts+0x20e>
    15e6:	22 0f       	add	r18, r18
    15e8:	33 1f       	adc	r19, r19
    15ea:	44 1f       	adc	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	24 83       	std	Z+4, r18	; 0x04
    15f0:	35 83       	std	Z+5, r19	; 0x05
    15f2:	46 83       	std	Z+6, r20	; 0x06
    15f4:	57 83       	std	Z+7, r21	; 0x07
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	93 83       	std	Z+3, r25	; 0x03
    15fe:	82 83       	std	Z+2, r24	; 0x02
    1600:	24 81       	ldd	r18, Z+4	; 0x04
    1602:	35 81       	ldd	r19, Z+5	; 0x05
    1604:	46 81       	ldd	r20, Z+6	; 0x06
    1606:	57 81       	ldd	r21, Z+7	; 0x07
    1608:	da 01       	movw	r26, r20
    160a:	c9 01       	movw	r24, r18
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	a1 09       	sbc	r26, r1
    1610:	b1 09       	sbc	r27, r1
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	af 4f       	sbci	r26, 0xFF	; 255
    1618:	bf 43       	sbci	r27, 0x3F	; 63
    161a:	28 f3       	brcs	.-54     	; 0x15e6 <_fpadd_parts+0x1f4>
    161c:	0b c0       	rjmp	.+22     	; 0x1634 <_fpadd_parts+0x242>
    161e:	91 83       	std	Z+1, r25	; 0x01
    1620:	33 82       	std	Z+3, r3	; 0x03
    1622:	22 82       	std	Z+2, r2	; 0x02
    1624:	ea 0c       	add	r14, r10
    1626:	fb 1c       	adc	r15, r11
    1628:	0c 1d       	adc	r16, r12
    162a:	1d 1d       	adc	r17, r13
    162c:	e4 82       	std	Z+4, r14	; 0x04
    162e:	f5 82       	std	Z+5, r15	; 0x05
    1630:	06 83       	std	Z+6, r16	; 0x06
    1632:	17 83       	std	Z+7, r17	; 0x07
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	80 83       	st	Z, r24
    1638:	24 81       	ldd	r18, Z+4	; 0x04
    163a:	35 81       	ldd	r19, Z+5	; 0x05
    163c:	46 81       	ldd	r20, Z+6	; 0x06
    163e:	57 81       	ldd	r21, Z+7	; 0x07
    1640:	57 ff       	sbrs	r21, 7
    1642:	1a c0       	rjmp	.+52     	; 0x1678 <_fpadd_parts+0x286>
    1644:	c9 01       	movw	r24, r18
    1646:	aa 27       	eor	r26, r26
    1648:	97 fd       	sbrc	r25, 7
    164a:	a0 95       	com	r26
    164c:	ba 2f       	mov	r27, r26
    164e:	81 70       	andi	r24, 0x01	; 1
    1650:	90 70       	andi	r25, 0x00	; 0
    1652:	a0 70       	andi	r26, 0x00	; 0
    1654:	b0 70       	andi	r27, 0x00	; 0
    1656:	56 95       	lsr	r21
    1658:	47 95       	ror	r20
    165a:	37 95       	ror	r19
    165c:	27 95       	ror	r18
    165e:	82 2b       	or	r24, r18
    1660:	93 2b       	or	r25, r19
    1662:	a4 2b       	or	r26, r20
    1664:	b5 2b       	or	r27, r21
    1666:	84 83       	std	Z+4, r24	; 0x04
    1668:	95 83       	std	Z+5, r25	; 0x05
    166a:	a6 83       	std	Z+6, r26	; 0x06
    166c:	b7 83       	std	Z+7, r27	; 0x07
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	93 83       	std	Z+3, r25	; 0x03
    1676:	82 83       	std	Z+2, r24	; 0x02
    1678:	df 01       	movw	r26, r30
    167a:	01 c0       	rjmp	.+2      	; 0x167e <_fpadd_parts+0x28c>
    167c:	d2 01       	movw	r26, r4
    167e:	cd 01       	movw	r24, r26
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	e2 e1       	ldi	r30, 0x12	; 18
    1686:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__>

0000168a <__subsf3>:
    168a:	a0 e2       	ldi	r26, 0x20	; 32
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e4       	ldi	r30, 0x4B	; 75
    1690:	fb e0       	ldi	r31, 0x0B	; 11
    1692:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
    1696:	69 83       	std	Y+1, r22	; 0x01
    1698:	7a 83       	std	Y+2, r23	; 0x02
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	2d 83       	std	Y+5, r18	; 0x05
    16a0:	3e 83       	std	Y+6, r19	; 0x06
    16a2:	4f 83       	std	Y+7, r20	; 0x07
    16a4:	58 87       	std	Y+8, r21	; 0x08
    16a6:	e9 e0       	ldi	r30, 0x09	; 9
    16a8:	ee 2e       	mov	r14, r30
    16aa:	f1 2c       	mov	r15, r1
    16ac:	ec 0e       	add	r14, r28
    16ae:	fd 1e       	adc	r15, r29
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	b7 01       	movw	r22, r14
    16b6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    16ba:	8e 01       	movw	r16, r28
    16bc:	0f 5e       	subi	r16, 0xEF	; 239
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	ce 01       	movw	r24, r28
    16c2:	05 96       	adiw	r24, 0x05	; 5
    16c4:	b8 01       	movw	r22, r16
    16c6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    16ca:	8a 89       	ldd	r24, Y+18	; 0x12
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	89 27       	eor	r24, r25
    16d0:	8a 8b       	std	Y+18, r24	; 0x12
    16d2:	c7 01       	movw	r24, r14
    16d4:	b8 01       	movw	r22, r16
    16d6:	ae 01       	movw	r20, r28
    16d8:	47 5e       	subi	r20, 0xE7	; 231
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_fpadd_parts>
    16e0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__pack_f>
    16e4:	a0 96       	adiw	r28, 0x20	; 32
    16e6:	e6 e0       	ldi	r30, 0x06	; 6
    16e8:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

000016ec <__addsf3>:
    16ec:	a0 e2       	ldi	r26, 0x20	; 32
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ec e7       	ldi	r30, 0x7C	; 124
    16f2:	fb e0       	ldi	r31, 0x0B	; 11
    16f4:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
    16f8:	69 83       	std	Y+1, r22	; 0x01
    16fa:	7a 83       	std	Y+2, r23	; 0x02
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	2d 83       	std	Y+5, r18	; 0x05
    1702:	3e 83       	std	Y+6, r19	; 0x06
    1704:	4f 83       	std	Y+7, r20	; 0x07
    1706:	58 87       	std	Y+8, r21	; 0x08
    1708:	f9 e0       	ldi	r31, 0x09	; 9
    170a:	ef 2e       	mov	r14, r31
    170c:	f1 2c       	mov	r15, r1
    170e:	ec 0e       	add	r14, r28
    1710:	fd 1e       	adc	r15, r29
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	b7 01       	movw	r22, r14
    1718:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    171c:	8e 01       	movw	r16, r28
    171e:	0f 5e       	subi	r16, 0xEF	; 239
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	ce 01       	movw	r24, r28
    1724:	05 96       	adiw	r24, 0x05	; 5
    1726:	b8 01       	movw	r22, r16
    1728:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    172c:	c7 01       	movw	r24, r14
    172e:	b8 01       	movw	r22, r16
    1730:	ae 01       	movw	r20, r28
    1732:	47 5e       	subi	r20, 0xE7	; 231
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_fpadd_parts>
    173a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__pack_f>
    173e:	a0 96       	adiw	r28, 0x20	; 32
    1740:	e6 e0       	ldi	r30, 0x06	; 6
    1742:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

00001746 <__mulsf3>:
    1746:	a0 e2       	ldi	r26, 0x20	; 32
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e9 ea       	ldi	r30, 0xA9	; 169
    174c:	fb e0       	ldi	r31, 0x0B	; 11
    174e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__>
    1752:	69 83       	std	Y+1, r22	; 0x01
    1754:	7a 83       	std	Y+2, r23	; 0x02
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	2d 83       	std	Y+5, r18	; 0x05
    175c:	3e 83       	std	Y+6, r19	; 0x06
    175e:	4f 83       	std	Y+7, r20	; 0x07
    1760:	58 87       	std	Y+8, r21	; 0x08
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	be 01       	movw	r22, r28
    1768:	67 5f       	subi	r22, 0xF7	; 247
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    1770:	ce 01       	movw	r24, r28
    1772:	05 96       	adiw	r24, 0x05	; 5
    1774:	be 01       	movw	r22, r28
    1776:	6f 5e       	subi	r22, 0xEF	; 239
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    177e:	99 85       	ldd	r25, Y+9	; 0x09
    1780:	92 30       	cpi	r25, 0x02	; 2
    1782:	88 f0       	brcs	.+34     	; 0x17a6 <__mulsf3+0x60>
    1784:	89 89       	ldd	r24, Y+17	; 0x11
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	c8 f0       	brcs	.+50     	; 0x17bc <__mulsf3+0x76>
    178a:	94 30       	cpi	r25, 0x04	; 4
    178c:	19 f4       	brne	.+6      	; 0x1794 <__mulsf3+0x4e>
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	51 f4       	brne	.+20     	; 0x17a6 <__mulsf3+0x60>
    1792:	04 c0       	rjmp	.+8      	; 0x179c <__mulsf3+0x56>
    1794:	84 30       	cpi	r24, 0x04	; 4
    1796:	29 f4       	brne	.+10     	; 0x17a2 <__mulsf3+0x5c>
    1798:	92 30       	cpi	r25, 0x02	; 2
    179a:	81 f4       	brne	.+32     	; 0x17bc <__mulsf3+0x76>
    179c:	8a e9       	ldi	r24, 0x9A	; 154
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	c6 c0       	rjmp	.+396    	; 0x192e <__mulsf3+0x1e8>
    17a2:	92 30       	cpi	r25, 0x02	; 2
    17a4:	49 f4       	brne	.+18     	; 0x17b8 <__mulsf3+0x72>
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	8a 89       	ldd	r24, Y+18	; 0x12
    17ac:	98 13       	cpse	r25, r24
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	2a 87       	std	Y+10, r18	; 0x0a
    17b2:	ce 01       	movw	r24, r28
    17b4:	09 96       	adiw	r24, 0x09	; 9
    17b6:	bb c0       	rjmp	.+374    	; 0x192e <__mulsf3+0x1e8>
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	49 f4       	brne	.+18     	; 0x17ce <__mulsf3+0x88>
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	8a 89       	ldd	r24, Y+18	; 0x12
    17c2:	98 13       	cpse	r25, r24
    17c4:	21 e0       	ldi	r18, 0x01	; 1
    17c6:	2a 8b       	std	Y+18, r18	; 0x12
    17c8:	ce 01       	movw	r24, r28
    17ca:	41 96       	adiw	r24, 0x11	; 17
    17cc:	b0 c0       	rjmp	.+352    	; 0x192e <__mulsf3+0x1e8>
    17ce:	2d 84       	ldd	r2, Y+13	; 0x0d
    17d0:	3e 84       	ldd	r3, Y+14	; 0x0e
    17d2:	4f 84       	ldd	r4, Y+15	; 0x0f
    17d4:	58 88       	ldd	r5, Y+16	; 0x10
    17d6:	6d 88       	ldd	r6, Y+21	; 0x15
    17d8:	7e 88       	ldd	r7, Y+22	; 0x16
    17da:	8f 88       	ldd	r8, Y+23	; 0x17
    17dc:	98 8c       	ldd	r9, Y+24	; 0x18
    17de:	ee 24       	eor	r14, r14
    17e0:	ff 24       	eor	r15, r15
    17e2:	87 01       	movw	r16, r14
    17e4:	aa 24       	eor	r10, r10
    17e6:	bb 24       	eor	r11, r11
    17e8:	65 01       	movw	r12, r10
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	e0 e0       	ldi	r30, 0x00	; 0
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	c1 01       	movw	r24, r2
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	90 70       	andi	r25, 0x00	; 0
    17fc:	89 2b       	or	r24, r25
    17fe:	e9 f0       	breq	.+58     	; 0x183a <__mulsf3+0xf4>
    1800:	e6 0c       	add	r14, r6
    1802:	f7 1c       	adc	r15, r7
    1804:	08 1d       	adc	r16, r8
    1806:	19 1d       	adc	r17, r9
    1808:	9a 01       	movw	r18, r20
    180a:	ab 01       	movw	r20, r22
    180c:	2a 0d       	add	r18, r10
    180e:	3b 1d       	adc	r19, r11
    1810:	4c 1d       	adc	r20, r12
    1812:	5d 1d       	adc	r21, r13
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e0       	ldi	r26, 0x00	; 0
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e6 14       	cp	r14, r6
    181e:	f7 04       	cpc	r15, r7
    1820:	08 05       	cpc	r16, r8
    1822:	19 05       	cpc	r17, r9
    1824:	20 f4       	brcc	.+8      	; 0x182e <__mulsf3+0xe8>
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ba 01       	movw	r22, r20
    1830:	a9 01       	movw	r20, r18
    1832:	48 0f       	add	r20, r24
    1834:	59 1f       	adc	r21, r25
    1836:	6a 1f       	adc	r22, r26
    1838:	7b 1f       	adc	r23, r27
    183a:	aa 0c       	add	r10, r10
    183c:	bb 1c       	adc	r11, r11
    183e:	cc 1c       	adc	r12, r12
    1840:	dd 1c       	adc	r13, r13
    1842:	97 fe       	sbrs	r9, 7
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <__mulsf3+0x110>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	a8 2a       	or	r10, r24
    1850:	b9 2a       	or	r11, r25
    1852:	ca 2a       	or	r12, r26
    1854:	db 2a       	or	r13, r27
    1856:	31 96       	adiw	r30, 0x01	; 1
    1858:	e0 32       	cpi	r30, 0x20	; 32
    185a:	f1 05       	cpc	r31, r1
    185c:	49 f0       	breq	.+18     	; 0x1870 <__mulsf3+0x12a>
    185e:	66 0c       	add	r6, r6
    1860:	77 1c       	adc	r7, r7
    1862:	88 1c       	adc	r8, r8
    1864:	99 1c       	adc	r9, r9
    1866:	56 94       	lsr	r5
    1868:	47 94       	ror	r4
    186a:	37 94       	ror	r3
    186c:	27 94       	ror	r2
    186e:	c3 cf       	rjmp	.-122    	; 0x17f6 <__mulsf3+0xb0>
    1870:	fa 85       	ldd	r31, Y+10	; 0x0a
    1872:	ea 89       	ldd	r30, Y+18	; 0x12
    1874:	2b 89       	ldd	r18, Y+19	; 0x13
    1876:	3c 89       	ldd	r19, Y+20	; 0x14
    1878:	8b 85       	ldd	r24, Y+11	; 0x0b
    187a:	9c 85       	ldd	r25, Y+12	; 0x0c
    187c:	28 0f       	add	r18, r24
    187e:	39 1f       	adc	r19, r25
    1880:	2e 5f       	subi	r18, 0xFE	; 254
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	17 c0       	rjmp	.+46     	; 0x18b4 <__mulsf3+0x16e>
    1886:	ca 01       	movw	r24, r20
    1888:	81 70       	andi	r24, 0x01	; 1
    188a:	90 70       	andi	r25, 0x00	; 0
    188c:	89 2b       	or	r24, r25
    188e:	61 f0       	breq	.+24     	; 0x18a8 <__mulsf3+0x162>
    1890:	16 95       	lsr	r17
    1892:	07 95       	ror	r16
    1894:	f7 94       	ror	r15
    1896:	e7 94       	ror	r14
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e8       	ldi	r27, 0x80	; 128
    18a0:	e8 2a       	or	r14, r24
    18a2:	f9 2a       	or	r15, r25
    18a4:	0a 2b       	or	r16, r26
    18a6:	1b 2b       	or	r17, r27
    18a8:	76 95       	lsr	r23
    18aa:	67 95       	ror	r22
    18ac:	57 95       	ror	r21
    18ae:	47 95       	ror	r20
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	77 fd       	sbrc	r23, 7
    18b6:	e7 cf       	rjmp	.-50     	; 0x1886 <__mulsf3+0x140>
    18b8:	0c c0       	rjmp	.+24     	; 0x18d2 <__mulsf3+0x18c>
    18ba:	44 0f       	add	r20, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	66 1f       	adc	r22, r22
    18c0:	77 1f       	adc	r23, r23
    18c2:	17 fd       	sbrc	r17, 7
    18c4:	41 60       	ori	r20, 0x01	; 1
    18c6:	ee 0c       	add	r14, r14
    18c8:	ff 1c       	adc	r15, r15
    18ca:	00 1f       	adc	r16, r16
    18cc:	11 1f       	adc	r17, r17
    18ce:	21 50       	subi	r18, 0x01	; 1
    18d0:	30 40       	sbci	r19, 0x00	; 0
    18d2:	40 30       	cpi	r20, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	59 07       	cpc	r21, r25
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	69 07       	cpc	r22, r25
    18dc:	90 e4       	ldi	r25, 0x40	; 64
    18de:	79 07       	cpc	r23, r25
    18e0:	60 f3       	brcs	.-40     	; 0x18ba <__mulsf3+0x174>
    18e2:	2b 8f       	std	Y+27, r18	; 0x1b
    18e4:	3c 8f       	std	Y+28, r19	; 0x1c
    18e6:	db 01       	movw	r26, r22
    18e8:	ca 01       	movw	r24, r20
    18ea:	8f 77       	andi	r24, 0x7F	; 127
    18ec:	90 70       	andi	r25, 0x00	; 0
    18ee:	a0 70       	andi	r26, 0x00	; 0
    18f0:	b0 70       	andi	r27, 0x00	; 0
    18f2:	80 34       	cpi	r24, 0x40	; 64
    18f4:	91 05       	cpc	r25, r1
    18f6:	a1 05       	cpc	r26, r1
    18f8:	b1 05       	cpc	r27, r1
    18fa:	61 f4       	brne	.+24     	; 0x1914 <__mulsf3+0x1ce>
    18fc:	47 fd       	sbrc	r20, 7
    18fe:	0a c0       	rjmp	.+20     	; 0x1914 <__mulsf3+0x1ce>
    1900:	e1 14       	cp	r14, r1
    1902:	f1 04       	cpc	r15, r1
    1904:	01 05       	cpc	r16, r1
    1906:	11 05       	cpc	r17, r1
    1908:	29 f0       	breq	.+10     	; 0x1914 <__mulsf3+0x1ce>
    190a:	40 5c       	subi	r20, 0xC0	; 192
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	6f 4f       	sbci	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	40 78       	andi	r20, 0x80	; 128
    1914:	1a 8e       	std	Y+26, r1	; 0x1a
    1916:	fe 17       	cp	r31, r30
    1918:	11 f0       	breq	.+4      	; 0x191e <__mulsf3+0x1d8>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	8a 8f       	std	Y+26, r24	; 0x1a
    191e:	4d 8f       	std	Y+29, r20	; 0x1d
    1920:	5e 8f       	std	Y+30, r21	; 0x1e
    1922:	6f 8f       	std	Y+31, r22	; 0x1f
    1924:	78 a3       	std	Y+32, r23	; 0x20
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	89 8f       	std	Y+25, r24	; 0x19
    192a:	ce 01       	movw	r24, r28
    192c:	49 96       	adiw	r24, 0x19	; 25
    192e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__pack_f>
    1932:	a0 96       	adiw	r28, 0x20	; 32
    1934:	e2 e1       	ldi	r30, 0x12	; 18
    1936:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__>

0000193a <__gtsf2>:
    193a:	a8 e1       	ldi	r26, 0x18	; 24
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e3 ea       	ldi	r30, 0xA3	; 163
    1940:	fc e0       	ldi	r31, 0x0C	; 12
    1942:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
    1946:	69 83       	std	Y+1, r22	; 0x01
    1948:	7a 83       	std	Y+2, r23	; 0x02
    194a:	8b 83       	std	Y+3, r24	; 0x03
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	2d 83       	std	Y+5, r18	; 0x05
    1950:	3e 83       	std	Y+6, r19	; 0x06
    1952:	4f 83       	std	Y+7, r20	; 0x07
    1954:	58 87       	std	Y+8, r21	; 0x08
    1956:	89 e0       	ldi	r24, 0x09	; 9
    1958:	e8 2e       	mov	r14, r24
    195a:	f1 2c       	mov	r15, r1
    195c:	ec 0e       	add	r14, r28
    195e:	fd 1e       	adc	r15, r29
    1960:	ce 01       	movw	r24, r28
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	b7 01       	movw	r22, r14
    1966:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    196a:	8e 01       	movw	r16, r28
    196c:	0f 5e       	subi	r16, 0xEF	; 239
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	ce 01       	movw	r24, r28
    1972:	05 96       	adiw	r24, 0x05	; 5
    1974:	b8 01       	movw	r22, r16
    1976:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	40 f0       	brcs	.+16     	; 0x1990 <__gtsf2+0x56>
    1980:	89 89       	ldd	r24, Y+17	; 0x11
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	28 f0       	brcs	.+10     	; 0x1990 <__gtsf2+0x56>
    1986:	c7 01       	movw	r24, r14
    1988:	b8 01       	movw	r22, r16
    198a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__fpcmp_parts_f>
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <__gtsf2+0x58>
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	68 96       	adiw	r28, 0x18	; 24
    1994:	e6 e0       	ldi	r30, 0x06	; 6
    1996:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

0000199a <__gesf2>:
    199a:	a8 e1       	ldi	r26, 0x18	; 24
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 ed       	ldi	r30, 0xD3	; 211
    19a0:	fc e0       	ldi	r31, 0x0C	; 12
    19a2:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
    19a6:	69 83       	std	Y+1, r22	; 0x01
    19a8:	7a 83       	std	Y+2, r23	; 0x02
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	2d 83       	std	Y+5, r18	; 0x05
    19b0:	3e 83       	std	Y+6, r19	; 0x06
    19b2:	4f 83       	std	Y+7, r20	; 0x07
    19b4:	58 87       	std	Y+8, r21	; 0x08
    19b6:	89 e0       	ldi	r24, 0x09	; 9
    19b8:	e8 2e       	mov	r14, r24
    19ba:	f1 2c       	mov	r15, r1
    19bc:	ec 0e       	add	r14, r28
    19be:	fd 1e       	adc	r15, r29
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	b7 01       	movw	r22, r14
    19c6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    19ca:	8e 01       	movw	r16, r28
    19cc:	0f 5e       	subi	r16, 0xEF	; 239
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	ce 01       	movw	r24, r28
    19d2:	05 96       	adiw	r24, 0x05	; 5
    19d4:	b8 01       	movw	r22, r16
    19d6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    19da:	89 85       	ldd	r24, Y+9	; 0x09
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	40 f0       	brcs	.+16     	; 0x19f0 <__gesf2+0x56>
    19e0:	89 89       	ldd	r24, Y+17	; 0x11
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	28 f0       	brcs	.+10     	; 0x19f0 <__gesf2+0x56>
    19e6:	c7 01       	movw	r24, r14
    19e8:	b8 01       	movw	r22, r16
    19ea:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__fpcmp_parts_f>
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <__gesf2+0x58>
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	68 96       	adiw	r28, 0x18	; 24
    19f4:	e6 e0       	ldi	r30, 0x06	; 6
    19f6:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

000019fa <__ltsf2>:
    19fa:	a8 e1       	ldi	r26, 0x18	; 24
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e3 e0       	ldi	r30, 0x03	; 3
    1a00:	fd e0       	ldi	r31, 0x0D	; 13
    1a02:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
    1a06:	69 83       	std	Y+1, r22	; 0x01
    1a08:	7a 83       	std	Y+2, r23	; 0x02
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	2d 83       	std	Y+5, r18	; 0x05
    1a10:	3e 83       	std	Y+6, r19	; 0x06
    1a12:	4f 83       	std	Y+7, r20	; 0x07
    1a14:	58 87       	std	Y+8, r21	; 0x08
    1a16:	89 e0       	ldi	r24, 0x09	; 9
    1a18:	e8 2e       	mov	r14, r24
    1a1a:	f1 2c       	mov	r15, r1
    1a1c:	ec 0e       	add	r14, r28
    1a1e:	fd 1e       	adc	r15, r29
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	b7 01       	movw	r22, r14
    1a26:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    1a2a:	8e 01       	movw	r16, r28
    1a2c:	0f 5e       	subi	r16, 0xEF	; 239
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	ce 01       	movw	r24, r28
    1a32:	05 96       	adiw	r24, 0x05	; 5
    1a34:	b8 01       	movw	r22, r16
    1a36:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	40 f0       	brcs	.+16     	; 0x1a50 <__ltsf2+0x56>
    1a40:	89 89       	ldd	r24, Y+17	; 0x11
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	28 f0       	brcs	.+10     	; 0x1a50 <__ltsf2+0x56>
    1a46:	c7 01       	movw	r24, r14
    1a48:	b8 01       	movw	r22, r16
    1a4a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__fpcmp_parts_f>
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <__ltsf2+0x58>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	68 96       	adiw	r28, 0x18	; 24
    1a54:	e6 e0       	ldi	r30, 0x06	; 6
    1a56:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

00001a5a <__fixsfsi>:
    1a5a:	ac e0       	ldi	r26, 0x0C	; 12
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e3       	ldi	r30, 0x33	; 51
    1a60:	fd e0       	ldi	r31, 0x0D	; 13
    1a62:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x20>
    1a66:	69 83       	std	Y+1, r22	; 0x01
    1a68:	7a 83       	std	Y+2, r23	; 0x02
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	be 01       	movw	r22, r28
    1a74:	6b 5f       	subi	r22, 0xFB	; 251
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__unpack_f>
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	61 f1       	breq	.+88     	; 0x1ada <__fixsfsi+0x80>
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	50 f1       	brcs	.+84     	; 0x1ada <__fixsfsi+0x80>
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <__fixsfsi+0x38>
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	88 23       	and	r24, r24
    1a8e:	51 f1       	breq	.+84     	; 0x1ae4 <__fixsfsi+0x8a>
    1a90:	2e c0       	rjmp	.+92     	; 0x1aee <__fixsfsi+0x94>
    1a92:	2f 81       	ldd	r18, Y+7	; 0x07
    1a94:	38 85       	ldd	r19, Y+8	; 0x08
    1a96:	37 fd       	sbrc	r19, 7
    1a98:	20 c0       	rjmp	.+64     	; 0x1ada <__fixsfsi+0x80>
    1a9a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a9c:	2f 31       	cpi	r18, 0x1F	; 31
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	1c f0       	brlt	.+6      	; 0x1aa8 <__fixsfsi+0x4e>
    1aa2:	66 23       	and	r22, r22
    1aa4:	f9 f0       	breq	.+62     	; 0x1ae4 <__fixsfsi+0x8a>
    1aa6:	23 c0       	rjmp	.+70     	; 0x1aee <__fixsfsi+0x94>
    1aa8:	8e e1       	ldi	r24, 0x1E	; 30
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	82 1b       	sub	r24, r18
    1aae:	93 0b       	sbc	r25, r19
    1ab0:	29 85       	ldd	r18, Y+9	; 0x09
    1ab2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ab4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ab6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <__fixsfsi+0x68>
    1aba:	56 95       	lsr	r21
    1abc:	47 95       	ror	r20
    1abe:	37 95       	ror	r19
    1ac0:	27 95       	ror	r18
    1ac2:	8a 95       	dec	r24
    1ac4:	d2 f7       	brpl	.-12     	; 0x1aba <__fixsfsi+0x60>
    1ac6:	66 23       	and	r22, r22
    1ac8:	b1 f0       	breq	.+44     	; 0x1af6 <__fixsfsi+0x9c>
    1aca:	50 95       	com	r21
    1acc:	40 95       	com	r20
    1ace:	30 95       	com	r19
    1ad0:	21 95       	neg	r18
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <__fixsfsi+0x9c>
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <__fixsfsi+0x9c>
    1ae4:	2f ef       	ldi	r18, 0xFF	; 255
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f ef       	ldi	r20, 0xFF	; 255
    1aea:	5f e7       	ldi	r21, 0x7F	; 127
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <__fixsfsi+0x9c>
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e8       	ldi	r21, 0x80	; 128
    1af6:	b9 01       	movw	r22, r18
    1af8:	ca 01       	movw	r24, r20
    1afa:	2c 96       	adiw	r28, 0x0c	; 12
    1afc:	e2 e0       	ldi	r30, 0x02	; 2
    1afe:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x20>

00001b02 <__pack_f>:
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e4 80       	ldd	r14, Z+4	; 0x04
    1b10:	f5 80       	ldd	r15, Z+5	; 0x05
    1b12:	06 81       	ldd	r16, Z+6	; 0x06
    1b14:	17 81       	ldd	r17, Z+7	; 0x07
    1b16:	d1 80       	ldd	r13, Z+1	; 0x01
    1b18:	80 81       	ld	r24, Z
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	48 f4       	brcc	.+18     	; 0x1b30 <__pack_f+0x2e>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e1       	ldi	r26, 0x10	; 16
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e8 2a       	or	r14, r24
    1b28:	f9 2a       	or	r15, r25
    1b2a:	0a 2b       	or	r16, r26
    1b2c:	1b 2b       	or	r17, r27
    1b2e:	a5 c0       	rjmp	.+330    	; 0x1c7a <__pack_f+0x178>
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <__pack_f+0x34>
    1b34:	9f c0       	rjmp	.+318    	; 0x1c74 <__pack_f+0x172>
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	21 f4       	brne	.+8      	; 0x1b42 <__pack_f+0x40>
    1b3a:	ee 24       	eor	r14, r14
    1b3c:	ff 24       	eor	r15, r15
    1b3e:	87 01       	movw	r16, r14
    1b40:	05 c0       	rjmp	.+10     	; 0x1b4c <__pack_f+0x4a>
    1b42:	e1 14       	cp	r14, r1
    1b44:	f1 04       	cpc	r15, r1
    1b46:	01 05       	cpc	r16, r1
    1b48:	11 05       	cpc	r17, r1
    1b4a:	19 f4       	brne	.+6      	; 0x1b52 <__pack_f+0x50>
    1b4c:	e0 e0       	ldi	r30, 0x00	; 0
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	96 c0       	rjmp	.+300    	; 0x1c7e <__pack_f+0x17c>
    1b52:	62 81       	ldd	r22, Z+2	; 0x02
    1b54:	73 81       	ldd	r23, Z+3	; 0x03
    1b56:	9f ef       	ldi	r25, 0xFF	; 255
    1b58:	62 38       	cpi	r22, 0x82	; 130
    1b5a:	79 07       	cpc	r23, r25
    1b5c:	0c f0       	brlt	.+2      	; 0x1b60 <__pack_f+0x5e>
    1b5e:	5b c0       	rjmp	.+182    	; 0x1c16 <__pack_f+0x114>
    1b60:	22 e8       	ldi	r18, 0x82	; 130
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	26 1b       	sub	r18, r22
    1b66:	37 0b       	sbc	r19, r23
    1b68:	2a 31       	cpi	r18, 0x1A	; 26
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	2c f0       	brlt	.+10     	; 0x1b78 <__pack_f+0x76>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	2a c0       	rjmp	.+84     	; 0x1bcc <__pack_f+0xca>
    1b78:	b8 01       	movw	r22, r16
    1b7a:	a7 01       	movw	r20, r14
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <__pack_f+0x86>
    1b80:	76 95       	lsr	r23
    1b82:	67 95       	ror	r22
    1b84:	57 95       	ror	r21
    1b86:	47 95       	ror	r20
    1b88:	0a 94       	dec	r0
    1b8a:	d2 f7       	brpl	.-12     	; 0x1b80 <__pack_f+0x7e>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <__pack_f+0x9c>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	aa 1f       	adc	r26, r26
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	2a 95       	dec	r18
    1ba0:	d2 f7       	brpl	.-12     	; 0x1b96 <__pack_f+0x94>
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	a1 09       	sbc	r26, r1
    1ba6:	b1 09       	sbc	r27, r1
    1ba8:	8e 21       	and	r24, r14
    1baa:	9f 21       	and	r25, r15
    1bac:	a0 23       	and	r26, r16
    1bae:	b1 23       	and	r27, r17
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	a1 05       	cpc	r26, r1
    1bb4:	b1 05       	cpc	r27, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <__pack_f+0xbe>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 e0       	ldi	r26, 0x00	; 0
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	9a 01       	movw	r18, r20
    1bc2:	ab 01       	movw	r20, r22
    1bc4:	28 2b       	or	r18, r24
    1bc6:	39 2b       	or	r19, r25
    1bc8:	4a 2b       	or	r20, r26
    1bca:	5b 2b       	or	r21, r27
    1bcc:	da 01       	movw	r26, r20
    1bce:	c9 01       	movw	r24, r18
    1bd0:	8f 77       	andi	r24, 0x7F	; 127
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	a0 70       	andi	r26, 0x00	; 0
    1bd6:	b0 70       	andi	r27, 0x00	; 0
    1bd8:	80 34       	cpi	r24, 0x40	; 64
    1bda:	91 05       	cpc	r25, r1
    1bdc:	a1 05       	cpc	r26, r1
    1bde:	b1 05       	cpc	r27, r1
    1be0:	39 f4       	brne	.+14     	; 0x1bf0 <__pack_f+0xee>
    1be2:	27 ff       	sbrs	r18, 7
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <__pack_f+0xf6>
    1be6:	20 5c       	subi	r18, 0xC0	; 192
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	4f 4f       	sbci	r20, 0xFF	; 255
    1bec:	5f 4f       	sbci	r21, 0xFF	; 255
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <__pack_f+0xf6>
    1bf0:	21 5c       	subi	r18, 0xC1	; 193
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	4f 4f       	sbci	r20, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	e0 e0       	ldi	r30, 0x00	; 0
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	20 30       	cpi	r18, 0x00	; 0
    1bfe:	a0 e0       	ldi	r26, 0x00	; 0
    1c00:	3a 07       	cpc	r19, r26
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	4a 07       	cpc	r20, r26
    1c06:	a0 e4       	ldi	r26, 0x40	; 64
    1c08:	5a 07       	cpc	r21, r26
    1c0a:	10 f0       	brcs	.+4      	; 0x1c10 <__pack_f+0x10e>
    1c0c:	e1 e0       	ldi	r30, 0x01	; 1
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	79 01       	movw	r14, r18
    1c12:	8a 01       	movw	r16, r20
    1c14:	27 c0       	rjmp	.+78     	; 0x1c64 <__pack_f+0x162>
    1c16:	60 38       	cpi	r22, 0x80	; 128
    1c18:	71 05       	cpc	r23, r1
    1c1a:	64 f5       	brge	.+88     	; 0x1c74 <__pack_f+0x172>
    1c1c:	fb 01       	movw	r30, r22
    1c1e:	e1 58       	subi	r30, 0x81	; 129
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	d8 01       	movw	r26, r16
    1c24:	c7 01       	movw	r24, r14
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	90 70       	andi	r25, 0x00	; 0
    1c2a:	a0 70       	andi	r26, 0x00	; 0
    1c2c:	b0 70       	andi	r27, 0x00	; 0
    1c2e:	80 34       	cpi	r24, 0x40	; 64
    1c30:	91 05       	cpc	r25, r1
    1c32:	a1 05       	cpc	r26, r1
    1c34:	b1 05       	cpc	r27, r1
    1c36:	39 f4       	brne	.+14     	; 0x1c46 <__pack_f+0x144>
    1c38:	e7 fe       	sbrs	r14, 7
    1c3a:	0d c0       	rjmp	.+26     	; 0x1c56 <__pack_f+0x154>
    1c3c:	80 e4       	ldi	r24, 0x40	; 64
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__pack_f+0x14c>
    1c46:	8f e3       	ldi	r24, 0x3F	; 63
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a0 e0       	ldi	r26, 0x00	; 0
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e8 0e       	add	r14, r24
    1c50:	f9 1e       	adc	r15, r25
    1c52:	0a 1f       	adc	r16, r26
    1c54:	1b 1f       	adc	r17, r27
    1c56:	17 ff       	sbrs	r17, 7
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <__pack_f+0x162>
    1c5a:	16 95       	lsr	r17
    1c5c:	07 95       	ror	r16
    1c5e:	f7 94       	ror	r15
    1c60:	e7 94       	ror	r14
    1c62:	31 96       	adiw	r30, 0x01	; 1
    1c64:	87 e0       	ldi	r24, 0x07	; 7
    1c66:	16 95       	lsr	r17
    1c68:	07 95       	ror	r16
    1c6a:	f7 94       	ror	r15
    1c6c:	e7 94       	ror	r14
    1c6e:	8a 95       	dec	r24
    1c70:	d1 f7       	brne	.-12     	; 0x1c66 <__pack_f+0x164>
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <__pack_f+0x17c>
    1c74:	ee 24       	eor	r14, r14
    1c76:	ff 24       	eor	r15, r15
    1c78:	87 01       	movw	r16, r14
    1c7a:	ef ef       	ldi	r30, 0xFF	; 255
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	6e 2f       	mov	r22, r30
    1c80:	67 95       	ror	r22
    1c82:	66 27       	eor	r22, r22
    1c84:	67 95       	ror	r22
    1c86:	90 2f       	mov	r25, r16
    1c88:	9f 77       	andi	r25, 0x7F	; 127
    1c8a:	d7 94       	ror	r13
    1c8c:	dd 24       	eor	r13, r13
    1c8e:	d7 94       	ror	r13
    1c90:	8e 2f       	mov	r24, r30
    1c92:	86 95       	lsr	r24
    1c94:	49 2f       	mov	r20, r25
    1c96:	46 2b       	or	r20, r22
    1c98:	58 2f       	mov	r21, r24
    1c9a:	5d 29       	or	r21, r13
    1c9c:	b7 01       	movw	r22, r14
    1c9e:	ca 01       	movw	r24, r20
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	08 95       	ret

00001cac <__unpack_f>:
    1cac:	fc 01       	movw	r30, r24
    1cae:	db 01       	movw	r26, r22
    1cb0:	40 81       	ld	r20, Z
    1cb2:	51 81       	ldd	r21, Z+1	; 0x01
    1cb4:	22 81       	ldd	r18, Z+2	; 0x02
    1cb6:	62 2f       	mov	r22, r18
    1cb8:	6f 77       	andi	r22, 0x7F	; 127
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	22 1f       	adc	r18, r18
    1cbe:	22 27       	eor	r18, r18
    1cc0:	22 1f       	adc	r18, r18
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	89 2f       	mov	r24, r25
    1cc6:	88 0f       	add	r24, r24
    1cc8:	82 2b       	or	r24, r18
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	99 1f       	adc	r25, r25
    1cd0:	99 27       	eor	r25, r25
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	11 96       	adiw	r26, 0x01	; 1
    1cd6:	9c 93       	st	X, r25
    1cd8:	11 97       	sbiw	r26, 0x01	; 1
    1cda:	21 15       	cp	r18, r1
    1cdc:	31 05       	cpc	r19, r1
    1cde:	a9 f5       	brne	.+106    	; 0x1d4a <__unpack_f+0x9e>
    1ce0:	41 15       	cp	r20, r1
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	61 05       	cpc	r22, r1
    1ce6:	71 05       	cpc	r23, r1
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <__unpack_f+0x42>
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	37 c0       	rjmp	.+110    	; 0x1d5c <__unpack_f+0xb0>
    1cee:	82 e8       	ldi	r24, 0x82	; 130
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	13 96       	adiw	r26, 0x03	; 3
    1cf4:	9c 93       	st	X, r25
    1cf6:	8e 93       	st	-X, r24
    1cf8:	12 97       	sbiw	r26, 0x02	; 2
    1cfa:	9a 01       	movw	r18, r20
    1cfc:	ab 01       	movw	r20, r22
    1cfe:	67 e0       	ldi	r22, 0x07	; 7
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	44 1f       	adc	r20, r20
    1d06:	55 1f       	adc	r21, r21
    1d08:	6a 95       	dec	r22
    1d0a:	d1 f7       	brne	.-12     	; 0x1d00 <__unpack_f+0x54>
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	8c 93       	st	X, r24
    1d10:	0d c0       	rjmp	.+26     	; 0x1d2c <__unpack_f+0x80>
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	44 1f       	adc	r20, r20
    1d18:	55 1f       	adc	r21, r21
    1d1a:	12 96       	adiw	r26, 0x02	; 2
    1d1c:	8d 91       	ld	r24, X+
    1d1e:	9c 91       	ld	r25, X
    1d20:	13 97       	sbiw	r26, 0x03	; 3
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	13 96       	adiw	r26, 0x03	; 3
    1d26:	9c 93       	st	X, r25
    1d28:	8e 93       	st	-X, r24
    1d2a:	12 97       	sbiw	r26, 0x02	; 2
    1d2c:	20 30       	cpi	r18, 0x00	; 0
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	38 07       	cpc	r19, r24
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	48 07       	cpc	r20, r24
    1d36:	80 e4       	ldi	r24, 0x40	; 64
    1d38:	58 07       	cpc	r21, r24
    1d3a:	58 f3       	brcs	.-42     	; 0x1d12 <__unpack_f+0x66>
    1d3c:	14 96       	adiw	r26, 0x04	; 4
    1d3e:	2d 93       	st	X+, r18
    1d40:	3d 93       	st	X+, r19
    1d42:	4d 93       	st	X+, r20
    1d44:	5c 93       	st	X, r21
    1d46:	17 97       	sbiw	r26, 0x07	; 7
    1d48:	08 95       	ret
    1d4a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	79 f4       	brne	.+30     	; 0x1d6e <__unpack_f+0xc2>
    1d50:	41 15       	cp	r20, r1
    1d52:	51 05       	cpc	r21, r1
    1d54:	61 05       	cpc	r22, r1
    1d56:	71 05       	cpc	r23, r1
    1d58:	19 f4       	brne	.+6      	; 0x1d60 <__unpack_f+0xb4>
    1d5a:	84 e0       	ldi	r24, 0x04	; 4
    1d5c:	8c 93       	st	X, r24
    1d5e:	08 95       	ret
    1d60:	64 ff       	sbrs	r22, 4
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <__unpack_f+0xbe>
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	8c 93       	st	X, r24
    1d68:	12 c0       	rjmp	.+36     	; 0x1d8e <__unpack_f+0xe2>
    1d6a:	1c 92       	st	X, r1
    1d6c:	10 c0       	rjmp	.+32     	; 0x1d8e <__unpack_f+0xe2>
    1d6e:	2f 57       	subi	r18, 0x7F	; 127
    1d70:	30 40       	sbci	r19, 0x00	; 0
    1d72:	13 96       	adiw	r26, 0x03	; 3
    1d74:	3c 93       	st	X, r19
    1d76:	2e 93       	st	-X, r18
    1d78:	12 97       	sbiw	r26, 0x02	; 2
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	8c 93       	st	X, r24
    1d7e:	87 e0       	ldi	r24, 0x07	; 7
    1d80:	44 0f       	add	r20, r20
    1d82:	55 1f       	adc	r21, r21
    1d84:	66 1f       	adc	r22, r22
    1d86:	77 1f       	adc	r23, r23
    1d88:	8a 95       	dec	r24
    1d8a:	d1 f7       	brne	.-12     	; 0x1d80 <__unpack_f+0xd4>
    1d8c:	70 64       	ori	r23, 0x40	; 64
    1d8e:	14 96       	adiw	r26, 0x04	; 4
    1d90:	4d 93       	st	X+, r20
    1d92:	5d 93       	st	X+, r21
    1d94:	6d 93       	st	X+, r22
    1d96:	7c 93       	st	X, r23
    1d98:	17 97       	sbiw	r26, 0x07	; 7
    1d9a:	08 95       	ret

00001d9c <__fpcmp_parts_f>:
    1d9c:	1f 93       	push	r17
    1d9e:	dc 01       	movw	r26, r24
    1da0:	fb 01       	movw	r30, r22
    1da2:	9c 91       	ld	r25, X
    1da4:	92 30       	cpi	r25, 0x02	; 2
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <__fpcmp_parts_f+0xe>
    1da8:	47 c0       	rjmp	.+142    	; 0x1e38 <__fpcmp_parts_f+0x9c>
    1daa:	80 81       	ld	r24, Z
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <__fpcmp_parts_f+0x16>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <__fpcmp_parts_f+0x9c>
    1db2:	94 30       	cpi	r25, 0x04	; 4
    1db4:	51 f4       	brne	.+20     	; 0x1dca <__fpcmp_parts_f+0x2e>
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	1c 91       	ld	r17, X
    1dba:	84 30       	cpi	r24, 0x04	; 4
    1dbc:	99 f5       	brne	.+102    	; 0x1e24 <__fpcmp_parts_f+0x88>
    1dbe:	81 81       	ldd	r24, Z+1	; 0x01
    1dc0:	68 2f       	mov	r22, r24
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	61 1b       	sub	r22, r17
    1dc6:	71 09       	sbc	r23, r1
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <__fpcmp_parts_f+0xac>
    1dca:	84 30       	cpi	r24, 0x04	; 4
    1dcc:	21 f0       	breq	.+8      	; 0x1dd6 <__fpcmp_parts_f+0x3a>
    1dce:	92 30       	cpi	r25, 0x02	; 2
    1dd0:	31 f4       	brne	.+12     	; 0x1dde <__fpcmp_parts_f+0x42>
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	b9 f1       	breq	.+110    	; 0x1e44 <__fpcmp_parts_f+0xa8>
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	88 23       	and	r24, r24
    1dda:	89 f1       	breq	.+98     	; 0x1e3e <__fpcmp_parts_f+0xa2>
    1ddc:	2d c0       	rjmp	.+90     	; 0x1e38 <__fpcmp_parts_f+0x9c>
    1dde:	11 96       	adiw	r26, 0x01	; 1
    1de0:	1c 91       	ld	r17, X
    1de2:	11 97       	sbiw	r26, 0x01	; 1
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	f1 f0       	breq	.+60     	; 0x1e24 <__fpcmp_parts_f+0x88>
    1de8:	81 81       	ldd	r24, Z+1	; 0x01
    1dea:	18 17       	cp	r17, r24
    1dec:	d9 f4       	brne	.+54     	; 0x1e24 <__fpcmp_parts_f+0x88>
    1dee:	12 96       	adiw	r26, 0x02	; 2
    1df0:	2d 91       	ld	r18, X+
    1df2:	3c 91       	ld	r19, X
    1df4:	13 97       	sbiw	r26, 0x03	; 3
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	82 17       	cp	r24, r18
    1dfc:	93 07       	cpc	r25, r19
    1dfe:	94 f0       	brlt	.+36     	; 0x1e24 <__fpcmp_parts_f+0x88>
    1e00:	28 17       	cp	r18, r24
    1e02:	39 07       	cpc	r19, r25
    1e04:	bc f0       	brlt	.+46     	; 0x1e34 <__fpcmp_parts_f+0x98>
    1e06:	14 96       	adiw	r26, 0x04	; 4
    1e08:	8d 91       	ld	r24, X+
    1e0a:	9d 91       	ld	r25, X+
    1e0c:	0d 90       	ld	r0, X+
    1e0e:	bc 91       	ld	r27, X
    1e10:	a0 2d       	mov	r26, r0
    1e12:	24 81       	ldd	r18, Z+4	; 0x04
    1e14:	35 81       	ldd	r19, Z+5	; 0x05
    1e16:	46 81       	ldd	r20, Z+6	; 0x06
    1e18:	57 81       	ldd	r21, Z+7	; 0x07
    1e1a:	28 17       	cp	r18, r24
    1e1c:	39 07       	cpc	r19, r25
    1e1e:	4a 07       	cpc	r20, r26
    1e20:	5b 07       	cpc	r21, r27
    1e22:	18 f4       	brcc	.+6      	; 0x1e2a <__fpcmp_parts_f+0x8e>
    1e24:	11 23       	and	r17, r17
    1e26:	41 f0       	breq	.+16     	; 0x1e38 <__fpcmp_parts_f+0x9c>
    1e28:	0a c0       	rjmp	.+20     	; 0x1e3e <__fpcmp_parts_f+0xa2>
    1e2a:	82 17       	cp	r24, r18
    1e2c:	93 07       	cpc	r25, r19
    1e2e:	a4 07       	cpc	r26, r20
    1e30:	b5 07       	cpc	r27, r21
    1e32:	40 f4       	brcc	.+16     	; 0x1e44 <__fpcmp_parts_f+0xa8>
    1e34:	11 23       	and	r17, r17
    1e36:	19 f0       	breq	.+6      	; 0x1e3e <__fpcmp_parts_f+0xa2>
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <__fpcmp_parts_f+0xac>
    1e3e:	6f ef       	ldi	r22, 0xFF	; 255
    1e40:	7f ef       	ldi	r23, 0xFF	; 255
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <__fpcmp_parts_f+0xac>
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	cb 01       	movw	r24, r22
    1e4a:	1f 91       	pop	r17
    1e4c:	08 95       	ret

00001e4e <fdevopen>:
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	8c 01       	movw	r16, r24
    1e58:	eb 01       	movw	r28, r22
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	31 f4       	brne	.+12     	; 0x1e6a <fdevopen+0x1c>
    1e5e:	61 15       	cp	r22, r1
    1e60:	71 05       	cpc	r23, r1
    1e62:	19 f4       	brne	.+6      	; 0x1e6a <fdevopen+0x1c>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	38 c0       	rjmp	.+112    	; 0x1eda <fdevopen+0x8c>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	6e e0       	ldi	r22, 0x0E	; 14
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	0e 94 a1 11 	call	0x2342	; 0x2342 <calloc>
    1e76:	fc 01       	movw	r30, r24
    1e78:	9c 01       	movw	r18, r24
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	71 f1       	breq	.+92     	; 0x1eda <fdevopen+0x8c>
    1e7e:	80 e8       	ldi	r24, 0x80	; 128
    1e80:	83 83       	std	Z+3, r24	; 0x03
    1e82:	20 97       	sbiw	r28, 0x00	; 0
    1e84:	71 f0       	breq	.+28     	; 0x1ea2 <fdevopen+0x54>
    1e86:	d3 87       	std	Z+11, r29	; 0x0b
    1e88:	c2 87       	std	Z+10, r28	; 0x0a
    1e8a:	81 e8       	ldi	r24, 0x81	; 129
    1e8c:	83 83       	std	Z+3, r24	; 0x03
    1e8e:	80 91 a8 02 	lds	r24, 0x02A8
    1e92:	90 91 a9 02 	lds	r25, 0x02A9
    1e96:	89 2b       	or	r24, r25
    1e98:	21 f4       	brne	.+8      	; 0x1ea2 <fdevopen+0x54>
    1e9a:	f0 93 a9 02 	sts	0x02A9, r31
    1e9e:	e0 93 a8 02 	sts	0x02A8, r30
    1ea2:	01 15       	cp	r16, r1
    1ea4:	11 05       	cpc	r17, r1
    1ea6:	c9 f0       	breq	.+50     	; 0x1eda <fdevopen+0x8c>
    1ea8:	11 87       	std	Z+9, r17	; 0x09
    1eaa:	00 87       	std	Z+8, r16	; 0x08
    1eac:	83 81       	ldd	r24, Z+3	; 0x03
    1eae:	82 60       	ori	r24, 0x02	; 2
    1eb0:	83 83       	std	Z+3, r24	; 0x03
    1eb2:	80 91 aa 02 	lds	r24, 0x02AA
    1eb6:	90 91 ab 02 	lds	r25, 0x02AB
    1eba:	89 2b       	or	r24, r25
    1ebc:	71 f4       	brne	.+28     	; 0x1eda <fdevopen+0x8c>
    1ebe:	f0 93 ab 02 	sts	0x02AB, r31
    1ec2:	e0 93 aa 02 	sts	0x02AA, r30
    1ec6:	80 91 ac 02 	lds	r24, 0x02AC
    1eca:	90 91 ad 02 	lds	r25, 0x02AD
    1ece:	89 2b       	or	r24, r25
    1ed0:	21 f4       	brne	.+8      	; 0x1eda <fdevopen+0x8c>
    1ed2:	f0 93 ad 02 	sts	0x02AD, r31
    1ed6:	e0 93 ac 02 	sts	0x02AC, r30
    1eda:	c9 01       	movw	r24, r18
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <printf>:
    1ee6:	a0 e0       	ldi	r26, 0x00	; 0
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e7       	ldi	r30, 0x79	; 121
    1eec:	ff e0       	ldi	r31, 0x0F	; 15
    1eee:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x20>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	35 96       	adiw	r30, 0x05	; 5
    1ef6:	61 91       	ld	r22, Z+
    1ef8:	71 91       	ld	r23, Z+
    1efa:	80 91 aa 02 	lds	r24, 0x02AA
    1efe:	90 91 ab 02 	lds	r25, 0x02AB
    1f02:	af 01       	movw	r20, r30
    1f04:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <vfprintf>
    1f08:	20 96       	adiw	r28, 0x00	; 0
    1f0a:	e2 e0       	ldi	r30, 0x02	; 2
    1f0c:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x20>

00001f10 <putchar>:
    1f10:	60 91 aa 02 	lds	r22, 0x02AA
    1f14:	70 91 ab 02 	lds	r23, 0x02AB
    1f18:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    1f1c:	08 95       	ret

00001f1e <puts>:
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	8c 01       	movw	r16, r24
    1f28:	e0 91 aa 02 	lds	r30, 0x02AA
    1f2c:	f0 91 ab 02 	lds	r31, 0x02AB
    1f30:	83 81       	ldd	r24, Z+3	; 0x03
    1f32:	81 ff       	sbrs	r24, 1
    1f34:	21 c0       	rjmp	.+66     	; 0x1f78 <puts+0x5a>
    1f36:	c0 e0       	ldi	r28, 0x00	; 0
    1f38:	d0 e0       	ldi	r29, 0x00	; 0
    1f3a:	0d c0       	rjmp	.+26     	; 0x1f56 <puts+0x38>
    1f3c:	e0 91 aa 02 	lds	r30, 0x02AA
    1f40:	f0 91 ab 02 	lds	r31, 0x02AB
    1f44:	20 85       	ldd	r18, Z+8	; 0x08
    1f46:	31 85       	ldd	r19, Z+9	; 0x09
    1f48:	bf 01       	movw	r22, r30
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	09 95       	icall
    1f4e:	89 2b       	or	r24, r25
    1f50:	11 f0       	breq	.+4      	; 0x1f56 <puts+0x38>
    1f52:	cf ef       	ldi	r28, 0xFF	; 255
    1f54:	df ef       	ldi	r29, 0xFF	; 255
    1f56:	f8 01       	movw	r30, r16
    1f58:	81 91       	ld	r24, Z+
    1f5a:	8f 01       	movw	r16, r30
    1f5c:	88 23       	and	r24, r24
    1f5e:	71 f7       	brne	.-36     	; 0x1f3c <puts+0x1e>
    1f60:	e0 91 aa 02 	lds	r30, 0x02AA
    1f64:	f0 91 ab 02 	lds	r31, 0x02AB
    1f68:	20 85       	ldd	r18, Z+8	; 0x08
    1f6a:	31 85       	ldd	r19, Z+9	; 0x09
    1f6c:	8a e0       	ldi	r24, 0x0A	; 10
    1f6e:	bf 01       	movw	r22, r30
    1f70:	f9 01       	movw	r30, r18
    1f72:	09 95       	icall
    1f74:	89 2b       	or	r24, r25
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <puts+0x5e>
    1f78:	cf ef       	ldi	r28, 0xFF	; 255
    1f7a:	df ef       	ldi	r29, 0xFF	; 255
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	08 95       	ret

00001f88 <vfprintf>:
    1f88:	ab e0       	ldi	r26, 0x0B	; 11
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ea ec       	ldi	r30, 0xCA	; 202
    1f8e:	ff e0       	ldi	r31, 0x0F	; 15
    1f90:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__>
    1f94:	3c 01       	movw	r6, r24
    1f96:	2b 01       	movw	r4, r22
    1f98:	5a 01       	movw	r10, r20
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	17 82       	std	Z+7, r1	; 0x07
    1f9e:	16 82       	std	Z+6, r1	; 0x06
    1fa0:	83 81       	ldd	r24, Z+3	; 0x03
    1fa2:	81 fd       	sbrc	r24, 1
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <vfprintf+0x24>
    1fa6:	6f ef       	ldi	r22, 0xFF	; 255
    1fa8:	7f ef       	ldi	r23, 0xFF	; 255
    1faa:	c6 c1       	rjmp	.+908    	; 0x2338 <vfprintf+0x3b0>
    1fac:	9a e0       	ldi	r25, 0x0A	; 10
    1fae:	89 2e       	mov	r8, r25
    1fb0:	1e 01       	movw	r2, r28
    1fb2:	08 94       	sec
    1fb4:	21 1c       	adc	r2, r1
    1fb6:	31 1c       	adc	r3, r1
    1fb8:	f3 01       	movw	r30, r6
    1fba:	23 81       	ldd	r18, Z+3	; 0x03
    1fbc:	f2 01       	movw	r30, r4
    1fbe:	23 fd       	sbrc	r18, 3
    1fc0:	85 91       	lpm	r24, Z+
    1fc2:	23 ff       	sbrs	r18, 3
    1fc4:	81 91       	ld	r24, Z+
    1fc6:	2f 01       	movw	r4, r30
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f4       	brne	.+2      	; 0x1fce <vfprintf+0x46>
    1fcc:	b2 c1       	rjmp	.+868    	; 0x2332 <vfprintf+0x3aa>
    1fce:	85 32       	cpi	r24, 0x25	; 37
    1fd0:	39 f4       	brne	.+14     	; 0x1fe0 <vfprintf+0x58>
    1fd2:	23 fd       	sbrc	r18, 3
    1fd4:	85 91       	lpm	r24, Z+
    1fd6:	23 ff       	sbrs	r18, 3
    1fd8:	81 91       	ld	r24, Z+
    1fda:	2f 01       	movw	r4, r30
    1fdc:	85 32       	cpi	r24, 0x25	; 37
    1fde:	29 f4       	brne	.+10     	; 0x1fea <vfprintf+0x62>
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	b3 01       	movw	r22, r6
    1fe4:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    1fe8:	e7 cf       	rjmp	.-50     	; 0x1fb8 <vfprintf+0x30>
    1fea:	98 2f       	mov	r25, r24
    1fec:	ff 24       	eor	r15, r15
    1fee:	ee 24       	eor	r14, r14
    1ff0:	99 24       	eor	r9, r9
    1ff2:	ff e1       	ldi	r31, 0x1F	; 31
    1ff4:	ff 15       	cp	r31, r15
    1ff6:	d0 f0       	brcs	.+52     	; 0x202c <vfprintf+0xa4>
    1ff8:	9b 32       	cpi	r25, 0x2B	; 43
    1ffa:	69 f0       	breq	.+26     	; 0x2016 <vfprintf+0x8e>
    1ffc:	9c 32       	cpi	r25, 0x2C	; 44
    1ffe:	28 f4       	brcc	.+10     	; 0x200a <vfprintf+0x82>
    2000:	90 32       	cpi	r25, 0x20	; 32
    2002:	59 f0       	breq	.+22     	; 0x201a <vfprintf+0x92>
    2004:	93 32       	cpi	r25, 0x23	; 35
    2006:	91 f4       	brne	.+36     	; 0x202c <vfprintf+0xa4>
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <vfprintf+0x9e>
    200a:	9d 32       	cpi	r25, 0x2D	; 45
    200c:	49 f0       	breq	.+18     	; 0x2020 <vfprintf+0x98>
    200e:	90 33       	cpi	r25, 0x30	; 48
    2010:	69 f4       	brne	.+26     	; 0x202c <vfprintf+0xa4>
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	24 c0       	rjmp	.+72     	; 0x205e <vfprintf+0xd6>
    2016:	52 e0       	ldi	r21, 0x02	; 2
    2018:	f5 2a       	or	r15, r21
    201a:	84 e0       	ldi	r24, 0x04	; 4
    201c:	f8 2a       	or	r15, r24
    201e:	28 c0       	rjmp	.+80     	; 0x2070 <vfprintf+0xe8>
    2020:	98 e0       	ldi	r25, 0x08	; 8
    2022:	f9 2a       	or	r15, r25
    2024:	25 c0       	rjmp	.+74     	; 0x2070 <vfprintf+0xe8>
    2026:	e0 e1       	ldi	r30, 0x10	; 16
    2028:	fe 2a       	or	r15, r30
    202a:	22 c0       	rjmp	.+68     	; 0x2070 <vfprintf+0xe8>
    202c:	f7 fc       	sbrc	r15, 7
    202e:	29 c0       	rjmp	.+82     	; 0x2082 <vfprintf+0xfa>
    2030:	89 2f       	mov	r24, r25
    2032:	80 53       	subi	r24, 0x30	; 48
    2034:	8a 30       	cpi	r24, 0x0A	; 10
    2036:	70 f4       	brcc	.+28     	; 0x2054 <vfprintf+0xcc>
    2038:	f6 fe       	sbrs	r15, 6
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <vfprintf+0xbe>
    203c:	98 9c       	mul	r9, r8
    203e:	90 2c       	mov	r9, r0
    2040:	11 24       	eor	r1, r1
    2042:	98 0e       	add	r9, r24
    2044:	15 c0       	rjmp	.+42     	; 0x2070 <vfprintf+0xe8>
    2046:	e8 9c       	mul	r14, r8
    2048:	e0 2c       	mov	r14, r0
    204a:	11 24       	eor	r1, r1
    204c:	e8 0e       	add	r14, r24
    204e:	f0 e2       	ldi	r31, 0x20	; 32
    2050:	ff 2a       	or	r15, r31
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <vfprintf+0xe8>
    2054:	9e 32       	cpi	r25, 0x2E	; 46
    2056:	29 f4       	brne	.+10     	; 0x2062 <vfprintf+0xda>
    2058:	f6 fc       	sbrc	r15, 6
    205a:	6b c1       	rjmp	.+726    	; 0x2332 <vfprintf+0x3aa>
    205c:	40 e4       	ldi	r20, 0x40	; 64
    205e:	f4 2a       	or	r15, r20
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <vfprintf+0xe8>
    2062:	9c 36       	cpi	r25, 0x6C	; 108
    2064:	19 f4       	brne	.+6      	; 0x206c <vfprintf+0xe4>
    2066:	50 e8       	ldi	r21, 0x80	; 128
    2068:	f5 2a       	or	r15, r21
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <vfprintf+0xe8>
    206c:	98 36       	cpi	r25, 0x68	; 104
    206e:	49 f4       	brne	.+18     	; 0x2082 <vfprintf+0xfa>
    2070:	f2 01       	movw	r30, r4
    2072:	23 fd       	sbrc	r18, 3
    2074:	95 91       	lpm	r25, Z+
    2076:	23 ff       	sbrs	r18, 3
    2078:	91 91       	ld	r25, Z+
    207a:	2f 01       	movw	r4, r30
    207c:	99 23       	and	r25, r25
    207e:	09 f0       	breq	.+2      	; 0x2082 <vfprintf+0xfa>
    2080:	b8 cf       	rjmp	.-144    	; 0x1ff2 <vfprintf+0x6a>
    2082:	89 2f       	mov	r24, r25
    2084:	85 54       	subi	r24, 0x45	; 69
    2086:	83 30       	cpi	r24, 0x03	; 3
    2088:	18 f0       	brcs	.+6      	; 0x2090 <vfprintf+0x108>
    208a:	80 52       	subi	r24, 0x20	; 32
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	38 f4       	brcc	.+14     	; 0x209e <vfprintf+0x116>
    2090:	44 e0       	ldi	r20, 0x04	; 4
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	a4 0e       	add	r10, r20
    2096:	b5 1e       	adc	r11, r21
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	59 83       	std	Y+1, r21	; 0x01
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <vfprintf+0x134>
    209e:	93 36       	cpi	r25, 0x63	; 99
    20a0:	31 f0       	breq	.+12     	; 0x20ae <vfprintf+0x126>
    20a2:	93 37       	cpi	r25, 0x73	; 115
    20a4:	79 f0       	breq	.+30     	; 0x20c4 <vfprintf+0x13c>
    20a6:	93 35       	cpi	r25, 0x53	; 83
    20a8:	09 f0       	breq	.+2      	; 0x20ac <vfprintf+0x124>
    20aa:	56 c0       	rjmp	.+172    	; 0x2158 <vfprintf+0x1d0>
    20ac:	20 c0       	rjmp	.+64     	; 0x20ee <vfprintf+0x166>
    20ae:	f5 01       	movw	r30, r10
    20b0:	80 81       	ld	r24, Z
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	42 e0       	ldi	r20, 0x02	; 2
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	a4 0e       	add	r10, r20
    20ba:	b5 1e       	adc	r11, r21
    20bc:	61 01       	movw	r12, r2
    20be:	01 e0       	ldi	r16, 0x01	; 1
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	12 c0       	rjmp	.+36     	; 0x20e8 <vfprintf+0x160>
    20c4:	f5 01       	movw	r30, r10
    20c6:	c0 80       	ld	r12, Z
    20c8:	d1 80       	ldd	r13, Z+1	; 0x01
    20ca:	f6 fc       	sbrc	r15, 6
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <vfprintf+0x14c>
    20ce:	6f ef       	ldi	r22, 0xFF	; 255
    20d0:	7f ef       	ldi	r23, 0xFF	; 255
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x150>
    20d4:	69 2d       	mov	r22, r9
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	42 e0       	ldi	r20, 0x02	; 2
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	a4 0e       	add	r10, r20
    20de:	b5 1e       	adc	r11, r21
    20e0:	c6 01       	movw	r24, r12
    20e2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <strnlen>
    20e6:	8c 01       	movw	r16, r24
    20e8:	5f e7       	ldi	r21, 0x7F	; 127
    20ea:	f5 22       	and	r15, r21
    20ec:	14 c0       	rjmp	.+40     	; 0x2116 <vfprintf+0x18e>
    20ee:	f5 01       	movw	r30, r10
    20f0:	c0 80       	ld	r12, Z
    20f2:	d1 80       	ldd	r13, Z+1	; 0x01
    20f4:	f6 fc       	sbrc	r15, 6
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <vfprintf+0x176>
    20f8:	6f ef       	ldi	r22, 0xFF	; 255
    20fa:	7f ef       	ldi	r23, 0xFF	; 255
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <vfprintf+0x17a>
    20fe:	69 2d       	mov	r22, r9
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	42 e0       	ldi	r20, 0x02	; 2
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	a4 0e       	add	r10, r20
    2108:	b5 1e       	adc	r11, r21
    210a:	c6 01       	movw	r24, r12
    210c:	0e 94 c2 12 	call	0x2584	; 0x2584 <strnlen_P>
    2110:	8c 01       	movw	r16, r24
    2112:	50 e8       	ldi	r21, 0x80	; 128
    2114:	f5 2a       	or	r15, r21
    2116:	f3 fe       	sbrs	r15, 3
    2118:	07 c0       	rjmp	.+14     	; 0x2128 <vfprintf+0x1a0>
    211a:	1a c0       	rjmp	.+52     	; 0x2150 <vfprintf+0x1c8>
    211c:	80 e2       	ldi	r24, 0x20	; 32
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	b3 01       	movw	r22, r6
    2122:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    2126:	ea 94       	dec	r14
    2128:	8e 2d       	mov	r24, r14
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	08 17       	cp	r16, r24
    212e:	19 07       	cpc	r17, r25
    2130:	a8 f3       	brcs	.-22     	; 0x211c <vfprintf+0x194>
    2132:	0e c0       	rjmp	.+28     	; 0x2150 <vfprintf+0x1c8>
    2134:	f6 01       	movw	r30, r12
    2136:	f7 fc       	sbrc	r15, 7
    2138:	85 91       	lpm	r24, Z+
    213a:	f7 fe       	sbrs	r15, 7
    213c:	81 91       	ld	r24, Z+
    213e:	6f 01       	movw	r12, r30
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	b3 01       	movw	r22, r6
    2144:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    2148:	e1 10       	cpse	r14, r1
    214a:	ea 94       	dec	r14
    214c:	01 50       	subi	r16, 0x01	; 1
    214e:	10 40       	sbci	r17, 0x00	; 0
    2150:	01 15       	cp	r16, r1
    2152:	11 05       	cpc	r17, r1
    2154:	79 f7       	brne	.-34     	; 0x2134 <vfprintf+0x1ac>
    2156:	ea c0       	rjmp	.+468    	; 0x232c <vfprintf+0x3a4>
    2158:	94 36       	cpi	r25, 0x64	; 100
    215a:	11 f0       	breq	.+4      	; 0x2160 <vfprintf+0x1d8>
    215c:	99 36       	cpi	r25, 0x69	; 105
    215e:	69 f5       	brne	.+90     	; 0x21ba <vfprintf+0x232>
    2160:	f7 fe       	sbrs	r15, 7
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <vfprintf+0x1ec>
    2164:	f5 01       	movw	r30, r10
    2166:	20 81       	ld	r18, Z
    2168:	31 81       	ldd	r19, Z+1	; 0x01
    216a:	42 81       	ldd	r20, Z+2	; 0x02
    216c:	53 81       	ldd	r21, Z+3	; 0x03
    216e:	84 e0       	ldi	r24, 0x04	; 4
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0a c0       	rjmp	.+20     	; 0x2188 <vfprintf+0x200>
    2174:	f5 01       	movw	r30, r10
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	9c 01       	movw	r18, r24
    217c:	44 27       	eor	r20, r20
    217e:	37 fd       	sbrc	r19, 7
    2180:	40 95       	com	r20
    2182:	54 2f       	mov	r21, r20
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a8 0e       	add	r10, r24
    218a:	b9 1e       	adc	r11, r25
    218c:	9f e6       	ldi	r25, 0x6F	; 111
    218e:	f9 22       	and	r15, r25
    2190:	57 ff       	sbrs	r21, 7
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <vfprintf+0x21e>
    2194:	50 95       	com	r21
    2196:	40 95       	com	r20
    2198:	30 95       	com	r19
    219a:	21 95       	neg	r18
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	4f 4f       	sbci	r20, 0xFF	; 255
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	e0 e8       	ldi	r30, 0x80	; 128
    21a4:	fe 2a       	or	r15, r30
    21a6:	ca 01       	movw	r24, r20
    21a8:	b9 01       	movw	r22, r18
    21aa:	a1 01       	movw	r20, r2
    21ac:	2a e0       	ldi	r18, 0x0A	; 10
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	0e 94 0b 13 	call	0x2616	; 0x2616 <__ultoa_invert>
    21b4:	d8 2e       	mov	r13, r24
    21b6:	d2 18       	sub	r13, r2
    21b8:	40 c0       	rjmp	.+128    	; 0x223a <vfprintf+0x2b2>
    21ba:	95 37       	cpi	r25, 0x75	; 117
    21bc:	29 f4       	brne	.+10     	; 0x21c8 <vfprintf+0x240>
    21be:	1f 2d       	mov	r17, r15
    21c0:	1f 7e       	andi	r17, 0xEF	; 239
    21c2:	2a e0       	ldi	r18, 0x0A	; 10
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	1d c0       	rjmp	.+58     	; 0x2202 <vfprintf+0x27a>
    21c8:	1f 2d       	mov	r17, r15
    21ca:	19 7f       	andi	r17, 0xF9	; 249
    21cc:	9f 36       	cpi	r25, 0x6F	; 111
    21ce:	61 f0       	breq	.+24     	; 0x21e8 <vfprintf+0x260>
    21d0:	90 37       	cpi	r25, 0x70	; 112
    21d2:	20 f4       	brcc	.+8      	; 0x21dc <vfprintf+0x254>
    21d4:	98 35       	cpi	r25, 0x58	; 88
    21d6:	09 f0       	breq	.+2      	; 0x21da <vfprintf+0x252>
    21d8:	ac c0       	rjmp	.+344    	; 0x2332 <vfprintf+0x3aa>
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <vfprintf+0x272>
    21dc:	90 37       	cpi	r25, 0x70	; 112
    21de:	39 f0       	breq	.+14     	; 0x21ee <vfprintf+0x266>
    21e0:	98 37       	cpi	r25, 0x78	; 120
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <vfprintf+0x25e>
    21e4:	a6 c0       	rjmp	.+332    	; 0x2332 <vfprintf+0x3aa>
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <vfprintf+0x268>
    21e8:	28 e0       	ldi	r18, 0x08	; 8
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	0a c0       	rjmp	.+20     	; 0x2202 <vfprintf+0x27a>
    21ee:	10 61       	ori	r17, 0x10	; 16
    21f0:	14 fd       	sbrc	r17, 4
    21f2:	14 60       	ori	r17, 0x04	; 4
    21f4:	20 e1       	ldi	r18, 0x10	; 16
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <vfprintf+0x27a>
    21fa:	14 fd       	sbrc	r17, 4
    21fc:	16 60       	ori	r17, 0x06	; 6
    21fe:	20 e1       	ldi	r18, 0x10	; 16
    2200:	32 e0       	ldi	r19, 0x02	; 2
    2202:	17 ff       	sbrs	r17, 7
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <vfprintf+0x28e>
    2206:	f5 01       	movw	r30, r10
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	44 e0       	ldi	r20, 0x04	; 4
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	08 c0       	rjmp	.+16     	; 0x2226 <vfprintf+0x29e>
    2216:	f5 01       	movw	r30, r10
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	bc 01       	movw	r22, r24
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	42 e0       	ldi	r20, 0x02	; 2
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	a4 0e       	add	r10, r20
    2228:	b5 1e       	adc	r11, r21
    222a:	a1 01       	movw	r20, r2
    222c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__ultoa_invert>
    2230:	d8 2e       	mov	r13, r24
    2232:	d2 18       	sub	r13, r2
    2234:	8f e7       	ldi	r24, 0x7F	; 127
    2236:	f8 2e       	mov	r15, r24
    2238:	f1 22       	and	r15, r17
    223a:	f6 fe       	sbrs	r15, 6
    223c:	0b c0       	rjmp	.+22     	; 0x2254 <vfprintf+0x2cc>
    223e:	5e ef       	ldi	r21, 0xFE	; 254
    2240:	f5 22       	and	r15, r21
    2242:	d9 14       	cp	r13, r9
    2244:	38 f4       	brcc	.+14     	; 0x2254 <vfprintf+0x2cc>
    2246:	f4 fe       	sbrs	r15, 4
    2248:	07 c0       	rjmp	.+14     	; 0x2258 <vfprintf+0x2d0>
    224a:	f2 fc       	sbrc	r15, 2
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <vfprintf+0x2d0>
    224e:	8f ee       	ldi	r24, 0xEF	; 239
    2250:	f8 22       	and	r15, r24
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <vfprintf+0x2d0>
    2254:	1d 2d       	mov	r17, r13
    2256:	01 c0       	rjmp	.+2      	; 0x225a <vfprintf+0x2d2>
    2258:	19 2d       	mov	r17, r9
    225a:	f4 fe       	sbrs	r15, 4
    225c:	0d c0       	rjmp	.+26     	; 0x2278 <vfprintf+0x2f0>
    225e:	fe 01       	movw	r30, r28
    2260:	ed 0d       	add	r30, r13
    2262:	f1 1d       	adc	r31, r1
    2264:	80 81       	ld	r24, Z
    2266:	80 33       	cpi	r24, 0x30	; 48
    2268:	19 f4       	brne	.+6      	; 0x2270 <vfprintf+0x2e8>
    226a:	99 ee       	ldi	r25, 0xE9	; 233
    226c:	f9 22       	and	r15, r25
    226e:	08 c0       	rjmp	.+16     	; 0x2280 <vfprintf+0x2f8>
    2270:	1f 5f       	subi	r17, 0xFF	; 255
    2272:	f2 fe       	sbrs	r15, 2
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <vfprintf+0x2f8>
    2276:	03 c0       	rjmp	.+6      	; 0x227e <vfprintf+0x2f6>
    2278:	8f 2d       	mov	r24, r15
    227a:	86 78       	andi	r24, 0x86	; 134
    227c:	09 f0       	breq	.+2      	; 0x2280 <vfprintf+0x2f8>
    227e:	1f 5f       	subi	r17, 0xFF	; 255
    2280:	0f 2d       	mov	r16, r15
    2282:	f3 fc       	sbrc	r15, 3
    2284:	14 c0       	rjmp	.+40     	; 0x22ae <vfprintf+0x326>
    2286:	f0 fe       	sbrs	r15, 0
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <vfprintf+0x320>
    228a:	1e 15       	cp	r17, r14
    228c:	10 f0       	brcs	.+4      	; 0x2292 <vfprintf+0x30a>
    228e:	9d 2c       	mov	r9, r13
    2290:	0b c0       	rjmp	.+22     	; 0x22a8 <vfprintf+0x320>
    2292:	9d 2c       	mov	r9, r13
    2294:	9e 0c       	add	r9, r14
    2296:	91 1a       	sub	r9, r17
    2298:	1e 2d       	mov	r17, r14
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <vfprintf+0x320>
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	b3 01       	movw	r22, r6
    22a2:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    22a6:	1f 5f       	subi	r17, 0xFF	; 255
    22a8:	1e 15       	cp	r17, r14
    22aa:	c0 f3       	brcs	.-16     	; 0x229c <vfprintf+0x314>
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <vfprintf+0x32e>
    22ae:	1e 15       	cp	r17, r14
    22b0:	10 f4       	brcc	.+4      	; 0x22b6 <vfprintf+0x32e>
    22b2:	e1 1a       	sub	r14, r17
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <vfprintf+0x330>
    22b6:	ee 24       	eor	r14, r14
    22b8:	04 ff       	sbrs	r16, 4
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <vfprintf+0x352>
    22bc:	80 e3       	ldi	r24, 0x30	; 48
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	b3 01       	movw	r22, r6
    22c2:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    22c6:	02 ff       	sbrs	r16, 2
    22c8:	1d c0       	rjmp	.+58     	; 0x2304 <vfprintf+0x37c>
    22ca:	01 fd       	sbrc	r16, 1
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <vfprintf+0x34c>
    22ce:	88 e7       	ldi	r24, 0x78	; 120
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <vfprintf+0x368>
    22d4:	88 e5       	ldi	r24, 0x58	; 88
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0b c0       	rjmp	.+22     	; 0x22f0 <vfprintf+0x368>
    22da:	80 2f       	mov	r24, r16
    22dc:	86 78       	andi	r24, 0x86	; 134
    22de:	91 f0       	breq	.+36     	; 0x2304 <vfprintf+0x37c>
    22e0:	01 ff       	sbrs	r16, 1
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfprintf+0x360>
    22e4:	8b e2       	ldi	r24, 0x2B	; 43
    22e6:	01 c0       	rjmp	.+2      	; 0x22ea <vfprintf+0x362>
    22e8:	80 e2       	ldi	r24, 0x20	; 32
    22ea:	f7 fc       	sbrc	r15, 7
    22ec:	8d e2       	ldi	r24, 0x2D	; 45
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	b3 01       	movw	r22, r6
    22f2:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    22f6:	06 c0       	rjmp	.+12     	; 0x2304 <vfprintf+0x37c>
    22f8:	80 e3       	ldi	r24, 0x30	; 48
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	b3 01       	movw	r22, r6
    22fe:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    2302:	9a 94       	dec	r9
    2304:	d9 14       	cp	r13, r9
    2306:	c0 f3       	brcs	.-16     	; 0x22f8 <vfprintf+0x370>
    2308:	da 94       	dec	r13
    230a:	f1 01       	movw	r30, r2
    230c:	ed 0d       	add	r30, r13
    230e:	f1 1d       	adc	r31, r1
    2310:	80 81       	ld	r24, Z
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	b3 01       	movw	r22, r6
    2316:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    231a:	dd 20       	and	r13, r13
    231c:	a9 f7       	brne	.-22     	; 0x2308 <vfprintf+0x380>
    231e:	06 c0       	rjmp	.+12     	; 0x232c <vfprintf+0x3a4>
    2320:	80 e2       	ldi	r24, 0x20	; 32
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	b3 01       	movw	r22, r6
    2326:	0e 94 df 12 	call	0x25be	; 0x25be <fputc>
    232a:	ea 94       	dec	r14
    232c:	ee 20       	and	r14, r14
    232e:	c1 f7       	brne	.-16     	; 0x2320 <vfprintf+0x398>
    2330:	43 ce       	rjmp	.-890    	; 0x1fb8 <vfprintf+0x30>
    2332:	f3 01       	movw	r30, r6
    2334:	66 81       	ldd	r22, Z+6	; 0x06
    2336:	77 81       	ldd	r23, Z+7	; 0x07
    2338:	cb 01       	movw	r24, r22
    233a:	2b 96       	adiw	r28, 0x0b	; 11
    233c:	e2 e1       	ldi	r30, 0x12	; 18
    233e:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__>

00002342 <calloc>:
    2342:	0f 93       	push	r16
    2344:	1f 93       	push	r17
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	68 9f       	mul	r22, r24
    234c:	80 01       	movw	r16, r0
    234e:	69 9f       	mul	r22, r25
    2350:	10 0d       	add	r17, r0
    2352:	78 9f       	mul	r23, r24
    2354:	10 0d       	add	r17, r0
    2356:	11 24       	eor	r1, r1
    2358:	c8 01       	movw	r24, r16
    235a:	0e 94 bd 11 	call	0x237a	; 0x237a <malloc>
    235e:	ec 01       	movw	r28, r24
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	29 f0       	breq	.+10     	; 0x236e <calloc+0x2c>
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	a8 01       	movw	r20, r16
    236a:	0e 94 cd 12 	call	0x259a	; 0x259a <memset>
    236e:	ce 01       	movw	r24, r28
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	08 95       	ret

0000237a <malloc>:
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	bc 01       	movw	r22, r24
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	91 05       	cpc	r25, r1
    2384:	10 f4       	brcc	.+4      	; 0x238a <malloc+0x10>
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	a0 91 b0 02 	lds	r26, 0x02B0
    238e:	b0 91 b1 02 	lds	r27, 0x02B1
    2392:	ed 01       	movw	r28, r26
    2394:	e0 e0       	ldi	r30, 0x00	; 0
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	21 c0       	rjmp	.+66     	; 0x23e0 <malloc+0x66>
    239e:	88 81       	ld	r24, Y
    23a0:	99 81       	ldd	r25, Y+1	; 0x01
    23a2:	86 17       	cp	r24, r22
    23a4:	97 07       	cpc	r25, r23
    23a6:	69 f4       	brne	.+26     	; 0x23c2 <malloc+0x48>
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	9b 81       	ldd	r25, Y+3	; 0x03
    23ac:	30 97       	sbiw	r30, 0x00	; 0
    23ae:	19 f0       	breq	.+6      	; 0x23b6 <malloc+0x3c>
    23b0:	93 83       	std	Z+3, r25	; 0x03
    23b2:	82 83       	std	Z+2, r24	; 0x02
    23b4:	04 c0       	rjmp	.+8      	; 0x23be <malloc+0x44>
    23b6:	90 93 b1 02 	sts	0x02B1, r25
    23ba:	80 93 b0 02 	sts	0x02B0, r24
    23be:	fe 01       	movw	r30, r28
    23c0:	34 c0       	rjmp	.+104    	; 0x242a <malloc+0xb0>
    23c2:	68 17       	cp	r22, r24
    23c4:	79 07       	cpc	r23, r25
    23c6:	38 f4       	brcc	.+14     	; 0x23d6 <malloc+0x5c>
    23c8:	41 15       	cp	r20, r1
    23ca:	51 05       	cpc	r21, r1
    23cc:	19 f0       	breq	.+6      	; 0x23d4 <malloc+0x5a>
    23ce:	84 17       	cp	r24, r20
    23d0:	95 07       	cpc	r25, r21
    23d2:	08 f4       	brcc	.+2      	; 0x23d6 <malloc+0x5c>
    23d4:	ac 01       	movw	r20, r24
    23d6:	fe 01       	movw	r30, r28
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	9c 01       	movw	r18, r24
    23de:	e9 01       	movw	r28, r18
    23e0:	20 97       	sbiw	r28, 0x00	; 0
    23e2:	e9 f6       	brne	.-70     	; 0x239e <malloc+0x24>
    23e4:	41 15       	cp	r20, r1
    23e6:	51 05       	cpc	r21, r1
    23e8:	a9 f1       	breq	.+106    	; 0x2454 <malloc+0xda>
    23ea:	ca 01       	movw	r24, r20
    23ec:	86 1b       	sub	r24, r22
    23ee:	97 0b       	sbc	r25, r23
    23f0:	04 97       	sbiw	r24, 0x04	; 4
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <malloc+0x7c>
    23f4:	ba 01       	movw	r22, r20
    23f6:	e0 e0       	ldi	r30, 0x00	; 0
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	2a c0       	rjmp	.+84     	; 0x2450 <malloc+0xd6>
    23fc:	8d 91       	ld	r24, X+
    23fe:	9c 91       	ld	r25, X
    2400:	11 97       	sbiw	r26, 0x01	; 1
    2402:	84 17       	cp	r24, r20
    2404:	95 07       	cpc	r25, r21
    2406:	f9 f4       	brne	.+62     	; 0x2446 <malloc+0xcc>
    2408:	64 17       	cp	r22, r20
    240a:	75 07       	cpc	r23, r21
    240c:	81 f4       	brne	.+32     	; 0x242e <malloc+0xb4>
    240e:	12 96       	adiw	r26, 0x02	; 2
    2410:	8d 91       	ld	r24, X+
    2412:	9c 91       	ld	r25, X
    2414:	13 97       	sbiw	r26, 0x03	; 3
    2416:	30 97       	sbiw	r30, 0x00	; 0
    2418:	19 f0       	breq	.+6      	; 0x2420 <malloc+0xa6>
    241a:	93 83       	std	Z+3, r25	; 0x03
    241c:	82 83       	std	Z+2, r24	; 0x02
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <malloc+0xae>
    2420:	90 93 b1 02 	sts	0x02B1, r25
    2424:	80 93 b0 02 	sts	0x02B0, r24
    2428:	fd 01       	movw	r30, r26
    242a:	32 96       	adiw	r30, 0x02	; 2
    242c:	4f c0       	rjmp	.+158    	; 0x24cc <malloc+0x152>
    242e:	ca 01       	movw	r24, r20
    2430:	86 1b       	sub	r24, r22
    2432:	97 0b       	sbc	r25, r23
    2434:	fd 01       	movw	r30, r26
    2436:	e8 0f       	add	r30, r24
    2438:	f9 1f       	adc	r31, r25
    243a:	61 93       	st	Z+, r22
    243c:	71 93       	st	Z+, r23
    243e:	02 97       	sbiw	r24, 0x02	; 2
    2440:	8d 93       	st	X+, r24
    2442:	9c 93       	st	X, r25
    2444:	43 c0       	rjmp	.+134    	; 0x24cc <malloc+0x152>
    2446:	fd 01       	movw	r30, r26
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	9c 01       	movw	r18, r24
    244e:	d9 01       	movw	r26, r18
    2450:	10 97       	sbiw	r26, 0x00	; 0
    2452:	a1 f6       	brne	.-88     	; 0x23fc <malloc+0x82>
    2454:	80 91 ae 02 	lds	r24, 0x02AE
    2458:	90 91 af 02 	lds	r25, 0x02AF
    245c:	89 2b       	or	r24, r25
    245e:	41 f4       	brne	.+16     	; 0x2470 <malloc+0xf6>
    2460:	80 91 a4 02 	lds	r24, 0x02A4
    2464:	90 91 a5 02 	lds	r25, 0x02A5
    2468:	90 93 af 02 	sts	0x02AF, r25
    246c:	80 93 ae 02 	sts	0x02AE, r24
    2470:	40 91 a6 02 	lds	r20, 0x02A6
    2474:	50 91 a7 02 	lds	r21, 0x02A7
    2478:	41 15       	cp	r20, r1
    247a:	51 05       	cpc	r21, r1
    247c:	41 f4       	brne	.+16     	; 0x248e <malloc+0x114>
    247e:	4d b7       	in	r20, 0x3d	; 61
    2480:	5e b7       	in	r21, 0x3e	; 62
    2482:	80 91 a2 02 	lds	r24, 0x02A2
    2486:	90 91 a3 02 	lds	r25, 0x02A3
    248a:	48 1b       	sub	r20, r24
    248c:	59 0b       	sbc	r21, r25
    248e:	20 91 ae 02 	lds	r18, 0x02AE
    2492:	30 91 af 02 	lds	r19, 0x02AF
    2496:	24 17       	cp	r18, r20
    2498:	35 07       	cpc	r19, r21
    249a:	b0 f4       	brcc	.+44     	; 0x24c8 <malloc+0x14e>
    249c:	ca 01       	movw	r24, r20
    249e:	82 1b       	sub	r24, r18
    24a0:	93 0b       	sbc	r25, r19
    24a2:	86 17       	cp	r24, r22
    24a4:	97 07       	cpc	r25, r23
    24a6:	80 f0       	brcs	.+32     	; 0x24c8 <malloc+0x14e>
    24a8:	ab 01       	movw	r20, r22
    24aa:	4e 5f       	subi	r20, 0xFE	; 254
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	84 17       	cp	r24, r20
    24b0:	95 07       	cpc	r25, r21
    24b2:	50 f0       	brcs	.+20     	; 0x24c8 <malloc+0x14e>
    24b4:	42 0f       	add	r20, r18
    24b6:	53 1f       	adc	r21, r19
    24b8:	50 93 af 02 	sts	0x02AF, r21
    24bc:	40 93 ae 02 	sts	0x02AE, r20
    24c0:	f9 01       	movw	r30, r18
    24c2:	61 93       	st	Z+, r22
    24c4:	71 93       	st	Z+, r23
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <malloc+0x152>
    24c8:	e0 e0       	ldi	r30, 0x00	; 0
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	cf 01       	movw	r24, r30
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	08 95       	ret

000024d4 <free>:
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	09 f4       	brne	.+2      	; 0x24de <free+0xa>
    24dc:	50 c0       	rjmp	.+160    	; 0x257e <free+0xaa>
    24de:	ec 01       	movw	r28, r24
    24e0:	22 97       	sbiw	r28, 0x02	; 2
    24e2:	1b 82       	std	Y+3, r1	; 0x03
    24e4:	1a 82       	std	Y+2, r1	; 0x02
    24e6:	a0 91 b0 02 	lds	r26, 0x02B0
    24ea:	b0 91 b1 02 	lds	r27, 0x02B1
    24ee:	10 97       	sbiw	r26, 0x00	; 0
    24f0:	09 f1       	breq	.+66     	; 0x2534 <free+0x60>
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	ac 17       	cp	r26, r28
    24f8:	bd 07       	cpc	r27, r29
    24fa:	08 f1       	brcs	.+66     	; 0x253e <free+0x6a>
    24fc:	bb 83       	std	Y+3, r27	; 0x03
    24fe:	aa 83       	std	Y+2, r26	; 0x02
    2500:	fe 01       	movw	r30, r28
    2502:	21 91       	ld	r18, Z+
    2504:	31 91       	ld	r19, Z+
    2506:	e2 0f       	add	r30, r18
    2508:	f3 1f       	adc	r31, r19
    250a:	ae 17       	cp	r26, r30
    250c:	bf 07       	cpc	r27, r31
    250e:	79 f4       	brne	.+30     	; 0x252e <free+0x5a>
    2510:	8d 91       	ld	r24, X+
    2512:	9c 91       	ld	r25, X
    2514:	11 97       	sbiw	r26, 0x01	; 1
    2516:	28 0f       	add	r18, r24
    2518:	39 1f       	adc	r19, r25
    251a:	2e 5f       	subi	r18, 0xFE	; 254
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	39 83       	std	Y+1, r19	; 0x01
    2520:	28 83       	st	Y, r18
    2522:	12 96       	adiw	r26, 0x02	; 2
    2524:	8d 91       	ld	r24, X+
    2526:	9c 91       	ld	r25, X
    2528:	13 97       	sbiw	r26, 0x03	; 3
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	41 15       	cp	r20, r1
    2530:	51 05       	cpc	r21, r1
    2532:	71 f4       	brne	.+28     	; 0x2550 <free+0x7c>
    2534:	d0 93 b1 02 	sts	0x02B1, r29
    2538:	c0 93 b0 02 	sts	0x02B0, r28
    253c:	20 c0       	rjmp	.+64     	; 0x257e <free+0xaa>
    253e:	12 96       	adiw	r26, 0x02	; 2
    2540:	8d 91       	ld	r24, X+
    2542:	9c 91       	ld	r25, X
    2544:	13 97       	sbiw	r26, 0x03	; 3
    2546:	ad 01       	movw	r20, r26
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	11 f0       	breq	.+4      	; 0x2550 <free+0x7c>
    254c:	dc 01       	movw	r26, r24
    254e:	d3 cf       	rjmp	.-90     	; 0x24f6 <free+0x22>
    2550:	fa 01       	movw	r30, r20
    2552:	d3 83       	std	Z+3, r29	; 0x03
    2554:	c2 83       	std	Z+2, r28	; 0x02
    2556:	21 91       	ld	r18, Z+
    2558:	31 91       	ld	r19, Z+
    255a:	e2 0f       	add	r30, r18
    255c:	f3 1f       	adc	r31, r19
    255e:	ce 17       	cp	r28, r30
    2560:	df 07       	cpc	r29, r31
    2562:	69 f4       	brne	.+26     	; 0x257e <free+0xaa>
    2564:	88 81       	ld	r24, Y
    2566:	99 81       	ldd	r25, Y+1	; 0x01
    2568:	28 0f       	add	r18, r24
    256a:	39 1f       	adc	r19, r25
    256c:	2e 5f       	subi	r18, 0xFE	; 254
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	fa 01       	movw	r30, r20
    2572:	31 83       	std	Z+1, r19	; 0x01
    2574:	20 83       	st	Z, r18
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	93 83       	std	Z+3, r25	; 0x03
    257c:	82 83       	std	Z+2, r24	; 0x02
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <strnlen_P>:
    2584:	fc 01       	movw	r30, r24
    2586:	05 90       	lpm	r0, Z+
    2588:	61 50       	subi	r22, 0x01	; 1
    258a:	70 40       	sbci	r23, 0x00	; 0
    258c:	01 10       	cpse	r0, r1
    258e:	d8 f7       	brcc	.-10     	; 0x2586 <strnlen_P+0x2>
    2590:	80 95       	com	r24
    2592:	90 95       	com	r25
    2594:	8e 0f       	add	r24, r30
    2596:	9f 1f       	adc	r25, r31
    2598:	08 95       	ret

0000259a <memset>:
    259a:	dc 01       	movw	r26, r24
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <memset+0x6>
    259e:	6d 93       	st	X+, r22
    25a0:	41 50       	subi	r20, 0x01	; 1
    25a2:	50 40       	sbci	r21, 0x00	; 0
    25a4:	e0 f7       	brcc	.-8      	; 0x259e <memset+0x4>
    25a6:	08 95       	ret

000025a8 <strnlen>:
    25a8:	fc 01       	movw	r30, r24
    25aa:	61 50       	subi	r22, 0x01	; 1
    25ac:	70 40       	sbci	r23, 0x00	; 0
    25ae:	01 90       	ld	r0, Z+
    25b0:	01 10       	cpse	r0, r1
    25b2:	d8 f7       	brcc	.-10     	; 0x25aa <strnlen+0x2>
    25b4:	80 95       	com	r24
    25b6:	90 95       	com	r25
    25b8:	8e 0f       	add	r24, r30
    25ba:	9f 1f       	adc	r25, r31
    25bc:	08 95       	ret

000025be <fputc>:
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	8c 01       	movw	r16, r24
    25c8:	eb 01       	movw	r28, r22
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	81 ff       	sbrs	r24, 1
    25ce:	1b c0       	rjmp	.+54     	; 0x2606 <fputc+0x48>
    25d0:	82 ff       	sbrs	r24, 2
    25d2:	0d c0       	rjmp	.+26     	; 0x25ee <fputc+0x30>
    25d4:	2e 81       	ldd	r18, Y+6	; 0x06
    25d6:	3f 81       	ldd	r19, Y+7	; 0x07
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	9d 81       	ldd	r25, Y+5	; 0x05
    25dc:	28 17       	cp	r18, r24
    25de:	39 07       	cpc	r19, r25
    25e0:	64 f4       	brge	.+24     	; 0x25fa <fputc+0x3c>
    25e2:	e8 81       	ld	r30, Y
    25e4:	f9 81       	ldd	r31, Y+1	; 0x01
    25e6:	01 93       	st	Z+, r16
    25e8:	f9 83       	std	Y+1, r31	; 0x01
    25ea:	e8 83       	st	Y, r30
    25ec:	06 c0       	rjmp	.+12     	; 0x25fa <fputc+0x3c>
    25ee:	e8 85       	ldd	r30, Y+8	; 0x08
    25f0:	f9 85       	ldd	r31, Y+9	; 0x09
    25f2:	80 2f       	mov	r24, r16
    25f4:	09 95       	icall
    25f6:	89 2b       	or	r24, r25
    25f8:	31 f4       	brne	.+12     	; 0x2606 <fputc+0x48>
    25fa:	8e 81       	ldd	r24, Y+6	; 0x06
    25fc:	9f 81       	ldd	r25, Y+7	; 0x07
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	9f 83       	std	Y+7, r25	; 0x07
    2602:	8e 83       	std	Y+6, r24	; 0x06
    2604:	02 c0       	rjmp	.+4      	; 0x260a <fputc+0x4c>
    2606:	0f ef       	ldi	r16, 0xFF	; 255
    2608:	1f ef       	ldi	r17, 0xFF	; 255
    260a:	c8 01       	movw	r24, r16
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	08 95       	ret

00002616 <__ultoa_invert>:
    2616:	fa 01       	movw	r30, r20
    2618:	aa 27       	eor	r26, r26
    261a:	28 30       	cpi	r18, 0x08	; 8
    261c:	51 f1       	breq	.+84     	; 0x2672 <__ultoa_invert+0x5c>
    261e:	20 31       	cpi	r18, 0x10	; 16
    2620:	81 f1       	breq	.+96     	; 0x2682 <__ultoa_invert+0x6c>
    2622:	e8 94       	clt
    2624:	6f 93       	push	r22
    2626:	6e 7f       	andi	r22, 0xFE	; 254
    2628:	6e 5f       	subi	r22, 0xFE	; 254
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	8f 4f       	sbci	r24, 0xFF	; 255
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	af 4f       	sbci	r26, 0xFF	; 255
    2632:	b1 e0       	ldi	r27, 0x01	; 1
    2634:	3e d0       	rcall	.+124    	; 0x26b2 <__ultoa_invert+0x9c>
    2636:	b4 e0       	ldi	r27, 0x04	; 4
    2638:	3c d0       	rcall	.+120    	; 0x26b2 <__ultoa_invert+0x9c>
    263a:	67 0f       	add	r22, r23
    263c:	78 1f       	adc	r23, r24
    263e:	89 1f       	adc	r24, r25
    2640:	9a 1f       	adc	r25, r26
    2642:	a1 1d       	adc	r26, r1
    2644:	68 0f       	add	r22, r24
    2646:	79 1f       	adc	r23, r25
    2648:	8a 1f       	adc	r24, r26
    264a:	91 1d       	adc	r25, r1
    264c:	a1 1d       	adc	r26, r1
    264e:	6a 0f       	add	r22, r26
    2650:	71 1d       	adc	r23, r1
    2652:	81 1d       	adc	r24, r1
    2654:	91 1d       	adc	r25, r1
    2656:	a1 1d       	adc	r26, r1
    2658:	20 d0       	rcall	.+64     	; 0x269a <__ultoa_invert+0x84>
    265a:	09 f4       	brne	.+2      	; 0x265e <__ultoa_invert+0x48>
    265c:	68 94       	set
    265e:	3f 91       	pop	r19
    2660:	2a e0       	ldi	r18, 0x0A	; 10
    2662:	26 9f       	mul	r18, r22
    2664:	11 24       	eor	r1, r1
    2666:	30 19       	sub	r19, r0
    2668:	30 5d       	subi	r19, 0xD0	; 208
    266a:	31 93       	st	Z+, r19
    266c:	de f6       	brtc	.-74     	; 0x2624 <__ultoa_invert+0xe>
    266e:	cf 01       	movw	r24, r30
    2670:	08 95       	ret
    2672:	46 2f       	mov	r20, r22
    2674:	47 70       	andi	r20, 0x07	; 7
    2676:	40 5d       	subi	r20, 0xD0	; 208
    2678:	41 93       	st	Z+, r20
    267a:	b3 e0       	ldi	r27, 0x03	; 3
    267c:	0f d0       	rcall	.+30     	; 0x269c <__ultoa_invert+0x86>
    267e:	c9 f7       	brne	.-14     	; 0x2672 <__ultoa_invert+0x5c>
    2680:	f6 cf       	rjmp	.-20     	; 0x266e <__ultoa_invert+0x58>
    2682:	46 2f       	mov	r20, r22
    2684:	4f 70       	andi	r20, 0x0F	; 15
    2686:	40 5d       	subi	r20, 0xD0	; 208
    2688:	4a 33       	cpi	r20, 0x3A	; 58
    268a:	18 f0       	brcs	.+6      	; 0x2692 <__ultoa_invert+0x7c>
    268c:	49 5d       	subi	r20, 0xD9	; 217
    268e:	31 fd       	sbrc	r19, 1
    2690:	40 52       	subi	r20, 0x20	; 32
    2692:	41 93       	st	Z+, r20
    2694:	02 d0       	rcall	.+4      	; 0x269a <__ultoa_invert+0x84>
    2696:	a9 f7       	brne	.-22     	; 0x2682 <__ultoa_invert+0x6c>
    2698:	ea cf       	rjmp	.-44     	; 0x266e <__ultoa_invert+0x58>
    269a:	b4 e0       	ldi	r27, 0x04	; 4
    269c:	a6 95       	lsr	r26
    269e:	97 95       	ror	r25
    26a0:	87 95       	ror	r24
    26a2:	77 95       	ror	r23
    26a4:	67 95       	ror	r22
    26a6:	ba 95       	dec	r27
    26a8:	c9 f7       	brne	.-14     	; 0x269c <__ultoa_invert+0x86>
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	61 05       	cpc	r22, r1
    26ae:	71 05       	cpc	r23, r1
    26b0:	08 95       	ret
    26b2:	9b 01       	movw	r18, r22
    26b4:	ac 01       	movw	r20, r24
    26b6:	0a 2e       	mov	r0, r26
    26b8:	06 94       	lsr	r0
    26ba:	57 95       	ror	r21
    26bc:	47 95       	ror	r20
    26be:	37 95       	ror	r19
    26c0:	27 95       	ror	r18
    26c2:	ba 95       	dec	r27
    26c4:	c9 f7       	brne	.-14     	; 0x26b8 <__ultoa_invert+0xa2>
    26c6:	62 0f       	add	r22, r18
    26c8:	73 1f       	adc	r23, r19
    26ca:	84 1f       	adc	r24, r20
    26cc:	95 1f       	adc	r25, r21
    26ce:	a0 1d       	adc	r26, r0
    26d0:	08 95       	ret

000026d2 <__udivmodsi4>:
    26d2:	a1 e2       	ldi	r26, 0x21	; 33
    26d4:	1a 2e       	mov	r1, r26
    26d6:	aa 1b       	sub	r26, r26
    26d8:	bb 1b       	sub	r27, r27
    26da:	fd 01       	movw	r30, r26
    26dc:	0d c0       	rjmp	.+26     	; 0x26f8 <__udivmodsi4_ep>

000026de <__udivmodsi4_loop>:
    26de:	aa 1f       	adc	r26, r26
    26e0:	bb 1f       	adc	r27, r27
    26e2:	ee 1f       	adc	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	a2 17       	cp	r26, r18
    26e8:	b3 07       	cpc	r27, r19
    26ea:	e4 07       	cpc	r30, r20
    26ec:	f5 07       	cpc	r31, r21
    26ee:	20 f0       	brcs	.+8      	; 0x26f8 <__udivmodsi4_ep>
    26f0:	a2 1b       	sub	r26, r18
    26f2:	b3 0b       	sbc	r27, r19
    26f4:	e4 0b       	sbc	r30, r20
    26f6:	f5 0b       	sbc	r31, r21

000026f8 <__udivmodsi4_ep>:
    26f8:	66 1f       	adc	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	1a 94       	dec	r1
    2702:	69 f7       	brne	.-38     	; 0x26de <__udivmodsi4_loop>
    2704:	60 95       	com	r22
    2706:	70 95       	com	r23
    2708:	80 95       	com	r24
    270a:	90 95       	com	r25
    270c:	9b 01       	movw	r18, r22
    270e:	ac 01       	movw	r20, r24
    2710:	bd 01       	movw	r22, r26
    2712:	cf 01       	movw	r24, r30
    2714:	08 95       	ret

00002716 <__prologue_saves__>:
    2716:	2f 92       	push	r2
    2718:	3f 92       	push	r3
    271a:	4f 92       	push	r4
    271c:	5f 92       	push	r5
    271e:	6f 92       	push	r6
    2720:	7f 92       	push	r7
    2722:	8f 92       	push	r8
    2724:	9f 92       	push	r9
    2726:	af 92       	push	r10
    2728:	bf 92       	push	r11
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	ca 1b       	sub	r28, r26
    2740:	db 0b       	sbc	r29, r27
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	09 94       	ijmp

0000274e <__epilogue_restores__>:
    274e:	2a 88       	ldd	r2, Y+18	; 0x12
    2750:	39 88       	ldd	r3, Y+17	; 0x11
    2752:	48 88       	ldd	r4, Y+16	; 0x10
    2754:	5f 84       	ldd	r5, Y+15	; 0x0f
    2756:	6e 84       	ldd	r6, Y+14	; 0x0e
    2758:	7d 84       	ldd	r7, Y+13	; 0x0d
    275a:	8c 84       	ldd	r8, Y+12	; 0x0c
    275c:	9b 84       	ldd	r9, Y+11	; 0x0b
    275e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2760:	b9 84       	ldd	r11, Y+9	; 0x09
    2762:	c8 84       	ldd	r12, Y+8	; 0x08
    2764:	df 80       	ldd	r13, Y+7	; 0x07
    2766:	ee 80       	ldd	r14, Y+6	; 0x06
    2768:	fd 80       	ldd	r15, Y+5	; 0x05
    276a:	0c 81       	ldd	r16, Y+4	; 0x04
    276c:	1b 81       	ldd	r17, Y+3	; 0x03
    276e:	aa 81       	ldd	r26, Y+2	; 0x02
    2770:	b9 81       	ldd	r27, Y+1	; 0x01
    2772:	ce 0f       	add	r28, r30
    2774:	d1 1d       	adc	r29, r1
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	ed 01       	movw	r28, r26
    2782:	08 95       	ret

00002784 <_exit>:
    2784:	f8 94       	cli

00002786 <__stop_program>:
    2786:	ff cf       	rjmp	.-2      	; 0x2786 <__stop_program>
