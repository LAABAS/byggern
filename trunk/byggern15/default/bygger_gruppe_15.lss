
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  0000246c  00002500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800280  00800280  00002680  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000029d  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c38  00000000  00000000  000029fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  00003635  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e70  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00004abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e6       	ldi	r30, 0x6C	; 108
      84:	f4 e2       	ldi	r31, 0x24	; 36
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a0 38       	cpi	r26, 0x80	; 128
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a0 e8       	ldi	r26, 0x80	; 128
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	aa 38       	cpi	r26, 0x8A	; 138
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 34 12 	jmp	0x2468	; 0x2468 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 88 00 	call	0x110	; 0x110 <init_UART>
	init_SRAM();
      c2:	0e 94 3f 01 	call	0x27e	; 0x27e <init_SRAM>
	init_joystick();
      c6:	0e 94 35 02 	call	0x46a	; 0x46a <init_joystick>
	SPI_MasterInit();	
      ca:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_MasterInit>
	CAN_init();
      ce:	0e 94 24 03 	call	0x648	; 0x648 <CAN_init>
	printf("Initialization complete\n");
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <puts>


	printf("CAN_test: %d", CAN_test());
      da:	0e 94 37 03 	call	0x66e	; 0x66e <CAN_test>
      de:	9c 01       	movw	r18, r24
      e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x34>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x36>
      e4:	ed b7       	in	r30, 0x3d	; 61
      e6:	fe b7       	in	r31, 0x3e	; 62
      e8:	31 96       	adiw	r30, 0x01	; 1
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	91 83       	std	Z+1, r25	; 0x01
      f0:	80 83       	st	Z, r24
      f2:	33 83       	std	Z+3, r19	; 0x03
      f4:	22 83       	std	Z+2, r18	; 0x02
      f6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <printf>
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0

	
	
	

	butterfly_menu();
     102:	0e 94 9a 05 	call	0xb34	; 0xb34 <butterfly_menu>

	return 0;	
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
	
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <init_UART>:
unsigned char buffer_stop;
unsigned char buffer_used;
*/

// Initialize UART interface
int init_UART(unsigned int baud){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9f 83       	std	Y+7, r25	; 0x07
     126:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	9f 81       	ldd	r25, Y+7	; 0x07
     12c:	cc 01       	movw	r24, r24
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	8a 83       	std	Y+2, r24	; 0x02
     134:	9b 83       	std	Y+3, r25	; 0x03
     136:	ac 83       	std	Y+4, r26	; 0x04
     138:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	ac 81       	ldd	r26, Y+4	; 0x04
     140:	bd 81       	ldd	r27, Y+5	; 0x05
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	aa 1f       	adc	r26, r26
     148:	bb 1f       	adc	r27, r27
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	aa 1f       	adc	r26, r26
     158:	bb 1f       	adc	r27, r27
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	9c 01       	movw	r18, r24
     164:	ad 01       	movw	r20, r26
     166:	8a ef       	ldi	r24, 0xFA	; 250
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	ab e4       	ldi	r26, 0x4B	; 75
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__udivmodsi4>
     176:	da 01       	movw	r26, r20
     178:	c9 01       	movw	r24, r18
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	a1 09       	sbc	r26, r1
     17e:	b1 09       	sbc	r27, r1
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	ac 83       	std	Y+4, r26	; 0x04
     186:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     188:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	ac 81       	ldd	r26, Y+4	; 0x04
     194:	bd 81       	ldd	r27, Y+5	; 0x05
     196:	89 2f       	mov	r24, r25
     198:	9a 2f       	mov	r25, r26
     19a:	ab 2f       	mov	r26, r27
     19c:	bb 27       	eor	r27, r27
     19e:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     1a0:	e9 e2       	ldi	r30, 0x29	; 41
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     1a8:	ea e2       	ldi	r30, 0x2A	; 42
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stop bit, 1 for 2 stop bit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 number of databits in payload: 011 for 8 bits. S. 192 in data sheet */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	86 60       	ori	r24, 0x06	; 6
     1b4:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	80 62       	ori	r24, 0x20	; 32
     1ba:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     1c2:	e0 e4       	ldi	r30, 0x40	; 64
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     1ca:	87 ef       	ldi	r24, 0xF7	; 247
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	2e e1       	ldi	r18, 0x1E	; 30
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	b9 01       	movw	r22, r18
     1d4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <fdevopen>

	return 0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0

} 
     1dc:	27 96       	adiw	r28, 0x07	; 7
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_put_char>:

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_put_char+0x6>
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	7b 83       	std	Y+3, r23	; 0x03
     1fe:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	31 f4       	brne	.+12     	; 0x212 <UART_put_char+0x24>
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	3b 81       	ldd	r19, Y+3	; 0x03
     20a:	8d e0       	ldi	r24, 0x0D	; 13
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     212:	eb e2       	ldi	r30, 0x2B	; 43
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 72       	andi	r24, 0x20	; 32
     21e:	90 70       	andi	r25, 0x00	; 0
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	b9 f3       	breq	.-18     	; 0x212 <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     224:	ec e2       	ldi	r30, 0x2C	; 44
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	80 83       	st	Z, r24
	return 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
}
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <UART_get_char+0x6>
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     24c:	eb e2       	ldi	r30, 0x2B	; 43
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 23       	and	r24, r24
     254:	dc f7       	brge	.-10     	; 0x24c <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     256:	ec e2       	ldi	r30, 0x2C	; 44
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	8d 30       	cpi	r24, 0x0D	; 13
     262:	11 f4       	brne	.+4      	; 0x268 <UART_get_char+0x2c>
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     268:	ec e2       	ldi	r30, 0x2C	; 44
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <init_SRAM>:
#include <util/delay.h>
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     286:	a5 e5       	ldi	r26, 0x55	; 85
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e5       	ldi	r30, 0x55	; 85
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 6c       	ori	r24, 0xC0	; 192
     292:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     294:	a6 e5       	ldi	r26, 0x56	; 86
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     2a2:	a0 e5       	ldi	r26, 0x50	; 80
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 e5       	ldi	r30, 0x50	; 80
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	65 97       	sbiw	r28, 0x15	; 21
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e1       	ldi	r25, 0x10	; 16
     2ce:	9d 8b       	std	Y+21, r25	; 0x15
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
	printf("Starting...\n");
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <puts>

	int i;
	for(i=0;i<0x800;i++)
     2da:	1b 8a       	std	Y+19, r1	; 0x13
     2dc:	1a 8a       	std	Y+18, r1	; 0x12
     2de:	80 c0       	rjmp	.+256    	; 0x3e0 <SRAM_test+0x12a>
	{
		ram_address[i] = (char)0x83;
     2e0:	2a 89       	ldd	r18, Y+18	; 0x12
     2e2:	3b 89       	ldd	r19, Y+19	; 0x13
     2e4:	8c 89       	ldd	r24, Y+20	; 0x14
     2e6:	9d 89       	ldd	r25, Y+21	; 0x15
     2e8:	fc 01       	movw	r30, r24
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	83 e8       	ldi	r24, 0x83	; 131
     2f0:	80 83       	st	Z, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e4       	ldi	r27, 0x40	; 64
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
     2fc:	9c 87       	std	Y+12, r25	; 0x0c
     2fe:	ad 87       	std	Y+13, r26	; 0x0d
     300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     302:	6b 85       	ldd	r22, Y+11	; 0x0b
     304:	7c 85       	ldd	r23, Y+12	; 0x0c
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	9e 85       	ldd	r25, Y+14	; 0x0e
     30a:	2a e9       	ldi	r18, 0x9A	; 154
     30c:	3b e9       	ldi	r19, 0x9B	; 155
     30e:	49 e9       	ldi	r20, 0x99	; 153
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	8f 83       	std	Y+7, r24	; 0x07
     31c:	98 87       	std	Y+8, r25	; 0x08
     31e:	a9 87       	std	Y+9, r26	; 0x09
     320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     322:	6f 81       	ldd	r22, Y+7	; 0x07
     324:	78 85       	ldd	r23, Y+8	; 0x08
     326:	89 85       	ldd	r24, Y+9	; 0x09
     328:	9a 85       	ldd	r25, Y+10	; 0x0a
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 6f 0b 	call	0x16de	; 0x16de <__ltsf2>
     336:	88 23       	and	r24, r24
     338:	2c f4       	brge	.+10     	; 0x344 <SRAM_test+0x8e>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9e 83       	std	Y+6, r25	; 0x06
     340:	8d 83       	std	Y+5, r24	; 0x05
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <SRAM_test+0x10c>
	else if (__tmp > 65535)
     344:	6f 81       	ldd	r22, Y+7	; 0x07
     346:	78 85       	ldd	r23, Y+8	; 0x08
     348:	89 85       	ldd	r24, Y+9	; 0x09
     34a:	9a 85       	ldd	r25, Y+10	; 0x0a
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	57 e4       	ldi	r21, 0x47	; 71
     354:	0e 94 0f 0b 	call	0x161e	; 0x161e <__gtsf2>
     358:	18 16       	cp	r1, r24
     35a:	4c f5       	brge	.+82     	; 0x3ae <SRAM_test+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35c:	6b 85       	ldd	r22, Y+11	; 0x0b
     35e:	7c 85       	ldd	r23, Y+12	; 0x0c
     360:	8d 85       	ldd	r24, Y+13	; 0x0d
     362:	9e 85       	ldd	r25, Y+14	; 0x0e
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e2       	ldi	r20, 0x20	; 32
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 3f 08 	call	0x107e	; 0x107e <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	8d 83       	std	Y+5, r24	; 0x05
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <SRAM_test+0xee>
     386:	8a e7       	ldi	r24, 0x7A	; 122
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <SRAM_test+0xdc>
     396:	9c 83       	std	Y+4, r25	; 0x04
     398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	9e 83       	std	Y+6, r25	; 0x06
     3a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	69 f7       	brne	.-38     	; 0x386 <SRAM_test+0xd0>
     3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <SRAM_test+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ae:	6f 81       	ldd	r22, Y+7	; 0x07
     3b0:	78 85       	ldd	r23, Y+8	; 0x08
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	0e 94 3f 08 	call	0x107e	; 0x107e <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9e 83       	std	Y+6, r25	; 0x06
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <SRAM_test+0x118>
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	9b 89       	ldd	r25, Y+19	; 0x13
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9b 8b       	std	Y+19, r25	; 0x13
     3de:	8a 8b       	std	Y+18, r24	; 0x12
     3e0:	8a 89       	ldd	r24, Y+18	; 0x12
     3e2:	9b 89       	ldd	r25, Y+19	; 0x13
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	80 30       	cpi	r24, 0x00	; 0
     3e8:	92 07       	cpc	r25, r18
     3ea:	0c f4       	brge	.+2      	; 0x3ee <SRAM_test+0x138>
     3ec:	79 cf       	rjmp	.-270    	; 0x2e0 <SRAM_test+0x2a>
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     3ee:	1b 8a       	std	Y+19, r1	; 0x13
     3f0:	1a 8a       	std	Y+18, r1	; 0x12
     3f2:	30 c0       	rjmp	.+96     	; 0x454 <SRAM_test+0x19e>
	{
		char c = (char)ram_address[i];
     3f4:	2a 89       	ldd	r18, Y+18	; 0x12
     3f6:	3b 89       	ldd	r19, Y+19	; 0x13
     3f8:	8c 89       	ldd	r24, Y+20	; 0x14
     3fa:	9d 89       	ldd	r25, Y+21	; 0x15
     3fc:	fc 01       	movw	r30, r24
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	80 81       	ld	r24, Z
     404:	89 8b       	std	Y+17, r24	; 0x11
		int j = (int)c;
     406:	89 89       	ldd	r24, Y+17	; 0x11
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	8f 87       	std	Y+15, r24	; 0x0f
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     410:	2a 89       	ldd	r18, Y+18	; 0x12
     412:	3b 89       	ldd	r19, Y+19	; 0x13
     414:	8c 89       	ldd	r24, Y+20	; 0x14
     416:	9d 89       	ldd	r25, Y+21	; 0x15
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	80 81       	ld	r24, Z
     420:	83 38       	cpi	r24, 0x83	; 131
     422:	99 f0       	breq	.+38     	; 0x44a <SRAM_test+0x194>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     424:	00 d0       	rcall	.+0      	; 0x426 <SRAM_test+0x170>
     426:	00 d0       	rcall	.+0      	; 0x428 <SRAM_test+0x172>
     428:	ed b7       	in	r30, 0x3d	; 61
     42a:	fe b7       	in	r31, 0x3e	; 62
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	8a 89       	ldd	r24, Y+18	; 0x12
     438:	9b 89       	ldd	r25, Y+19	; 0x13
     43a:	93 83       	std	Z+3, r25	; 0x03
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <printf>
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	9b 89       	ldd	r25, Y+19	; 0x13
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	9b 8b       	std	Y+19, r25	; 0x13
     452:	8a 8b       	std	Y+18, r24	; 0x12
     454:	8a 89       	ldd	r24, Y+18	; 0x12
     456:	9b 89       	ldd	r25, Y+19	; 0x13
     458:	28 e0       	ldi	r18, 0x08	; 8
     45a:	80 30       	cpi	r24, 0x00	; 0
     45c:	92 07       	cpc	r25, r18
     45e:	54 f2       	brlt	.-108    	; 0x3f4 <SRAM_test+0x13e>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     460:	88 e4       	ldi	r24, 0x48	; 72
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <puts>
     468:	ff cf       	rjmp	.-2      	; 0x468 <SRAM_test+0x1b2>

0000046a <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	// set port B: in
	DDRB = 0x00; //inputs
     472:	e7 e3       	ldi	r30, 0x37	; 55
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull-ups
     478:	e8 e3       	ldi	r30, 0x38	; 56
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
}
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <read_axis+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <read_axis+0x8>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	98 e1       	ldi	r25, 0x18	; 24
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	88 37       	cpi	r24, 0x78	; 120
     4a0:	b1 f4       	brne	.+44     	; 0x4ce <read_axis+0x48>
		adc_address[0] = 0x04;
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4aa:	e6 e3       	ldi	r30, 0x36	; 54
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	81 70       	andi	r24, 0x01	; 1
     4b6:	90 70       	andi	r25, 0x00	; 0
     4b8:	88 23       	and	r24, r24
     4ba:	b9 f7       	brne	.-18     	; 0x4aa <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	80 81       	ld	r24, Z
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	1d c0       	rjmp	.+58     	; 0x508 <__stack+0x9>
	}
	else if(axis == 'y'){
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	89 37       	cpi	r24, 0x79	; 121
     4d2:	c1 f4       	brne	.+48     	; 0x504 <__stack+0x5>
		adc_address[0] = 0x06;
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4dc:	e6 e3       	ldi	r30, 0x36	; 54
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	81 70       	andi	r24, 0x01	; 1
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	88 23       	and	r24, r24
     4ec:	b9 f7       	brne	.-18     	; 0x4dc <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     4ee:	e9 81       	ldd	r30, Y+1	; 0x01
     4f0:	fa 81       	ldd	r31, Y+2	; 0x02
     4f2:	80 81       	ld	r24, Z
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 50       	subi	r24, 0x00	; 0
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
	}
	return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	8c 83       	std	Y+4, r24	; 0x04
     508:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <eeprom_read_byte+0x6>
     51e:	0f 92       	push	r0
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     528:	ec e3       	ldi	r30, 0x3C	; 60
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 70       	andi	r24, 0x02	; 2
     534:	90 70       	andi	r25, 0x00	; 0
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	b9 f7       	brne	.-18     	; 0x528 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     53a:	ee e3       	ldi	r30, 0x3E	; 62
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     546:	e0 9a       	sbi	0x1c, 0	; 28
     548:	8d b3       	in	r24, 0x1d	; 29
     54a:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <read_buttons>:


// Read joystick buttons (Can be optimised with interrupt)
inline uint8_t read_buttons(){
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     562:	e6 e3       	ldi	r30, 0x36	; 54
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	86 70       	andi	r24, 0x06	; 6
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	95 95       	asr	r25
     572:	87 95       	ror	r24
}
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <SPI_MasterInit>:
#include <avr/io.h>
#include "spi.h"

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     582:	a7 e3       	ldi	r26, 0x37	; 55
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e7 e3       	ldi	r30, 0x37	; 55
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	88 6b       	ori	r24, 0xB8	; 184
     590:	8c 93       	st	X, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     592:	ed e2       	ldi	r30, 0x2D	; 45
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	81 e5       	ldi	r24, 0x51	; 81
     598:	80 83       	st	Z, r24
	SPI_NoSlave();
     59a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     5b0:	ef e2       	ldi	r30, 0x2F	; 47
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     5b8:	ee e2       	ldi	r30, 0x2E	; 46
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	dc f7       	brge	.-10     	; 0x5b8 <SPI_MasterTransmit+0x14>
}
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <SPI_MasterReceive>:

// Recieve char over SPI
char SPI_MasterReceive(void)
{
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     5d8:	ee e2       	ldi	r30, 0x2E	; 46
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	dc f7       	brge	.-10     	; 0x5d8 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     5e2:	ef e2       	ldi	r30, 0x2F	; 47
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
}
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	0f 92       	push	r0
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	89 83       	std	Y+1, r24	; 0x01

	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	82 36       	cpi	r24, 0x62	; 98
     5fe:	41 f4       	brne	.+16     	; 0x610 <SPI_SelectSlave+0x22>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     600:	a8 e3       	ldi	r26, 0x38	; 56
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e3       	ldi	r30, 0x38	; 56
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	8c 93       	st	X, r24
     60e:	0a c0       	rjmp	.+20     	; 0x624 <SPI_SelectSlave+0x36>
	else if (slave == SPI_CAN)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	83 37       	cpi	r24, 0x73	; 115
     614:	39 f4       	brne	.+14     	; 0x624 <SPI_SelectSlave+0x36>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     616:	a8 e3       	ldi	r26, 0x38	; 56
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e3       	ldi	r30, 0x38	; 56
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8f 7e       	andi	r24, 0xEF	; 239
     622:	8c 93       	st	X, r24
}
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <SPI_NoSlave>:

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     634:	a8 e3       	ldi	r26, 0x38	; 56
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e8 e3       	ldi	r30, 0x38	; 56
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 61       	ori	r24, 0x18	; 24
     640:	8c 93       	st	X, r24
}
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <CAN_init>:
#include "spi.h"
#include "settings.h"
#include <util/delay.h>

//Initialize the CAN bus
void CAN_init(void){
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     650:	0e 94 15 04 	call	0x82a	; 0x82a <CAN_reset>

	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     654:	8f e0       	ldi	r24, 0x0F	; 15
     656:	60 ee       	ldi	r22, 0xE0	; 224
     658:	40 e4       	ldi	r20, 0x40	; 64
     65a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     65e:	80 e6       	ldi	r24, 0x60	; 96
     660:	60 e6       	ldi	r22, 0x60	; 96
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CAN_bit_modify>
		
}
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	2e 97       	sbiw	r28, 0x0e	; 14
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     682:	84 e5       	ldi	r24, 0x54	; 84
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <puts>
	
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     68a:	85 e6       	ldi	r24, 0x65	; 101
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	9f 83       	std	Y+7, r25	; 0x07
     690:	8e 83       	std	Y+6, r24	; 0x06

	int i;

	CAN_message message;
	message.id = 0;
     692:	19 86       	std	Y+9, r1	; 0x09
     694:	18 86       	std	Y+8, r1	; 0x08
	message.length = 8;
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	8a 87       	std	Y+10, r24	; 0x0a
	message.data = "hall";
     69a:	8e e6       	ldi	r24, 0x6E	; 110
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	9c 87       	std	Y+12, r25	; 0x0c
     6a0:	8b 87       	std	Y+11, r24	; 0x0b
	

	// Reset will move into configuration mode
	CAN_reset();
     6a2:	0e 94 15 04 	call	0x82a	; 0x82a <CAN_reset>
	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     6a6:	8f e0       	ldi	r24, 0x0F	; 15
     6a8:	60 ee       	ldi	r22, 0xE0	; 224
     6aa:	40 e4       	ldi	r20, 0x40	; 64
     6ac:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CAN_bit_modify>
	/*// Blanking out recieved buffer (really needed??)
	for (i = 0;(i < 9); i++)
		received[i] = '\0';	*/

	// Sending data in CAN bus
	printf("Sending string: %s", message.data);
     6b0:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b2:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <CAN_test+0x48>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <CAN_test+0x4a>
     6b8:	ed b7       	in	r30, 0x3d	; 61
     6ba:	fe b7       	in	r31, 0x3e	; 62
     6bc:	31 96       	adiw	r30, 0x01	; 1
     6be:	83 e7       	ldi	r24, 0x73	; 115
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	80 83       	st	Z, r24
     6c6:	33 83       	std	Z+3, r19	; 0x03
     6c8:	22 83       	std	Z+2, r18	; 0x02
     6ca:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <printf>
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
	if (CAN_send(&message) != 0){
     6d6:	ce 01       	movw	r24, r28
     6d8:	08 96       	adiw	r24, 0x08	; 8
     6da:	0e 94 99 03 	call	0x732	; 0x732 <CAN_send>
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	29 f0       	breq	.+10     	; 0x6ec <CAN_test+0x7e>
		return -1;
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	9e 87       	std	Y+14, r25	; 0x0e
     6e8:	8d 87       	std	Y+13, r24	; 0x0d
     6ea:	18 c0       	rjmp	.+48     	; 0x71c <CAN_test+0xae>
	}

	// Receiving data on CAN bus
	printf("Received: ");
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <CAN_test+0x80>
     6ee:	ed b7       	in	r30, 0x3d	; 61
     6f0:	fe b7       	in	r31, 0x3e	; 62
     6f2:	31 96       	adiw	r30, 0x01	; 1
     6f4:	86 e8       	ldi	r24, 0x86	; 134
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
     6fc:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <printf>
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
	CAN_receive(&received, 0); //rxbuffer 0
     704:	ce 01       	movw	r24, r28
     706:	03 96       	adiw	r24, 0x03	; 3
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <CAN_receive>
	//for (i = 0;(i < 9); i++)
	//	read[i] = received[i];
	
	printf("%s\n", received.data);
     710:	8e 81       	ldd	r24, Y+6	; 0x06
     712:	9f 81       	ldd	r25, Y+7	; 0x07
     714:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <puts>

	return 0;
     718:	1e 86       	std	Y+14, r1	; 0x0e
     71a:	1d 86       	std	Y+13, r1	; 0x0d
     71c:	8d 85       	ldd	r24, Y+13	; 0x0d
     71e:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     720:	2e 96       	adiw	r28, 0x0e	; 14
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	08 95       	ret

00000732 <CAN_send>:

// Send string using CAN bus
int CAN_send(CAN_message* msg){
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	00 d0       	rcall	.+0      	; 0x738 <CAN_send+0x6>
     738:	00 d0       	rcall	.+0      	; 0x73a <CAN_send+0x8>
     73a:	00 d0       	rcall	.+0      	; 0x73c <CAN_send+0xa>
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	9c 83       	std	Y+4, r25	; 0x04
     742:	8b 83       	std	Y+3, r24	; 0x03
	
	unsigned int i;
	CAN_bit_modify(TXB0SIDH, 0xFF, (msg->id<<13)); //transmit buffer 0 id high
     744:	81 e3       	ldi	r24, 0x31	; 49
     746:	6f ef       	ldi	r22, 0xFF	; 255
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (msg->id<<5));//transmit buffer 0 id low
     74e:	eb 81       	ldd	r30, Y+3	; 0x03
     750:	fc 81       	ldd	r31, Y+4	; 0x04
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	98 2f       	mov	r25, r24
     758:	92 95       	swap	r25
     75a:	99 0f       	add	r25, r25
     75c:	90 7e       	andi	r25, 0xE0	; 224
     75e:	82 e3       	ldi	r24, 0x32	; 50
     760:	60 ee       	ldi	r22, 0xE0	; 224
     762:	49 2f       	mov	r20, r25
     764:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CAN_bit_modify>
	CAN_write(msg->length, TXB0DLC, 1);	// data length
     768:	eb 81       	ldd	r30, Y+3	; 0x03
     76a:	fc 81       	ldd	r31, Y+4	; 0x04
     76c:	82 81       	ldd	r24, Z+2	; 0x02
     76e:	88 2f       	mov	r24, r24
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	65 e3       	ldi	r22, 0x35	; 53
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	0e 94 b0 04 	call	0x960	; 0x960 <CAN_write>
	CAN_load_tx(msg, 0); //load transmit buffer from channel 0
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	9c 81       	ldd	r25, Y+4	; 0x04
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <CAN_load_tx>
	CAN_rts(0); //request to send
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 39 05 	call	0xa72	; 0xa72 <CAN_rts>
	

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     78c:	1a 82       	std	Y+2, r1	; 0x02
     78e:	19 82       	std	Y+1, r1	; 0x01
     790:	0d c0       	rjmp	.+26     	; 0x7ac <CAN_send+0x7a>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     792:	0e 94 5d 05 	call	0xaba	; 0xaba <CAN_read_status>
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	84 70       	andi	r24, 0x04	; 4
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	59 f0       	breq	.+22     	; 0x7b8 <CAN_send+0x86>
	CAN_load_tx(msg, 0); //load transmit buffer from channel 0
	CAN_rts(0); //request to send
	

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	2f ef       	ldi	r18, 0xFF	; 255
     7b2:	8f 3f       	cpi	r24, 0xFF	; 255
     7b4:	92 07       	cpc	r25, r18
     7b6:	69 f7       	brne	.-38     	; 0x792 <CAN_send+0x60>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	if(i == 0xffff) return -1;
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	2f ef       	ldi	r18, 0xFF	; 255
     7be:	8f 3f       	cpi	r24, 0xFF	; 255
     7c0:	92 07       	cpc	r25, r18
     7c2:	29 f4       	brne	.+10     	; 0x7ce <CAN_send+0x9c>
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	9f ef       	ldi	r25, 0xFF	; 255
     7c8:	9e 83       	std	Y+6, r25	; 0x06
     7ca:	8d 83       	std	Y+5, r24	; 0x05
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <CAN_send+0xa0>
	return 0;
     7ce:	1e 82       	std	Y+6, r1	; 0x06
     7d0:	1d 82       	std	Y+5, r1	; 0x05
     7d2:	8d 81       	ldd	r24, Y+5	; 0x05
     7d4:	9e 81       	ldd	r25, Y+6	; 0x06
}
     7d6:	26 96       	adiw	r28, 0x06	; 6
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <CAN_receive+0x6>
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <CAN_receive+0x8>
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	7c 83       	std	Y+4, r23	; 0x04
     7fa:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF) == 0); // loop until data received
     7fc:	0e 94 5d 05 	call	0xaba	; 0xaba <CAN_read_status>
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	81 70       	andi	r24, 0x01	; 1
     806:	90 70       	andi	r25, 0x00	; 0
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	c1 f3       	breq	.-16     	; 0x7fc <CAN_receive+0x14>
	CAN_read_rx(msg, rx);
     80c:	2b 81       	ldd	r18, Y+3	; 0x03
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	62 2f       	mov	r22, r18
     814:	0e 94 65 04 	call	0x8ca	; 0x8ca <CAN_read_rx>
	
	return 0;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0

}
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	08 95       	ret

0000082a <CAN_reset>:

// Reset the CAN chip
void CAN_reset(void){
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
     832:	83 e7       	ldi	r24, 0x73	; 115
     834:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
     838:	80 ec       	ldi	r24, 0xC0	; 192
     83a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     83e:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     842:	cf 91       	pop	r28
     844:	df 91       	pop	r29
     846:	08 95       	ret

00000848 <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	27 97       	sbiw	r28, 0x07	; 7
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	8b 83       	std	Y+3, r24	; 0x03
     864:	6d 83       	std	Y+5, r22	; 0x05
     866:	5f 83       	std	Y+7, r21	; 0x07
     868:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     86a:	83 e7       	ldi	r24, 0x73	; 115
     86c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     876:	8d 81       	ldd	r24, Y+5	; 0x05
     878:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     87c:	1a 82       	std	Y+2, r1	; 0x02
     87e:	19 82       	std	Y+1, r1	; 0x01
     880:	10 c0       	rjmp	.+32     	; 0x8a2 <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
     882:	29 81       	ldd	r18, Y+1	; 0x01
     884:	3a 81       	ldd	r19, Y+2	; 0x02
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	8c 01       	movw	r16, r24
     88c:	02 0f       	add	r16, r18
     88e:	13 1f       	adc	r17, r19
     890:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     894:	f8 01       	movw	r30, r16
     896:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	29 81       	ldd	r18, Y+1	; 0x01
     8a4:	3a 81       	ldd	r19, Y+2	; 0x02
     8a6:	8e 81       	ldd	r24, Y+6	; 0x06
     8a8:	9f 81       	ldd	r25, Y+7	; 0x07
     8aa:	28 17       	cp	r18, r24
     8ac:	39 07       	cpc	r19, r25
     8ae:	4c f3       	brlt	.-46     	; 0x882 <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
     8b0:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
     8b4:	27 96       	adiw	r28, 0x07	; 7
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	08 95       	ret

000008ca <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <CAN_read_rx+0xa>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <CAN_read_rx+0xc>
     8d6:	0f 92       	push	r0
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	8b 83       	std	Y+3, r24	; 0x03
     8e0:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
     8e2:	8d 81       	ldd	r24, Y+5	; 0x05
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	90 f5       	brcc	.+100    	; 0x94c <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
     8e8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ea:	88 23       	and	r24, r24
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <CAN_read_rx+0x2a>
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	8d 83       	std	Y+5, r24	; 0x05
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
     8f4:	8d 81       	ldd	r24, Y+5	; 0x05
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	11 f4       	brne	.+4      	; 0x8fe <CAN_read_rx+0x34>
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
     8fe:	83 e7       	ldi	r24, 0x73	; 115
     900:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
     904:	8d 81       	ldd	r24, Y+5	; 0x05
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	80 69       	ori	r24, 0x90	; 144
     910:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
     914:	1a 82       	std	Y+2, r1	; 0x02
     916:	19 82       	std	Y+1, r1	; 0x01
     918:	12 c0       	rjmp	.+36     	; 0x93e <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	23 81       	ldd	r18, Z+3	; 0x03
     920:	34 81       	ldd	r19, Z+4	; 0x04
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	89 01       	movw	r16, r18
     928:	08 0f       	add	r16, r24
     92a:	19 1f       	adc	r17, r25
     92c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     930:	f8 01       	movw	r30, r16
     932:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	9a 83       	std	Y+2, r25	; 0x02
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	9a 81       	ldd	r25, Y+2	; 0x02
     942:	88 30       	cpi	r24, 0x08	; 8
     944:	91 05       	cpc	r25, r1
     946:	4c f3       	brlt	.-46     	; 0x91a <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
     948:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <CAN_write>:

void CAN_write(char* data, uint8_t address, int data_count){
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	27 97       	sbiw	r28, 0x07	; 7
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	9c 83       	std	Y+4, r25	; 0x04
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	6d 83       	std	Y+5, r22	; 0x05
     97a:	5f 83       	std	Y+7, r21	; 0x07
     97c:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     97e:	83 e7       	ldi	r24, 0x73	; 115
     980:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     990:	1a 82       	std	Y+2, r1	; 0x02
     992:	19 82       	std	Y+1, r1	; 0x01
     994:	0f c0       	rjmp	.+30     	; 0x9b4 <CAN_write+0x54>
		SPI_MasterTransmit(data[i]);
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	3a 81       	ldd	r19, Y+2	; 0x02
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	fc 01       	movw	r30, r24
     9a0:	e2 0f       	add	r30, r18
     9a2:	f3 1f       	adc	r31, r19
     9a4:	80 81       	ld	r24, Z
     9a6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_WRITE);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	9a 83       	std	Y+2, r25	; 0x02
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	29 81       	ldd	r18, Y+1	; 0x01
     9b6:	3a 81       	ldd	r19, Y+2	; 0x02
     9b8:	8e 81       	ldd	r24, Y+6	; 0x06
     9ba:	9f 81       	ldd	r25, Y+7	; 0x07
     9bc:	28 17       	cp	r18, r24
     9be:	39 07       	cpc	r19, r25
     9c0:	54 f3       	brlt	.-44     	; 0x996 <CAN_write+0x36>
		SPI_MasterTransmit(data[i]);
	}

	SPI_NoSlave();
     9c2:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
     9c6:	27 96       	adiw	r28, 0x07	; 7
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(CAN_message* msg, uint8_t tx){
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	00 d0       	rcall	.+0      	; 0x9de <CAN_load_tx+0x6>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <CAN_load_tx+0x8>
     9e0:	0f 92       	push	r0
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2 || msg->length > 8)
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	c0 f5       	brcc	.+112    	; 0xa62 <CAN_load_tx+0x8a>
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	82 81       	ldd	r24, Z+2	; 0x02
     9f8:	89 30       	cpi	r24, 0x09	; 9
     9fa:	98 f5       	brcc	.+102    	; 0xa62 <CAN_load_tx+0x8a>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
     a0c:	83 e7       	ldi	r24, 0x73	; 115
     a0e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	80 64       	ori	r24, 0x40	; 64
     a16:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < msg->length; i++){
     a1a:	1a 82       	std	Y+2, r1	; 0x02
     a1c:	19 82       	std	Y+1, r1	; 0x01
     a1e:	11 c0       	rjmp	.+34     	; 0xa42 <CAN_load_tx+0x6a>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg->data[i]);
     a20:	eb 81       	ldd	r30, Y+3	; 0x03
     a22:	fc 81       	ldd	r31, Y+4	; 0x04
     a24:	23 81       	ldd	r18, Z+3	; 0x03
     a26:	34 81       	ldd	r19, Z+4	; 0x04
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	f9 01       	movw	r30, r18
     a2e:	e8 0f       	add	r30, r24
     a30:	f9 1f       	adc	r31, r25
     a32:	80 81       	ld	r24, Z
     a34:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < msg->length; i++){
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	9a 83       	std	Y+2, r25	; 0x02
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	eb 81       	ldd	r30, Y+3	; 0x03
     a44:	fc 81       	ldd	r31, Y+4	; 0x04
     a46:	82 81       	ldd	r24, Z+2	; 0x02
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	82 17       	cp	r24, r18
     a52:	93 07       	cpc	r25, r19
     a54:	2c f3       	brlt	.-54     	; 0xa20 <CAN_load_tx+0x48>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg->data[i]);
	}

	SPI_NoSlave();
     a56:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	printf("\n");
     a5a:	8a e0       	ldi	r24, 0x0A	; 10
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <putchar>
}
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <CAN_rts>:

void CAN_rts(uint8_t tx){
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	0f 92       	push	r0
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	88 23       	and	r24, r24
     a82:	19 f4       	brne	.+6      	; 0xa8a <CAN_rts+0x18>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	0b c0       	rjmp	.+22     	; 0xaa0 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <CAN_rts+0x24>
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	59 f4       	brne	.+22     	; 0xab2 <CAN_rts+0x40>
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
     aa0:	83 e7       	ldi	r24, 0x73	; 115
     aa2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	80 68       	ori	r24, 0x80	; 128
     aaa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
     aae:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     ab2:	0f 90       	pop	r0
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <CAN_read_status>:

uint8_t CAN_read_status(void){
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	0f 92       	push	r0
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
     ac4:	83 e7       	ldi	r24, 0x73	; 115
     ac6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
     aca:	80 ea       	ldi	r24, 0xA0	; 160
     acc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     ad0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     ad4:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     ad6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	
	return (uint8_t) status;
     ada:	89 81       	ldd	r24, Y+1	; 0x01

}
     adc:	0f 90       	pop	r0
     ade:	cf 91       	pop	r28
     ae0:	df 91       	pop	r29
     ae2:	08 95       	ret

00000ae4 <CAN_rx_status>:

uint8_t CAN_rx_status(void){
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
return 0;
     aec:	80 e0       	ldi	r24, 0x00	; 0

}
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	08 95       	ret

00000af4 <CAN_bit_modify>:
void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	00 d0       	rcall	.+0      	; 0xafa <CAN_bit_modify+0x6>
     afa:	0f 92       	push	r0
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	6a 83       	std	Y+2, r22	; 0x02
     b04:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
     b06:	83 e7       	ldi	r24, 0x73	; 115
     b08:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
     b24:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	08 95       	ret

00000b34 <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	27 97       	sbiw	r28, 0x07	; 7
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     b4c:	80 e3       	ldi	r24, 0x30	; 48
     b4e:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     b50:	81 e9       	ldi	r24, 0x91	; 145
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>

	while(1){
		last_button = button;
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     b5c:	0e 94 f4 06 	call	0xde8	; 0xde8 <butterfly_poll_joystick>
     b60:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	98 17       	cp	r25, r24
     b68:	b9 f3       	breq	.-18     	; 0xb58 <butterfly_menu+0x24>
			printf("state for: %d\n", menu_state);
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	28 2f       	mov	r18, r24
     b6e:	33 27       	eor	r19, r19
     b70:	27 fd       	sbrc	r18, 7
     b72:	30 95       	com	r19
     b74:	00 d0       	rcall	.+0      	; 0xb76 <butterfly_menu+0x42>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <butterfly_menu+0x44>
     b78:	ed b7       	in	r30, 0x3d	; 61
     b7a:	fe b7       	in	r31, 0x3e	; 62
     b7c:	31 96       	adiw	r30, 0x01	; 1
     b7e:	8b e9       	ldi	r24, 0x9B	; 155
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	80 83       	st	Z, r24
     b86:	33 83       	std	Z+3, r19	; 0x03
     b88:	22 83       	std	Z+2, r18	; 0x02
     b8a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <printf>
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
			switch(button) {
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3f 83       	std	Y+7, r19	; 0x07
     b9e:	2e 83       	std	Y+6, r18	; 0x06
     ba0:	8e 81       	ldd	r24, Y+6	; 0x06
     ba2:	9f 81       	ldd	r25, Y+7	; 0x07
     ba4:	85 36       	cpi	r24, 0x65	; 101
     ba6:	91 05       	cpc	r25, r1
     ba8:	49 f1       	breq	.+82     	; 0xbfc <butterfly_menu+0xc8>
     baa:	2e 81       	ldd	r18, Y+6	; 0x06
     bac:	3f 81       	ldd	r19, Y+7	; 0x07
     bae:	26 36       	cpi	r18, 0x66	; 102
     bb0:	31 05       	cpc	r19, r1
     bb2:	5c f4       	brge	.+22     	; 0xbca <butterfly_menu+0x96>
     bb4:	8e 81       	ldd	r24, Y+6	; 0x06
     bb6:	9f 81       	ldd	r25, Y+7	; 0x07
     bb8:	80 33       	cpi	r24, 0x30	; 48
     bba:	91 05       	cpc	r25, r1
     bbc:	69 f2       	breq	.-102    	; 0xb58 <butterfly_menu+0x24>
     bbe:	2e 81       	ldd	r18, Y+6	; 0x06
     bc0:	3f 81       	ldd	r19, Y+7	; 0x07
     bc2:	24 36       	cpi	r18, 0x64	; 100
     bc4:	31 05       	cpc	r19, r1
     bc6:	b1 f0       	breq	.+44     	; 0xbf4 <butterfly_menu+0xc0>
     bc8:	20 c0       	rjmp	.+64     	; 0xc0a <butterfly_menu+0xd6>
     bca:	8e 81       	ldd	r24, Y+6	; 0x06
     bcc:	9f 81       	ldd	r25, Y+7	; 0x07
     bce:	82 37       	cpi	r24, 0x72	; 114
     bd0:	91 05       	cpc	r25, r1
     bd2:	11 f2       	breq	.-124    	; 0xb58 <butterfly_menu+0x24>
     bd4:	2e 81       	ldd	r18, Y+6	; 0x06
     bd6:	3f 81       	ldd	r19, Y+7	; 0x07
     bd8:	25 37       	cpi	r18, 0x75	; 117
     bda:	31 05       	cpc	r19, r1
     bdc:	39 f0       	breq	.+14     	; 0xbec <butterfly_menu+0xb8>
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	9f 81       	ldd	r25, Y+7	; 0x07
     be2:	8c 36       	cpi	r24, 0x6C	; 108
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <butterfly_menu+0xb6>
     be8:	b7 cf       	rjmp	.-146    	; 0xb58 <butterfly_menu+0x24>
     bea:	0f c0       	rjmp	.+30     	; 0xc0a <butterfly_menu+0xd6>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	81 50       	subi	r24, 0x01	; 1
     bf0:	8b 83       	std	Y+3, r24	; 0x03
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <butterfly_menu+0xde>
				case 'd': menu_state++;				break;
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	0b c0       	rjmp	.+22     	; 0xc12 <butterfly_menu+0xde>
				case 'e': start_game(menu_state);	break;
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	99 27       	eor	r25, r25
     c00:	87 fd       	sbrc	r24, 7
     c02:	90 95       	com	r25
     c04:	0e 94 85 07 	call	0xf0a	; 0xf0a <start_game>
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <butterfly_menu+0xde>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     c0a:	8a ea       	ldi	r24, 0xAA	; 170
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	33 27       	eor	r19, r19
     c18:	27 fd       	sbrc	r18, 7
     c1a:	30 95       	com	r19
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <butterfly_menu+0xea>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <butterfly_menu+0xec>
     c20:	ed b7       	in	r30, 0x3d	; 61
     c22:	fe b7       	in	r31, 0x3e	; 62
     c24:	31 96       	adiw	r30, 0x01	; 1
     c26:	80 eb       	ldi	r24, 0xB0	; 176
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
     c2e:	33 83       	std	Z+3, r19	; 0x03
     c30:	22 83       	std	Z+2, r18	; 0x02
     c32:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <printf>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	88 23       	and	r24, r24
     c42:	14 f4       	brge	.+4      	; 0xc48 <butterfly_menu+0x114>
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	0c f0       	brlt	.+2      	; 0xc50 <butterfly_menu+0x11c>
     c4e:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	28 2f       	mov	r18, r24
     c54:	33 27       	eor	r19, r19
     c56:	27 fd       	sbrc	r18, 7
     c58:	30 95       	com	r19
     c5a:	3d 83       	std	Y+5, r19	; 0x05
     c5c:	2c 83       	std	Y+4, r18	; 0x04
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	91 05       	cpc	r25, r1
     c66:	d1 f0       	breq	.+52     	; 0xc9c <butterfly_menu+0x168>
     c68:	2c 81       	ldd	r18, Y+4	; 0x04
     c6a:	3d 81       	ldd	r19, Y+5	; 0x05
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f4       	brge	.+10     	; 0xc7c <butterfly_menu+0x148>
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	61 f0       	breq	.+24     	; 0xc92 <butterfly_menu+0x15e>
     c7a:	1f c0       	rjmp	.+62     	; 0xcba <butterfly_menu+0x186>
     c7c:	2c 81       	ldd	r18, Y+4	; 0x04
     c7e:	3d 81       	ldd	r19, Y+5	; 0x05
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	81 f0       	breq	.+32     	; 0xca6 <butterfly_menu+0x172>
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	91 05       	cpc	r25, r1
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <butterfly_menu+0x17c>
     c90:	14 c0       	rjmp	.+40     	; 0xcba <butterfly_menu+0x186>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     c92:	81 ec       	ldi	r24, 0xC1	; 193
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     c9a:	5e cf       	rjmp	.-324    	; 0xb58 <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     c9c:	89 ed       	ldi	r24, 0xD9	; 217
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     ca4:	59 cf       	rjmp	.-334    	; 0xb58 <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     ca6:	80 ef       	ldi	r24, 0xF0	; 240
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     cae:	54 cf       	rjmp	.-344    	; 0xb58 <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     cb8:	4f cf       	rjmp	.-354    	; 0xb58 <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     cba:	1b 82       	std	Y+3, r1	; 0x03
     cbc:	4d cf       	rjmp	.-358    	; 0xb58 <butterfly_menu+0x24>

00000cbe <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <butterfly_joystick_test+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <butterfly_joystick_test+0x8>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     cca:	80 e3       	ldi	r24, 0x30	; 48
     ccc:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     cd2:	0e 94 f4 06 	call	0xde8	; 0xde8 <butterfly_poll_joystick>
     cd6:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	98 17       	cp	r25, r24
     cde:	b9 f3       	breq	.-18     	; 0xcce <butterfly_joystick_test+0x10>
			switch(button) {
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3c 83       	std	Y+4, r19	; 0x04
     ce8:	2b 83       	std	Y+3, r18	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	85 36       	cpi	r24, 0x65	; 101
     cf0:	91 05       	cpc	r25, r1
     cf2:	99 f1       	breq	.+102    	; 0xd5a <butterfly_joystick_test+0x9c>
     cf4:	2b 81       	ldd	r18, Y+3	; 0x03
     cf6:	3c 81       	ldd	r19, Y+4	; 0x04
     cf8:	26 36       	cpi	r18, 0x66	; 102
     cfa:	31 05       	cpc	r19, r1
     cfc:	5c f4       	brge	.+22     	; 0xd14 <butterfly_joystick_test+0x56>
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	80 33       	cpi	r24, 0x30	; 48
     d04:	91 05       	cpc	r25, r1
     d06:	71 f1       	breq	.+92     	; 0xd64 <butterfly_joystick_test+0xa6>
     d08:	2b 81       	ldd	r18, Y+3	; 0x03
     d0a:	3c 81       	ldd	r19, Y+4	; 0x04
     d0c:	24 36       	cpi	r18, 0x64	; 100
     d0e:	31 05       	cpc	r19, r1
     d10:	f9 f0       	breq	.+62     	; 0xd50 <butterfly_joystick_test+0x92>
     d12:	2d c0       	rjmp	.+90     	; 0xd6e <butterfly_joystick_test+0xb0>
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	82 37       	cpi	r24, 0x72	; 114
     d1a:	91 05       	cpc	r25, r1
     d1c:	79 f0       	breq	.+30     	; 0xd3c <butterfly_joystick_test+0x7e>
     d1e:	2b 81       	ldd	r18, Y+3	; 0x03
     d20:	3c 81       	ldd	r19, Y+4	; 0x04
     d22:	25 37       	cpi	r18, 0x75	; 117
     d24:	31 05       	cpc	r19, r1
     d26:	79 f0       	breq	.+30     	; 0xd46 <butterfly_joystick_test+0x88>
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	8c 36       	cpi	r24, 0x6C	; 108
     d2e:	91 05       	cpc	r25, r1
     d30:	f1 f4       	brne	.+60     	; 0xd6e <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
     d32:	89 e1       	ldi	r24, 0x19	; 25
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d3a:	c9 cf       	rjmp	.-110    	; 0xcce <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
     d3c:	8e e1       	ldi	r24, 0x1E	; 30
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d44:	c4 cf       	rjmp	.-120    	; 0xcce <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
     d46:	84 e2       	ldi	r24, 0x24	; 36
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d4e:	bf cf       	rjmp	.-130    	; 0xcce <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
     d50:	87 e2       	ldi	r24, 0x27	; 39
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d58:	ba cf       	rjmp	.-140    	; 0xcce <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
     d5a:	8c e2       	ldi	r24, 0x2C	; 44
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d62:	b5 cf       	rjmp	.-150    	; 0xcce <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
     d64:	82 e3       	ldi	r24, 0x32	; 50
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d6c:	b0 cf       	rjmp	.-160    	; 0xcce <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
     d6e:	8a ea       	ldi	r24, 0xAA	; 170
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     d76:	ab cf       	rjmp	.-170    	; 0xcce <butterfly_joystick_test+0x10>

00000d78 <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <butterfly_print+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <butterfly_print+0x8>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	SPI_SelectSlave(SPI_BUTTERFLY);
     d88:	82 e6       	ldi	r24, 0x62	; 98
     d8a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     d8e:	1a 82       	std	Y+2, r1	; 0x02
     d90:	19 82       	std	Y+1, r1	; 0x01
     d92:	19 c0       	rjmp	.+50     	; 0xdc6 <butterfly_print+0x4e>
		if (str[i] == '\0') break;
     d94:	29 81       	ldd	r18, Y+1	; 0x01
     d96:	3a 81       	ldd	r19, Y+2	; 0x02
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	fc 01       	movw	r30, r24
     d9e:	e2 0f       	add	r30, r18
     da0:	f3 1f       	adc	r31, r19
     da2:	80 81       	ld	r24, Z
     da4:	88 23       	and	r24, r24
     da6:	a1 f0       	breq	.+40     	; 0xdd0 <butterfly_print+0x58>
		SPI_MasterTransmit(str[i]);
     da8:	29 81       	ldd	r18, Y+1	; 0x01
     daa:	3a 81       	ldd	r19, Y+2	; 0x02
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	fc 01       	movw	r30, r24
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 81       	ld	r24, Z
     db8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
}

void butterfly_print(char * str){
	int i;
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	88 31       	cpi	r24, 0x18	; 24
     dcc:	91 05       	cpc	r25, r1
     dce:	14 f3       	brlt	.-60     	; 0xd94 <butterfly_print+0x1c>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     dd6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2f 97       	sbiw	r28, 0x0f	; 15
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
	char button;	
	SPI_SelectSlave(SPI_BUTTERFLY);
     dfc:	82 e6       	ldi	r24, 0x62	; 98
     dfe:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     e02:	8e e2       	ldi	r24, 0x2E	; 46
     e04:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e2       	ldi	r26, 0x20	; 32
     e0e:	b1 e4       	ldi	r27, 0x41	; 65
     e10:	8b 87       	std	Y+11, r24	; 0x0b
     e12:	9c 87       	std	Y+12, r25	; 0x0c
     e14:	ad 87       	std	Y+13, r26	; 0x0d
     e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e18:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	2a e9       	ldi	r18, 0x9A	; 154
     e22:	3b e9       	ldi	r19, 0x9B	; 155
     e24:	49 e9       	ldi	r20, 0x99	; 153
     e26:	54 e4       	ldi	r21, 0x44	; 68
     e28:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	8f 83       	std	Y+7, r24	; 0x07
     e32:	98 87       	std	Y+8, r25	; 0x08
     e34:	a9 87       	std	Y+9, r26	; 0x09
     e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e38:	6f 81       	ldd	r22, Y+7	; 0x07
     e3a:	78 85       	ldd	r23, Y+8	; 0x08
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	0e 94 6f 0b 	call	0x16de	; 0x16de <__ltsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	2c f4       	brge	.+10     	; 0xe5a <butterfly_poll_joystick+0x72>
		__ticks = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	3f c0       	rjmp	.+126    	; 0xed8 <butterfly_poll_joystick+0xf0>
	else if (__tmp > 65535)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 0f 0b 	call	0x161e	; 0x161e <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	4c f5       	brge	.+82     	; 0xec4 <butterfly_poll_joystick+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	51 e4       	ldi	r21, 0x41	; 65
     e82:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 3f 08 	call	0x107e	; 0x107e <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <butterfly_poll_joystick+0xd2>
     e9c:	8a e7       	ldi	r24, 0x7A	; 122
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <butterfly_poll_joystick+0xc0>
     eac:	9c 83       	std	Y+4, r25	; 0x04
     eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	69 f7       	brne	.-38     	; 0xe9c <butterfly_poll_joystick+0xb4>
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <butterfly_poll_joystick+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec4:	6f 81       	ldd	r22, Y+7	; 0x07
     ec6:	78 85       	ldd	r23, Y+8	; 0x08
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	0e 94 3f 08 	call	0x107e	; 0x107e <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <butterfly_poll_joystick+0xfc>
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
     eec:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     ef0:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
     ef2:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	return button;
     ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     ef8:	2f 96       	adiw	r28, 0x0f	; 15
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <start_game>:

void start_game(enum menu_state_enum menu_state){
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	61 97       	sbiw	r28, 0x11	; 17
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
     f20:	8f 85       	ldd	r24, Y+15	; 0x0f
     f22:	28 2f       	mov	r18, r24
     f24:	33 27       	eor	r19, r19
     f26:	27 fd       	sbrc	r18, 7
     f28:	30 95       	com	r19
     f2a:	39 8b       	std	Y+17, r19	; 0x11
     f2c:	28 8b       	std	Y+16, r18	; 0x10
     f2e:	88 89       	ldd	r24, Y+16	; 0x10
     f30:	99 89       	ldd	r25, Y+17	; 0x11
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	d1 f0       	breq	.+52     	; 0xf6c <start_game+0x62>
     f38:	28 89       	ldd	r18, Y+16	; 0x10
     f3a:	39 89       	ldd	r19, Y+17	; 0x11
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <start_game+0x42>
     f42:	88 89       	ldd	r24, Y+16	; 0x10
     f44:	99 89       	ldd	r25, Y+17	; 0x11
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	61 f0       	breq	.+24     	; 0xf62 <start_game+0x58>
     f4a:	90 c0       	rjmp	.+288    	; 0x106c <start_game+0x162>
     f4c:	28 89       	ldd	r18, Y+16	; 0x10
     f4e:	39 89       	ldd	r19, Y+17	; 0x11
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	81 f0       	breq	.+32     	; 0xf76 <start_game+0x6c>
     f56:	88 89       	ldd	r24, Y+16	; 0x10
     f58:	99 89       	ldd	r25, Y+17	; 0x11
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	81 f0       	breq	.+32     	; 0xf80 <start_game+0x76>
     f60:	85 c0       	rjmp	.+266    	; 0x106c <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
     f62:	89 e3       	ldi	r24, 0x39	; 57
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     f6a:	0e c0       	rjmp	.+28     	; 0xf88 <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
     f6c:	89 e4       	ldi	r24, 0x49	; 73
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
     f76:	88 e5       	ldi	r24, 0x58	; 88
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
     f80:	85 e6       	ldi	r24, 0x65	; 101
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 bc 06 	call	0xd78	; 0xd78 <butterfly_print>
			break;
		default:			
			return;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	aa ef       	ldi	r26, 0xFA	; 250
     f8e:	b4 e4       	ldi	r27, 0x44	; 68
     f90:	8b 87       	std	Y+11, r24	; 0x0b
     f92:	9c 87       	std	Y+12, r25	; 0x0c
     f94:	ad 87       	std	Y+13, r26	; 0x0d
     f96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa0:	2a e9       	ldi	r18, 0x9A	; 154
     fa2:	3b e9       	ldi	r19, 0x9B	; 155
     fa4:	49 e9       	ldi	r20, 0x99	; 153
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8f 83       	std	Y+7, r24	; 0x07
     fb2:	98 87       	std	Y+8, r25	; 0x08
     fb4:	a9 87       	std	Y+9, r26	; 0x09
     fb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb8:	6f 81       	ldd	r22, Y+7	; 0x07
     fba:	78 85       	ldd	r23, Y+8	; 0x08
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 6f 0b 	call	0x16de	; 0x16de <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <start_game+0xd0>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <start_game+0x14e>
	else if (__tmp > 65535)
     fda:	6f 81       	ldd	r22, Y+7	; 0x07
     fdc:	78 85       	ldd	r23, Y+8	; 0x08
     fde:	89 85       	ldd	r24, Y+9	; 0x09
     fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 0f 0b 	call	0x161e	; 0x161e <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 3f 08 	call	0x107e	; 0x107e <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	8d 83       	std	Y+5, r24	; 0x05
    101a:	0f c0       	rjmp	.+30     	; 0x103a <start_game+0x130>
    101c:	8a e7       	ldi	r24, 0x7A	; 122
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9c 83       	std	Y+4, r25	; 0x04
    1022:	8b 83       	std	Y+3, r24	; 0x03
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <start_game+0x11e>
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9e 83       	std	Y+6, r25	; 0x06
    1038:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <start_game+0x112>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6f 81       	ldd	r22, Y+7	; 0x07
    1046:	78 85       	ldd	r23, Y+8	; 0x08
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	9a 85       	ldd	r25, Y+10	; 0x0a
    104c:	0e 94 3f 08 	call	0x107e	; 0x107e <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <start_game+0x15a>
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
    106c:	61 96       	adiw	r28, 0x11	; 17
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <__fixunssfsi>:
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	5f e4       	ldi	r21, 0x4F	; 79
    1092:	0e 94 3f 0b 	call	0x167e	; 0x167e <__gesf2>
    1096:	88 23       	and	r24, r24
    1098:	8c f0       	brlt	.+34     	; 0x10bc <__fixunssfsi+0x3e>
    109a:	c8 01       	movw	r24, r16
    109c:	b7 01       	movw	r22, r14
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	5f e4       	ldi	r21, 0x4F	; 79
    10a6:	0e 94 b7 09 	call	0x136e	; 0x136e <__subsf3>
    10aa:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	20 50       	subi	r18, 0x00	; 0
    10b4:	30 40       	sbci	r19, 0x00	; 0
    10b6:	40 40       	sbci	r20, 0x00	; 0
    10b8:	50 48       	sbci	r21, 0x80	; 128
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <__fixunssfsi+0x4a>
    10bc:	c8 01       	movw	r24, r16
    10be:	b7 01       	movw	r22, r14
    10c0:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fixsfsi>
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	b9 01       	movw	r22, r18
    10ca:	ca 01       	movw	r24, r20
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	08 95       	ret

000010d6 <_fpadd_parts>:
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e1 e7       	ldi	r30, 0x71	; 113
    10dc:	f8 e0       	ldi	r31, 0x08	; 8
    10de:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__>
    10e2:	dc 01       	movw	r26, r24
    10e4:	2b 01       	movw	r4, r22
    10e6:	fa 01       	movw	r30, r20
    10e8:	9c 91       	ld	r25, X
    10ea:	92 30       	cpi	r25, 0x02	; 2
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <_fpadd_parts+0x1a>
    10ee:	39 c1       	rjmp	.+626    	; 0x1362 <_fpadd_parts+0x28c>
    10f0:	eb 01       	movw	r28, r22
    10f2:	88 81       	ld	r24, Y
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <_fpadd_parts+0x24>
    10f8:	33 c1       	rjmp	.+614    	; 0x1360 <_fpadd_parts+0x28a>
    10fa:	94 30       	cpi	r25, 0x04	; 4
    10fc:	69 f4       	brne	.+26     	; 0x1118 <_fpadd_parts+0x42>
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	09 f0       	breq	.+2      	; 0x1104 <_fpadd_parts+0x2e>
    1102:	2f c1       	rjmp	.+606    	; 0x1362 <_fpadd_parts+0x28c>
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	9c 91       	ld	r25, X
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	98 17       	cp	r25, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <_fpadd_parts+0x3c>
    1110:	28 c1       	rjmp	.+592    	; 0x1362 <_fpadd_parts+0x28c>
    1112:	a1 e7       	ldi	r26, 0x71	; 113
    1114:	b2 e0       	ldi	r27, 0x02	; 2
    1116:	25 c1       	rjmp	.+586    	; 0x1362 <_fpadd_parts+0x28c>
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	09 f4       	brne	.+2      	; 0x111e <_fpadd_parts+0x48>
    111c:	21 c1       	rjmp	.+578    	; 0x1360 <_fpadd_parts+0x28a>
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	a9 f4       	brne	.+42     	; 0x114c <_fpadd_parts+0x76>
    1122:	92 30       	cpi	r25, 0x02	; 2
    1124:	09 f0       	breq	.+2      	; 0x1128 <_fpadd_parts+0x52>
    1126:	1d c1       	rjmp	.+570    	; 0x1362 <_fpadd_parts+0x28c>
    1128:	9a 01       	movw	r18, r20
    112a:	ad 01       	movw	r20, r26
    112c:	88 e0       	ldi	r24, 0x08	; 8
    112e:	ea 01       	movw	r28, r20
    1130:	09 90       	ld	r0, Y+
    1132:	ae 01       	movw	r20, r28
    1134:	e9 01       	movw	r28, r18
    1136:	09 92       	st	Y+, r0
    1138:	9e 01       	movw	r18, r28
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	c1 f7       	brne	.-16     	; 0x112e <_fpadd_parts+0x58>
    113e:	e2 01       	movw	r28, r4
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	9c 91       	ld	r25, X
    1146:	89 23       	and	r24, r25
    1148:	81 83       	std	Z+1, r24	; 0x01
    114a:	08 c1       	rjmp	.+528    	; 0x135c <_fpadd_parts+0x286>
    114c:	92 30       	cpi	r25, 0x02	; 2
    114e:	09 f4       	brne	.+2      	; 0x1152 <_fpadd_parts+0x7c>
    1150:	07 c1       	rjmp	.+526    	; 0x1360 <_fpadd_parts+0x28a>
    1152:	12 96       	adiw	r26, 0x02	; 2
    1154:	2d 90       	ld	r2, X+
    1156:	3c 90       	ld	r3, X
    1158:	13 97       	sbiw	r26, 0x03	; 3
    115a:	eb 01       	movw	r28, r22
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	9b 81       	ldd	r25, Y+3	; 0x03
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	ad 90       	ld	r10, X+
    1164:	bd 90       	ld	r11, X+
    1166:	cd 90       	ld	r12, X+
    1168:	dc 90       	ld	r13, X
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	ec 80       	ldd	r14, Y+4	; 0x04
    116e:	fd 80       	ldd	r15, Y+5	; 0x05
    1170:	0e 81       	ldd	r16, Y+6	; 0x06
    1172:	1f 81       	ldd	r17, Y+7	; 0x07
    1174:	91 01       	movw	r18, r2
    1176:	28 1b       	sub	r18, r24
    1178:	39 0b       	sbc	r19, r25
    117a:	b9 01       	movw	r22, r18
    117c:	37 ff       	sbrs	r19, 7
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <_fpadd_parts+0xb2>
    1180:	66 27       	eor	r22, r22
    1182:	77 27       	eor	r23, r23
    1184:	62 1b       	sub	r22, r18
    1186:	73 0b       	sbc	r23, r19
    1188:	60 32       	cpi	r22, 0x20	; 32
    118a:	71 05       	cpc	r23, r1
    118c:	0c f0       	brlt	.+2      	; 0x1190 <_fpadd_parts+0xba>
    118e:	61 c0       	rjmp	.+194    	; 0x1252 <_fpadd_parts+0x17c>
    1190:	12 16       	cp	r1, r18
    1192:	13 06       	cpc	r1, r19
    1194:	6c f5       	brge	.+90     	; 0x11f0 <_fpadd_parts+0x11a>
    1196:	37 01       	movw	r6, r14
    1198:	48 01       	movw	r8, r16
    119a:	06 2e       	mov	r0, r22
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <_fpadd_parts+0xd0>
    119e:	96 94       	lsr	r9
    11a0:	87 94       	ror	r8
    11a2:	77 94       	ror	r7
    11a4:	67 94       	ror	r6
    11a6:	0a 94       	dec	r0
    11a8:	d2 f7       	brpl	.-12     	; 0x119e <_fpadd_parts+0xc8>
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <_fpadd_parts+0xe6>
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	6a 95       	dec	r22
    11be:	d2 f7       	brpl	.-12     	; 0x11b4 <_fpadd_parts+0xde>
    11c0:	21 50       	subi	r18, 0x01	; 1
    11c2:	30 40       	sbci	r19, 0x00	; 0
    11c4:	40 40       	sbci	r20, 0x00	; 0
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	2e 21       	and	r18, r14
    11ca:	3f 21       	and	r19, r15
    11cc:	40 23       	and	r20, r16
    11ce:	51 23       	and	r21, r17
    11d0:	21 15       	cp	r18, r1
    11d2:	31 05       	cpc	r19, r1
    11d4:	41 05       	cpc	r20, r1
    11d6:	51 05       	cpc	r21, r1
    11d8:	21 f0       	breq	.+8      	; 0x11e2 <_fpadd_parts+0x10c>
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	79 01       	movw	r14, r18
    11e4:	8a 01       	movw	r16, r20
    11e6:	e6 28       	or	r14, r6
    11e8:	f7 28       	or	r15, r7
    11ea:	08 29       	or	r16, r8
    11ec:	19 29       	or	r17, r9
    11ee:	3c c0       	rjmp	.+120    	; 0x1268 <_fpadd_parts+0x192>
    11f0:	23 2b       	or	r18, r19
    11f2:	d1 f1       	breq	.+116    	; 0x1268 <_fpadd_parts+0x192>
    11f4:	26 0e       	add	r2, r22
    11f6:	37 1e       	adc	r3, r23
    11f8:	35 01       	movw	r6, r10
    11fa:	46 01       	movw	r8, r12
    11fc:	06 2e       	mov	r0, r22
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <_fpadd_parts+0x132>
    1200:	96 94       	lsr	r9
    1202:	87 94       	ror	r8
    1204:	77 94       	ror	r7
    1206:	67 94       	ror	r6
    1208:	0a 94       	dec	r0
    120a:	d2 f7       	brpl	.-12     	; 0x1200 <_fpadd_parts+0x12a>
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	04 c0       	rjmp	.+8      	; 0x121e <_fpadd_parts+0x148>
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	44 1f       	adc	r20, r20
    121c:	55 1f       	adc	r21, r21
    121e:	6a 95       	dec	r22
    1220:	d2 f7       	brpl	.-12     	; 0x1216 <_fpadd_parts+0x140>
    1222:	21 50       	subi	r18, 0x01	; 1
    1224:	30 40       	sbci	r19, 0x00	; 0
    1226:	40 40       	sbci	r20, 0x00	; 0
    1228:	50 40       	sbci	r21, 0x00	; 0
    122a:	2a 21       	and	r18, r10
    122c:	3b 21       	and	r19, r11
    122e:	4c 21       	and	r20, r12
    1230:	5d 21       	and	r21, r13
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	41 05       	cpc	r20, r1
    1238:	51 05       	cpc	r21, r1
    123a:	21 f0       	breq	.+8      	; 0x1244 <_fpadd_parts+0x16e>
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	59 01       	movw	r10, r18
    1246:	6a 01       	movw	r12, r20
    1248:	a6 28       	or	r10, r6
    124a:	b7 28       	or	r11, r7
    124c:	c8 28       	or	r12, r8
    124e:	d9 28       	or	r13, r9
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <_fpadd_parts+0x192>
    1252:	82 15       	cp	r24, r2
    1254:	93 05       	cpc	r25, r3
    1256:	2c f0       	brlt	.+10     	; 0x1262 <_fpadd_parts+0x18c>
    1258:	1c 01       	movw	r2, r24
    125a:	aa 24       	eor	r10, r10
    125c:	bb 24       	eor	r11, r11
    125e:	65 01       	movw	r12, r10
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <_fpadd_parts+0x192>
    1262:	ee 24       	eor	r14, r14
    1264:	ff 24       	eor	r15, r15
    1266:	87 01       	movw	r16, r14
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	9c 91       	ld	r25, X
    126c:	d2 01       	movw	r26, r4
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	8c 91       	ld	r24, X
    1272:	98 17       	cp	r25, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <_fpadd_parts+0x1a2>
    1276:	45 c0       	rjmp	.+138    	; 0x1302 <_fpadd_parts+0x22c>
    1278:	99 23       	and	r25, r25
    127a:	39 f0       	breq	.+14     	; 0x128a <_fpadd_parts+0x1b4>
    127c:	a8 01       	movw	r20, r16
    127e:	97 01       	movw	r18, r14
    1280:	2a 19       	sub	r18, r10
    1282:	3b 09       	sbc	r19, r11
    1284:	4c 09       	sbc	r20, r12
    1286:	5d 09       	sbc	r21, r13
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <_fpadd_parts+0x1c0>
    128a:	a6 01       	movw	r20, r12
    128c:	95 01       	movw	r18, r10
    128e:	2e 19       	sub	r18, r14
    1290:	3f 09       	sbc	r19, r15
    1292:	40 0b       	sbc	r20, r16
    1294:	51 0b       	sbc	r21, r17
    1296:	57 fd       	sbrc	r21, 7
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <_fpadd_parts+0x1d4>
    129a:	11 82       	std	Z+1, r1	; 0x01
    129c:	33 82       	std	Z+3, r3	; 0x03
    129e:	22 82       	std	Z+2, r2	; 0x02
    12a0:	24 83       	std	Z+4, r18	; 0x04
    12a2:	35 83       	std	Z+5, r19	; 0x05
    12a4:	46 83       	std	Z+6, r20	; 0x06
    12a6:	57 83       	std	Z+7, r21	; 0x07
    12a8:	1d c0       	rjmp	.+58     	; 0x12e4 <_fpadd_parts+0x20e>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	81 83       	std	Z+1, r24	; 0x01
    12ae:	33 82       	std	Z+3, r3	; 0x03
    12b0:	22 82       	std	Z+2, r2	; 0x02
    12b2:	88 27       	eor	r24, r24
    12b4:	99 27       	eor	r25, r25
    12b6:	dc 01       	movw	r26, r24
    12b8:	82 1b       	sub	r24, r18
    12ba:	93 0b       	sbc	r25, r19
    12bc:	a4 0b       	sbc	r26, r20
    12be:	b5 0b       	sbc	r27, r21
    12c0:	84 83       	std	Z+4, r24	; 0x04
    12c2:	95 83       	std	Z+5, r25	; 0x05
    12c4:	a6 83       	std	Z+6, r26	; 0x06
    12c6:	b7 83       	std	Z+7, r27	; 0x07
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <_fpadd_parts+0x20e>
    12ca:	22 0f       	add	r18, r18
    12cc:	33 1f       	adc	r19, r19
    12ce:	44 1f       	adc	r20, r20
    12d0:	55 1f       	adc	r21, r21
    12d2:	24 83       	std	Z+4, r18	; 0x04
    12d4:	35 83       	std	Z+5, r19	; 0x05
    12d6:	46 83       	std	Z+6, r20	; 0x06
    12d8:	57 83       	std	Z+7, r21	; 0x07
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	93 83       	std	Z+3, r25	; 0x03
    12e2:	82 83       	std	Z+2, r24	; 0x02
    12e4:	24 81       	ldd	r18, Z+4	; 0x04
    12e6:	35 81       	ldd	r19, Z+5	; 0x05
    12e8:	46 81       	ldd	r20, Z+6	; 0x06
    12ea:	57 81       	ldd	r21, Z+7	; 0x07
    12ec:	da 01       	movw	r26, r20
    12ee:	c9 01       	movw	r24, r18
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	a1 09       	sbc	r26, r1
    12f4:	b1 09       	sbc	r27, r1
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	af 4f       	sbci	r26, 0xFF	; 255
    12fc:	bf 43       	sbci	r27, 0x3F	; 63
    12fe:	28 f3       	brcs	.-54     	; 0x12ca <_fpadd_parts+0x1f4>
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <_fpadd_parts+0x242>
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	33 82       	std	Z+3, r3	; 0x03
    1306:	22 82       	std	Z+2, r2	; 0x02
    1308:	ea 0c       	add	r14, r10
    130a:	fb 1c       	adc	r15, r11
    130c:	0c 1d       	adc	r16, r12
    130e:	1d 1d       	adc	r17, r13
    1310:	e4 82       	std	Z+4, r14	; 0x04
    1312:	f5 82       	std	Z+5, r15	; 0x05
    1314:	06 83       	std	Z+6, r16	; 0x06
    1316:	17 83       	std	Z+7, r17	; 0x07
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	80 83       	st	Z, r24
    131c:	24 81       	ldd	r18, Z+4	; 0x04
    131e:	35 81       	ldd	r19, Z+5	; 0x05
    1320:	46 81       	ldd	r20, Z+6	; 0x06
    1322:	57 81       	ldd	r21, Z+7	; 0x07
    1324:	57 ff       	sbrs	r21, 7
    1326:	1a c0       	rjmp	.+52     	; 0x135c <_fpadd_parts+0x286>
    1328:	c9 01       	movw	r24, r18
    132a:	aa 27       	eor	r26, r26
    132c:	97 fd       	sbrc	r25, 7
    132e:	a0 95       	com	r26
    1330:	ba 2f       	mov	r27, r26
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	a0 70       	andi	r26, 0x00	; 0
    1338:	b0 70       	andi	r27, 0x00	; 0
    133a:	56 95       	lsr	r21
    133c:	47 95       	ror	r20
    133e:	37 95       	ror	r19
    1340:	27 95       	ror	r18
    1342:	82 2b       	or	r24, r18
    1344:	93 2b       	or	r25, r19
    1346:	a4 2b       	or	r26, r20
    1348:	b5 2b       	or	r27, r21
    134a:	84 83       	std	Z+4, r24	; 0x04
    134c:	95 83       	std	Z+5, r25	; 0x05
    134e:	a6 83       	std	Z+6, r26	; 0x06
    1350:	b7 83       	std	Z+7, r27	; 0x07
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	93 83       	std	Z+3, r25	; 0x03
    135a:	82 83       	std	Z+2, r24	; 0x02
    135c:	df 01       	movw	r26, r30
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_fpadd_parts+0x28c>
    1360:	d2 01       	movw	r26, r4
    1362:	cd 01       	movw	r24, r26
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	e2 e1       	ldi	r30, 0x12	; 18
    136a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__>

0000136e <__subsf3>:
    136e:	a0 e2       	ldi	r26, 0x20	; 32
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ed eb       	ldi	r30, 0xBD	; 189
    1374:	f9 e0       	ldi	r31, 0x09	; 9
    1376:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x18>
    137a:	69 83       	std	Y+1, r22	; 0x01
    137c:	7a 83       	std	Y+2, r23	; 0x02
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	2d 83       	std	Y+5, r18	; 0x05
    1384:	3e 83       	std	Y+6, r19	; 0x06
    1386:	4f 83       	std	Y+7, r20	; 0x07
    1388:	58 87       	std	Y+8, r21	; 0x08
    138a:	e9 e0       	ldi	r30, 0x09	; 9
    138c:	ee 2e       	mov	r14, r30
    138e:	f1 2c       	mov	r15, r1
    1390:	ec 0e       	add	r14, r28
    1392:	fd 1e       	adc	r15, r29
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	b7 01       	movw	r22, r14
    139a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    139e:	8e 01       	movw	r16, r28
    13a0:	0f 5e       	subi	r16, 0xEF	; 239
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
    13a4:	ce 01       	movw	r24, r28
    13a6:	05 96       	adiw	r24, 0x05	; 5
    13a8:	b8 01       	movw	r22, r16
    13aa:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    13ae:	8a 89       	ldd	r24, Y+18	; 0x12
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	89 27       	eor	r24, r25
    13b4:	8a 8b       	std	Y+18, r24	; 0x12
    13b6:	c7 01       	movw	r24, r14
    13b8:	b8 01       	movw	r22, r16
    13ba:	ae 01       	movw	r20, r28
    13bc:	47 5e       	subi	r20, 0xE7	; 231
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_fpadd_parts>
    13c4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__pack_f>
    13c8:	a0 96       	adiw	r28, 0x20	; 32
    13ca:	e6 e0       	ldi	r30, 0x06	; 6
    13cc:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x18>

000013d0 <__addsf3>:
    13d0:	a0 e2       	ldi	r26, 0x20	; 32
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee ee       	ldi	r30, 0xEE	; 238
    13d6:	f9 e0       	ldi	r31, 0x09	; 9
    13d8:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x18>
    13dc:	69 83       	std	Y+1, r22	; 0x01
    13de:	7a 83       	std	Y+2, r23	; 0x02
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	2d 83       	std	Y+5, r18	; 0x05
    13e6:	3e 83       	std	Y+6, r19	; 0x06
    13e8:	4f 83       	std	Y+7, r20	; 0x07
    13ea:	58 87       	std	Y+8, r21	; 0x08
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	ef 2e       	mov	r14, r31
    13f0:	f1 2c       	mov	r15, r1
    13f2:	ec 0e       	add	r14, r28
    13f4:	fd 1e       	adc	r15, r29
    13f6:	ce 01       	movw	r24, r28
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	b7 01       	movw	r22, r14
    13fc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    1400:	8e 01       	movw	r16, r28
    1402:	0f 5e       	subi	r16, 0xEF	; 239
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	ce 01       	movw	r24, r28
    1408:	05 96       	adiw	r24, 0x05	; 5
    140a:	b8 01       	movw	r22, r16
    140c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    1410:	c7 01       	movw	r24, r14
    1412:	b8 01       	movw	r22, r16
    1414:	ae 01       	movw	r20, r28
    1416:	47 5e       	subi	r20, 0xE7	; 231
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_fpadd_parts>
    141e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__pack_f>
    1422:	a0 96       	adiw	r28, 0x20	; 32
    1424:	e6 e0       	ldi	r30, 0x06	; 6
    1426:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x18>

0000142a <__mulsf3>:
    142a:	a0 e2       	ldi	r26, 0x20	; 32
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e1       	ldi	r30, 0x1B	; 27
    1430:	fa e0       	ldi	r31, 0x0A	; 10
    1432:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__>
    1436:	69 83       	std	Y+1, r22	; 0x01
    1438:	7a 83       	std	Y+2, r23	; 0x02
    143a:	8b 83       	std	Y+3, r24	; 0x03
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	2d 83       	std	Y+5, r18	; 0x05
    1440:	3e 83       	std	Y+6, r19	; 0x06
    1442:	4f 83       	std	Y+7, r20	; 0x07
    1444:	58 87       	std	Y+8, r21	; 0x08
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	be 01       	movw	r22, r28
    144c:	67 5f       	subi	r22, 0xF7	; 247
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    1454:	ce 01       	movw	r24, r28
    1456:	05 96       	adiw	r24, 0x05	; 5
    1458:	be 01       	movw	r22, r28
    145a:	6f 5e       	subi	r22, 0xEF	; 239
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    1462:	99 85       	ldd	r25, Y+9	; 0x09
    1464:	92 30       	cpi	r25, 0x02	; 2
    1466:	88 f0       	brcs	.+34     	; 0x148a <__mulsf3+0x60>
    1468:	89 89       	ldd	r24, Y+17	; 0x11
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	c8 f0       	brcs	.+50     	; 0x14a0 <__mulsf3+0x76>
    146e:	94 30       	cpi	r25, 0x04	; 4
    1470:	19 f4       	brne	.+6      	; 0x1478 <__mulsf3+0x4e>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	51 f4       	brne	.+20     	; 0x148a <__mulsf3+0x60>
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__mulsf3+0x56>
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	29 f4       	brne	.+10     	; 0x1486 <__mulsf3+0x5c>
    147c:	92 30       	cpi	r25, 0x02	; 2
    147e:	81 f4       	brne	.+32     	; 0x14a0 <__mulsf3+0x76>
    1480:	81 e7       	ldi	r24, 0x71	; 113
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	c6 c0       	rjmp	.+396    	; 0x1612 <__mulsf3+0x1e8>
    1486:	92 30       	cpi	r25, 0x02	; 2
    1488:	49 f4       	brne	.+18     	; 0x149c <__mulsf3+0x72>
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	8a 89       	ldd	r24, Y+18	; 0x12
    1490:	98 13       	cpse	r25, r24
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	2a 87       	std	Y+10, r18	; 0x0a
    1496:	ce 01       	movw	r24, r28
    1498:	09 96       	adiw	r24, 0x09	; 9
    149a:	bb c0       	rjmp	.+374    	; 0x1612 <__mulsf3+0x1e8>
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	49 f4       	brne	.+18     	; 0x14b2 <__mulsf3+0x88>
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	8a 89       	ldd	r24, Y+18	; 0x12
    14a6:	98 13       	cpse	r25, r24
    14a8:	21 e0       	ldi	r18, 0x01	; 1
    14aa:	2a 8b       	std	Y+18, r18	; 0x12
    14ac:	ce 01       	movw	r24, r28
    14ae:	41 96       	adiw	r24, 0x11	; 17
    14b0:	b0 c0       	rjmp	.+352    	; 0x1612 <__mulsf3+0x1e8>
    14b2:	2d 84       	ldd	r2, Y+13	; 0x0d
    14b4:	3e 84       	ldd	r3, Y+14	; 0x0e
    14b6:	4f 84       	ldd	r4, Y+15	; 0x0f
    14b8:	58 88       	ldd	r5, Y+16	; 0x10
    14ba:	6d 88       	ldd	r6, Y+21	; 0x15
    14bc:	7e 88       	ldd	r7, Y+22	; 0x16
    14be:	8f 88       	ldd	r8, Y+23	; 0x17
    14c0:	98 8c       	ldd	r9, Y+24	; 0x18
    14c2:	ee 24       	eor	r14, r14
    14c4:	ff 24       	eor	r15, r15
    14c6:	87 01       	movw	r16, r14
    14c8:	aa 24       	eor	r10, r10
    14ca:	bb 24       	eor	r11, r11
    14cc:	65 01       	movw	r12, r10
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	e0 e0       	ldi	r30, 0x00	; 0
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	c1 01       	movw	r24, r2
    14dc:	81 70       	andi	r24, 0x01	; 1
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	89 2b       	or	r24, r25
    14e2:	e9 f0       	breq	.+58     	; 0x151e <__mulsf3+0xf4>
    14e4:	e6 0c       	add	r14, r6
    14e6:	f7 1c       	adc	r15, r7
    14e8:	08 1d       	adc	r16, r8
    14ea:	19 1d       	adc	r17, r9
    14ec:	9a 01       	movw	r18, r20
    14ee:	ab 01       	movw	r20, r22
    14f0:	2a 0d       	add	r18, r10
    14f2:	3b 1d       	adc	r19, r11
    14f4:	4c 1d       	adc	r20, r12
    14f6:	5d 1d       	adc	r21, r13
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e6 14       	cp	r14, r6
    1502:	f7 04       	cpc	r15, r7
    1504:	08 05       	cpc	r16, r8
    1506:	19 05       	cpc	r17, r9
    1508:	20 f4       	brcc	.+8      	; 0x1512 <__mulsf3+0xe8>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e0       	ldi	r26, 0x00	; 0
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ba 01       	movw	r22, r20
    1514:	a9 01       	movw	r20, r18
    1516:	48 0f       	add	r20, r24
    1518:	59 1f       	adc	r21, r25
    151a:	6a 1f       	adc	r22, r26
    151c:	7b 1f       	adc	r23, r27
    151e:	aa 0c       	add	r10, r10
    1520:	bb 1c       	adc	r11, r11
    1522:	cc 1c       	adc	r12, r12
    1524:	dd 1c       	adc	r13, r13
    1526:	97 fe       	sbrs	r9, 7
    1528:	08 c0       	rjmp	.+16     	; 0x153a <__mulsf3+0x110>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e0       	ldi	r26, 0x00	; 0
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	a8 2a       	or	r10, r24
    1534:	b9 2a       	or	r11, r25
    1536:	ca 2a       	or	r12, r26
    1538:	db 2a       	or	r13, r27
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	e0 32       	cpi	r30, 0x20	; 32
    153e:	f1 05       	cpc	r31, r1
    1540:	49 f0       	breq	.+18     	; 0x1554 <__mulsf3+0x12a>
    1542:	66 0c       	add	r6, r6
    1544:	77 1c       	adc	r7, r7
    1546:	88 1c       	adc	r8, r8
    1548:	99 1c       	adc	r9, r9
    154a:	56 94       	lsr	r5
    154c:	47 94       	ror	r4
    154e:	37 94       	ror	r3
    1550:	27 94       	ror	r2
    1552:	c3 cf       	rjmp	.-122    	; 0x14da <__mulsf3+0xb0>
    1554:	fa 85       	ldd	r31, Y+10	; 0x0a
    1556:	ea 89       	ldd	r30, Y+18	; 0x12
    1558:	2b 89       	ldd	r18, Y+19	; 0x13
    155a:	3c 89       	ldd	r19, Y+20	; 0x14
    155c:	8b 85       	ldd	r24, Y+11	; 0x0b
    155e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1560:	28 0f       	add	r18, r24
    1562:	39 1f       	adc	r19, r25
    1564:	2e 5f       	subi	r18, 0xFE	; 254
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	17 c0       	rjmp	.+46     	; 0x1598 <__mulsf3+0x16e>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	90 70       	andi	r25, 0x00	; 0
    1570:	89 2b       	or	r24, r25
    1572:	61 f0       	breq	.+24     	; 0x158c <__mulsf3+0x162>
    1574:	16 95       	lsr	r17
    1576:	07 95       	ror	r16
    1578:	f7 94       	ror	r15
    157a:	e7 94       	ror	r14
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e8       	ldi	r27, 0x80	; 128
    1584:	e8 2a       	or	r14, r24
    1586:	f9 2a       	or	r15, r25
    1588:	0a 2b       	or	r16, r26
    158a:	1b 2b       	or	r17, r27
    158c:	76 95       	lsr	r23
    158e:	67 95       	ror	r22
    1590:	57 95       	ror	r21
    1592:	47 95       	ror	r20
    1594:	2f 5f       	subi	r18, 0xFF	; 255
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	77 fd       	sbrc	r23, 7
    159a:	e7 cf       	rjmp	.-50     	; 0x156a <__mulsf3+0x140>
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <__mulsf3+0x18c>
    159e:	44 0f       	add	r20, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	66 1f       	adc	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	17 fd       	sbrc	r17, 7
    15a8:	41 60       	ori	r20, 0x01	; 1
    15aa:	ee 0c       	add	r14, r14
    15ac:	ff 1c       	adc	r15, r15
    15ae:	00 1f       	adc	r16, r16
    15b0:	11 1f       	adc	r17, r17
    15b2:	21 50       	subi	r18, 0x01	; 1
    15b4:	30 40       	sbci	r19, 0x00	; 0
    15b6:	40 30       	cpi	r20, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	59 07       	cpc	r21, r25
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	69 07       	cpc	r22, r25
    15c0:	90 e4       	ldi	r25, 0x40	; 64
    15c2:	79 07       	cpc	r23, r25
    15c4:	60 f3       	brcs	.-40     	; 0x159e <__mulsf3+0x174>
    15c6:	2b 8f       	std	Y+27, r18	; 0x1b
    15c8:	3c 8f       	std	Y+28, r19	; 0x1c
    15ca:	db 01       	movw	r26, r22
    15cc:	ca 01       	movw	r24, r20
    15ce:	8f 77       	andi	r24, 0x7F	; 127
    15d0:	90 70       	andi	r25, 0x00	; 0
    15d2:	a0 70       	andi	r26, 0x00	; 0
    15d4:	b0 70       	andi	r27, 0x00	; 0
    15d6:	80 34       	cpi	r24, 0x40	; 64
    15d8:	91 05       	cpc	r25, r1
    15da:	a1 05       	cpc	r26, r1
    15dc:	b1 05       	cpc	r27, r1
    15de:	61 f4       	brne	.+24     	; 0x15f8 <__mulsf3+0x1ce>
    15e0:	47 fd       	sbrc	r20, 7
    15e2:	0a c0       	rjmp	.+20     	; 0x15f8 <__mulsf3+0x1ce>
    15e4:	e1 14       	cp	r14, r1
    15e6:	f1 04       	cpc	r15, r1
    15e8:	01 05       	cpc	r16, r1
    15ea:	11 05       	cpc	r17, r1
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <__mulsf3+0x1ce>
    15ee:	40 5c       	subi	r20, 0xC0	; 192
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	6f 4f       	sbci	r22, 0xFF	; 255
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	40 78       	andi	r20, 0x80	; 128
    15f8:	1a 8e       	std	Y+26, r1	; 0x1a
    15fa:	fe 17       	cp	r31, r30
    15fc:	11 f0       	breq	.+4      	; 0x1602 <__mulsf3+0x1d8>
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8a 8f       	std	Y+26, r24	; 0x1a
    1602:	4d 8f       	std	Y+29, r20	; 0x1d
    1604:	5e 8f       	std	Y+30, r21	; 0x1e
    1606:	6f 8f       	std	Y+31, r22	; 0x1f
    1608:	78 a3       	std	Y+32, r23	; 0x20
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	89 8f       	std	Y+25, r24	; 0x19
    160e:	ce 01       	movw	r24, r28
    1610:	49 96       	adiw	r24, 0x19	; 25
    1612:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__pack_f>
    1616:	a0 96       	adiw	r28, 0x20	; 32
    1618:	e2 e1       	ldi	r30, 0x12	; 18
    161a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__>

0000161e <__gtsf2>:
    161e:	a8 e1       	ldi	r26, 0x18	; 24
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e1       	ldi	r30, 0x15	; 21
    1624:	fb e0       	ldi	r31, 0x0B	; 11
    1626:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x18>
    162a:	69 83       	std	Y+1, r22	; 0x01
    162c:	7a 83       	std	Y+2, r23	; 0x02
    162e:	8b 83       	std	Y+3, r24	; 0x03
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	2d 83       	std	Y+5, r18	; 0x05
    1634:	3e 83       	std	Y+6, r19	; 0x06
    1636:	4f 83       	std	Y+7, r20	; 0x07
    1638:	58 87       	std	Y+8, r21	; 0x08
    163a:	89 e0       	ldi	r24, 0x09	; 9
    163c:	e8 2e       	mov	r14, r24
    163e:	f1 2c       	mov	r15, r1
    1640:	ec 0e       	add	r14, r28
    1642:	fd 1e       	adc	r15, r29
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	b7 01       	movw	r22, r14
    164a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    164e:	8e 01       	movw	r16, r28
    1650:	0f 5e       	subi	r16, 0xEF	; 239
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	ce 01       	movw	r24, r28
    1656:	05 96       	adiw	r24, 0x05	; 5
    1658:	b8 01       	movw	r22, r16
    165a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	40 f0       	brcs	.+16     	; 0x1674 <__gtsf2+0x56>
    1664:	89 89       	ldd	r24, Y+17	; 0x11
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	28 f0       	brcs	.+10     	; 0x1674 <__gtsf2+0x56>
    166a:	c7 01       	movw	r24, r14
    166c:	b8 01       	movw	r22, r16
    166e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fpcmp_parts_f>
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <__gtsf2+0x58>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	68 96       	adiw	r28, 0x18	; 24
    1678:	e6 e0       	ldi	r30, 0x06	; 6
    167a:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x18>

0000167e <__gesf2>:
    167e:	a8 e1       	ldi	r26, 0x18	; 24
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e4       	ldi	r30, 0x45	; 69
    1684:	fb e0       	ldi	r31, 0x0B	; 11
    1686:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x18>
    168a:	69 83       	std	Y+1, r22	; 0x01
    168c:	7a 83       	std	Y+2, r23	; 0x02
    168e:	8b 83       	std	Y+3, r24	; 0x03
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	2d 83       	std	Y+5, r18	; 0x05
    1694:	3e 83       	std	Y+6, r19	; 0x06
    1696:	4f 83       	std	Y+7, r20	; 0x07
    1698:	58 87       	std	Y+8, r21	; 0x08
    169a:	89 e0       	ldi	r24, 0x09	; 9
    169c:	e8 2e       	mov	r14, r24
    169e:	f1 2c       	mov	r15, r1
    16a0:	ec 0e       	add	r14, r28
    16a2:	fd 1e       	adc	r15, r29
    16a4:	ce 01       	movw	r24, r28
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	b7 01       	movw	r22, r14
    16aa:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    16ae:	8e 01       	movw	r16, r28
    16b0:	0f 5e       	subi	r16, 0xEF	; 239
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ce 01       	movw	r24, r28
    16b6:	05 96       	adiw	r24, 0x05	; 5
    16b8:	b8 01       	movw	r22, r16
    16ba:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	40 f0       	brcs	.+16     	; 0x16d4 <__gesf2+0x56>
    16c4:	89 89       	ldd	r24, Y+17	; 0x11
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	28 f0       	brcs	.+10     	; 0x16d4 <__gesf2+0x56>
    16ca:	c7 01       	movw	r24, r14
    16cc:	b8 01       	movw	r22, r16
    16ce:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fpcmp_parts_f>
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <__gesf2+0x58>
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	68 96       	adiw	r28, 0x18	; 24
    16d8:	e6 e0       	ldi	r30, 0x06	; 6
    16da:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x18>

000016de <__ltsf2>:
    16de:	a8 e1       	ldi	r26, 0x18	; 24
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e7       	ldi	r30, 0x75	; 117
    16e4:	fb e0       	ldi	r31, 0x0B	; 11
    16e6:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x18>
    16ea:	69 83       	std	Y+1, r22	; 0x01
    16ec:	7a 83       	std	Y+2, r23	; 0x02
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    16f0:	9c 83       	std	Y+4, r25	; 0x04
    16f2:	2d 83       	std	Y+5, r18	; 0x05
    16f4:	3e 83       	std	Y+6, r19	; 0x06
    16f6:	4f 83       	std	Y+7, r20	; 0x07
    16f8:	58 87       	std	Y+8, r21	; 0x08
    16fa:	89 e0       	ldi	r24, 0x09	; 9
    16fc:	e8 2e       	mov	r14, r24
    16fe:	f1 2c       	mov	r15, r1
    1700:	ec 0e       	add	r14, r28
    1702:	fd 1e       	adc	r15, r29
    1704:	ce 01       	movw	r24, r28
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	b7 01       	movw	r22, r14
    170a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    170e:	8e 01       	movw	r16, r28
    1710:	0f 5e       	subi	r16, 0xEF	; 239
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	ce 01       	movw	r24, r28
    1716:	05 96       	adiw	r24, 0x05	; 5
    1718:	b8 01       	movw	r22, r16
    171a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	40 f0       	brcs	.+16     	; 0x1734 <__ltsf2+0x56>
    1724:	89 89       	ldd	r24, Y+17	; 0x11
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	28 f0       	brcs	.+10     	; 0x1734 <__ltsf2+0x56>
    172a:	c7 01       	movw	r24, r14
    172c:	b8 01       	movw	r22, r16
    172e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fpcmp_parts_f>
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <__ltsf2+0x58>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	68 96       	adiw	r28, 0x18	; 24
    1738:	e6 e0       	ldi	r30, 0x06	; 6
    173a:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x18>

0000173e <__fixsfsi>:
    173e:	ac e0       	ldi	r26, 0x0C	; 12
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 ea       	ldi	r30, 0xA5	; 165
    1744:	fb e0       	ldi	r31, 0x0B	; 11
    1746:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x20>
    174a:	69 83       	std	Y+1, r22	; 0x01
    174c:	7a 83       	std	Y+2, r23	; 0x02
    174e:	8b 83       	std	Y+3, r24	; 0x03
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	be 01       	movw	r22, r28
    1758:	6b 5f       	subi	r22, 0xFB	; 251
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__unpack_f>
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	61 f1       	breq	.+88     	; 0x17be <__fixsfsi+0x80>
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	50 f1       	brcs	.+84     	; 0x17be <__fixsfsi+0x80>
    176a:	84 30       	cpi	r24, 0x04	; 4
    176c:	21 f4       	brne	.+8      	; 0x1776 <__fixsfsi+0x38>
    176e:	8e 81       	ldd	r24, Y+6	; 0x06
    1770:	88 23       	and	r24, r24
    1772:	51 f1       	breq	.+84     	; 0x17c8 <__fixsfsi+0x8a>
    1774:	2e c0       	rjmp	.+92     	; 0x17d2 <__fixsfsi+0x94>
    1776:	2f 81       	ldd	r18, Y+7	; 0x07
    1778:	38 85       	ldd	r19, Y+8	; 0x08
    177a:	37 fd       	sbrc	r19, 7
    177c:	20 c0       	rjmp	.+64     	; 0x17be <__fixsfsi+0x80>
    177e:	6e 81       	ldd	r22, Y+6	; 0x06
    1780:	2f 31       	cpi	r18, 0x1F	; 31
    1782:	31 05       	cpc	r19, r1
    1784:	1c f0       	brlt	.+6      	; 0x178c <__fixsfsi+0x4e>
    1786:	66 23       	and	r22, r22
    1788:	f9 f0       	breq	.+62     	; 0x17c8 <__fixsfsi+0x8a>
    178a:	23 c0       	rjmp	.+70     	; 0x17d2 <__fixsfsi+0x94>
    178c:	8e e1       	ldi	r24, 0x1E	; 30
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	82 1b       	sub	r24, r18
    1792:	93 0b       	sbc	r25, r19
    1794:	29 85       	ldd	r18, Y+9	; 0x09
    1796:	3a 85       	ldd	r19, Y+10	; 0x0a
    1798:	4b 85       	ldd	r20, Y+11	; 0x0b
    179a:	5c 85       	ldd	r21, Y+12	; 0x0c
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__fixsfsi+0x68>
    179e:	56 95       	lsr	r21
    17a0:	47 95       	ror	r20
    17a2:	37 95       	ror	r19
    17a4:	27 95       	ror	r18
    17a6:	8a 95       	dec	r24
    17a8:	d2 f7       	brpl	.-12     	; 0x179e <__fixsfsi+0x60>
    17aa:	66 23       	and	r22, r22
    17ac:	b1 f0       	breq	.+44     	; 0x17da <__fixsfsi+0x9c>
    17ae:	50 95       	com	r21
    17b0:	40 95       	com	r20
    17b2:	30 95       	com	r19
    17b4:	21 95       	neg	r18
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	4f 4f       	sbci	r20, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <__fixsfsi+0x9c>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <__fixsfsi+0x9c>
    17c8:	2f ef       	ldi	r18, 0xFF	; 255
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f ef       	ldi	r20, 0xFF	; 255
    17ce:	5f e7       	ldi	r21, 0x7F	; 127
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <__fixsfsi+0x9c>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	50 e8       	ldi	r21, 0x80	; 128
    17da:	b9 01       	movw	r22, r18
    17dc:	ca 01       	movw	r24, r20
    17de:	2c 96       	adiw	r28, 0x0c	; 12
    17e0:	e2 e0       	ldi	r30, 0x02	; 2
    17e2:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x20>

000017e6 <__pack_f>:
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	fc 01       	movw	r30, r24
    17f2:	e4 80       	ldd	r14, Z+4	; 0x04
    17f4:	f5 80       	ldd	r15, Z+5	; 0x05
    17f6:	06 81       	ldd	r16, Z+6	; 0x06
    17f8:	17 81       	ldd	r17, Z+7	; 0x07
    17fa:	d1 80       	ldd	r13, Z+1	; 0x01
    17fc:	80 81       	ld	r24, Z
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	48 f4       	brcc	.+18     	; 0x1814 <__pack_f+0x2e>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e1       	ldi	r26, 0x10	; 16
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 2a       	or	r14, r24
    180c:	f9 2a       	or	r15, r25
    180e:	0a 2b       	or	r16, r26
    1810:	1b 2b       	or	r17, r27
    1812:	a5 c0       	rjmp	.+330    	; 0x195e <__pack_f+0x178>
    1814:	84 30       	cpi	r24, 0x04	; 4
    1816:	09 f4       	brne	.+2      	; 0x181a <__pack_f+0x34>
    1818:	9f c0       	rjmp	.+318    	; 0x1958 <__pack_f+0x172>
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	21 f4       	brne	.+8      	; 0x1826 <__pack_f+0x40>
    181e:	ee 24       	eor	r14, r14
    1820:	ff 24       	eor	r15, r15
    1822:	87 01       	movw	r16, r14
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <__pack_f+0x4a>
    1826:	e1 14       	cp	r14, r1
    1828:	f1 04       	cpc	r15, r1
    182a:	01 05       	cpc	r16, r1
    182c:	11 05       	cpc	r17, r1
    182e:	19 f4       	brne	.+6      	; 0x1836 <__pack_f+0x50>
    1830:	e0 e0       	ldi	r30, 0x00	; 0
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	96 c0       	rjmp	.+300    	; 0x1962 <__pack_f+0x17c>
    1836:	62 81       	ldd	r22, Z+2	; 0x02
    1838:	73 81       	ldd	r23, Z+3	; 0x03
    183a:	9f ef       	ldi	r25, 0xFF	; 255
    183c:	62 38       	cpi	r22, 0x82	; 130
    183e:	79 07       	cpc	r23, r25
    1840:	0c f0       	brlt	.+2      	; 0x1844 <__pack_f+0x5e>
    1842:	5b c0       	rjmp	.+182    	; 0x18fa <__pack_f+0x114>
    1844:	22 e8       	ldi	r18, 0x82	; 130
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	26 1b       	sub	r18, r22
    184a:	37 0b       	sbc	r19, r23
    184c:	2a 31       	cpi	r18, 0x1A	; 26
    184e:	31 05       	cpc	r19, r1
    1850:	2c f0       	brlt	.+10     	; 0x185c <__pack_f+0x76>
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	2a c0       	rjmp	.+84     	; 0x18b0 <__pack_f+0xca>
    185c:	b8 01       	movw	r22, r16
    185e:	a7 01       	movw	r20, r14
    1860:	02 2e       	mov	r0, r18
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__pack_f+0x86>
    1864:	76 95       	lsr	r23
    1866:	67 95       	ror	r22
    1868:	57 95       	ror	r21
    186a:	47 95       	ror	r20
    186c:	0a 94       	dec	r0
    186e:	d2 f7       	brpl	.-12     	; 0x1864 <__pack_f+0x7e>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <__pack_f+0x9c>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	aa 1f       	adc	r26, r26
    1880:	bb 1f       	adc	r27, r27
    1882:	2a 95       	dec	r18
    1884:	d2 f7       	brpl	.-12     	; 0x187a <__pack_f+0x94>
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	a1 09       	sbc	r26, r1
    188a:	b1 09       	sbc	r27, r1
    188c:	8e 21       	and	r24, r14
    188e:	9f 21       	and	r25, r15
    1890:	a0 23       	and	r26, r16
    1892:	b1 23       	and	r27, r17
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	a1 05       	cpc	r26, r1
    1898:	b1 05       	cpc	r27, r1
    189a:	21 f0       	breq	.+8      	; 0x18a4 <__pack_f+0xbe>
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	9a 01       	movw	r18, r20
    18a6:	ab 01       	movw	r20, r22
    18a8:	28 2b       	or	r18, r24
    18aa:	39 2b       	or	r19, r25
    18ac:	4a 2b       	or	r20, r26
    18ae:	5b 2b       	or	r21, r27
    18b0:	da 01       	movw	r26, r20
    18b2:	c9 01       	movw	r24, r18
    18b4:	8f 77       	andi	r24, 0x7F	; 127
    18b6:	90 70       	andi	r25, 0x00	; 0
    18b8:	a0 70       	andi	r26, 0x00	; 0
    18ba:	b0 70       	andi	r27, 0x00	; 0
    18bc:	80 34       	cpi	r24, 0x40	; 64
    18be:	91 05       	cpc	r25, r1
    18c0:	a1 05       	cpc	r26, r1
    18c2:	b1 05       	cpc	r27, r1
    18c4:	39 f4       	brne	.+14     	; 0x18d4 <__pack_f+0xee>
    18c6:	27 ff       	sbrs	r18, 7
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <__pack_f+0xf6>
    18ca:	20 5c       	subi	r18, 0xC0	; 192
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	4f 4f       	sbci	r20, 0xFF	; 255
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <__pack_f+0xf6>
    18d4:	21 5c       	subi	r18, 0xC1	; 193
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	4f 4f       	sbci	r20, 0xFF	; 255
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	e0 e0       	ldi	r30, 0x00	; 0
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	20 30       	cpi	r18, 0x00	; 0
    18e2:	a0 e0       	ldi	r26, 0x00	; 0
    18e4:	3a 07       	cpc	r19, r26
    18e6:	a0 e0       	ldi	r26, 0x00	; 0
    18e8:	4a 07       	cpc	r20, r26
    18ea:	a0 e4       	ldi	r26, 0x40	; 64
    18ec:	5a 07       	cpc	r21, r26
    18ee:	10 f0       	brcs	.+4      	; 0x18f4 <__pack_f+0x10e>
    18f0:	e1 e0       	ldi	r30, 0x01	; 1
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	79 01       	movw	r14, r18
    18f6:	8a 01       	movw	r16, r20
    18f8:	27 c0       	rjmp	.+78     	; 0x1948 <__pack_f+0x162>
    18fa:	60 38       	cpi	r22, 0x80	; 128
    18fc:	71 05       	cpc	r23, r1
    18fe:	64 f5       	brge	.+88     	; 0x1958 <__pack_f+0x172>
    1900:	fb 01       	movw	r30, r22
    1902:	e1 58       	subi	r30, 0x81	; 129
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	d8 01       	movw	r26, r16
    1908:	c7 01       	movw	r24, r14
    190a:	8f 77       	andi	r24, 0x7F	; 127
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	a0 70       	andi	r26, 0x00	; 0
    1910:	b0 70       	andi	r27, 0x00	; 0
    1912:	80 34       	cpi	r24, 0x40	; 64
    1914:	91 05       	cpc	r25, r1
    1916:	a1 05       	cpc	r26, r1
    1918:	b1 05       	cpc	r27, r1
    191a:	39 f4       	brne	.+14     	; 0x192a <__pack_f+0x144>
    191c:	e7 fe       	sbrs	r14, 7
    191e:	0d c0       	rjmp	.+26     	; 0x193a <__pack_f+0x154>
    1920:	80 e4       	ldi	r24, 0x40	; 64
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <__pack_f+0x14c>
    192a:	8f e3       	ldi	r24, 0x3F	; 63
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e8 0e       	add	r14, r24
    1934:	f9 1e       	adc	r15, r25
    1936:	0a 1f       	adc	r16, r26
    1938:	1b 1f       	adc	r17, r27
    193a:	17 ff       	sbrs	r17, 7
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <__pack_f+0x162>
    193e:	16 95       	lsr	r17
    1940:	07 95       	ror	r16
    1942:	f7 94       	ror	r15
    1944:	e7 94       	ror	r14
    1946:	31 96       	adiw	r30, 0x01	; 1
    1948:	87 e0       	ldi	r24, 0x07	; 7
    194a:	16 95       	lsr	r17
    194c:	07 95       	ror	r16
    194e:	f7 94       	ror	r15
    1950:	e7 94       	ror	r14
    1952:	8a 95       	dec	r24
    1954:	d1 f7       	brne	.-12     	; 0x194a <__pack_f+0x164>
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <__pack_f+0x17c>
    1958:	ee 24       	eor	r14, r14
    195a:	ff 24       	eor	r15, r15
    195c:	87 01       	movw	r16, r14
    195e:	ef ef       	ldi	r30, 0xFF	; 255
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	6e 2f       	mov	r22, r30
    1964:	67 95       	ror	r22
    1966:	66 27       	eor	r22, r22
    1968:	67 95       	ror	r22
    196a:	90 2f       	mov	r25, r16
    196c:	9f 77       	andi	r25, 0x7F	; 127
    196e:	d7 94       	ror	r13
    1970:	dd 24       	eor	r13, r13
    1972:	d7 94       	ror	r13
    1974:	8e 2f       	mov	r24, r30
    1976:	86 95       	lsr	r24
    1978:	49 2f       	mov	r20, r25
    197a:	46 2b       	or	r20, r22
    197c:	58 2f       	mov	r21, r24
    197e:	5d 29       	or	r21, r13
    1980:	b7 01       	movw	r22, r14
    1982:	ca 01       	movw	r24, r20
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	08 95       	ret

00001990 <__unpack_f>:
    1990:	fc 01       	movw	r30, r24
    1992:	db 01       	movw	r26, r22
    1994:	40 81       	ld	r20, Z
    1996:	51 81       	ldd	r21, Z+1	; 0x01
    1998:	22 81       	ldd	r18, Z+2	; 0x02
    199a:	62 2f       	mov	r22, r18
    199c:	6f 77       	andi	r22, 0x7F	; 127
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	22 1f       	adc	r18, r18
    19a2:	22 27       	eor	r18, r18
    19a4:	22 1f       	adc	r18, r18
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	89 2f       	mov	r24, r25
    19aa:	88 0f       	add	r24, r24
    19ac:	82 2b       	or	r24, r18
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	99 1f       	adc	r25, r25
    19b4:	99 27       	eor	r25, r25
    19b6:	99 1f       	adc	r25, r25
    19b8:	11 96       	adiw	r26, 0x01	; 1
    19ba:	9c 93       	st	X, r25
    19bc:	11 97       	sbiw	r26, 0x01	; 1
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	a9 f5       	brne	.+106    	; 0x1a2e <__unpack_f+0x9e>
    19c4:	41 15       	cp	r20, r1
    19c6:	51 05       	cpc	r21, r1
    19c8:	61 05       	cpc	r22, r1
    19ca:	71 05       	cpc	r23, r1
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <__unpack_f+0x42>
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	37 c0       	rjmp	.+110    	; 0x1a40 <__unpack_f+0xb0>
    19d2:	82 e8       	ldi	r24, 0x82	; 130
    19d4:	9f ef       	ldi	r25, 0xFF	; 255
    19d6:	13 96       	adiw	r26, 0x03	; 3
    19d8:	9c 93       	st	X, r25
    19da:	8e 93       	st	-X, r24
    19dc:	12 97       	sbiw	r26, 0x02	; 2
    19de:	9a 01       	movw	r18, r20
    19e0:	ab 01       	movw	r20, r22
    19e2:	67 e0       	ldi	r22, 0x07	; 7
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	44 1f       	adc	r20, r20
    19ea:	55 1f       	adc	r21, r21
    19ec:	6a 95       	dec	r22
    19ee:	d1 f7       	brne	.-12     	; 0x19e4 <__unpack_f+0x54>
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	8c 93       	st	X, r24
    19f4:	0d c0       	rjmp	.+26     	; 0x1a10 <__unpack_f+0x80>
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	44 1f       	adc	r20, r20
    19fc:	55 1f       	adc	r21, r21
    19fe:	12 96       	adiw	r26, 0x02	; 2
    1a00:	8d 91       	ld	r24, X+
    1a02:	9c 91       	ld	r25, X
    1a04:	13 97       	sbiw	r26, 0x03	; 3
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	13 96       	adiw	r26, 0x03	; 3
    1a0a:	9c 93       	st	X, r25
    1a0c:	8e 93       	st	-X, r24
    1a0e:	12 97       	sbiw	r26, 0x02	; 2
    1a10:	20 30       	cpi	r18, 0x00	; 0
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	38 07       	cpc	r19, r24
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	48 07       	cpc	r20, r24
    1a1a:	80 e4       	ldi	r24, 0x40	; 64
    1a1c:	58 07       	cpc	r21, r24
    1a1e:	58 f3       	brcs	.-42     	; 0x19f6 <__unpack_f+0x66>
    1a20:	14 96       	adiw	r26, 0x04	; 4
    1a22:	2d 93       	st	X+, r18
    1a24:	3d 93       	st	X+, r19
    1a26:	4d 93       	st	X+, r20
    1a28:	5c 93       	st	X, r21
    1a2a:	17 97       	sbiw	r26, 0x07	; 7
    1a2c:	08 95       	ret
    1a2e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a30:	31 05       	cpc	r19, r1
    1a32:	79 f4       	brne	.+30     	; 0x1a52 <__unpack_f+0xc2>
    1a34:	41 15       	cp	r20, r1
    1a36:	51 05       	cpc	r21, r1
    1a38:	61 05       	cpc	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	19 f4       	brne	.+6      	; 0x1a44 <__unpack_f+0xb4>
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	8c 93       	st	X, r24
    1a42:	08 95       	ret
    1a44:	64 ff       	sbrs	r22, 4
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <__unpack_f+0xbe>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	8c 93       	st	X, r24
    1a4c:	12 c0       	rjmp	.+36     	; 0x1a72 <__unpack_f+0xe2>
    1a4e:	1c 92       	st	X, r1
    1a50:	10 c0       	rjmp	.+32     	; 0x1a72 <__unpack_f+0xe2>
    1a52:	2f 57       	subi	r18, 0x7F	; 127
    1a54:	30 40       	sbci	r19, 0x00	; 0
    1a56:	13 96       	adiw	r26, 0x03	; 3
    1a58:	3c 93       	st	X, r19
    1a5a:	2e 93       	st	-X, r18
    1a5c:	12 97       	sbiw	r26, 0x02	; 2
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	8c 93       	st	X, r24
    1a62:	87 e0       	ldi	r24, 0x07	; 7
    1a64:	44 0f       	add	r20, r20
    1a66:	55 1f       	adc	r21, r21
    1a68:	66 1f       	adc	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	8a 95       	dec	r24
    1a6e:	d1 f7       	brne	.-12     	; 0x1a64 <__unpack_f+0xd4>
    1a70:	70 64       	ori	r23, 0x40	; 64
    1a72:	14 96       	adiw	r26, 0x04	; 4
    1a74:	4d 93       	st	X+, r20
    1a76:	5d 93       	st	X+, r21
    1a78:	6d 93       	st	X+, r22
    1a7a:	7c 93       	st	X, r23
    1a7c:	17 97       	sbiw	r26, 0x07	; 7
    1a7e:	08 95       	ret

00001a80 <__fpcmp_parts_f>:
    1a80:	1f 93       	push	r17
    1a82:	dc 01       	movw	r26, r24
    1a84:	fb 01       	movw	r30, r22
    1a86:	9c 91       	ld	r25, X
    1a88:	92 30       	cpi	r25, 0x02	; 2
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <__fpcmp_parts_f+0xe>
    1a8c:	47 c0       	rjmp	.+142    	; 0x1b1c <__fpcmp_parts_f+0x9c>
    1a8e:	80 81       	ld	r24, Z
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <__fpcmp_parts_f+0x16>
    1a94:	43 c0       	rjmp	.+134    	; 0x1b1c <__fpcmp_parts_f+0x9c>
    1a96:	94 30       	cpi	r25, 0x04	; 4
    1a98:	51 f4       	brne	.+20     	; 0x1aae <__fpcmp_parts_f+0x2e>
    1a9a:	11 96       	adiw	r26, 0x01	; 1
    1a9c:	1c 91       	ld	r17, X
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	99 f5       	brne	.+102    	; 0x1b08 <__fpcmp_parts_f+0x88>
    1aa2:	81 81       	ldd	r24, Z+1	; 0x01
    1aa4:	68 2f       	mov	r22, r24
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	61 1b       	sub	r22, r17
    1aaa:	71 09       	sbc	r23, r1
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <__fpcmp_parts_f+0xac>
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <__fpcmp_parts_f+0x3a>
    1ab2:	92 30       	cpi	r25, 0x02	; 2
    1ab4:	31 f4       	brne	.+12     	; 0x1ac2 <__fpcmp_parts_f+0x42>
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	b9 f1       	breq	.+110    	; 0x1b28 <__fpcmp_parts_f+0xa8>
    1aba:	81 81       	ldd	r24, Z+1	; 0x01
    1abc:	88 23       	and	r24, r24
    1abe:	89 f1       	breq	.+98     	; 0x1b22 <__fpcmp_parts_f+0xa2>
    1ac0:	2d c0       	rjmp	.+90     	; 0x1b1c <__fpcmp_parts_f+0x9c>
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	1c 91       	ld	r17, X
    1ac6:	11 97       	sbiw	r26, 0x01	; 1
    1ac8:	82 30       	cpi	r24, 0x02	; 2
    1aca:	f1 f0       	breq	.+60     	; 0x1b08 <__fpcmp_parts_f+0x88>
    1acc:	81 81       	ldd	r24, Z+1	; 0x01
    1ace:	18 17       	cp	r17, r24
    1ad0:	d9 f4       	brne	.+54     	; 0x1b08 <__fpcmp_parts_f+0x88>
    1ad2:	12 96       	adiw	r26, 0x02	; 2
    1ad4:	2d 91       	ld	r18, X+
    1ad6:	3c 91       	ld	r19, X
    1ad8:	13 97       	sbiw	r26, 0x03	; 3
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	82 17       	cp	r24, r18
    1ae0:	93 07       	cpc	r25, r19
    1ae2:	94 f0       	brlt	.+36     	; 0x1b08 <__fpcmp_parts_f+0x88>
    1ae4:	28 17       	cp	r18, r24
    1ae6:	39 07       	cpc	r19, r25
    1ae8:	bc f0       	brlt	.+46     	; 0x1b18 <__fpcmp_parts_f+0x98>
    1aea:	14 96       	adiw	r26, 0x04	; 4
    1aec:	8d 91       	ld	r24, X+
    1aee:	9d 91       	ld	r25, X+
    1af0:	0d 90       	ld	r0, X+
    1af2:	bc 91       	ld	r27, X
    1af4:	a0 2d       	mov	r26, r0
    1af6:	24 81       	ldd	r18, Z+4	; 0x04
    1af8:	35 81       	ldd	r19, Z+5	; 0x05
    1afa:	46 81       	ldd	r20, Z+6	; 0x06
    1afc:	57 81       	ldd	r21, Z+7	; 0x07
    1afe:	28 17       	cp	r18, r24
    1b00:	39 07       	cpc	r19, r25
    1b02:	4a 07       	cpc	r20, r26
    1b04:	5b 07       	cpc	r21, r27
    1b06:	18 f4       	brcc	.+6      	; 0x1b0e <__fpcmp_parts_f+0x8e>
    1b08:	11 23       	and	r17, r17
    1b0a:	41 f0       	breq	.+16     	; 0x1b1c <__fpcmp_parts_f+0x9c>
    1b0c:	0a c0       	rjmp	.+20     	; 0x1b22 <__fpcmp_parts_f+0xa2>
    1b0e:	82 17       	cp	r24, r18
    1b10:	93 07       	cpc	r25, r19
    1b12:	a4 07       	cpc	r26, r20
    1b14:	b5 07       	cpc	r27, r21
    1b16:	40 f4       	brcc	.+16     	; 0x1b28 <__fpcmp_parts_f+0xa8>
    1b18:	11 23       	and	r17, r17
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <__fpcmp_parts_f+0xa2>
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <__fpcmp_parts_f+0xac>
    1b22:	6f ef       	ldi	r22, 0xFF	; 255
    1b24:	7f ef       	ldi	r23, 0xFF	; 255
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <__fpcmp_parts_f+0xac>
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	1f 91       	pop	r17
    1b30:	08 95       	ret

00001b32 <fdevopen>:
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	8c 01       	movw	r16, r24
    1b3c:	eb 01       	movw	r28, r22
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	31 f4       	brne	.+12     	; 0x1b4e <fdevopen+0x1c>
    1b42:	61 15       	cp	r22, r1
    1b44:	71 05       	cpc	r23, r1
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <fdevopen+0x1c>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	38 c0       	rjmp	.+112    	; 0x1bbe <fdevopen+0x8c>
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	6e e0       	ldi	r22, 0x0E	; 14
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	0e 94 13 10 	call	0x2026	; 0x2026 <calloc>
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	9c 01       	movw	r18, r24
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	71 f1       	breq	.+92     	; 0x1bbe <fdevopen+0x8c>
    1b62:	80 e8       	ldi	r24, 0x80	; 128
    1b64:	83 83       	std	Z+3, r24	; 0x03
    1b66:	20 97       	sbiw	r28, 0x00	; 0
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <fdevopen+0x54>
    1b6a:	d3 87       	std	Z+11, r29	; 0x0b
    1b6c:	c2 87       	std	Z+10, r28	; 0x0a
    1b6e:	81 e8       	ldi	r24, 0x81	; 129
    1b70:	83 83       	std	Z+3, r24	; 0x03
    1b72:	80 91 80 02 	lds	r24, 0x0280
    1b76:	90 91 81 02 	lds	r25, 0x0281
    1b7a:	89 2b       	or	r24, r25
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <fdevopen+0x54>
    1b7e:	f0 93 81 02 	sts	0x0281, r31
    1b82:	e0 93 80 02 	sts	0x0280, r30
    1b86:	01 15       	cp	r16, r1
    1b88:	11 05       	cpc	r17, r1
    1b8a:	c9 f0       	breq	.+50     	; 0x1bbe <fdevopen+0x8c>
    1b8c:	11 87       	std	Z+9, r17	; 0x09
    1b8e:	00 87       	std	Z+8, r16	; 0x08
    1b90:	83 81       	ldd	r24, Z+3	; 0x03
    1b92:	82 60       	ori	r24, 0x02	; 2
    1b94:	83 83       	std	Z+3, r24	; 0x03
    1b96:	80 91 82 02 	lds	r24, 0x0282
    1b9a:	90 91 83 02 	lds	r25, 0x0283
    1b9e:	89 2b       	or	r24, r25
    1ba0:	71 f4       	brne	.+28     	; 0x1bbe <fdevopen+0x8c>
    1ba2:	f0 93 83 02 	sts	0x0283, r31
    1ba6:	e0 93 82 02 	sts	0x0282, r30
    1baa:	80 91 84 02 	lds	r24, 0x0284
    1bae:	90 91 85 02 	lds	r25, 0x0285
    1bb2:	89 2b       	or	r24, r25
    1bb4:	21 f4       	brne	.+8      	; 0x1bbe <fdevopen+0x8c>
    1bb6:	f0 93 85 02 	sts	0x0285, r31
    1bba:	e0 93 84 02 	sts	0x0284, r30
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <printf>:
    1bca:	a0 e0       	ldi	r26, 0x00	; 0
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb ee       	ldi	r30, 0xEB	; 235
    1bd0:	fd e0       	ldi	r31, 0x0D	; 13
    1bd2:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x20>
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	35 96       	adiw	r30, 0x05	; 5
    1bda:	61 91       	ld	r22, Z+
    1bdc:	71 91       	ld	r23, Z+
    1bde:	80 91 82 02 	lds	r24, 0x0282
    1be2:	90 91 83 02 	lds	r25, 0x0283
    1be6:	af 01       	movw	r20, r30
    1be8:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <vfprintf>
    1bec:	20 96       	adiw	r28, 0x00	; 0
    1bee:	e2 e0       	ldi	r30, 0x02	; 2
    1bf0:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x20>

00001bf4 <putchar>:
    1bf4:	60 91 82 02 	lds	r22, 0x0282
    1bf8:	70 91 83 02 	lds	r23, 0x0283
    1bfc:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1c00:	08 95       	ret

00001c02 <puts>:
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	e0 91 82 02 	lds	r30, 0x0282
    1c10:	f0 91 83 02 	lds	r31, 0x0283
    1c14:	83 81       	ldd	r24, Z+3	; 0x03
    1c16:	81 ff       	sbrs	r24, 1
    1c18:	21 c0       	rjmp	.+66     	; 0x1c5c <puts+0x5a>
    1c1a:	c0 e0       	ldi	r28, 0x00	; 0
    1c1c:	d0 e0       	ldi	r29, 0x00	; 0
    1c1e:	0d c0       	rjmp	.+26     	; 0x1c3a <puts+0x38>
    1c20:	e0 91 82 02 	lds	r30, 0x0282
    1c24:	f0 91 83 02 	lds	r31, 0x0283
    1c28:	20 85       	ldd	r18, Z+8	; 0x08
    1c2a:	31 85       	ldd	r19, Z+9	; 0x09
    1c2c:	bf 01       	movw	r22, r30
    1c2e:	f9 01       	movw	r30, r18
    1c30:	09 95       	icall
    1c32:	89 2b       	or	r24, r25
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <puts+0x38>
    1c36:	cf ef       	ldi	r28, 0xFF	; 255
    1c38:	df ef       	ldi	r29, 0xFF	; 255
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	81 91       	ld	r24, Z+
    1c3e:	8f 01       	movw	r16, r30
    1c40:	88 23       	and	r24, r24
    1c42:	71 f7       	brne	.-36     	; 0x1c20 <puts+0x1e>
    1c44:	e0 91 82 02 	lds	r30, 0x0282
    1c48:	f0 91 83 02 	lds	r31, 0x0283
    1c4c:	20 85       	ldd	r18, Z+8	; 0x08
    1c4e:	31 85       	ldd	r19, Z+9	; 0x09
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	bf 01       	movw	r22, r30
    1c54:	f9 01       	movw	r30, r18
    1c56:	09 95       	icall
    1c58:	89 2b       	or	r24, r25
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <puts+0x5e>
    1c5c:	cf ef       	ldi	r28, 0xFF	; 255
    1c5e:	df ef       	ldi	r29, 0xFF	; 255
    1c60:	ce 01       	movw	r24, r28
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	08 95       	ret

00001c6c <vfprintf>:
    1c6c:	ab e0       	ldi	r26, 0x0B	; 11
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	ec e3       	ldi	r30, 0x3C	; 60
    1c72:	fe e0       	ldi	r31, 0x0E	; 14
    1c74:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__>
    1c78:	3c 01       	movw	r6, r24
    1c7a:	2b 01       	movw	r4, r22
    1c7c:	5a 01       	movw	r10, r20
    1c7e:	fc 01       	movw	r30, r24
    1c80:	17 82       	std	Z+7, r1	; 0x07
    1c82:	16 82       	std	Z+6, r1	; 0x06
    1c84:	83 81       	ldd	r24, Z+3	; 0x03
    1c86:	81 fd       	sbrc	r24, 1
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <vfprintf+0x24>
    1c8a:	6f ef       	ldi	r22, 0xFF	; 255
    1c8c:	7f ef       	ldi	r23, 0xFF	; 255
    1c8e:	c6 c1       	rjmp	.+908    	; 0x201c <vfprintf+0x3b0>
    1c90:	9a e0       	ldi	r25, 0x0A	; 10
    1c92:	89 2e       	mov	r8, r25
    1c94:	1e 01       	movw	r2, r28
    1c96:	08 94       	sec
    1c98:	21 1c       	adc	r2, r1
    1c9a:	31 1c       	adc	r3, r1
    1c9c:	f3 01       	movw	r30, r6
    1c9e:	23 81       	ldd	r18, Z+3	; 0x03
    1ca0:	f2 01       	movw	r30, r4
    1ca2:	23 fd       	sbrc	r18, 3
    1ca4:	85 91       	lpm	r24, Z+
    1ca6:	23 ff       	sbrs	r18, 3
    1ca8:	81 91       	ld	r24, Z+
    1caa:	2f 01       	movw	r4, r30
    1cac:	88 23       	and	r24, r24
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <vfprintf+0x46>
    1cb0:	b2 c1       	rjmp	.+868    	; 0x2016 <vfprintf+0x3aa>
    1cb2:	85 32       	cpi	r24, 0x25	; 37
    1cb4:	39 f4       	brne	.+14     	; 0x1cc4 <vfprintf+0x58>
    1cb6:	23 fd       	sbrc	r18, 3
    1cb8:	85 91       	lpm	r24, Z+
    1cba:	23 ff       	sbrs	r18, 3
    1cbc:	81 91       	ld	r24, Z+
    1cbe:	2f 01       	movw	r4, r30
    1cc0:	85 32       	cpi	r24, 0x25	; 37
    1cc2:	29 f4       	brne	.+10     	; 0x1cce <vfprintf+0x62>
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	b3 01       	movw	r22, r6
    1cc8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1ccc:	e7 cf       	rjmp	.-50     	; 0x1c9c <vfprintf+0x30>
    1cce:	98 2f       	mov	r25, r24
    1cd0:	ff 24       	eor	r15, r15
    1cd2:	ee 24       	eor	r14, r14
    1cd4:	99 24       	eor	r9, r9
    1cd6:	ff e1       	ldi	r31, 0x1F	; 31
    1cd8:	ff 15       	cp	r31, r15
    1cda:	d0 f0       	brcs	.+52     	; 0x1d10 <vfprintf+0xa4>
    1cdc:	9b 32       	cpi	r25, 0x2B	; 43
    1cde:	69 f0       	breq	.+26     	; 0x1cfa <vfprintf+0x8e>
    1ce0:	9c 32       	cpi	r25, 0x2C	; 44
    1ce2:	28 f4       	brcc	.+10     	; 0x1cee <vfprintf+0x82>
    1ce4:	90 32       	cpi	r25, 0x20	; 32
    1ce6:	59 f0       	breq	.+22     	; 0x1cfe <vfprintf+0x92>
    1ce8:	93 32       	cpi	r25, 0x23	; 35
    1cea:	91 f4       	brne	.+36     	; 0x1d10 <vfprintf+0xa4>
    1cec:	0e c0       	rjmp	.+28     	; 0x1d0a <vfprintf+0x9e>
    1cee:	9d 32       	cpi	r25, 0x2D	; 45
    1cf0:	49 f0       	breq	.+18     	; 0x1d04 <vfprintf+0x98>
    1cf2:	90 33       	cpi	r25, 0x30	; 48
    1cf4:	69 f4       	brne	.+26     	; 0x1d10 <vfprintf+0xa4>
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	24 c0       	rjmp	.+72     	; 0x1d42 <vfprintf+0xd6>
    1cfa:	52 e0       	ldi	r21, 0x02	; 2
    1cfc:	f5 2a       	or	r15, r21
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	f8 2a       	or	r15, r24
    1d02:	28 c0       	rjmp	.+80     	; 0x1d54 <vfprintf+0xe8>
    1d04:	98 e0       	ldi	r25, 0x08	; 8
    1d06:	f9 2a       	or	r15, r25
    1d08:	25 c0       	rjmp	.+74     	; 0x1d54 <vfprintf+0xe8>
    1d0a:	e0 e1       	ldi	r30, 0x10	; 16
    1d0c:	fe 2a       	or	r15, r30
    1d0e:	22 c0       	rjmp	.+68     	; 0x1d54 <vfprintf+0xe8>
    1d10:	f7 fc       	sbrc	r15, 7
    1d12:	29 c0       	rjmp	.+82     	; 0x1d66 <vfprintf+0xfa>
    1d14:	89 2f       	mov	r24, r25
    1d16:	80 53       	subi	r24, 0x30	; 48
    1d18:	8a 30       	cpi	r24, 0x0A	; 10
    1d1a:	70 f4       	brcc	.+28     	; 0x1d38 <vfprintf+0xcc>
    1d1c:	f6 fe       	sbrs	r15, 6
    1d1e:	05 c0       	rjmp	.+10     	; 0x1d2a <vfprintf+0xbe>
    1d20:	98 9c       	mul	r9, r8
    1d22:	90 2c       	mov	r9, r0
    1d24:	11 24       	eor	r1, r1
    1d26:	98 0e       	add	r9, r24
    1d28:	15 c0       	rjmp	.+42     	; 0x1d54 <vfprintf+0xe8>
    1d2a:	e8 9c       	mul	r14, r8
    1d2c:	e0 2c       	mov	r14, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	e8 0e       	add	r14, r24
    1d32:	f0 e2       	ldi	r31, 0x20	; 32
    1d34:	ff 2a       	or	r15, r31
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <vfprintf+0xe8>
    1d38:	9e 32       	cpi	r25, 0x2E	; 46
    1d3a:	29 f4       	brne	.+10     	; 0x1d46 <vfprintf+0xda>
    1d3c:	f6 fc       	sbrc	r15, 6
    1d3e:	6b c1       	rjmp	.+726    	; 0x2016 <vfprintf+0x3aa>
    1d40:	40 e4       	ldi	r20, 0x40	; 64
    1d42:	f4 2a       	or	r15, r20
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <vfprintf+0xe8>
    1d46:	9c 36       	cpi	r25, 0x6C	; 108
    1d48:	19 f4       	brne	.+6      	; 0x1d50 <vfprintf+0xe4>
    1d4a:	50 e8       	ldi	r21, 0x80	; 128
    1d4c:	f5 2a       	or	r15, r21
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <vfprintf+0xe8>
    1d50:	98 36       	cpi	r25, 0x68	; 104
    1d52:	49 f4       	brne	.+18     	; 0x1d66 <vfprintf+0xfa>
    1d54:	f2 01       	movw	r30, r4
    1d56:	23 fd       	sbrc	r18, 3
    1d58:	95 91       	lpm	r25, Z+
    1d5a:	23 ff       	sbrs	r18, 3
    1d5c:	91 91       	ld	r25, Z+
    1d5e:	2f 01       	movw	r4, r30
    1d60:	99 23       	and	r25, r25
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <vfprintf+0xfa>
    1d64:	b8 cf       	rjmp	.-144    	; 0x1cd6 <vfprintf+0x6a>
    1d66:	89 2f       	mov	r24, r25
    1d68:	85 54       	subi	r24, 0x45	; 69
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	18 f0       	brcs	.+6      	; 0x1d74 <vfprintf+0x108>
    1d6e:	80 52       	subi	r24, 0x20	; 32
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	38 f4       	brcc	.+14     	; 0x1d82 <vfprintf+0x116>
    1d74:	44 e0       	ldi	r20, 0x04	; 4
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	a4 0e       	add	r10, r20
    1d7a:	b5 1e       	adc	r11, r21
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	59 83       	std	Y+1, r21	; 0x01
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <vfprintf+0x134>
    1d82:	93 36       	cpi	r25, 0x63	; 99
    1d84:	31 f0       	breq	.+12     	; 0x1d92 <vfprintf+0x126>
    1d86:	93 37       	cpi	r25, 0x73	; 115
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <vfprintf+0x13c>
    1d8a:	93 35       	cpi	r25, 0x53	; 83
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <vfprintf+0x124>
    1d8e:	56 c0       	rjmp	.+172    	; 0x1e3c <vfprintf+0x1d0>
    1d90:	20 c0       	rjmp	.+64     	; 0x1dd2 <vfprintf+0x166>
    1d92:	f5 01       	movw	r30, r10
    1d94:	80 81       	ld	r24, Z
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	42 e0       	ldi	r20, 0x02	; 2
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	a4 0e       	add	r10, r20
    1d9e:	b5 1e       	adc	r11, r21
    1da0:	61 01       	movw	r12, r2
    1da2:	01 e0       	ldi	r16, 0x01	; 1
    1da4:	10 e0       	ldi	r17, 0x00	; 0
    1da6:	12 c0       	rjmp	.+36     	; 0x1dcc <vfprintf+0x160>
    1da8:	f5 01       	movw	r30, r10
    1daa:	c0 80       	ld	r12, Z
    1dac:	d1 80       	ldd	r13, Z+1	; 0x01
    1dae:	f6 fc       	sbrc	r15, 6
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <vfprintf+0x14c>
    1db2:	6f ef       	ldi	r22, 0xFF	; 255
    1db4:	7f ef       	ldi	r23, 0xFF	; 255
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <vfprintf+0x150>
    1db8:	69 2d       	mov	r22, r9
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	42 e0       	ldi	r20, 0x02	; 2
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	a4 0e       	add	r10, r20
    1dc2:	b5 1e       	adc	r11, r21
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	0e 94 46 11 	call	0x228c	; 0x228c <strnlen>
    1dca:	8c 01       	movw	r16, r24
    1dcc:	5f e7       	ldi	r21, 0x7F	; 127
    1dce:	f5 22       	and	r15, r21
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <vfprintf+0x18e>
    1dd2:	f5 01       	movw	r30, r10
    1dd4:	c0 80       	ld	r12, Z
    1dd6:	d1 80       	ldd	r13, Z+1	; 0x01
    1dd8:	f6 fc       	sbrc	r15, 6
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <vfprintf+0x176>
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	7f ef       	ldi	r23, 0xFF	; 255
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <vfprintf+0x17a>
    1de2:	69 2d       	mov	r22, r9
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	42 e0       	ldi	r20, 0x02	; 2
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	a4 0e       	add	r10, r20
    1dec:	b5 1e       	adc	r11, r21
    1dee:	c6 01       	movw	r24, r12
    1df0:	0e 94 34 11 	call	0x2268	; 0x2268 <strnlen_P>
    1df4:	8c 01       	movw	r16, r24
    1df6:	50 e8       	ldi	r21, 0x80	; 128
    1df8:	f5 2a       	or	r15, r21
    1dfa:	f3 fe       	sbrs	r15, 3
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <vfprintf+0x1a0>
    1dfe:	1a c0       	rjmp	.+52     	; 0x1e34 <vfprintf+0x1c8>
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	b3 01       	movw	r22, r6
    1e06:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1e0a:	ea 94       	dec	r14
    1e0c:	8e 2d       	mov	r24, r14
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	08 17       	cp	r16, r24
    1e12:	19 07       	cpc	r17, r25
    1e14:	a8 f3       	brcs	.-22     	; 0x1e00 <vfprintf+0x194>
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <vfprintf+0x1c8>
    1e18:	f6 01       	movw	r30, r12
    1e1a:	f7 fc       	sbrc	r15, 7
    1e1c:	85 91       	lpm	r24, Z+
    1e1e:	f7 fe       	sbrs	r15, 7
    1e20:	81 91       	ld	r24, Z+
    1e22:	6f 01       	movw	r12, r30
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	b3 01       	movw	r22, r6
    1e28:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1e2c:	e1 10       	cpse	r14, r1
    1e2e:	ea 94       	dec	r14
    1e30:	01 50       	subi	r16, 0x01	; 1
    1e32:	10 40       	sbci	r17, 0x00	; 0
    1e34:	01 15       	cp	r16, r1
    1e36:	11 05       	cpc	r17, r1
    1e38:	79 f7       	brne	.-34     	; 0x1e18 <vfprintf+0x1ac>
    1e3a:	ea c0       	rjmp	.+468    	; 0x2010 <vfprintf+0x3a4>
    1e3c:	94 36       	cpi	r25, 0x64	; 100
    1e3e:	11 f0       	breq	.+4      	; 0x1e44 <vfprintf+0x1d8>
    1e40:	99 36       	cpi	r25, 0x69	; 105
    1e42:	69 f5       	brne	.+90     	; 0x1e9e <vfprintf+0x232>
    1e44:	f7 fe       	sbrs	r15, 7
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <vfprintf+0x1ec>
    1e48:	f5 01       	movw	r30, r10
    1e4a:	20 81       	ld	r18, Z
    1e4c:	31 81       	ldd	r19, Z+1	; 0x01
    1e4e:	42 81       	ldd	r20, Z+2	; 0x02
    1e50:	53 81       	ldd	r21, Z+3	; 0x03
    1e52:	84 e0       	ldi	r24, 0x04	; 4
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0a c0       	rjmp	.+20     	; 0x1e6c <vfprintf+0x200>
    1e58:	f5 01       	movw	r30, r10
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	9c 01       	movw	r18, r24
    1e60:	44 27       	eor	r20, r20
    1e62:	37 fd       	sbrc	r19, 7
    1e64:	40 95       	com	r20
    1e66:	54 2f       	mov	r21, r20
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a8 0e       	add	r10, r24
    1e6e:	b9 1e       	adc	r11, r25
    1e70:	9f e6       	ldi	r25, 0x6F	; 111
    1e72:	f9 22       	and	r15, r25
    1e74:	57 ff       	sbrs	r21, 7
    1e76:	09 c0       	rjmp	.+18     	; 0x1e8a <vfprintf+0x21e>
    1e78:	50 95       	com	r21
    1e7a:	40 95       	com	r20
    1e7c:	30 95       	com	r19
    1e7e:	21 95       	neg	r18
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	4f 4f       	sbci	r20, 0xFF	; 255
    1e84:	5f 4f       	sbci	r21, 0xFF	; 255
    1e86:	e0 e8       	ldi	r30, 0x80	; 128
    1e88:	fe 2a       	or	r15, r30
    1e8a:	ca 01       	movw	r24, r20
    1e8c:	b9 01       	movw	r22, r18
    1e8e:	a1 01       	movw	r20, r2
    1e90:	2a e0       	ldi	r18, 0x0A	; 10
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__ultoa_invert>
    1e98:	d8 2e       	mov	r13, r24
    1e9a:	d2 18       	sub	r13, r2
    1e9c:	40 c0       	rjmp	.+128    	; 0x1f1e <vfprintf+0x2b2>
    1e9e:	95 37       	cpi	r25, 0x75	; 117
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <vfprintf+0x240>
    1ea2:	1f 2d       	mov	r17, r15
    1ea4:	1f 7e       	andi	r17, 0xEF	; 239
    1ea6:	2a e0       	ldi	r18, 0x0A	; 10
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	1d c0       	rjmp	.+58     	; 0x1ee6 <vfprintf+0x27a>
    1eac:	1f 2d       	mov	r17, r15
    1eae:	19 7f       	andi	r17, 0xF9	; 249
    1eb0:	9f 36       	cpi	r25, 0x6F	; 111
    1eb2:	61 f0       	breq	.+24     	; 0x1ecc <vfprintf+0x260>
    1eb4:	90 37       	cpi	r25, 0x70	; 112
    1eb6:	20 f4       	brcc	.+8      	; 0x1ec0 <vfprintf+0x254>
    1eb8:	98 35       	cpi	r25, 0x58	; 88
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <vfprintf+0x252>
    1ebc:	ac c0       	rjmp	.+344    	; 0x2016 <vfprintf+0x3aa>
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <vfprintf+0x272>
    1ec0:	90 37       	cpi	r25, 0x70	; 112
    1ec2:	39 f0       	breq	.+14     	; 0x1ed2 <vfprintf+0x266>
    1ec4:	98 37       	cpi	r25, 0x78	; 120
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <vfprintf+0x25e>
    1ec8:	a6 c0       	rjmp	.+332    	; 0x2016 <vfprintf+0x3aa>
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <vfprintf+0x268>
    1ecc:	28 e0       	ldi	r18, 0x08	; 8
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	0a c0       	rjmp	.+20     	; 0x1ee6 <vfprintf+0x27a>
    1ed2:	10 61       	ori	r17, 0x10	; 16
    1ed4:	14 fd       	sbrc	r17, 4
    1ed6:	14 60       	ori	r17, 0x04	; 4
    1ed8:	20 e1       	ldi	r18, 0x10	; 16
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	04 c0       	rjmp	.+8      	; 0x1ee6 <vfprintf+0x27a>
    1ede:	14 fd       	sbrc	r17, 4
    1ee0:	16 60       	ori	r17, 0x06	; 6
    1ee2:	20 e1       	ldi	r18, 0x10	; 16
    1ee4:	32 e0       	ldi	r19, 0x02	; 2
    1ee6:	17 ff       	sbrs	r17, 7
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <vfprintf+0x28e>
    1eea:	f5 01       	movw	r30, r10
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	44 e0       	ldi	r20, 0x04	; 4
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	08 c0       	rjmp	.+16     	; 0x1f0a <vfprintf+0x29e>
    1efa:	f5 01       	movw	r30, r10
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	bc 01       	movw	r22, r24
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	42 e0       	ldi	r20, 0x02	; 2
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	a4 0e       	add	r10, r20
    1f0c:	b5 1e       	adc	r11, r21
    1f0e:	a1 01       	movw	r20, r2
    1f10:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__ultoa_invert>
    1f14:	d8 2e       	mov	r13, r24
    1f16:	d2 18       	sub	r13, r2
    1f18:	8f e7       	ldi	r24, 0x7F	; 127
    1f1a:	f8 2e       	mov	r15, r24
    1f1c:	f1 22       	and	r15, r17
    1f1e:	f6 fe       	sbrs	r15, 6
    1f20:	0b c0       	rjmp	.+22     	; 0x1f38 <vfprintf+0x2cc>
    1f22:	5e ef       	ldi	r21, 0xFE	; 254
    1f24:	f5 22       	and	r15, r21
    1f26:	d9 14       	cp	r13, r9
    1f28:	38 f4       	brcc	.+14     	; 0x1f38 <vfprintf+0x2cc>
    1f2a:	f4 fe       	sbrs	r15, 4
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <vfprintf+0x2d0>
    1f2e:	f2 fc       	sbrc	r15, 2
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <vfprintf+0x2d0>
    1f32:	8f ee       	ldi	r24, 0xEF	; 239
    1f34:	f8 22       	and	r15, r24
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <vfprintf+0x2d0>
    1f38:	1d 2d       	mov	r17, r13
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <vfprintf+0x2d2>
    1f3c:	19 2d       	mov	r17, r9
    1f3e:	f4 fe       	sbrs	r15, 4
    1f40:	0d c0       	rjmp	.+26     	; 0x1f5c <vfprintf+0x2f0>
    1f42:	fe 01       	movw	r30, r28
    1f44:	ed 0d       	add	r30, r13
    1f46:	f1 1d       	adc	r31, r1
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 33       	cpi	r24, 0x30	; 48
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <vfprintf+0x2e8>
    1f4e:	99 ee       	ldi	r25, 0xE9	; 233
    1f50:	f9 22       	and	r15, r25
    1f52:	08 c0       	rjmp	.+16     	; 0x1f64 <vfprintf+0x2f8>
    1f54:	1f 5f       	subi	r17, 0xFF	; 255
    1f56:	f2 fe       	sbrs	r15, 2
    1f58:	05 c0       	rjmp	.+10     	; 0x1f64 <vfprintf+0x2f8>
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <vfprintf+0x2f6>
    1f5c:	8f 2d       	mov	r24, r15
    1f5e:	86 78       	andi	r24, 0x86	; 134
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <vfprintf+0x2f8>
    1f62:	1f 5f       	subi	r17, 0xFF	; 255
    1f64:	0f 2d       	mov	r16, r15
    1f66:	f3 fc       	sbrc	r15, 3
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <vfprintf+0x326>
    1f6a:	f0 fe       	sbrs	r15, 0
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <vfprintf+0x320>
    1f6e:	1e 15       	cp	r17, r14
    1f70:	10 f0       	brcs	.+4      	; 0x1f76 <vfprintf+0x30a>
    1f72:	9d 2c       	mov	r9, r13
    1f74:	0b c0       	rjmp	.+22     	; 0x1f8c <vfprintf+0x320>
    1f76:	9d 2c       	mov	r9, r13
    1f78:	9e 0c       	add	r9, r14
    1f7a:	91 1a       	sub	r9, r17
    1f7c:	1e 2d       	mov	r17, r14
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <vfprintf+0x320>
    1f80:	80 e2       	ldi	r24, 0x20	; 32
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	b3 01       	movw	r22, r6
    1f86:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1f8a:	1f 5f       	subi	r17, 0xFF	; 255
    1f8c:	1e 15       	cp	r17, r14
    1f8e:	c0 f3       	brcs	.-16     	; 0x1f80 <vfprintf+0x314>
    1f90:	04 c0       	rjmp	.+8      	; 0x1f9a <vfprintf+0x32e>
    1f92:	1e 15       	cp	r17, r14
    1f94:	10 f4       	brcc	.+4      	; 0x1f9a <vfprintf+0x32e>
    1f96:	e1 1a       	sub	r14, r17
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <vfprintf+0x330>
    1f9a:	ee 24       	eor	r14, r14
    1f9c:	04 ff       	sbrs	r16, 4
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <vfprintf+0x352>
    1fa0:	80 e3       	ldi	r24, 0x30	; 48
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	b3 01       	movw	r22, r6
    1fa6:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1faa:	02 ff       	sbrs	r16, 2
    1fac:	1d c0       	rjmp	.+58     	; 0x1fe8 <vfprintf+0x37c>
    1fae:	01 fd       	sbrc	r16, 1
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <vfprintf+0x34c>
    1fb2:	88 e7       	ldi	r24, 0x78	; 120
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e c0       	rjmp	.+28     	; 0x1fd4 <vfprintf+0x368>
    1fb8:	88 e5       	ldi	r24, 0x58	; 88
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0b c0       	rjmp	.+22     	; 0x1fd4 <vfprintf+0x368>
    1fbe:	80 2f       	mov	r24, r16
    1fc0:	86 78       	andi	r24, 0x86	; 134
    1fc2:	91 f0       	breq	.+36     	; 0x1fe8 <vfprintf+0x37c>
    1fc4:	01 ff       	sbrs	r16, 1
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <vfprintf+0x360>
    1fc8:	8b e2       	ldi	r24, 0x2B	; 43
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <vfprintf+0x362>
    1fcc:	80 e2       	ldi	r24, 0x20	; 32
    1fce:	f7 fc       	sbrc	r15, 7
    1fd0:	8d e2       	ldi	r24, 0x2D	; 45
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	b3 01       	movw	r22, r6
    1fd6:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <vfprintf+0x37c>
    1fdc:	80 e3       	ldi	r24, 0x30	; 48
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	b3 01       	movw	r22, r6
    1fe2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1fe6:	9a 94       	dec	r9
    1fe8:	d9 14       	cp	r13, r9
    1fea:	c0 f3       	brcs	.-16     	; 0x1fdc <vfprintf+0x370>
    1fec:	da 94       	dec	r13
    1fee:	f1 01       	movw	r30, r2
    1ff0:	ed 0d       	add	r30, r13
    1ff2:	f1 1d       	adc	r31, r1
    1ff4:	80 81       	ld	r24, Z
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	b3 01       	movw	r22, r6
    1ffa:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1ffe:	dd 20       	and	r13, r13
    2000:	a9 f7       	brne	.-22     	; 0x1fec <vfprintf+0x380>
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <vfprintf+0x3a4>
    2004:	80 e2       	ldi	r24, 0x20	; 32
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	b3 01       	movw	r22, r6
    200a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    200e:	ea 94       	dec	r14
    2010:	ee 20       	and	r14, r14
    2012:	c1 f7       	brne	.-16     	; 0x2004 <vfprintf+0x398>
    2014:	43 ce       	rjmp	.-890    	; 0x1c9c <vfprintf+0x30>
    2016:	f3 01       	movw	r30, r6
    2018:	66 81       	ldd	r22, Z+6	; 0x06
    201a:	77 81       	ldd	r23, Z+7	; 0x07
    201c:	cb 01       	movw	r24, r22
    201e:	2b 96       	adiw	r28, 0x0b	; 11
    2020:	e2 e1       	ldi	r30, 0x12	; 18
    2022:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__>

00002026 <calloc>:
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	68 9f       	mul	r22, r24
    2030:	80 01       	movw	r16, r0
    2032:	69 9f       	mul	r22, r25
    2034:	10 0d       	add	r17, r0
    2036:	78 9f       	mul	r23, r24
    2038:	10 0d       	add	r17, r0
    203a:	11 24       	eor	r1, r1
    203c:	c8 01       	movw	r24, r16
    203e:	0e 94 2f 10 	call	0x205e	; 0x205e <malloc>
    2042:	ec 01       	movw	r28, r24
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	29 f0       	breq	.+10     	; 0x2052 <calloc+0x2c>
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	a8 01       	movw	r20, r16
    204e:	0e 94 3f 11 	call	0x227e	; 0x227e <memset>
    2052:	ce 01       	movw	r24, r28
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <malloc>:
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	bc 01       	movw	r22, r24
    2064:	82 30       	cpi	r24, 0x02	; 2
    2066:	91 05       	cpc	r25, r1
    2068:	10 f4       	brcc	.+4      	; 0x206e <malloc+0x10>
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	a0 91 88 02 	lds	r26, 0x0288
    2072:	b0 91 89 02 	lds	r27, 0x0289
    2076:	ed 01       	movw	r28, r26
    2078:	e0 e0       	ldi	r30, 0x00	; 0
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	21 c0       	rjmp	.+66     	; 0x20c4 <malloc+0x66>
    2082:	88 81       	ld	r24, Y
    2084:	99 81       	ldd	r25, Y+1	; 0x01
    2086:	86 17       	cp	r24, r22
    2088:	97 07       	cpc	r25, r23
    208a:	69 f4       	brne	.+26     	; 0x20a6 <malloc+0x48>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	9b 81       	ldd	r25, Y+3	; 0x03
    2090:	30 97       	sbiw	r30, 0x00	; 0
    2092:	19 f0       	breq	.+6      	; 0x209a <malloc+0x3c>
    2094:	93 83       	std	Z+3, r25	; 0x03
    2096:	82 83       	std	Z+2, r24	; 0x02
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <malloc+0x44>
    209a:	90 93 89 02 	sts	0x0289, r25
    209e:	80 93 88 02 	sts	0x0288, r24
    20a2:	fe 01       	movw	r30, r28
    20a4:	34 c0       	rjmp	.+104    	; 0x210e <malloc+0xb0>
    20a6:	68 17       	cp	r22, r24
    20a8:	79 07       	cpc	r23, r25
    20aa:	38 f4       	brcc	.+14     	; 0x20ba <malloc+0x5c>
    20ac:	41 15       	cp	r20, r1
    20ae:	51 05       	cpc	r21, r1
    20b0:	19 f0       	breq	.+6      	; 0x20b8 <malloc+0x5a>
    20b2:	84 17       	cp	r24, r20
    20b4:	95 07       	cpc	r25, r21
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <malloc+0x5c>
    20b8:	ac 01       	movw	r20, r24
    20ba:	fe 01       	movw	r30, r28
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	9c 01       	movw	r18, r24
    20c2:	e9 01       	movw	r28, r18
    20c4:	20 97       	sbiw	r28, 0x00	; 0
    20c6:	e9 f6       	brne	.-70     	; 0x2082 <malloc+0x24>
    20c8:	41 15       	cp	r20, r1
    20ca:	51 05       	cpc	r21, r1
    20cc:	a9 f1       	breq	.+106    	; 0x2138 <malloc+0xda>
    20ce:	ca 01       	movw	r24, r20
    20d0:	86 1b       	sub	r24, r22
    20d2:	97 0b       	sbc	r25, r23
    20d4:	04 97       	sbiw	r24, 0x04	; 4
    20d6:	08 f4       	brcc	.+2      	; 0x20da <malloc+0x7c>
    20d8:	ba 01       	movw	r22, r20
    20da:	e0 e0       	ldi	r30, 0x00	; 0
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	2a c0       	rjmp	.+84     	; 0x2134 <malloc+0xd6>
    20e0:	8d 91       	ld	r24, X+
    20e2:	9c 91       	ld	r25, X
    20e4:	11 97       	sbiw	r26, 0x01	; 1
    20e6:	84 17       	cp	r24, r20
    20e8:	95 07       	cpc	r25, r21
    20ea:	f9 f4       	brne	.+62     	; 0x212a <malloc+0xcc>
    20ec:	64 17       	cp	r22, r20
    20ee:	75 07       	cpc	r23, r21
    20f0:	81 f4       	brne	.+32     	; 0x2112 <malloc+0xb4>
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	8d 91       	ld	r24, X+
    20f6:	9c 91       	ld	r25, X
    20f8:	13 97       	sbiw	r26, 0x03	; 3
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	19 f0       	breq	.+6      	; 0x2104 <malloc+0xa6>
    20fe:	93 83       	std	Z+3, r25	; 0x03
    2100:	82 83       	std	Z+2, r24	; 0x02
    2102:	04 c0       	rjmp	.+8      	; 0x210c <malloc+0xae>
    2104:	90 93 89 02 	sts	0x0289, r25
    2108:	80 93 88 02 	sts	0x0288, r24
    210c:	fd 01       	movw	r30, r26
    210e:	32 96       	adiw	r30, 0x02	; 2
    2110:	4f c0       	rjmp	.+158    	; 0x21b0 <malloc+0x152>
    2112:	ca 01       	movw	r24, r20
    2114:	86 1b       	sub	r24, r22
    2116:	97 0b       	sbc	r25, r23
    2118:	fd 01       	movw	r30, r26
    211a:	e8 0f       	add	r30, r24
    211c:	f9 1f       	adc	r31, r25
    211e:	61 93       	st	Z+, r22
    2120:	71 93       	st	Z+, r23
    2122:	02 97       	sbiw	r24, 0x02	; 2
    2124:	8d 93       	st	X+, r24
    2126:	9c 93       	st	X, r25
    2128:	43 c0       	rjmp	.+134    	; 0x21b0 <malloc+0x152>
    212a:	fd 01       	movw	r30, r26
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	9c 01       	movw	r18, r24
    2132:	d9 01       	movw	r26, r18
    2134:	10 97       	sbiw	r26, 0x00	; 0
    2136:	a1 f6       	brne	.-88     	; 0x20e0 <malloc+0x82>
    2138:	80 91 86 02 	lds	r24, 0x0286
    213c:	90 91 87 02 	lds	r25, 0x0287
    2140:	89 2b       	or	r24, r25
    2142:	41 f4       	brne	.+16     	; 0x2154 <malloc+0xf6>
    2144:	80 91 7b 02 	lds	r24, 0x027B
    2148:	90 91 7c 02 	lds	r25, 0x027C
    214c:	90 93 87 02 	sts	0x0287, r25
    2150:	80 93 86 02 	sts	0x0286, r24
    2154:	40 91 7d 02 	lds	r20, 0x027D
    2158:	50 91 7e 02 	lds	r21, 0x027E
    215c:	41 15       	cp	r20, r1
    215e:	51 05       	cpc	r21, r1
    2160:	41 f4       	brne	.+16     	; 0x2172 <malloc+0x114>
    2162:	4d b7       	in	r20, 0x3d	; 61
    2164:	5e b7       	in	r21, 0x3e	; 62
    2166:	80 91 79 02 	lds	r24, 0x0279
    216a:	90 91 7a 02 	lds	r25, 0x027A
    216e:	48 1b       	sub	r20, r24
    2170:	59 0b       	sbc	r21, r25
    2172:	20 91 86 02 	lds	r18, 0x0286
    2176:	30 91 87 02 	lds	r19, 0x0287
    217a:	24 17       	cp	r18, r20
    217c:	35 07       	cpc	r19, r21
    217e:	b0 f4       	brcc	.+44     	; 0x21ac <malloc+0x14e>
    2180:	ca 01       	movw	r24, r20
    2182:	82 1b       	sub	r24, r18
    2184:	93 0b       	sbc	r25, r19
    2186:	86 17       	cp	r24, r22
    2188:	97 07       	cpc	r25, r23
    218a:	80 f0       	brcs	.+32     	; 0x21ac <malloc+0x14e>
    218c:	ab 01       	movw	r20, r22
    218e:	4e 5f       	subi	r20, 0xFE	; 254
    2190:	5f 4f       	sbci	r21, 0xFF	; 255
    2192:	84 17       	cp	r24, r20
    2194:	95 07       	cpc	r25, r21
    2196:	50 f0       	brcs	.+20     	; 0x21ac <malloc+0x14e>
    2198:	42 0f       	add	r20, r18
    219a:	53 1f       	adc	r21, r19
    219c:	50 93 87 02 	sts	0x0287, r21
    21a0:	40 93 86 02 	sts	0x0286, r20
    21a4:	f9 01       	movw	r30, r18
    21a6:	61 93       	st	Z+, r22
    21a8:	71 93       	st	Z+, r23
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <malloc+0x152>
    21ac:	e0 e0       	ldi	r30, 0x00	; 0
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	cf 01       	movw	r24, r30
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	08 95       	ret

000021b8 <free>:
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	09 f4       	brne	.+2      	; 0x21c2 <free+0xa>
    21c0:	50 c0       	rjmp	.+160    	; 0x2262 <free+0xaa>
    21c2:	ec 01       	movw	r28, r24
    21c4:	22 97       	sbiw	r28, 0x02	; 2
    21c6:	1b 82       	std	Y+3, r1	; 0x03
    21c8:	1a 82       	std	Y+2, r1	; 0x02
    21ca:	a0 91 88 02 	lds	r26, 0x0288
    21ce:	b0 91 89 02 	lds	r27, 0x0289
    21d2:	10 97       	sbiw	r26, 0x00	; 0
    21d4:	09 f1       	breq	.+66     	; 0x2218 <free+0x60>
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	ac 17       	cp	r26, r28
    21dc:	bd 07       	cpc	r27, r29
    21de:	08 f1       	brcs	.+66     	; 0x2222 <free+0x6a>
    21e0:	bb 83       	std	Y+3, r27	; 0x03
    21e2:	aa 83       	std	Y+2, r26	; 0x02
    21e4:	fe 01       	movw	r30, r28
    21e6:	21 91       	ld	r18, Z+
    21e8:	31 91       	ld	r19, Z+
    21ea:	e2 0f       	add	r30, r18
    21ec:	f3 1f       	adc	r31, r19
    21ee:	ae 17       	cp	r26, r30
    21f0:	bf 07       	cpc	r27, r31
    21f2:	79 f4       	brne	.+30     	; 0x2212 <free+0x5a>
    21f4:	8d 91       	ld	r24, X+
    21f6:	9c 91       	ld	r25, X
    21f8:	11 97       	sbiw	r26, 0x01	; 1
    21fa:	28 0f       	add	r18, r24
    21fc:	39 1f       	adc	r19, r25
    21fe:	2e 5f       	subi	r18, 0xFE	; 254
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	39 83       	std	Y+1, r19	; 0x01
    2204:	28 83       	st	Y, r18
    2206:	12 96       	adiw	r26, 0x02	; 2
    2208:	8d 91       	ld	r24, X+
    220a:	9c 91       	ld	r25, X
    220c:	13 97       	sbiw	r26, 0x03	; 3
    220e:	9b 83       	std	Y+3, r25	; 0x03
    2210:	8a 83       	std	Y+2, r24	; 0x02
    2212:	41 15       	cp	r20, r1
    2214:	51 05       	cpc	r21, r1
    2216:	71 f4       	brne	.+28     	; 0x2234 <free+0x7c>
    2218:	d0 93 89 02 	sts	0x0289, r29
    221c:	c0 93 88 02 	sts	0x0288, r28
    2220:	20 c0       	rjmp	.+64     	; 0x2262 <free+0xaa>
    2222:	12 96       	adiw	r26, 0x02	; 2
    2224:	8d 91       	ld	r24, X+
    2226:	9c 91       	ld	r25, X
    2228:	13 97       	sbiw	r26, 0x03	; 3
    222a:	ad 01       	movw	r20, r26
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	11 f0       	breq	.+4      	; 0x2234 <free+0x7c>
    2230:	dc 01       	movw	r26, r24
    2232:	d3 cf       	rjmp	.-90     	; 0x21da <free+0x22>
    2234:	fa 01       	movw	r30, r20
    2236:	d3 83       	std	Z+3, r29	; 0x03
    2238:	c2 83       	std	Z+2, r28	; 0x02
    223a:	21 91       	ld	r18, Z+
    223c:	31 91       	ld	r19, Z+
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	ce 17       	cp	r28, r30
    2244:	df 07       	cpc	r29, r31
    2246:	69 f4       	brne	.+26     	; 0x2262 <free+0xaa>
    2248:	88 81       	ld	r24, Y
    224a:	99 81       	ldd	r25, Y+1	; 0x01
    224c:	28 0f       	add	r18, r24
    224e:	39 1f       	adc	r19, r25
    2250:	2e 5f       	subi	r18, 0xFE	; 254
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	fa 01       	movw	r30, r20
    2256:	31 83       	std	Z+1, r19	; 0x01
    2258:	20 83       	st	Z, r18
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	9b 81       	ldd	r25, Y+3	; 0x03
    225e:	93 83       	std	Z+3, r25	; 0x03
    2260:	82 83       	std	Z+2, r24	; 0x02
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	08 95       	ret

00002268 <strnlen_P>:
    2268:	fc 01       	movw	r30, r24
    226a:	05 90       	lpm	r0, Z+
    226c:	61 50       	subi	r22, 0x01	; 1
    226e:	70 40       	sbci	r23, 0x00	; 0
    2270:	01 10       	cpse	r0, r1
    2272:	d8 f7       	brcc	.-10     	; 0x226a <strnlen_P+0x2>
    2274:	80 95       	com	r24
    2276:	90 95       	com	r25
    2278:	8e 0f       	add	r24, r30
    227a:	9f 1f       	adc	r25, r31
    227c:	08 95       	ret

0000227e <memset>:
    227e:	dc 01       	movw	r26, r24
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <memset+0x6>
    2282:	6d 93       	st	X+, r22
    2284:	41 50       	subi	r20, 0x01	; 1
    2286:	50 40       	sbci	r21, 0x00	; 0
    2288:	e0 f7       	brcc	.-8      	; 0x2282 <memset+0x4>
    228a:	08 95       	ret

0000228c <strnlen>:
    228c:	fc 01       	movw	r30, r24
    228e:	61 50       	subi	r22, 0x01	; 1
    2290:	70 40       	sbci	r23, 0x00	; 0
    2292:	01 90       	ld	r0, Z+
    2294:	01 10       	cpse	r0, r1
    2296:	d8 f7       	brcc	.-10     	; 0x228e <strnlen+0x2>
    2298:	80 95       	com	r24
    229a:	90 95       	com	r25
    229c:	8e 0f       	add	r24, r30
    229e:	9f 1f       	adc	r25, r31
    22a0:	08 95       	ret

000022a2 <fputc>:
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	8c 01       	movw	r16, r24
    22ac:	eb 01       	movw	r28, r22
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	81 ff       	sbrs	r24, 1
    22b2:	1b c0       	rjmp	.+54     	; 0x22ea <fputc+0x48>
    22b4:	82 ff       	sbrs	r24, 2
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <fputc+0x30>
    22b8:	2e 81       	ldd	r18, Y+6	; 0x06
    22ba:	3f 81       	ldd	r19, Y+7	; 0x07
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	9d 81       	ldd	r25, Y+5	; 0x05
    22c0:	28 17       	cp	r18, r24
    22c2:	39 07       	cpc	r19, r25
    22c4:	64 f4       	brge	.+24     	; 0x22de <fputc+0x3c>
    22c6:	e8 81       	ld	r30, Y
    22c8:	f9 81       	ldd	r31, Y+1	; 0x01
    22ca:	01 93       	st	Z+, r16
    22cc:	f9 83       	std	Y+1, r31	; 0x01
    22ce:	e8 83       	st	Y, r30
    22d0:	06 c0       	rjmp	.+12     	; 0x22de <fputc+0x3c>
    22d2:	e8 85       	ldd	r30, Y+8	; 0x08
    22d4:	f9 85       	ldd	r31, Y+9	; 0x09
    22d6:	80 2f       	mov	r24, r16
    22d8:	09 95       	icall
    22da:	89 2b       	or	r24, r25
    22dc:	31 f4       	brne	.+12     	; 0x22ea <fputc+0x48>
    22de:	8e 81       	ldd	r24, Y+6	; 0x06
    22e0:	9f 81       	ldd	r25, Y+7	; 0x07
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	9f 83       	std	Y+7, r25	; 0x07
    22e6:	8e 83       	std	Y+6, r24	; 0x06
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <fputc+0x4c>
    22ea:	0f ef       	ldi	r16, 0xFF	; 255
    22ec:	1f ef       	ldi	r17, 0xFF	; 255
    22ee:	c8 01       	movw	r24, r16
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <__ultoa_invert>:
    22fa:	fa 01       	movw	r30, r20
    22fc:	aa 27       	eor	r26, r26
    22fe:	28 30       	cpi	r18, 0x08	; 8
    2300:	51 f1       	breq	.+84     	; 0x2356 <__ultoa_invert+0x5c>
    2302:	20 31       	cpi	r18, 0x10	; 16
    2304:	81 f1       	breq	.+96     	; 0x2366 <__ultoa_invert+0x6c>
    2306:	e8 94       	clt
    2308:	6f 93       	push	r22
    230a:	6e 7f       	andi	r22, 0xFE	; 254
    230c:	6e 5f       	subi	r22, 0xFE	; 254
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	8f 4f       	sbci	r24, 0xFF	; 255
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	af 4f       	sbci	r26, 0xFF	; 255
    2316:	b1 e0       	ldi	r27, 0x01	; 1
    2318:	3e d0       	rcall	.+124    	; 0x2396 <__ultoa_invert+0x9c>
    231a:	b4 e0       	ldi	r27, 0x04	; 4
    231c:	3c d0       	rcall	.+120    	; 0x2396 <__ultoa_invert+0x9c>
    231e:	67 0f       	add	r22, r23
    2320:	78 1f       	adc	r23, r24
    2322:	89 1f       	adc	r24, r25
    2324:	9a 1f       	adc	r25, r26
    2326:	a1 1d       	adc	r26, r1
    2328:	68 0f       	add	r22, r24
    232a:	79 1f       	adc	r23, r25
    232c:	8a 1f       	adc	r24, r26
    232e:	91 1d       	adc	r25, r1
    2330:	a1 1d       	adc	r26, r1
    2332:	6a 0f       	add	r22, r26
    2334:	71 1d       	adc	r23, r1
    2336:	81 1d       	adc	r24, r1
    2338:	91 1d       	adc	r25, r1
    233a:	a1 1d       	adc	r26, r1
    233c:	20 d0       	rcall	.+64     	; 0x237e <__ultoa_invert+0x84>
    233e:	09 f4       	brne	.+2      	; 0x2342 <__ultoa_invert+0x48>
    2340:	68 94       	set
    2342:	3f 91       	pop	r19
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	26 9f       	mul	r18, r22
    2348:	11 24       	eor	r1, r1
    234a:	30 19       	sub	r19, r0
    234c:	30 5d       	subi	r19, 0xD0	; 208
    234e:	31 93       	st	Z+, r19
    2350:	de f6       	brtc	.-74     	; 0x2308 <__ultoa_invert+0xe>
    2352:	cf 01       	movw	r24, r30
    2354:	08 95       	ret
    2356:	46 2f       	mov	r20, r22
    2358:	47 70       	andi	r20, 0x07	; 7
    235a:	40 5d       	subi	r20, 0xD0	; 208
    235c:	41 93       	st	Z+, r20
    235e:	b3 e0       	ldi	r27, 0x03	; 3
    2360:	0f d0       	rcall	.+30     	; 0x2380 <__ultoa_invert+0x86>
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__ultoa_invert+0x5c>
    2364:	f6 cf       	rjmp	.-20     	; 0x2352 <__ultoa_invert+0x58>
    2366:	46 2f       	mov	r20, r22
    2368:	4f 70       	andi	r20, 0x0F	; 15
    236a:	40 5d       	subi	r20, 0xD0	; 208
    236c:	4a 33       	cpi	r20, 0x3A	; 58
    236e:	18 f0       	brcs	.+6      	; 0x2376 <__ultoa_invert+0x7c>
    2370:	49 5d       	subi	r20, 0xD9	; 217
    2372:	31 fd       	sbrc	r19, 1
    2374:	40 52       	subi	r20, 0x20	; 32
    2376:	41 93       	st	Z+, r20
    2378:	02 d0       	rcall	.+4      	; 0x237e <__ultoa_invert+0x84>
    237a:	a9 f7       	brne	.-22     	; 0x2366 <__ultoa_invert+0x6c>
    237c:	ea cf       	rjmp	.-44     	; 0x2352 <__ultoa_invert+0x58>
    237e:	b4 e0       	ldi	r27, 0x04	; 4
    2380:	a6 95       	lsr	r26
    2382:	97 95       	ror	r25
    2384:	87 95       	ror	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	ba 95       	dec	r27
    238c:	c9 f7       	brne	.-14     	; 0x2380 <__ultoa_invert+0x86>
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	61 05       	cpc	r22, r1
    2392:	71 05       	cpc	r23, r1
    2394:	08 95       	ret
    2396:	9b 01       	movw	r18, r22
    2398:	ac 01       	movw	r20, r24
    239a:	0a 2e       	mov	r0, r26
    239c:	06 94       	lsr	r0
    239e:	57 95       	ror	r21
    23a0:	47 95       	ror	r20
    23a2:	37 95       	ror	r19
    23a4:	27 95       	ror	r18
    23a6:	ba 95       	dec	r27
    23a8:	c9 f7       	brne	.-14     	; 0x239c <__ultoa_invert+0xa2>
    23aa:	62 0f       	add	r22, r18
    23ac:	73 1f       	adc	r23, r19
    23ae:	84 1f       	adc	r24, r20
    23b0:	95 1f       	adc	r25, r21
    23b2:	a0 1d       	adc	r26, r0
    23b4:	08 95       	ret

000023b6 <__udivmodsi4>:
    23b6:	a1 e2       	ldi	r26, 0x21	; 33
    23b8:	1a 2e       	mov	r1, r26
    23ba:	aa 1b       	sub	r26, r26
    23bc:	bb 1b       	sub	r27, r27
    23be:	fd 01       	movw	r30, r26
    23c0:	0d c0       	rjmp	.+26     	; 0x23dc <__udivmodsi4_ep>

000023c2 <__udivmodsi4_loop>:
    23c2:	aa 1f       	adc	r26, r26
    23c4:	bb 1f       	adc	r27, r27
    23c6:	ee 1f       	adc	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	a2 17       	cp	r26, r18
    23cc:	b3 07       	cpc	r27, r19
    23ce:	e4 07       	cpc	r30, r20
    23d0:	f5 07       	cpc	r31, r21
    23d2:	20 f0       	brcs	.+8      	; 0x23dc <__udivmodsi4_ep>
    23d4:	a2 1b       	sub	r26, r18
    23d6:	b3 0b       	sbc	r27, r19
    23d8:	e4 0b       	sbc	r30, r20
    23da:	f5 0b       	sbc	r31, r21

000023dc <__udivmodsi4_ep>:
    23dc:	66 1f       	adc	r22, r22
    23de:	77 1f       	adc	r23, r23
    23e0:	88 1f       	adc	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	1a 94       	dec	r1
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <__udivmodsi4_loop>
    23e8:	60 95       	com	r22
    23ea:	70 95       	com	r23
    23ec:	80 95       	com	r24
    23ee:	90 95       	com	r25
    23f0:	9b 01       	movw	r18, r22
    23f2:	ac 01       	movw	r20, r24
    23f4:	bd 01       	movw	r22, r26
    23f6:	cf 01       	movw	r24, r30
    23f8:	08 95       	ret

000023fa <__prologue_saves__>:
    23fa:	2f 92       	push	r2
    23fc:	3f 92       	push	r3
    23fe:	4f 92       	push	r4
    2400:	5f 92       	push	r5
    2402:	6f 92       	push	r6
    2404:	7f 92       	push	r7
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	ca 1b       	sub	r28, r26
    2424:	db 0b       	sbc	r29, r27
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	09 94       	ijmp

00002432 <__epilogue_restores__>:
    2432:	2a 88       	ldd	r2, Y+18	; 0x12
    2434:	39 88       	ldd	r3, Y+17	; 0x11
    2436:	48 88       	ldd	r4, Y+16	; 0x10
    2438:	5f 84       	ldd	r5, Y+15	; 0x0f
    243a:	6e 84       	ldd	r6, Y+14	; 0x0e
    243c:	7d 84       	ldd	r7, Y+13	; 0x0d
    243e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2440:	9b 84       	ldd	r9, Y+11	; 0x0b
    2442:	aa 84       	ldd	r10, Y+10	; 0x0a
    2444:	b9 84       	ldd	r11, Y+9	; 0x09
    2446:	c8 84       	ldd	r12, Y+8	; 0x08
    2448:	df 80       	ldd	r13, Y+7	; 0x07
    244a:	ee 80       	ldd	r14, Y+6	; 0x06
    244c:	fd 80       	ldd	r15, Y+5	; 0x05
    244e:	0c 81       	ldd	r16, Y+4	; 0x04
    2450:	1b 81       	ldd	r17, Y+3	; 0x03
    2452:	aa 81       	ldd	r26, Y+2	; 0x02
    2454:	b9 81       	ldd	r27, Y+1	; 0x01
    2456:	ce 0f       	add	r28, r30
    2458:	d1 1d       	adc	r29, r1
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	ed 01       	movw	r28, r26
    2466:	08 95       	ret

00002468 <_exit>:
    2468:	f8 94       	cli

0000246a <__stop_program>:
    246a:	ff cf       	rjmp	.-2      	; 0x246a <__stop_program>
