
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  000025a2  00002636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800242  00800242  00002778  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000029d  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd8  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000661  00000000  00000000  000037cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f15  00000000  00000000  00003e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00004d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e2 ea       	ldi	r30, 0xA2	; 162
      84:	f5 e2       	ldi	r31, 0x25	; 37
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a2 34       	cpi	r26, 0x42	; 66
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a2 e4       	ldi	r26, 0x42	; 66
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 34       	cpi	r26, 0x4C	; 76
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 cf 12 	jmp	0x259e	; 0x259e <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>

	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 70 00 	call	0xe0	; 0xe0 <init_UART>

	init_SRAM();
      c2:	0e 94 27 01 	call	0x24e	; 0x24e <init_SRAM>

	init_joystick();
      c6:	0e 94 1d 02 	call	0x43a	; 0x43a <init_joystick>
	
	SPI_MasterInit();	
      ca:	0e 94 a5 02 	call	0x54a	; 0x54a <SPI_MasterInit>

	CAN_init();
      ce:	0e 94 0c 03 	call	0x618	; 0x618 <CAN_init>
		//	read_axis('y');	

	
	

	butterfly_menu();
      d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <butterfly_menu>
	return 0;	
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
	
}
      da:	cf 91       	pop	r28
      dc:	df 91       	pop	r29
      de:	08 95       	ret

000000e0 <init_UART>:
unsigned char buffer_start;
unsigned char buffer_stop;
unsigned char buffer_used;
*/

int init_UART(unsigned int baud){
      e0:	df 93       	push	r29
      e2:	cf 93       	push	r28
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	27 97       	sbiw	r28, 0x07	; 7
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	f8 94       	cli
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	9f 83       	std	Y+7, r25	; 0x07
      f6:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
      f8:	8e 81       	ldd	r24, Y+6	; 0x06
      fa:	9f 81       	ldd	r25, Y+7	; 0x07
      fc:	cc 01       	movw	r24, r24
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8a 83       	std	Y+2, r24	; 0x02
     104:	9b 83       	std	Y+3, r25	; 0x03
     106:	ac 83       	std	Y+4, r26	; 0x04
     108:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     10a:	8a 81       	ldd	r24, Y+2	; 0x02
     10c:	9b 81       	ldd	r25, Y+3	; 0x03
     10e:	ac 81       	ldd	r26, Y+4	; 0x04
     110:	bd 81       	ldd	r27, Y+5	; 0x05
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	aa 1f       	adc	r26, r26
     118:	bb 1f       	adc	r27, r27
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	aa 1f       	adc	r26, r26
     120:	bb 1f       	adc	r27, r27
     122:	88 0f       	add	r24, r24
     124:	99 1f       	adc	r25, r25
     126:	aa 1f       	adc	r26, r26
     128:	bb 1f       	adc	r27, r27
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	aa 1f       	adc	r26, r26
     130:	bb 1f       	adc	r27, r27
     132:	9c 01       	movw	r18, r24
     134:	ad 01       	movw	r20, r26
     136:	8a ef       	ldi	r24, 0xFA	; 250
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	ab e4       	ldi	r26, 0x4B	; 75
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	bc 01       	movw	r22, r24
     140:	cd 01       	movw	r24, r26
     142:	0e 94 76 12 	call	0x24ec	; 0x24ec <__udivmodsi4>
     146:	da 01       	movw	r26, r20
     148:	c9 01       	movw	r24, r18
     14a:	01 97       	sbiw	r24, 0x01	; 1
     14c:	a1 09       	sbc	r26, r1
     14e:	b1 09       	sbc	r27, r1
     150:	8a 83       	std	Y+2, r24	; 0x02
     152:	9b 83       	std	Y+3, r25	; 0x03
     154:	ac 83       	std	Y+4, r26	; 0x04
     156:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     158:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ac 81       	ldd	r26, Y+4	; 0x04
     164:	bd 81       	ldd	r27, Y+5	; 0x05
     166:	89 2f       	mov	r24, r25
     168:	9a 2f       	mov	r25, r26
     16a:	ab 2f       	mov	r26, r27
     16c:	bb 27       	eor	r27, r27
     16e:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     170:	e9 e2       	ldi	r30, 0x29	; 41
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     178:	ea e2       	ldi	r30, 0x2A	; 42
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	88 e1       	ldi	r24, 0x18	; 24
     17e:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stoppbit, 1 for 2 stoppbit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 antall databits i payload: 011 for 8 bits. S. 192 i datablad */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	86 60       	ori	r24, 0x06	; 6
     184:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	80 62       	ori	r24, 0x20	; 32
     18a:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 må alltid skrives til 1*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	80 68       	ori	r24, 0x80	; 128
     190:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     192:	e0 e4       	ldi	r30, 0x40	; 64
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     19a:	8f ed       	ldi	r24, 0xDF	; 223
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	26 e0       	ldi	r18, 0x06	; 6
     1a0:	31 e0       	ldi	r19, 0x01	; 1
     1a2:	b9 01       	movw	r22, r18
     1a4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <fdevopen>

	return 0;
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0

} 
     1ac:	27 96       	adiw	r28, 0x07	; 7
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	f8 94       	cli
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	cd bf       	out	0x3d, r28	; 61
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <UART_put_char>:

int UART_put_char(char c, FILE* dummy){
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <UART_put_char+0x6>
     1c4:	0f 92       	push	r0
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	89 83       	std	Y+1, r24	; 0x01
     1cc:	7b 83       	std	Y+3, r23	; 0x03
     1ce:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	8a 30       	cpi	r24, 0x0A	; 10
     1d4:	31 f4       	brne	.+12     	; 0x1e2 <UART_put_char+0x24>
     1d6:	2a 81       	ldd	r18, Y+2	; 0x02
     1d8:	3b 81       	ldd	r19, Y+3	; 0x03
     1da:	8d e0       	ldi	r24, 0x0D	; 13
     1dc:	b9 01       	movw	r22, r18
     1de:	0e 94 df 00 	call	0x1be	; 0x1be <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     1e2:	eb e2       	ldi	r30, 0x2B	; 43
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	80 72       	andi	r24, 0x20	; 32
     1ee:	90 70       	andi	r25, 0x00	; 0
     1f0:	00 97       	sbiw	r24, 0x00	; 0
     1f2:	b9 f3       	breq	.-18     	; 0x1e2 <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     1f4:	ec e2       	ldi	r30, 0x2C	; 44
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	80 83       	st	Z, r24
	return 0;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
}
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <UART_get_char>:

int UART_get_char(FILE* dummy){
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	00 d0       	rcall	.+0      	; 0x212 <UART_get_char+0x6>
     212:	0f 92       	push	r0
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	9b 83       	std	Y+3, r25	; 0x03
     21a:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     21c:	eb e2       	ldi	r30, 0x2B	; 43
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 23       	and	r24, r24
     224:	dc f7       	brge	.-10     	; 0x21c <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     226:	ec e2       	ldi	r30, 0x2C	; 44
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	8d 30       	cpi	r24, 0x0D	; 13
     232:	11 f4       	brne	.+4      	; 0x238 <UART_get_char+0x2c>
     234:	8a e0       	ldi	r24, 0x0A	; 10
     236:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     238:	ec e2       	ldi	r30, 0x2C	; 44
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	88 2f       	mov	r24, r24
     240:	90 e0       	ldi	r25, 0x00	; 0
}
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	cf 91       	pop	r28
     24a:	df 91       	pop	r29
     24c:	08 95       	ret

0000024e <init_SRAM>:
#include <avr/io.h>
#include <util/delay.h>
#include "sram.h"
//Initialize the extended RAM
void init_SRAM(void)
{
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     256:	a5 e5       	ldi	r26, 0x55	; 85
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	e5 e5       	ldi	r30, 0x55	; 85
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	80 6c       	ori	r24, 0xC0	; 192
     262:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     264:	a6 e5       	ldi	r26, 0x56	; 86
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	e6 e5       	ldi	r30, 0x56	; 86
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	84 60       	ori	r24, 0x04	; 4
     270:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     272:	a0 e5       	ldi	r26, 0x50	; 80
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	e0 e5       	ldi	r30, 0x50	; 80
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	80 62       	ori	r24, 0x20	; 32
     27e:	8c 93       	st	X, r24
}
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	08 95       	ret

00000286 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     286:	df 93       	push	r29
     288:	cf 93       	push	r28
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	65 97       	sbiw	r28, 0x15	; 21
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e1       	ldi	r25, 0x10	; 16
     29e:	9d 8b       	std	Y+21, r25	; 0x15
     2a0:	8c 8b       	std	Y+20, r24	; 0x14
	printf("Starting...\n");
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <puts>

	int i;
	for(i=0;i<0x800;i++)
     2aa:	1b 8a       	std	Y+19, r1	; 0x13
     2ac:	1a 8a       	std	Y+18, r1	; 0x12
     2ae:	80 c0       	rjmp	.+256    	; 0x3b0 <SRAM_test+0x12a>
	{
		ram_address[i] = (char)0x83;
     2b0:	2a 89       	ldd	r18, Y+18	; 0x12
     2b2:	3b 89       	ldd	r19, Y+19	; 0x13
     2b4:	8c 89       	ldd	r24, Y+20	; 0x14
     2b6:	9d 89       	ldd	r25, Y+21	; 0x15
     2b8:	fc 01       	movw	r30, r24
     2ba:	e2 0f       	add	r30, r18
     2bc:	f3 1f       	adc	r31, r19
     2be:	83 e8       	ldi	r24, 0x83	; 131
     2c0:	80 83       	st	Z, r24
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	a0 e0       	ldi	r26, 0x00	; 0
     2c8:	b0 e4       	ldi	r27, 0x40	; 64
     2ca:	8b 87       	std	Y+11, r24	; 0x0b
     2cc:	9c 87       	std	Y+12, r25	; 0x0c
     2ce:	ad 87       	std	Y+13, r26	; 0x0d
     2d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2d2:	6b 85       	ldd	r22, Y+11	; 0x0b
     2d4:	7c 85       	ldd	r23, Y+12	; 0x0c
     2d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     2da:	2a e9       	ldi	r18, 0x9A	; 154
     2dc:	3b e9       	ldi	r19, 0x9B	; 155
     2de:	49 e9       	ldi	r20, 0x99	; 153
     2e0:	54 e4       	ldi	r21, 0x44	; 68
     2e2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	8f 83       	std	Y+7, r24	; 0x07
     2ec:	98 87       	std	Y+8, r25	; 0x08
     2ee:	a9 87       	std	Y+9, r26	; 0x09
     2f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     2f2:	6f 81       	ldd	r22, Y+7	; 0x07
     2f4:	78 85       	ldd	r23, Y+8	; 0x08
     2f6:	89 85       	ldd	r24, Y+9	; 0x09
     2f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e8       	ldi	r20, 0x80	; 128
     300:	5f e3       	ldi	r21, 0x3F	; 63
     302:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__ltsf2>
     306:	88 23       	and	r24, r24
     308:	2c f4       	brge	.+10     	; 0x314 <SRAM_test+0x8e>
		__ticks = 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	9e 83       	std	Y+6, r25	; 0x06
     310:	8d 83       	std	Y+5, r24	; 0x05
     312:	3f c0       	rjmp	.+126    	; 0x392 <SRAM_test+0x10c>
	else if (__tmp > 65535)
     314:	6f 81       	ldd	r22, Y+7	; 0x07
     316:	78 85       	ldd	r23, Y+8	; 0x08
     318:	89 85       	ldd	r24, Y+9	; 0x09
     31a:	9a 85       	ldd	r25, Y+10	; 0x0a
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	3f ef       	ldi	r19, 0xFF	; 255
     320:	4f e7       	ldi	r20, 0x7F	; 127
     322:	57 e4       	ldi	r21, 0x47	; 71
     324:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gtsf2>
     328:	18 16       	cp	r1, r24
     32a:	4c f5       	brge	.+82     	; 0x37e <SRAM_test+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32c:	6b 85       	ldd	r22, Y+11	; 0x0b
     32e:	7c 85       	ldd	r23, Y+12	; 0x0c
     330:	8d 85       	ldd	r24, Y+13	; 0x0d
     332:	9e 85       	ldd	r25, Y+14	; 0x0e
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 e2       	ldi	r20, 0x20	; 32
     33a:	51 e4       	ldi	r21, 0x41	; 65
     33c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	bc 01       	movw	r22, r24
     346:	cd 01       	movw	r24, r26
     348:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	9e 83       	std	Y+6, r25	; 0x06
     352:	8d 83       	std	Y+5, r24	; 0x05
     354:	0f c0       	rjmp	.+30     	; 0x374 <SRAM_test+0xee>
     356:	8a e7       	ldi	r24, 0x7A	; 122
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	9c 83       	std	Y+4, r25	; 0x04
     35c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <SRAM_test+0xdc>
     366:	9c 83       	std	Y+4, r25	; 0x04
     368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36a:	8d 81       	ldd	r24, Y+5	; 0x05
     36c:	9e 81       	ldd	r25, Y+6	; 0x06
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	9e 83       	std	Y+6, r25	; 0x06
     372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     374:	8d 81       	ldd	r24, Y+5	; 0x05
     376:	9e 81       	ldd	r25, Y+6	; 0x06
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	69 f7       	brne	.-38     	; 0x356 <SRAM_test+0xd0>
     37c:	14 c0       	rjmp	.+40     	; 0x3a6 <SRAM_test+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37e:	6f 81       	ldd	r22, Y+7	; 0x07
     380:	78 85       	ldd	r23, Y+8	; 0x08
     382:	89 85       	ldd	r24, Y+9	; 0x09
     384:	9a 85       	ldd	r25, Y+10	; 0x0a
     386:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	9e 83       	std	Y+6, r25	; 0x06
     390:	8d 83       	std	Y+5, r24	; 0x05
     392:	8d 81       	ldd	r24, Y+5	; 0x05
     394:	9e 81       	ldd	r25, Y+6	; 0x06
     396:	9a 83       	std	Y+2, r25	; 0x02
     398:	89 83       	std	Y+1, r24	; 0x01
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <SRAM_test+0x118>
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     3a6:	8a 89       	ldd	r24, Y+18	; 0x12
     3a8:	9b 89       	ldd	r25, Y+19	; 0x13
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	9b 8b       	std	Y+19, r25	; 0x13
     3ae:	8a 8b       	std	Y+18, r24	; 0x12
     3b0:	8a 89       	ldd	r24, Y+18	; 0x12
     3b2:	9b 89       	ldd	r25, Y+19	; 0x13
     3b4:	28 e0       	ldi	r18, 0x08	; 8
     3b6:	80 30       	cpi	r24, 0x00	; 0
     3b8:	92 07       	cpc	r25, r18
     3ba:	0c f4       	brge	.+2      	; 0x3be <SRAM_test+0x138>
     3bc:	79 cf       	rjmp	.-270    	; 0x2b0 <SRAM_test+0x2a>
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     3be:	1b 8a       	std	Y+19, r1	; 0x13
     3c0:	1a 8a       	std	Y+18, r1	; 0x12
     3c2:	30 c0       	rjmp	.+96     	; 0x424 <SRAM_test+0x19e>
	{
		char c = (char)ram_address[i];
     3c4:	2a 89       	ldd	r18, Y+18	; 0x12
     3c6:	3b 89       	ldd	r19, Y+19	; 0x13
     3c8:	8c 89       	ldd	r24, Y+20	; 0x14
     3ca:	9d 89       	ldd	r25, Y+21	; 0x15
     3cc:	fc 01       	movw	r30, r24
     3ce:	e2 0f       	add	r30, r18
     3d0:	f3 1f       	adc	r31, r19
     3d2:	80 81       	ld	r24, Z
     3d4:	89 8b       	std	Y+17, r24	; 0x11
		int j = (int)c;
     3d6:	89 89       	ldd	r24, Y+17	; 0x11
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	98 8b       	std	Y+16, r25	; 0x10
     3de:	8f 87       	std	Y+15, r24	; 0x0f
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     3e0:	2a 89       	ldd	r18, Y+18	; 0x12
     3e2:	3b 89       	ldd	r19, Y+19	; 0x13
     3e4:	8c 89       	ldd	r24, Y+20	; 0x14
     3e6:	9d 89       	ldd	r25, Y+21	; 0x15
     3e8:	fc 01       	movw	r30, r24
     3ea:	e2 0f       	add	r30, r18
     3ec:	f3 1f       	adc	r31, r19
     3ee:	80 81       	ld	r24, Z
     3f0:	83 38       	cpi	r24, 0x83	; 131
     3f2:	99 f0       	breq	.+38     	; 0x41a <SRAM_test+0x194>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <SRAM_test+0x170>
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <SRAM_test+0x172>
     3f8:	ed b7       	in	r30, 0x3d	; 61
     3fa:	fe b7       	in	r31, 0x3e	; 62
     3fc:	31 96       	adiw	r30, 0x01	; 1
     3fe:	8c e0       	ldi	r24, 0x0C	; 12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	91 83       	std	Z+1, r25	; 0x01
     404:	80 83       	st	Z, r24
     406:	8a 89       	ldd	r24, Y+18	; 0x12
     408:	9b 89       	ldd	r25, Y+19	; 0x13
     40a:	93 83       	std	Z+3, r25	; 0x03
     40c:	82 83       	std	Z+2, r24	; 0x02
     40e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <printf>
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     41a:	8a 89       	ldd	r24, Y+18	; 0x12
     41c:	9b 89       	ldd	r25, Y+19	; 0x13
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	9b 8b       	std	Y+19, r25	; 0x13
     422:	8a 8b       	std	Y+18, r24	; 0x12
     424:	8a 89       	ldd	r24, Y+18	; 0x12
     426:	9b 89       	ldd	r25, Y+19	; 0x13
     428:	28 e0       	ldi	r18, 0x08	; 8
     42a:	80 30       	cpi	r24, 0x00	; 0
     42c:	92 07       	cpc	r25, r18
     42e:	54 f2       	brlt	.-108    	; 0x3c4 <SRAM_test+0x13e>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     430:	83 e2       	ldi	r24, 0x23	; 35
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <puts>
     438:	ff cf       	rjmp	.-2      	; 0x438 <SRAM_test+0x1b2>

0000043a <init_joystick>:

#include <util/delay.h>



void init_joystick(){
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
	// sett opp port B: inn
	DDRB = 0x00; //inputs
     442:	e7 e3       	ldi	r30, 0x37	; 55
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull-ups
     448:	e8 e3       	ldi	r30, 0x38	; 56
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	80 83       	st	Z, r24
}
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <read_axis>:

int8_t read_axis(char axis) {
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	00 d0       	rcall	.+0      	; 0x45c <read_axis+0x6>
     45c:	00 d0       	rcall	.+0      	; 0x45e <read_axis+0x8>
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	98 e1       	ldi	r25, 0x18	; 24
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	88 37       	cpi	r24, 0x78	; 120
     470:	b1 f4       	brne	.+44     	; 0x49e <read_axis+0x48>
		adc_address[0] = 0x04;
     472:	e9 81       	ldd	r30, Y+1	; 0x01
     474:	fa 81       	ldd	r31, Y+2	; 0x02
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     47a:	e6 e3       	ldi	r30, 0x36	; 54
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	81 70       	andi	r24, 0x01	; 1
     486:	90 70       	andi	r25, 0x00	; 0
     488:	88 23       	and	r24, r24
     48a:	b9 f7       	brne	.-18     	; 0x47a <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     48c:	e9 81       	ldd	r30, Y+1	; 0x01
     48e:	fa 81       	ldd	r31, Y+2	; 0x02
     490:	80 81       	ld	r24, Z
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 74 02 	call	0x4e8	; 0x4e8 <eeprom_read_byte>
     49a:	8c 83       	std	Y+4, r24	; 0x04
     49c:	1d c0       	rjmp	.+58     	; 0x4d8 <read_axis+0x82>
	}
	else if(axis == 'y'){
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	89 37       	cpi	r24, 0x79	; 121
     4a2:	c1 f4       	brne	.+48     	; 0x4d4 <read_axis+0x7e>
		adc_address[0] = 0x06;
     4a4:	e9 81       	ldd	r30, Y+1	; 0x01
     4a6:	fa 81       	ldd	r31, Y+2	; 0x02
     4a8:	86 e0       	ldi	r24, 0x06	; 6
     4aa:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4ac:	e6 e3       	ldi	r30, 0x36	; 54
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	88 2f       	mov	r24, r24
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	81 70       	andi	r24, 0x01	; 1
     4b8:	90 70       	andi	r25, 0x00	; 0
     4ba:	88 23       	and	r24, r24
     4bc:	b9 f7       	brne	.-18     	; 0x4ac <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     4be:	e9 81       	ldd	r30, Y+1	; 0x01
     4c0:	fa 81       	ldd	r31, Y+2	; 0x02
     4c2:	80 81       	ld	r24, Z
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 50       	subi	r24, 0x00	; 0
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <eeprom_read_byte>
     4d0:	8c 83       	std	Y+4, r24	; 0x04
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <read_axis+0x82>
	}
	return -1;
     4d4:	8f ef       	ldi	r24, 0xFF	; 255
     4d6:	8c 83       	std	Y+4, r24	; 0x04
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <eeprom_read_byte+0x6>
     4ee:	0f 92       	push	r0
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9b 83       	std	Y+3, r25	; 0x03
     4f6:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     4f8:	ec e3       	ldi	r30, 0x3C	; 60
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	88 2f       	mov	r24, r24
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	82 70       	andi	r24, 0x02	; 2
     504:	90 70       	andi	r25, 0x00	; 0
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	b9 f7       	brne	.-18     	; 0x4f8 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     50a:	ee e3       	ldi	r30, 0x3E	; 62
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     516:	e0 9a       	sbi	0x1c, 0	; 28
     518:	8d b3       	in	r24, 0x1d	; 29
     51a:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     51c:	89 81       	ldd	r24, Y+1	; 0x01
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	cf 91       	pop	r28
     526:	df 91       	pop	r29
     528:	08 95       	ret

0000052a <read_buttons>:

inline uint8_t read_buttons(){
     52a:	df 93       	push	r29
     52c:	cf 93       	push	r28
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     532:	e6 e3       	ldi	r30, 0x36	; 54
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	86 70       	andi	r24, 0x06	; 6
     53e:	90 70       	andi	r25, 0x00	; 0
     540:	95 95       	asr	r25
     542:	87 95       	ror	r24
}
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <SPI_MasterInit>:
#include <avr/io.h>
#include "spi.h"

void SPI_MasterInit(void)
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     552:	a7 e3       	ldi	r26, 0x37	; 55
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	e7 e3       	ldi	r30, 0x37	; 55
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	87 70       	andi	r24, 0x07	; 7
     55e:	88 6b       	ori	r24, 0xB8	; 184
     560:	8c 93       	st	X, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     562:	ed e2       	ldi	r30, 0x2D	; 45
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	81 e5       	ldi	r24, 0x51	; 81
     568:	80 83       	st	Z, r24
	SPI_NoSlave();
     56a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
}
     56e:	cf 91       	pop	r28
     570:	df 91       	pop	r29
     572:	08 95       	ret

00000574 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	0f 92       	push	r0
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     580:	ef e2       	ldi	r30, 0x2F	; 47
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     588:	ee e2       	ldi	r30, 0x2E	; 46
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	88 23       	and	r24, r24
     590:	dc f7       	brge	.-10     	; 0x588 <SPI_MasterTransmit+0x14>
}
     592:	0f 90       	pop	r0
     594:	cf 91       	pop	r28
     596:	df 91       	pop	r29
     598:	08 95       	ret

0000059a <SPI_MasterReceive>:

char SPI_MasterReceive(void)
{
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     5a8:	ee e2       	ldi	r30, 0x2E	; 46
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	88 23       	and	r24, r24
     5b0:	dc f7       	brge	.-10     	; 0x5a8 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     5b2:	ef e2       	ldi	r30, 0x2F	; 47
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
}
     5b8:	cf 91       	pop	r28
     5ba:	df 91       	pop	r29
     5bc:	08 95       	ret

000005be <SPI_SelectSlave>:

void SPI_SelectSlave(char slave){
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	0f 92       	push	r0
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	89 83       	std	Y+1, r24	; 0x01

	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	82 36       	cpi	r24, 0x62	; 98
     5ce:	41 f4       	brne	.+16     	; 0x5e0 <SPI_SelectSlave+0x22>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     5d0:	a8 e3       	ldi	r26, 0x38	; 56
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	e8 e3       	ldi	r30, 0x38	; 56
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	87 7f       	andi	r24, 0xF7	; 247
     5dc:	8c 93       	st	X, r24
     5de:	0a c0       	rjmp	.+20     	; 0x5f4 <SPI_SelectSlave+0x36>
	else if (slave == SPI_CAN)
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	83 37       	cpi	r24, 0x73	; 115
     5e4:	39 f4       	brne	.+14     	; 0x5f4 <SPI_SelectSlave+0x36>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     5e6:	a8 e3       	ldi	r26, 0x38	; 56
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e8 e3       	ldi	r30, 0x38	; 56
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8f 7e       	andi	r24, 0xEF	; 239
     5f2:	8c 93       	st	X, r24
}
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	08 95       	ret

000005fc <SPI_NoSlave>:

void SPI_NoSlave(void){
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     604:	a8 e3       	ldi	r26, 0x38	; 56
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e8 e3       	ldi	r30, 0x38	; 56
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 61       	ori	r24, 0x18	; 24
     610:	8c 93       	st	X, r24
}
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	08 95       	ret

00000618 <CAN_init>:
#include "can.h"
#include "spi.h"
#include "settings.h"
#include <util/delay.h>

void CAN_init(void){
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     620:	0e 94 82 04 	call	0x904	; 0x904 <CAN_reset>

	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     624:	8f e0       	ldi	r24, 0x0F	; 15
     626:	60 ee       	ldi	r22, 0xE0	; 224
     628:	40 e4       	ldi	r20, 0x40	; 64
     62a:	0e 94 15 06 	call	0xc2a	; 0xc2a <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     62e:	80 e6       	ldi	r24, 0x60	; 96
     630:	60 e6       	ldi	r22, 0x60	; 96
     632:	40 e2       	ldi	r20, 0x20	; 32
     634:	0e 94 15 06 	call	0xc2a	; 0xc2a <CAN_bit_modify>
		
}
     638:	cf 91       	pop	r28
     63a:	df 91       	pop	r29
     63c:	08 95       	ret

0000063e <CAN_test>:

int CAN_test(void){
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	a4 97       	sbiw	r28, 0x24	; 36
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
	char received[9];
	char read[9];
	read[8] = '\0';
     652:	1a a2       	std	Y+34, r1	; 0x22
	int i;
	
	for (i = 0;(i < 9); i++)
     654:	18 8a       	std	Y+16, r1	; 0x10
     656:	1f 86       	std	Y+15, r1	; 0x0f
     658:	0d c0       	rjmp	.+26     	; 0x674 <CAN_test+0x36>
		received[i] = '\0';	
     65a:	2f 85       	ldd	r18, Y+15	; 0x0f
     65c:	38 89       	ldd	r19, Y+16	; 0x10
     65e:	ce 01       	movw	r24, r28
     660:	41 96       	adiw	r24, 0x11	; 17
     662:	fc 01       	movw	r30, r24
     664:	e2 0f       	add	r30, r18
     666:	f3 1f       	adc	r31, r19
     668:	10 82       	st	Z, r1
	char received[9];
	char read[9];
	read[8] = '\0';
	int i;
	
	for (i = 0;(i < 9); i++)
     66a:	8f 85       	ldd	r24, Y+15	; 0x0f
     66c:	98 89       	ldd	r25, Y+16	; 0x10
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	98 8b       	std	Y+16, r25	; 0x10
     672:	8f 87       	std	Y+15, r24	; 0x0f
     674:	8f 85       	ldd	r24, Y+15	; 0x0f
     676:	98 89       	ldd	r25, Y+16	; 0x10
     678:	89 30       	cpi	r24, 0x09	; 9
     67a:	91 05       	cpc	r25, r1
     67c:	74 f3       	brlt	.-36     	; 0x65a <CAN_test+0x1c>
		received[i] = '\0';	


	if (CAN_send(0, "aaaaaaaa", 8) != 0){
     67e:	2f e2       	ldi	r18, 0x2F	; 47
     680:	31 e0       	ldi	r19, 0x01	; 1
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	b9 01       	movw	r22, r18
     688:	48 e0       	ldi	r20, 0x08	; 8
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	0e 94 00 04 	call	0x800	; 0x800 <CAN_send>
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	29 f0       	breq	.+10     	; 0x69e <CAN_test+0x60>
		return -1;
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	9f ef       	ldi	r25, 0xFF	; 255
     698:	9c a3       	std	Y+36, r25	; 0x24
     69a:	8b a3       	std	Y+35, r24	; 0x23
     69c:	a6 c0       	rjmp	.+332    	; 0x7ea <CAN_test+0x1ac>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	a8 ec       	ldi	r26, 0xC8	; 200
     6a4:	b2 e4       	ldi	r27, 0x42	; 66
     6a6:	8b 87       	std	Y+11, r24	; 0x0b
     6a8:	9c 87       	std	Y+12, r25	; 0x0c
     6aa:	ad 87       	std	Y+13, r26	; 0x0d
     6ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6ae:	6b 85       	ldd	r22, Y+11	; 0x0b
     6b0:	7c 85       	ldd	r23, Y+12	; 0x0c
     6b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b6:	2a e9       	ldi	r18, 0x9A	; 154
     6b8:	3b e9       	ldi	r19, 0x9B	; 155
     6ba:	49 e9       	ldi	r20, 0x99	; 153
     6bc:	54 e4       	ldi	r21, 0x44	; 68
     6be:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	8f 83       	std	Y+7, r24	; 0x07
     6c8:	98 87       	std	Y+8, r25	; 0x08
     6ca:	a9 87       	std	Y+9, r26	; 0x09
     6cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6ce:	6f 81       	ldd	r22, Y+7	; 0x07
     6d0:	78 85       	ldd	r23, Y+8	; 0x08
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e8       	ldi	r20, 0x80	; 128
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__ltsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	2c f4       	brge	.+10     	; 0x6f0 <CAN_test+0xb2>
		__ticks = 1;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	9e 83       	std	Y+6, r25	; 0x06
     6ec:	8d 83       	std	Y+5, r24	; 0x05
     6ee:	3f c0       	rjmp	.+126    	; 0x76e <CAN_test+0x130>
	else if (__tmp > 65535)
     6f0:	6f 81       	ldd	r22, Y+7	; 0x07
     6f2:	78 85       	ldd	r23, Y+8	; 0x08
     6f4:	89 85       	ldd	r24, Y+9	; 0x09
     6f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	3f ef       	ldi	r19, 0xFF	; 255
     6fc:	4f e7       	ldi	r20, 0x7F	; 127
     6fe:	57 e4       	ldi	r21, 0x47	; 71
     700:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gtsf2>
     704:	18 16       	cp	r1, r24
     706:	4c f5       	brge	.+82     	; 0x75a <CAN_test+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     708:	6b 85       	ldd	r22, Y+11	; 0x0b
     70a:	7c 85       	ldd	r23, Y+12	; 0x0c
     70c:	8d 85       	ldd	r24, Y+13	; 0x0d
     70e:	9e 85       	ldd	r25, Y+14	; 0x0e
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e2       	ldi	r20, 0x20	; 32
     716:	51 e4       	ldi	r21, 0x41	; 65
     718:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
     728:	dc 01       	movw	r26, r24
     72a:	cb 01       	movw	r24, r22
     72c:	9e 83       	std	Y+6, r25	; 0x06
     72e:	8d 83       	std	Y+5, r24	; 0x05
     730:	0f c0       	rjmp	.+30     	; 0x750 <CAN_test+0x112>
     732:	8a e7       	ldi	r24, 0x7A	; 122
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9c 83       	std	Y+4, r25	; 0x04
     738:	8b 83       	std	Y+3, r24	; 0x03
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	9c 81       	ldd	r25, Y+4	; 0x04
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <CAN_test+0x100>
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     746:	8d 81       	ldd	r24, Y+5	; 0x05
     748:	9e 81       	ldd	r25, Y+6	; 0x06
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	9e 83       	std	Y+6, r25	; 0x06
     74e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	69 f7       	brne	.-38     	; 0x732 <CAN_test+0xf4>
     758:	14 c0       	rjmp	.+40     	; 0x782 <CAN_test+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     75a:	6f 81       	ldd	r22, Y+7	; 0x07
     75c:	78 85       	ldd	r23, Y+8	; 0x08
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	9a 85       	ldd	r25, Y+10	; 0x0a
     762:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	9e 83       	std	Y+6, r25	; 0x06
     76c:	8d 83       	std	Y+5, r24	; 0x05
     76e:	8d 81       	ldd	r24, Y+5	; 0x05
     770:	9e 81       	ldd	r25, Y+6	; 0x06
     772:	9a 83       	std	Y+2, r25	; 0x02
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	9a 81       	ldd	r25, Y+2	; 0x02
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <CAN_test+0x13c>
     77e:	9a 83       	std	Y+2, r25	; 0x02
     780:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(100);
		
	CAN_receive(received, 0); //rxbuffer 0
     782:	ce 01       	movw	r24, r28
     784:	41 96       	adiw	r24, 0x11	; 17
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	0e 94 5f 04 	call	0x8be	; 0x8be <CAN_receive>

	for (i = 0;(i < 9); i++)
     78e:	18 8a       	std	Y+16, r1	; 0x10
     790:	1f 86       	std	Y+15, r1	; 0x0f
     792:	20 c0       	rjmp	.+64     	; 0x7d4 <CAN_test+0x196>
		printf("0x%x ", (uint8_t)received[i]);
     794:	2f 85       	ldd	r18, Y+15	; 0x0f
     796:	38 89       	ldd	r19, Y+16	; 0x10
     798:	ce 01       	movw	r24, r28
     79a:	41 96       	adiw	r24, 0x11	; 17
     79c:	fc 01       	movw	r30, r24
     79e:	e2 0f       	add	r30, r18
     7a0:	f3 1f       	adc	r31, r19
     7a2:	80 81       	ld	r24, Z
     7a4:	28 2f       	mov	r18, r24
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <CAN_test+0x16c>
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <CAN_test+0x16e>
     7ac:	ed b7       	in	r30, 0x3d	; 61
     7ae:	fe b7       	in	r31, 0x3e	; 62
     7b0:	31 96       	adiw	r30, 0x01	; 1
     7b2:	88 e3       	ldi	r24, 0x38	; 56
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
     7ba:	33 83       	std	Z+3, r19	; 0x03
     7bc:	22 83       	std	Z+2, r18	; 0x02
     7be:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <printf>
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0

	_delay_ms(100);
		
	CAN_receive(received, 0); //rxbuffer 0

	for (i = 0;(i < 9); i++)
     7ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     7cc:	98 89       	ldd	r25, Y+16	; 0x10
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	98 8b       	std	Y+16, r25	; 0x10
     7d2:	8f 87       	std	Y+15, r24	; 0x0f
     7d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d6:	98 89       	ldd	r25, Y+16	; 0x10
     7d8:	89 30       	cpi	r24, 0x09	; 9
     7da:	91 05       	cpc	r25, r1
     7dc:	dc f2       	brlt	.-74     	; 0x794 <CAN_test+0x156>
		printf("0x%x ", (uint8_t)received[i]);
	printf("\n");
     7de:	8a e0       	ldi	r24, 0x0A	; 10
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <putchar>

	return 0;
     7e6:	1c a2       	std	Y+36, r1	; 0x24
     7e8:	1b a2       	std	Y+35, r1	; 0x23
     7ea:	8b a1       	ldd	r24, Y+35	; 0x23
     7ec:	9c a1       	ldd	r25, Y+36	; 0x24
}
     7ee:	a4 96       	adiw	r28, 0x24	; 36
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	08 95       	ret

00000800 <CAN_send>:

int CAN_send(int id, char* data, int n){
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	2a 97       	sbiw	r28, 0x0a	; 10
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	9c 83       	std	Y+4, r25	; 0x04
     816:	8b 83       	std	Y+3, r24	; 0x03
     818:	7e 83       	std	Y+6, r23	; 0x06
     81a:	6d 83       	std	Y+5, r22	; 0x05
     81c:	58 87       	std	Y+8, r21	; 0x08
     81e:	4f 83       	std	Y+7, r20	; 0x07
	
	unsigned int i;
	CAN_bit_modify(TXB0SIDH, 0xFF, (id<<13)); //transmit buffer 0 id high
     820:	81 e3       	ldi	r24, 0x31	; 49
     822:	6f ef       	ldi	r22, 0xFF	; 255
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	0e 94 15 06 	call	0xc2a	; 0xc2a <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	98 2f       	mov	r25, r24
     82e:	92 95       	swap	r25
     830:	99 0f       	add	r25, r25
     832:	90 7e       	andi	r25, 0xE0	; 224
     834:	82 e3       	ldi	r24, 0x32	; 50
     836:	60 ee       	ldi	r22, 0xE0	; 224
     838:	49 2f       	mov	r20, r25
     83a:	0e 94 15 06 	call	0xc2a	; 0xc2a <CAN_bit_modify>
	CAN_write((char *)&n, TXB0DLC, 1);	// data length (as char pointer)
     83e:	ce 01       	movw	r24, r28
     840:	07 96       	adiw	r24, 0x07	; 7
     842:	65 e3       	ldi	r22, 0x35	; 53
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0e 94 28 05 	call	0xa50	; 0xa50 <CAN_write>
	CAN_load_tx(data, 0, n); //load transmit buffer
     84c:	2f 81       	ldd	r18, Y+7	; 0x07
     84e:	38 85       	ldd	r19, Y+8	; 0x08
     850:	8d 81       	ldd	r24, Y+5	; 0x05
     852:	9e 81       	ldd	r25, Y+6	; 0x06
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	0e 94 64 05 	call	0xac8	; 0xac8 <CAN_load_tx>
	CAN_rts(0); //request to send
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <CAN_rts>
	

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     862:	1a 82       	std	Y+2, r1	; 0x02
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	0d c0       	rjmp	.+26     	; 0x882 <CAN_send+0x82>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     868:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <CAN_read_status>
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	84 70       	andi	r24, 0x04	; 4
     872:	90 70       	andi	r25, 0x00	; 0
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	59 f0       	breq	.+22     	; 0x88e <CAN_send+0x8e>
	CAN_load_tx(data, 0, n); //load transmit buffer
	CAN_rts(0); //request to send
	

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	8f 3f       	cpi	r24, 0xFF	; 255
     88a:	92 07       	cpc	r25, r18
     88c:	69 f7       	brne	.-38     	; 0x868 <CAN_send+0x68>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	if(i == 0xffff) return -1;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	2f ef       	ldi	r18, 0xFF	; 255
     894:	8f 3f       	cpi	r24, 0xFF	; 255
     896:	92 07       	cpc	r25, r18
     898:	29 f4       	brne	.+10     	; 0x8a4 <CAN_send+0xa4>
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	9a 87       	std	Y+10, r25	; 0x0a
     8a0:	89 87       	std	Y+9, r24	; 0x09
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <CAN_send+0xa8>
	return 0;
     8a4:	1a 86       	std	Y+10, r1	; 0x0a
     8a6:	19 86       	std	Y+9, r1	; 0x09
     8a8:	89 85       	ldd	r24, Y+9	; 0x09
     8aa:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     8ac:	2a 96       	adiw	r28, 0x0a	; 10
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	cf 91       	pop	r28
     8ba:	df 91       	pop	r29
     8bc:	08 95       	ret

000008be <CAN_receive>:

int CAN_receive(char * data, int rx){
     8be:	df 93       	push	r29
     8c0:	cf 93       	push	r28
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <CAN_receive+0x6>
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <CAN_receive+0x8>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	7c 83       	std	Y+4, r23	; 0x04
     8d0:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT for å sjekke type beskjed
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF) == 0); // loop until data received
     8d2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <CAN_read_status>
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	81 70       	andi	r24, 0x01	; 1
     8dc:	90 70       	andi	r25, 0x00	; 0
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	c1 f3       	breq	.-16     	; 0x8d2 <CAN_receive+0x14>
	CAN_read_rx(data, rx, 8);
     8e2:	2b 81       	ldd	r18, Y+3	; 0x03
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	62 2f       	mov	r22, r18
     8ea:	48 e0       	ldi	r20, 0x08	; 8
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <CAN_read_rx>
	
	return 0;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0

}
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	08 95       	ret

00000904 <CAN_reset>:



void CAN_reset(void){
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
     90c:	83 e7       	ldi	r24, 0x73	; 115
     90e:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
     912:	80 ec       	ldi	r24, 0xC0	; 192
     914:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_NoSlave();
     918:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
}
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <CAN_read>:

void CAN_read(char* data, uint8_t address , int data_count){
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	df 93       	push	r29
     928:	cf 93       	push	r28
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	27 97       	sbiw	r28, 0x07	; 7
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
     93e:	6d 83       	std	Y+5, r22	; 0x05
     940:	5f 83       	std	Y+7, r21	; 0x07
     942:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     944:	83 e7       	ldi	r24, 0x73	; 115
     946:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     956:	1a 82       	std	Y+2, r1	; 0x02
     958:	19 82       	std	Y+1, r1	; 0x01
     95a:	10 c0       	rjmp	.+32     	; 0x97c <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	3a 81       	ldd	r19, Y+2	; 0x02
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	8c 01       	movw	r16, r24
     966:	02 0f       	add	r16, r18
     968:	13 1f       	adc	r17, r19
     96a:	0e 94 cd 02 	call	0x59a	; 0x59a <SPI_MasterReceive>
     96e:	f8 01       	movw	r30, r16
     970:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	9a 83       	std	Y+2, r25	; 0x02
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	29 81       	ldd	r18, Y+1	; 0x01
     97e:	3a 81       	ldd	r19, Y+2	; 0x02
     980:	8e 81       	ldd	r24, Y+6	; 0x06
     982:	9f 81       	ldd	r25, Y+7	; 0x07
     984:	28 17       	cp	r18, r24
     986:	39 07       	cpc	r19, r25
     988:	4c f3       	brlt	.-46     	; 0x95c <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
     98a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>

}
     98e:	27 96       	adiw	r28, 0x07	; 7
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret

000009a4 <CAN_read_rx>:

void CAN_read_rx(char* data, uint8_t rx, int data_count){
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	27 97       	sbiw	r28, 0x07	; 7
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	6d 83       	std	Y+5, r22	; 0x05
     9c2:	5f 83       	std	Y+7, r21	; 0x07
     9c4:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	if (rx>1 || data_count > 8)
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	b8 f5       	brcc	.+110    	; 0xa3a <CAN_read_rx+0x96>
     9cc:	8e 81       	ldd	r24, Y+6	; 0x06
     9ce:	9f 81       	ldd	r25, Y+7	; 0x07
     9d0:	89 30       	cpi	r24, 0x09	; 9
     9d2:	91 05       	cpc	r25, r1
     9d4:	94 f5       	brge	.+100    	; 0xa3a <CAN_read_rx+0x96>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
     9d6:	8d 81       	ldd	r24, Y+5	; 0x05
     9d8:	88 23       	and	r24, r24
     9da:	19 f4       	brne	.+6      	; 0x9e2 <CAN_read_rx+0x3e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	8d 83       	std	Y+5, r24	; 0x05
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <CAN_read_rx+0x48>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
     9e2:	8d 81       	ldd	r24, Y+5	; 0x05
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	11 f4       	brne	.+4      	; 0x9ec <CAN_read_rx+0x48>
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
     9ec:	83 e7       	ldi	r24, 0x73	; 115
     9ee:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
     9f2:	8d 81       	ldd	r24, Y+5	; 0x05
     9f4:	88 2f       	mov	r24, r24
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	80 69       	ori	r24, 0x90	; 144
     9fe:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	for (i = 0; i < data_count; i++){
     a02:	1a 82       	std	Y+2, r1	; 0x02
     a04:	19 82       	std	Y+1, r1	; 0x01
     a06:	10 c0       	rjmp	.+32     	; 0xa28 <CAN_read_rx+0x84>
		data[i] = SPI_MasterReceive();
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	3a 81       	ldd	r19, Y+2	; 0x02
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	8c 01       	movw	r16, r24
     a12:	02 0f       	add	r16, r18
     a14:	13 1f       	adc	r17, r19
     a16:	0e 94 cd 02 	call	0x59a	; 0x59a <SPI_MasterReceive>
     a1a:	f8 01       	movw	r30, r16
     a1c:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < data_count; i++){
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	29 81       	ldd	r18, Y+1	; 0x01
     a2a:	3a 81       	ldd	r19, Y+2	; 0x02
     a2c:	8e 81       	ldd	r24, Y+6	; 0x06
     a2e:	9f 81       	ldd	r25, Y+7	; 0x07
     a30:	28 17       	cp	r18, r24
     a32:	39 07       	cpc	r19, r25
     a34:	4c f3       	brlt	.-46     	; 0xa08 <CAN_read_rx+0x64>
		data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
     a36:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
}
     a3a:	27 96       	adiw	r28, 0x07	; 7
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <CAN_write>:

void CAN_write(char* data, uint8_t address, int data_count){
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	27 97       	sbiw	r28, 0x07	; 7
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	6d 83       	std	Y+5, r22	; 0x05
     a6a:	5f 83       	std	Y+7, r21	; 0x07
     a6c:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     a6e:	83 e7       	ldi	r24, 0x73	; 115
     a70:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     a80:	1a 82       	std	Y+2, r1	; 0x02
     a82:	19 82       	std	Y+1, r1	; 0x01
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <CAN_write+0x54>
		SPI_MasterTransmit(data[i]);
     a86:	29 81       	ldd	r18, Y+1	; 0x01
     a88:	3a 81       	ldd	r19, Y+2	; 0x02
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	fc 01       	movw	r30, r24
     a90:	e2 0f       	add	r30, r18
     a92:	f3 1f       	adc	r31, r19
     a94:	80 81       	ld	r24, Z
     a96:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_WRITE);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	29 81       	ldd	r18, Y+1	; 0x01
     aa6:	3a 81       	ldd	r19, Y+2	; 0x02
     aa8:	8e 81       	ldd	r24, Y+6	; 0x06
     aaa:	9f 81       	ldd	r25, Y+7	; 0x07
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	54 f3       	brlt	.-44     	; 0xa86 <CAN_write+0x36>
		SPI_MasterTransmit(data[i]);
	}

	SPI_NoSlave();
     ab2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>

}
     ab6:	27 96       	adiw	r28, 0x07	; 7
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* data, uint8_t tx, int data_count){
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	27 97       	sbiw	r28, 0x07	; 7
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	9c 83       	std	Y+4, r25	; 0x04
     ade:	8b 83       	std	Y+3, r24	; 0x03
     ae0:	6d 83       	std	Y+5, r22	; 0x05
     ae2:	5f 83       	std	Y+7, r21	; 0x07
     ae4:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	if (tx>2 || data_count > 8)
     ae6:	8d 81       	ldd	r24, Y+5	; 0x05
     ae8:	83 30       	cpi	r24, 0x03	; 3
     aea:	08 f0       	brcs	.+2      	; 0xaee <CAN_load_tx+0x26>
     aec:	3f c0       	rjmp	.+126    	; 0xb6c <CAN_load_tx+0xa4>
     aee:	8e 81       	ldd	r24, Y+6	; 0x06
     af0:	9f 81       	ldd	r25, Y+7	; 0x07
     af2:	89 30       	cpi	r24, 0x09	; 9
     af4:	91 05       	cpc	r25, r1
     af6:	d4 f5       	brge	.+116    	; 0xb6c <CAN_load_tx+0xa4>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	81 50       	subi	r24, 0x01	; 1
     b06:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
     b08:	83 e7       	ldi	r24, 0x73	; 115
     b0a:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
     b0e:	8d 81       	ldd	r24, Y+5	; 0x05
     b10:	80 64       	ori	r24, 0x40	; 64
     b12:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     b16:	1a 82       	std	Y+2, r1	; 0x02
     b18:	19 82       	std	Y+1, r1	; 0x01
     b1a:	1b c0       	rjmp	.+54     	; 0xb52 <CAN_load_tx+0x8a>
		printf("%c", data[i]);
     b1c:	29 81       	ldd	r18, Y+1	; 0x01
     b1e:	3a 81       	ldd	r19, Y+2	; 0x02
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	9c 81       	ldd	r25, Y+4	; 0x04
     b24:	fc 01       	movw	r30, r24
     b26:	e2 0f       	add	r30, r18
     b28:	f3 1f       	adc	r31, r19
     b2a:	80 81       	ld	r24, Z
     b2c:	88 2f       	mov	r24, r24
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <putchar>
		SPI_MasterTransmit(data[i]);
     b34:	29 81       	ldd	r18, Y+1	; 0x01
     b36:	3a 81       	ldd	r19, Y+2	; 0x02
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	fc 01       	movw	r30, r24
     b3e:	e2 0f       	add	r30, r18
     b40:	f3 1f       	adc	r31, r19
     b42:	80 81       	ld	r24, Z
     b44:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < data_count; i++){
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	9a 83       	std	Y+2, r25	; 0x02
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	29 81       	ldd	r18, Y+1	; 0x01
     b54:	3a 81       	ldd	r19, Y+2	; 0x02
     b56:	8e 81       	ldd	r24, Y+6	; 0x06
     b58:	9f 81       	ldd	r25, Y+7	; 0x07
     b5a:	28 17       	cp	r18, r24
     b5c:	39 07       	cpc	r19, r25
     b5e:	f4 f2       	brlt	.-68     	; 0xb1c <CAN_load_tx+0x54>
		printf("%c", data[i]);
		SPI_MasterTransmit(data[i]);
	}

	SPI_NoSlave();
     b60:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
	printf("\n");
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <putchar>
}
     b6c:	27 96       	adiw	r28, 0x07	; 7
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <CAN_rts>:

void CAN_rts(uint8_t tx){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 23       	and	r24, r24
     b8e:	19 f4       	brne	.+6      	; 0xb96 <CAN_rts+0x18>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	0b c0       	rjmp	.+22     	; 0xbac <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <CAN_rts+0x24>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	01 f5       	brne	.+64     	; 0xbe8 <CAN_rts+0x6a>
     ba8:	84 e0       	ldi	r24, 0x04	; 4
     baa:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
     bac:	83 e7       	ldi	r24, 0x73	; 115
     bae:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>
	printf("Rts: 0x%x\n", (INS_RTS | tx));
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	00 d0       	rcall	.+0      	; 0xbbc <CAN_rts+0x3e>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <CAN_rts+0x40>
     bbe:	ed b7       	in	r30, 0x3d	; 61
     bc0:	fe b7       	in	r31, 0x3e	; 62
     bc2:	31 96       	adiw	r30, 0x01	; 1
     bc4:	8e e3       	ldi	r24, 0x3E	; 62
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
     bcc:	33 83       	std	Z+3, r19	; 0x03
     bce:	22 83       	std	Z+2, r18	; 0x02
     bd0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <printf>
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
	SPI_MasterTransmit(INS_RTS | tx);
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 68       	ori	r24, 0x80	; 128
     be0:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>

	SPI_NoSlave();
     be4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
}
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <CAN_read_status>:

uint8_t CAN_read_status(void){
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	0f 92       	push	r0
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
     bfa:	83 e7       	ldi	r24, 0x73	; 115
     bfc:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
     c00:	80 ea       	ldi	r24, 0xA0	; 160
     c02:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     c06:	0e 94 cd 02 	call	0x59a	; 0x59a <SPI_MasterReceive>
     c0a:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     c0c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
	
	return (uint8_t) status;
     c10:	89 81       	ldd	r24, Y+1	; 0x01

}
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <CAN_rx_status>:

uint8_t CAN_rx_status(void){
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
return 0;
     c22:	80 e0       	ldi	r24, 0x00	; 0

}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <CAN_bit_modify>:
void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <CAN_bit_modify+0x6>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	6a 83       	std	Y+2, r22	; 0x02
     c3a:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
     c3c:	83 e7       	ldi	r24, 0x73	; 115
     c3e:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
     c42:	85 e0       	ldi	r24, 0x05	; 5
     c44:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>

	SPI_NoSlave();
     c5a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	27 97       	sbiw	r28, 0x07	; 7
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     c82:	80 e3       	ldi	r24, 0x30	; 48
     c84:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     c86:	89 e4       	ldi	r24, 0x49	; 73
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>

	while(1){
		last_button = button;
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     c92:	0e 94 8f 07 	call	0xf1e	; 0xf1e <butterfly_poll_joystick>
     c96:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	98 17       	cp	r25, r24
     c9e:	b9 f3       	breq	.-18     	; 0xc8e <butterfly_menu+0x24>
			printf("state for: %d\n", menu_state);
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	28 2f       	mov	r18, r24
     ca4:	33 27       	eor	r19, r19
     ca6:	27 fd       	sbrc	r18, 7
     ca8:	30 95       	com	r19
     caa:	00 d0       	rcall	.+0      	; 0xcac <butterfly_menu+0x42>
     cac:	00 d0       	rcall	.+0      	; 0xcae <butterfly_menu+0x44>
     cae:	ed b7       	in	r30, 0x3d	; 61
     cb0:	fe b7       	in	r31, 0x3e	; 62
     cb2:	31 96       	adiw	r30, 0x01	; 1
     cb4:	83 e5       	ldi	r24, 0x53	; 83
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	80 83       	st	Z, r24
     cbc:	33 83       	std	Z+3, r19	; 0x03
     cbe:	22 83       	std	Z+2, r18	; 0x02
     cc0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <printf>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
			switch(button) {
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3f 83       	std	Y+7, r19	; 0x07
     cd4:	2e 83       	std	Y+6, r18	; 0x06
     cd6:	8e 81       	ldd	r24, Y+6	; 0x06
     cd8:	9f 81       	ldd	r25, Y+7	; 0x07
     cda:	85 36       	cpi	r24, 0x65	; 101
     cdc:	91 05       	cpc	r25, r1
     cde:	49 f1       	breq	.+82     	; 0xd32 <butterfly_menu+0xc8>
     ce0:	2e 81       	ldd	r18, Y+6	; 0x06
     ce2:	3f 81       	ldd	r19, Y+7	; 0x07
     ce4:	26 36       	cpi	r18, 0x66	; 102
     ce6:	31 05       	cpc	r19, r1
     ce8:	5c f4       	brge	.+22     	; 0xd00 <butterfly_menu+0x96>
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	80 33       	cpi	r24, 0x30	; 48
     cf0:	91 05       	cpc	r25, r1
     cf2:	69 f2       	breq	.-102    	; 0xc8e <butterfly_menu+0x24>
     cf4:	2e 81       	ldd	r18, Y+6	; 0x06
     cf6:	3f 81       	ldd	r19, Y+7	; 0x07
     cf8:	24 36       	cpi	r18, 0x64	; 100
     cfa:	31 05       	cpc	r19, r1
     cfc:	b1 f0       	breq	.+44     	; 0xd2a <butterfly_menu+0xc0>
     cfe:	20 c0       	rjmp	.+64     	; 0xd40 <butterfly_menu+0xd6>
     d00:	8e 81       	ldd	r24, Y+6	; 0x06
     d02:	9f 81       	ldd	r25, Y+7	; 0x07
     d04:	82 37       	cpi	r24, 0x72	; 114
     d06:	91 05       	cpc	r25, r1
     d08:	11 f2       	breq	.-124    	; 0xc8e <butterfly_menu+0x24>
     d0a:	2e 81       	ldd	r18, Y+6	; 0x06
     d0c:	3f 81       	ldd	r19, Y+7	; 0x07
     d0e:	25 37       	cpi	r18, 0x75	; 117
     d10:	31 05       	cpc	r19, r1
     d12:	39 f0       	breq	.+14     	; 0xd22 <butterfly_menu+0xb8>
     d14:	8e 81       	ldd	r24, Y+6	; 0x06
     d16:	9f 81       	ldd	r25, Y+7	; 0x07
     d18:	8c 36       	cpi	r24, 0x6C	; 108
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <butterfly_menu+0xb6>
     d1e:	b7 cf       	rjmp	.-146    	; 0xc8e <butterfly_menu+0x24>
     d20:	0f c0       	rjmp	.+30     	; 0xd40 <butterfly_menu+0xd6>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	81 50       	subi	r24, 0x01	; 1
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <butterfly_menu+0xde>
				case 'd': menu_state++;				break;
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	0b c0       	rjmp	.+22     	; 0xd48 <butterfly_menu+0xde>
				case 'e': start_game(menu_state);	break;
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	99 27       	eor	r25, r25
     d36:	87 fd       	sbrc	r24, 7
     d38:	90 95       	com	r25
     d3a:	0e 94 20 08 	call	0x1040	; 0x1040 <start_game>
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <butterfly_menu+0xde>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     d40:	82 e6       	ldi	r24, 0x62	; 98
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	33 27       	eor	r19, r19
     d4e:	27 fd       	sbrc	r18, 7
     d50:	30 95       	com	r19
     d52:	00 d0       	rcall	.+0      	; 0xd54 <butterfly_menu+0xea>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <butterfly_menu+0xec>
     d56:	ed b7       	in	r30, 0x3d	; 61
     d58:	fe b7       	in	r31, 0x3e	; 62
     d5a:	31 96       	adiw	r30, 0x01	; 1
     d5c:	88 e6       	ldi	r24, 0x68	; 104
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
     d64:	33 83       	std	Z+3, r19	; 0x03
     d66:	22 83       	std	Z+2, r18	; 0x02
     d68:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <printf>
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	88 23       	and	r24, r24
     d78:	14 f4       	brge	.+4      	; 0xd7e <butterfly_menu+0x114>
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	0c f0       	brlt	.+2      	; 0xd86 <butterfly_menu+0x11c>
     d84:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	28 2f       	mov	r18, r24
     d8a:	33 27       	eor	r19, r19
     d8c:	27 fd       	sbrc	r18, 7
     d8e:	30 95       	com	r19
     d90:	3d 83       	std	Y+5, r19	; 0x05
     d92:	2c 83       	std	Y+4, r18	; 0x04
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	d1 f0       	breq	.+52     	; 0xdd2 <butterfly_menu+0x168>
     d9e:	2c 81       	ldd	r18, Y+4	; 0x04
     da0:	3d 81       	ldd	r19, Y+5	; 0x05
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	2c f4       	brge	.+10     	; 0xdb2 <butterfly_menu+0x148>
     da8:	8c 81       	ldd	r24, Y+4	; 0x04
     daa:	9d 81       	ldd	r25, Y+5	; 0x05
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	61 f0       	breq	.+24     	; 0xdc8 <butterfly_menu+0x15e>
     db0:	1f c0       	rjmp	.+62     	; 0xdf0 <butterfly_menu+0x186>
     db2:	2c 81       	ldd	r18, Y+4	; 0x04
     db4:	3d 81       	ldd	r19, Y+5	; 0x05
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	81 f0       	breq	.+32     	; 0xddc <butterfly_menu+0x172>
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	91 05       	cpc	r25, r1
     dc4:	81 f0       	breq	.+32     	; 0xde6 <butterfly_menu+0x17c>
     dc6:	14 c0       	rjmp	.+40     	; 0xdf0 <butterfly_menu+0x186>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     dc8:	89 e7       	ldi	r24, 0x79	; 121
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     dd0:	5e cf       	rjmp	.-324    	; 0xc8e <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     dd2:	81 e9       	ldi	r24, 0x91	; 145
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     dda:	59 cf       	rjmp	.-334    	; 0xc8e <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     ddc:	88 ea       	ldi	r24, 0xA8	; 168
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     de4:	54 cf       	rjmp	.-344    	; 0xc8e <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     de6:	8d eb       	ldi	r24, 0xBD	; 189
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     dee:	4f cf       	rjmp	.-354    	; 0xc8e <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     df0:	1b 82       	std	Y+3, r1	; 0x03
     df2:	4d cf       	rjmp	.-358    	; 0xc8e <butterfly_menu+0x24>

00000df4 <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	00 d0       	rcall	.+0      	; 0xdfa <butterfly_joystick_test+0x6>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <butterfly_joystick_test+0x8>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     e00:	80 e3       	ldi	r24, 0x30	; 48
     e02:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     e08:	0e 94 8f 07 	call	0xf1e	; 0xf1e <butterfly_poll_joystick>
     e0c:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	98 17       	cp	r25, r24
     e14:	b9 f3       	breq	.-18     	; 0xe04 <butterfly_joystick_test+0x10>
			switch(button) {
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	3c 83       	std	Y+4, r19	; 0x04
     e1e:	2b 83       	std	Y+3, r18	; 0x03
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	85 36       	cpi	r24, 0x65	; 101
     e26:	91 05       	cpc	r25, r1
     e28:	99 f1       	breq	.+102    	; 0xe90 <butterfly_joystick_test+0x9c>
     e2a:	2b 81       	ldd	r18, Y+3	; 0x03
     e2c:	3c 81       	ldd	r19, Y+4	; 0x04
     e2e:	26 36       	cpi	r18, 0x66	; 102
     e30:	31 05       	cpc	r19, r1
     e32:	5c f4       	brge	.+22     	; 0xe4a <butterfly_joystick_test+0x56>
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	80 33       	cpi	r24, 0x30	; 48
     e3a:	91 05       	cpc	r25, r1
     e3c:	71 f1       	breq	.+92     	; 0xe9a <butterfly_joystick_test+0xa6>
     e3e:	2b 81       	ldd	r18, Y+3	; 0x03
     e40:	3c 81       	ldd	r19, Y+4	; 0x04
     e42:	24 36       	cpi	r18, 0x64	; 100
     e44:	31 05       	cpc	r19, r1
     e46:	f9 f0       	breq	.+62     	; 0xe86 <butterfly_joystick_test+0x92>
     e48:	2d c0       	rjmp	.+90     	; 0xea4 <butterfly_joystick_test+0xb0>
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	82 37       	cpi	r24, 0x72	; 114
     e50:	91 05       	cpc	r25, r1
     e52:	79 f0       	breq	.+30     	; 0xe72 <butterfly_joystick_test+0x7e>
     e54:	2b 81       	ldd	r18, Y+3	; 0x03
     e56:	3c 81       	ldd	r19, Y+4	; 0x04
     e58:	25 37       	cpi	r18, 0x75	; 117
     e5a:	31 05       	cpc	r19, r1
     e5c:	79 f0       	breq	.+30     	; 0xe7c <butterfly_joystick_test+0x88>
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	8c 36       	cpi	r24, 0x6C	; 108
     e64:	91 05       	cpc	r25, r1
     e66:	f1 f4       	brne	.+60     	; 0xea4 <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
     e68:	81 ed       	ldi	r24, 0xD1	; 209
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     e70:	c9 cf       	rjmp	.-110    	; 0xe04 <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
     e72:	86 ed       	ldi	r24, 0xD6	; 214
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     e7a:	c4 cf       	rjmp	.-120    	; 0xe04 <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
     e7c:	8c ed       	ldi	r24, 0xDC	; 220
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     e84:	bf cf       	rjmp	.-130    	; 0xe04 <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
     e86:	8f ed       	ldi	r24, 0xDF	; 223
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     e8e:	ba cf       	rjmp	.-140    	; 0xe04 <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
     e90:	84 ee       	ldi	r24, 0xE4	; 228
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     e98:	b5 cf       	rjmp	.-150    	; 0xe04 <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
     e9a:	8a ee       	ldi	r24, 0xEA	; 234
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     ea2:	b0 cf       	rjmp	.-160    	; 0xe04 <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
     ea4:	82 e6       	ldi	r24, 0x62	; 98
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
     eac:	ab cf       	rjmp	.-170    	; 0xe04 <butterfly_joystick_test+0x10>

00000eae <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <butterfly_print+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <butterfly_print+0x8>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9c 83       	std	Y+4, r25	; 0x04
     ebc:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	SPI_SelectSlave(SPI_BUTTERFLY);
     ebe:	82 e6       	ldi	r24, 0x62	; 98
     ec0:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     ec4:	1a 82       	std	Y+2, r1	; 0x02
     ec6:	19 82       	std	Y+1, r1	; 0x01
     ec8:	19 c0       	rjmp	.+50     	; 0xefc <butterfly_print+0x4e>
		if (str[i] == '\0') break;
     eca:	29 81       	ldd	r18, Y+1	; 0x01
     ecc:	3a 81       	ldd	r19, Y+2	; 0x02
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	fc 01       	movw	r30, r24
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	a1 f0       	breq	.+40     	; 0xf06 <butterfly_print+0x58>
		SPI_MasterTransmit(str[i]);
     ede:	29 81       	ldd	r18, Y+1	; 0x01
     ee0:	3a 81       	ldd	r19, Y+2	; 0x02
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	fc 01       	movw	r30, r24
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	80 81       	ld	r24, Z
     eee:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
}

void butterfly_print(char * str){
	int i;
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	88 31       	cpi	r24, 0x18	; 24
     f02:	91 05       	cpc	r25, r1
     f04:	14 f3       	brlt	.-60     	; 0xeca <butterfly_print+0x1c>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
	SPI_NoSlave();
     f0c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	2f 97       	sbiw	r28, 0x0f	; 15
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
	char button;	
	SPI_SelectSlave(SPI_BUTTERFLY);
     f32:	82 e6       	ldi	r24, 0x62	; 98
     f34:	0e 94 df 02 	call	0x5be	; 0x5be <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     f38:	8e e2       	ldi	r24, 0x2E	; 46
     f3a:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_MasterTransmit>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e2       	ldi	r26, 0x20	; 32
     f44:	b1 e4       	ldi	r27, 0x41	; 65
     f46:	8b 87       	std	Y+11, r24	; 0x0b
     f48:	9c 87       	std	Y+12, r25	; 0x0c
     f4a:	ad 87       	std	Y+13, r26	; 0x0d
     f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f50:	7c 85       	ldd	r23, Y+12	; 0x0c
     f52:	8d 85       	ldd	r24, Y+13	; 0x0d
     f54:	9e 85       	ldd	r25, Y+14	; 0x0e
     f56:	2a e9       	ldi	r18, 0x9A	; 154
     f58:	3b e9       	ldi	r19, 0x9B	; 155
     f5a:	49 e9       	ldi	r20, 0x99	; 153
     f5c:	54 e4       	ldi	r21, 0x44	; 68
     f5e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8f 83       	std	Y+7, r24	; 0x07
     f68:	98 87       	std	Y+8, r25	; 0x08
     f6a:	a9 87       	std	Y+9, r26	; 0x09
     f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <butterfly_poll_joystick+0x72>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	3f c0       	rjmp	.+126    	; 0x100e <butterfly_poll_joystick+0xf0>
	else if (__tmp > 65535)
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	4c f5       	brge	.+82     	; 0xffa <butterfly_poll_joystick+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
     faa:	7c 85       	ldd	r23, Y+12	; 0x0c
     fac:	8d 85       	ldd	r24, Y+13	; 0x0d
     fae:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9e 83       	std	Y+6, r25	; 0x06
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <butterfly_poll_joystick+0xd2>
     fd2:	8a e7       	ldi	r24, 0x7A	; 122
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <butterfly_poll_joystick+0xc0>
     fe2:	9c 83       	std	Y+4, r25	; 0x04
     fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <butterfly_poll_joystick+0xb4>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <butterfly_poll_joystick+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffa:	6f 81       	ldd	r22, Y+7	; 0x07
     ffc:	78 85       	ldd	r23, Y+8	; 0x08
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	9a 85       	ldd	r25, Y+10	; 0x0a
    1002:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <butterfly_poll_joystick+0xfc>
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
    1022:	0e 94 cd 02 	call	0x59a	; 0x59a <SPI_MasterReceive>
    1026:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
    1028:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SPI_NoSlave>
	return button;
    102c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    102e:	2f 96       	adiw	r28, 0x0f	; 15
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <start_game>:

void start_game(enum menu_state_enum menu_state){
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	61 97       	sbiw	r28, 0x11	; 17
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
    1056:	8f 85       	ldd	r24, Y+15	; 0x0f
    1058:	28 2f       	mov	r18, r24
    105a:	33 27       	eor	r19, r19
    105c:	27 fd       	sbrc	r18, 7
    105e:	30 95       	com	r19
    1060:	39 8b       	std	Y+17, r19	; 0x11
    1062:	28 8b       	std	Y+16, r18	; 0x10
    1064:	88 89       	ldd	r24, Y+16	; 0x10
    1066:	99 89       	ldd	r25, Y+17	; 0x11
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	d1 f0       	breq	.+52     	; 0x10a2 <start_game+0x62>
    106e:	28 89       	ldd	r18, Y+16	; 0x10
    1070:	39 89       	ldd	r19, Y+17	; 0x11
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <start_game+0x42>
    1078:	88 89       	ldd	r24, Y+16	; 0x10
    107a:	99 89       	ldd	r25, Y+17	; 0x11
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	61 f0       	breq	.+24     	; 0x1098 <start_game+0x58>
    1080:	90 c0       	rjmp	.+288    	; 0x11a2 <start_game+0x162>
    1082:	28 89       	ldd	r18, Y+16	; 0x10
    1084:	39 89       	ldd	r19, Y+17	; 0x11
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	81 f0       	breq	.+32     	; 0x10ac <start_game+0x6c>
    108c:	88 89       	ldd	r24, Y+16	; 0x10
    108e:	99 89       	ldd	r25, Y+17	; 0x11
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <start_game+0x76>
    1096:	85 c0       	rjmp	.+266    	; 0x11a2 <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
    1098:	81 ef       	ldi	r24, 0xF1	; 241
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("flerspiller poeng");
    10ac:	80 e1       	ldi	r24, 0x10	; 16
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("flerspiller evig");	
    10b6:	82 e2       	ldi	r24, 0x22	; 34
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	0e 94 57 07 	call	0xeae	; 0xeae <butterfly_print>
			break;
		default:			
			return;
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e4       	ldi	r25, 0x40	; 64
    10c2:	ac e9       	ldi	r26, 0x9C	; 156
    10c4:	b5 e4       	ldi	r27, 0x45	; 69
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
    10c8:	9c 87       	std	Y+12, r25	; 0x0c
    10ca:	ad 87       	std	Y+13, r26	; 0x0d
    10cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	2a e9       	ldi	r18, 0x9A	; 154
    10d8:	3b e9       	ldi	r19, 0x9B	; 155
    10da:	49 e9       	ldi	r20, 0x99	; 153
    10dc:	54 e4       	ldi	r21, 0x44	; 68
    10de:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	8f 83       	std	Y+7, r24	; 0x07
    10e8:	98 87       	std	Y+8, r25	; 0x08
    10ea:	a9 87       	std	Y+9, r26	; 0x09
    10ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ee:	6f 81       	ldd	r22, Y+7	; 0x07
    10f0:	78 85       	ldd	r23, Y+8	; 0x08
    10f2:	89 85       	ldd	r24, Y+9	; 0x09
    10f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e8       	ldi	r20, 0x80	; 128
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__ltsf2>
    1102:	88 23       	and	r24, r24
    1104:	2c f4       	brge	.+10     	; 0x1110 <start_game+0xd0>
		__ticks = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	3f c0       	rjmp	.+126    	; 0x118e <start_game+0x14e>
	else if (__tmp > 65535)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	57 e4       	ldi	r21, 0x47	; 71
    1120:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <start_game+0x130>
    1152:	8a e7       	ldi	r24, 0x7A	; 122
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <start_game+0x11e>
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f7       	brne	.-38     	; 0x1152 <start_game+0x112>
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <start_game+0x15a>
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(5000);
}
    11a2:	61 96       	adiw	r28, 0x11	; 17
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <__fixunssfsi>:
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	7b 01       	movw	r14, r22
    11be:	8c 01       	movw	r16, r24
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	5f e4       	ldi	r21, 0x4F	; 79
    11c8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__gesf2>
    11cc:	88 23       	and	r24, r24
    11ce:	8c f0       	brlt	.+34     	; 0x11f2 <__fixunssfsi+0x3e>
    11d0:	c8 01       	movw	r24, r16
    11d2:	b7 01       	movw	r22, r14
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	5f e4       	ldi	r21, 0x4F	; 79
    11dc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__subsf3>
    11e0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixsfsi>
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	20 50       	subi	r18, 0x00	; 0
    11ea:	30 40       	sbci	r19, 0x00	; 0
    11ec:	40 40       	sbci	r20, 0x00	; 0
    11ee:	50 48       	sbci	r21, 0x80	; 128
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <__fixunssfsi+0x4a>
    11f2:	c8 01       	movw	r24, r16
    11f4:	b7 01       	movw	r22, r14
    11f6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixsfsi>
    11fa:	9b 01       	movw	r18, r22
    11fc:	ac 01       	movw	r20, r24
    11fe:	b9 01       	movw	r22, r18
    1200:	ca 01       	movw	r24, r20
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <_fpadd_parts>:
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ec e0       	ldi	r30, 0x0C	; 12
    1212:	f9 e0       	ldi	r31, 0x09	; 9
    1214:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__prologue_saves__>
    1218:	dc 01       	movw	r26, r24
    121a:	2b 01       	movw	r4, r22
    121c:	fa 01       	movw	r30, r20
    121e:	9c 91       	ld	r25, X
    1220:	92 30       	cpi	r25, 0x02	; 2
    1222:	08 f4       	brcc	.+2      	; 0x1226 <_fpadd_parts+0x1a>
    1224:	39 c1       	rjmp	.+626    	; 0x1498 <_fpadd_parts+0x28c>
    1226:	eb 01       	movw	r28, r22
    1228:	88 81       	ld	r24, Y
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	08 f4       	brcc	.+2      	; 0x1230 <_fpadd_parts+0x24>
    122e:	33 c1       	rjmp	.+614    	; 0x1496 <_fpadd_parts+0x28a>
    1230:	94 30       	cpi	r25, 0x04	; 4
    1232:	69 f4       	brne	.+26     	; 0x124e <_fpadd_parts+0x42>
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	09 f0       	breq	.+2      	; 0x123a <_fpadd_parts+0x2e>
    1238:	2f c1       	rjmp	.+606    	; 0x1498 <_fpadd_parts+0x28c>
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	9c 91       	ld	r25, X
    123e:	11 97       	sbiw	r26, 0x01	; 1
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	98 17       	cp	r25, r24
    1244:	09 f4       	brne	.+2      	; 0x1248 <_fpadd_parts+0x3c>
    1246:	28 c1       	rjmp	.+592    	; 0x1498 <_fpadd_parts+0x28c>
    1248:	a3 e3       	ldi	r26, 0x33	; 51
    124a:	b2 e0       	ldi	r27, 0x02	; 2
    124c:	25 c1       	rjmp	.+586    	; 0x1498 <_fpadd_parts+0x28c>
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	09 f4       	brne	.+2      	; 0x1254 <_fpadd_parts+0x48>
    1252:	21 c1       	rjmp	.+578    	; 0x1496 <_fpadd_parts+0x28a>
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	a9 f4       	brne	.+42     	; 0x1282 <_fpadd_parts+0x76>
    1258:	92 30       	cpi	r25, 0x02	; 2
    125a:	09 f0       	breq	.+2      	; 0x125e <_fpadd_parts+0x52>
    125c:	1d c1       	rjmp	.+570    	; 0x1498 <_fpadd_parts+0x28c>
    125e:	9a 01       	movw	r18, r20
    1260:	ad 01       	movw	r20, r26
    1262:	88 e0       	ldi	r24, 0x08	; 8
    1264:	ea 01       	movw	r28, r20
    1266:	09 90       	ld	r0, Y+
    1268:	ae 01       	movw	r20, r28
    126a:	e9 01       	movw	r28, r18
    126c:	09 92       	st	Y+, r0
    126e:	9e 01       	movw	r18, r28
    1270:	81 50       	subi	r24, 0x01	; 1
    1272:	c1 f7       	brne	.-16     	; 0x1264 <_fpadd_parts+0x58>
    1274:	e2 01       	movw	r28, r4
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	11 96       	adiw	r26, 0x01	; 1
    127a:	9c 91       	ld	r25, X
    127c:	89 23       	and	r24, r25
    127e:	81 83       	std	Z+1, r24	; 0x01
    1280:	08 c1       	rjmp	.+528    	; 0x1492 <_fpadd_parts+0x286>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	09 f4       	brne	.+2      	; 0x1288 <_fpadd_parts+0x7c>
    1286:	07 c1       	rjmp	.+526    	; 0x1496 <_fpadd_parts+0x28a>
    1288:	12 96       	adiw	r26, 0x02	; 2
    128a:	2d 90       	ld	r2, X+
    128c:	3c 90       	ld	r3, X
    128e:	13 97       	sbiw	r26, 0x03	; 3
    1290:	eb 01       	movw	r28, r22
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	14 96       	adiw	r26, 0x04	; 4
    1298:	ad 90       	ld	r10, X+
    129a:	bd 90       	ld	r11, X+
    129c:	cd 90       	ld	r12, X+
    129e:	dc 90       	ld	r13, X
    12a0:	17 97       	sbiw	r26, 0x07	; 7
    12a2:	ec 80       	ldd	r14, Y+4	; 0x04
    12a4:	fd 80       	ldd	r15, Y+5	; 0x05
    12a6:	0e 81       	ldd	r16, Y+6	; 0x06
    12a8:	1f 81       	ldd	r17, Y+7	; 0x07
    12aa:	91 01       	movw	r18, r2
    12ac:	28 1b       	sub	r18, r24
    12ae:	39 0b       	sbc	r19, r25
    12b0:	b9 01       	movw	r22, r18
    12b2:	37 ff       	sbrs	r19, 7
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <_fpadd_parts+0xb2>
    12b6:	66 27       	eor	r22, r22
    12b8:	77 27       	eor	r23, r23
    12ba:	62 1b       	sub	r22, r18
    12bc:	73 0b       	sbc	r23, r19
    12be:	60 32       	cpi	r22, 0x20	; 32
    12c0:	71 05       	cpc	r23, r1
    12c2:	0c f0       	brlt	.+2      	; 0x12c6 <_fpadd_parts+0xba>
    12c4:	61 c0       	rjmp	.+194    	; 0x1388 <_fpadd_parts+0x17c>
    12c6:	12 16       	cp	r1, r18
    12c8:	13 06       	cpc	r1, r19
    12ca:	6c f5       	brge	.+90     	; 0x1326 <_fpadd_parts+0x11a>
    12cc:	37 01       	movw	r6, r14
    12ce:	48 01       	movw	r8, r16
    12d0:	06 2e       	mov	r0, r22
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <_fpadd_parts+0xd0>
    12d4:	96 94       	lsr	r9
    12d6:	87 94       	ror	r8
    12d8:	77 94       	ror	r7
    12da:	67 94       	ror	r6
    12dc:	0a 94       	dec	r0
    12de:	d2 f7       	brpl	.-12     	; 0x12d4 <_fpadd_parts+0xc8>
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <_fpadd_parts+0xe6>
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	44 1f       	adc	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	6a 95       	dec	r22
    12f4:	d2 f7       	brpl	.-12     	; 0x12ea <_fpadd_parts+0xde>
    12f6:	21 50       	subi	r18, 0x01	; 1
    12f8:	30 40       	sbci	r19, 0x00	; 0
    12fa:	40 40       	sbci	r20, 0x00	; 0
    12fc:	50 40       	sbci	r21, 0x00	; 0
    12fe:	2e 21       	and	r18, r14
    1300:	3f 21       	and	r19, r15
    1302:	40 23       	and	r20, r16
    1304:	51 23       	and	r21, r17
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	41 05       	cpc	r20, r1
    130c:	51 05       	cpc	r21, r1
    130e:	21 f0       	breq	.+8      	; 0x1318 <_fpadd_parts+0x10c>
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	79 01       	movw	r14, r18
    131a:	8a 01       	movw	r16, r20
    131c:	e6 28       	or	r14, r6
    131e:	f7 28       	or	r15, r7
    1320:	08 29       	or	r16, r8
    1322:	19 29       	or	r17, r9
    1324:	3c c0       	rjmp	.+120    	; 0x139e <_fpadd_parts+0x192>
    1326:	23 2b       	or	r18, r19
    1328:	d1 f1       	breq	.+116    	; 0x139e <_fpadd_parts+0x192>
    132a:	26 0e       	add	r2, r22
    132c:	37 1e       	adc	r3, r23
    132e:	35 01       	movw	r6, r10
    1330:	46 01       	movw	r8, r12
    1332:	06 2e       	mov	r0, r22
    1334:	04 c0       	rjmp	.+8      	; 0x133e <_fpadd_parts+0x132>
    1336:	96 94       	lsr	r9
    1338:	87 94       	ror	r8
    133a:	77 94       	ror	r7
    133c:	67 94       	ror	r6
    133e:	0a 94       	dec	r0
    1340:	d2 f7       	brpl	.-12     	; 0x1336 <_fpadd_parts+0x12a>
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <_fpadd_parts+0x148>
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	44 1f       	adc	r20, r20
    1352:	55 1f       	adc	r21, r21
    1354:	6a 95       	dec	r22
    1356:	d2 f7       	brpl	.-12     	; 0x134c <_fpadd_parts+0x140>
    1358:	21 50       	subi	r18, 0x01	; 1
    135a:	30 40       	sbci	r19, 0x00	; 0
    135c:	40 40       	sbci	r20, 0x00	; 0
    135e:	50 40       	sbci	r21, 0x00	; 0
    1360:	2a 21       	and	r18, r10
    1362:	3b 21       	and	r19, r11
    1364:	4c 21       	and	r20, r12
    1366:	5d 21       	and	r21, r13
    1368:	21 15       	cp	r18, r1
    136a:	31 05       	cpc	r19, r1
    136c:	41 05       	cpc	r20, r1
    136e:	51 05       	cpc	r21, r1
    1370:	21 f0       	breq	.+8      	; 0x137a <_fpadd_parts+0x16e>
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	59 01       	movw	r10, r18
    137c:	6a 01       	movw	r12, r20
    137e:	a6 28       	or	r10, r6
    1380:	b7 28       	or	r11, r7
    1382:	c8 28       	or	r12, r8
    1384:	d9 28       	or	r13, r9
    1386:	0b c0       	rjmp	.+22     	; 0x139e <_fpadd_parts+0x192>
    1388:	82 15       	cp	r24, r2
    138a:	93 05       	cpc	r25, r3
    138c:	2c f0       	brlt	.+10     	; 0x1398 <_fpadd_parts+0x18c>
    138e:	1c 01       	movw	r2, r24
    1390:	aa 24       	eor	r10, r10
    1392:	bb 24       	eor	r11, r11
    1394:	65 01       	movw	r12, r10
    1396:	03 c0       	rjmp	.+6      	; 0x139e <_fpadd_parts+0x192>
    1398:	ee 24       	eor	r14, r14
    139a:	ff 24       	eor	r15, r15
    139c:	87 01       	movw	r16, r14
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	9c 91       	ld	r25, X
    13a2:	d2 01       	movw	r26, r4
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	8c 91       	ld	r24, X
    13a8:	98 17       	cp	r25, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <_fpadd_parts+0x1a2>
    13ac:	45 c0       	rjmp	.+138    	; 0x1438 <_fpadd_parts+0x22c>
    13ae:	99 23       	and	r25, r25
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <_fpadd_parts+0x1b4>
    13b2:	a8 01       	movw	r20, r16
    13b4:	97 01       	movw	r18, r14
    13b6:	2a 19       	sub	r18, r10
    13b8:	3b 09       	sbc	r19, r11
    13ba:	4c 09       	sbc	r20, r12
    13bc:	5d 09       	sbc	r21, r13
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <_fpadd_parts+0x1c0>
    13c0:	a6 01       	movw	r20, r12
    13c2:	95 01       	movw	r18, r10
    13c4:	2e 19       	sub	r18, r14
    13c6:	3f 09       	sbc	r19, r15
    13c8:	40 0b       	sbc	r20, r16
    13ca:	51 0b       	sbc	r21, r17
    13cc:	57 fd       	sbrc	r21, 7
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <_fpadd_parts+0x1d4>
    13d0:	11 82       	std	Z+1, r1	; 0x01
    13d2:	33 82       	std	Z+3, r3	; 0x03
    13d4:	22 82       	std	Z+2, r2	; 0x02
    13d6:	24 83       	std	Z+4, r18	; 0x04
    13d8:	35 83       	std	Z+5, r19	; 0x05
    13da:	46 83       	std	Z+6, r20	; 0x06
    13dc:	57 83       	std	Z+7, r21	; 0x07
    13de:	1d c0       	rjmp	.+58     	; 0x141a <_fpadd_parts+0x20e>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	81 83       	std	Z+1, r24	; 0x01
    13e4:	33 82       	std	Z+3, r3	; 0x03
    13e6:	22 82       	std	Z+2, r2	; 0x02
    13e8:	88 27       	eor	r24, r24
    13ea:	99 27       	eor	r25, r25
    13ec:	dc 01       	movw	r26, r24
    13ee:	82 1b       	sub	r24, r18
    13f0:	93 0b       	sbc	r25, r19
    13f2:	a4 0b       	sbc	r26, r20
    13f4:	b5 0b       	sbc	r27, r21
    13f6:	84 83       	std	Z+4, r24	; 0x04
    13f8:	95 83       	std	Z+5, r25	; 0x05
    13fa:	a6 83       	std	Z+6, r26	; 0x06
    13fc:	b7 83       	std	Z+7, r27	; 0x07
    13fe:	0d c0       	rjmp	.+26     	; 0x141a <_fpadd_parts+0x20e>
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	44 1f       	adc	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	24 83       	std	Z+4, r18	; 0x04
    140a:	35 83       	std	Z+5, r19	; 0x05
    140c:	46 83       	std	Z+6, r20	; 0x06
    140e:	57 83       	std	Z+7, r21	; 0x07
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	93 83       	std	Z+3, r25	; 0x03
    1418:	82 83       	std	Z+2, r24	; 0x02
    141a:	24 81       	ldd	r18, Z+4	; 0x04
    141c:	35 81       	ldd	r19, Z+5	; 0x05
    141e:	46 81       	ldd	r20, Z+6	; 0x06
    1420:	57 81       	ldd	r21, Z+7	; 0x07
    1422:	da 01       	movw	r26, r20
    1424:	c9 01       	movw	r24, r18
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	a1 09       	sbc	r26, r1
    142a:	b1 09       	sbc	r27, r1
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	af 4f       	sbci	r26, 0xFF	; 255
    1432:	bf 43       	sbci	r27, 0x3F	; 63
    1434:	28 f3       	brcs	.-54     	; 0x1400 <_fpadd_parts+0x1f4>
    1436:	0b c0       	rjmp	.+22     	; 0x144e <_fpadd_parts+0x242>
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	33 82       	std	Z+3, r3	; 0x03
    143c:	22 82       	std	Z+2, r2	; 0x02
    143e:	ea 0c       	add	r14, r10
    1440:	fb 1c       	adc	r15, r11
    1442:	0c 1d       	adc	r16, r12
    1444:	1d 1d       	adc	r17, r13
    1446:	e4 82       	std	Z+4, r14	; 0x04
    1448:	f5 82       	std	Z+5, r15	; 0x05
    144a:	06 83       	std	Z+6, r16	; 0x06
    144c:	17 83       	std	Z+7, r17	; 0x07
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	80 83       	st	Z, r24
    1452:	24 81       	ldd	r18, Z+4	; 0x04
    1454:	35 81       	ldd	r19, Z+5	; 0x05
    1456:	46 81       	ldd	r20, Z+6	; 0x06
    1458:	57 81       	ldd	r21, Z+7	; 0x07
    145a:	57 ff       	sbrs	r21, 7
    145c:	1a c0       	rjmp	.+52     	; 0x1492 <_fpadd_parts+0x286>
    145e:	c9 01       	movw	r24, r18
    1460:	aa 27       	eor	r26, r26
    1462:	97 fd       	sbrc	r25, 7
    1464:	a0 95       	com	r26
    1466:	ba 2f       	mov	r27, r26
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	90 70       	andi	r25, 0x00	; 0
    146c:	a0 70       	andi	r26, 0x00	; 0
    146e:	b0 70       	andi	r27, 0x00	; 0
    1470:	56 95       	lsr	r21
    1472:	47 95       	ror	r20
    1474:	37 95       	ror	r19
    1476:	27 95       	ror	r18
    1478:	82 2b       	or	r24, r18
    147a:	93 2b       	or	r25, r19
    147c:	a4 2b       	or	r26, r20
    147e:	b5 2b       	or	r27, r21
    1480:	84 83       	std	Z+4, r24	; 0x04
    1482:	95 83       	std	Z+5, r25	; 0x05
    1484:	a6 83       	std	Z+6, r26	; 0x06
    1486:	b7 83       	std	Z+7, r27	; 0x07
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	93 83       	std	Z+3, r25	; 0x03
    1490:	82 83       	std	Z+2, r24	; 0x02
    1492:	df 01       	movw	r26, r30
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <_fpadd_parts+0x28c>
    1496:	d2 01       	movw	r26, r4
    1498:	cd 01       	movw	r24, r26
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	e2 e1       	ldi	r30, 0x12	; 18
    14a0:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__epilogue_restores__>

000014a4 <__subsf3>:
    14a4:	a0 e2       	ldi	r26, 0x20	; 32
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e8 e5       	ldi	r30, 0x58	; 88
    14aa:	fa e0       	ldi	r31, 0x0A	; 10
    14ac:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
    14b0:	69 83       	std	Y+1, r22	; 0x01
    14b2:	7a 83       	std	Y+2, r23	; 0x02
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	2d 83       	std	Y+5, r18	; 0x05
    14ba:	3e 83       	std	Y+6, r19	; 0x06
    14bc:	4f 83       	std	Y+7, r20	; 0x07
    14be:	58 87       	std	Y+8, r21	; 0x08
    14c0:	e9 e0       	ldi	r30, 0x09	; 9
    14c2:	ee 2e       	mov	r14, r30
    14c4:	f1 2c       	mov	r15, r1
    14c6:	ec 0e       	add	r14, r28
    14c8:	fd 1e       	adc	r15, r29
    14ca:	ce 01       	movw	r24, r28
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	b7 01       	movw	r22, r14
    14d0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    14d4:	8e 01       	movw	r16, r28
    14d6:	0f 5e       	subi	r16, 0xEF	; 239
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	ce 01       	movw	r24, r28
    14dc:	05 96       	adiw	r24, 0x05	; 5
    14de:	b8 01       	movw	r22, r16
    14e0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    14e4:	8a 89       	ldd	r24, Y+18	; 0x12
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	89 27       	eor	r24, r25
    14ea:	8a 8b       	std	Y+18, r24	; 0x12
    14ec:	c7 01       	movw	r24, r14
    14ee:	b8 01       	movw	r22, r16
    14f0:	ae 01       	movw	r20, r28
    14f2:	47 5e       	subi	r20, 0xE7	; 231
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	0e 94 06 09 	call	0x120c	; 0x120c <_fpadd_parts>
    14fa:	0e 94 8e 0c 	call	0x191c	; 0x191c <__pack_f>
    14fe:	a0 96       	adiw	r28, 0x20	; 32
    1500:	e6 e0       	ldi	r30, 0x06	; 6
    1502:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

00001506 <__addsf3>:
    1506:	a0 e2       	ldi	r26, 0x20	; 32
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e9 e8       	ldi	r30, 0x89	; 137
    150c:	fa e0       	ldi	r31, 0x0A	; 10
    150e:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
    1512:	69 83       	std	Y+1, r22	; 0x01
    1514:	7a 83       	std	Y+2, r23	; 0x02
    1516:	8b 83       	std	Y+3, r24	; 0x03
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	2d 83       	std	Y+5, r18	; 0x05
    151c:	3e 83       	std	Y+6, r19	; 0x06
    151e:	4f 83       	std	Y+7, r20	; 0x07
    1520:	58 87       	std	Y+8, r21	; 0x08
    1522:	f9 e0       	ldi	r31, 0x09	; 9
    1524:	ef 2e       	mov	r14, r31
    1526:	f1 2c       	mov	r15, r1
    1528:	ec 0e       	add	r14, r28
    152a:	fd 1e       	adc	r15, r29
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	b7 01       	movw	r22, r14
    1532:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1536:	8e 01       	movw	r16, r28
    1538:	0f 5e       	subi	r16, 0xEF	; 239
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	ce 01       	movw	r24, r28
    153e:	05 96       	adiw	r24, 0x05	; 5
    1540:	b8 01       	movw	r22, r16
    1542:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1546:	c7 01       	movw	r24, r14
    1548:	b8 01       	movw	r22, r16
    154a:	ae 01       	movw	r20, r28
    154c:	47 5e       	subi	r20, 0xE7	; 231
    154e:	5f 4f       	sbci	r21, 0xFF	; 255
    1550:	0e 94 06 09 	call	0x120c	; 0x120c <_fpadd_parts>
    1554:	0e 94 8e 0c 	call	0x191c	; 0x191c <__pack_f>
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	e6 e0       	ldi	r30, 0x06	; 6
    155c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

00001560 <__mulsf3>:
    1560:	a0 e2       	ldi	r26, 0x20	; 32
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__prologue_saves__>
    156c:	69 83       	std	Y+1, r22	; 0x01
    156e:	7a 83       	std	Y+2, r23	; 0x02
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	2d 83       	std	Y+5, r18	; 0x05
    1576:	3e 83       	std	Y+6, r19	; 0x06
    1578:	4f 83       	std	Y+7, r20	; 0x07
    157a:	58 87       	std	Y+8, r21	; 0x08
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	be 01       	movw	r22, r28
    1582:	67 5f       	subi	r22, 0xF7	; 247
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    158a:	ce 01       	movw	r24, r28
    158c:	05 96       	adiw	r24, 0x05	; 5
    158e:	be 01       	movw	r22, r28
    1590:	6f 5e       	subi	r22, 0xEF	; 239
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1598:	99 85       	ldd	r25, Y+9	; 0x09
    159a:	92 30       	cpi	r25, 0x02	; 2
    159c:	88 f0       	brcs	.+34     	; 0x15c0 <__mulsf3+0x60>
    159e:	89 89       	ldd	r24, Y+17	; 0x11
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	c8 f0       	brcs	.+50     	; 0x15d6 <__mulsf3+0x76>
    15a4:	94 30       	cpi	r25, 0x04	; 4
    15a6:	19 f4       	brne	.+6      	; 0x15ae <__mulsf3+0x4e>
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	51 f4       	brne	.+20     	; 0x15c0 <__mulsf3+0x60>
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <__mulsf3+0x56>
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	29 f4       	brne	.+10     	; 0x15bc <__mulsf3+0x5c>
    15b2:	92 30       	cpi	r25, 0x02	; 2
    15b4:	81 f4       	brne	.+32     	; 0x15d6 <__mulsf3+0x76>
    15b6:	83 e3       	ldi	r24, 0x33	; 51
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	c6 c0       	rjmp	.+396    	; 0x1748 <__mulsf3+0x1e8>
    15bc:	92 30       	cpi	r25, 0x02	; 2
    15be:	49 f4       	brne	.+18     	; 0x15d2 <__mulsf3+0x72>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	8a 89       	ldd	r24, Y+18	; 0x12
    15c6:	98 13       	cpse	r25, r24
    15c8:	21 e0       	ldi	r18, 0x01	; 1
    15ca:	2a 87       	std	Y+10, r18	; 0x0a
    15cc:	ce 01       	movw	r24, r28
    15ce:	09 96       	adiw	r24, 0x09	; 9
    15d0:	bb c0       	rjmp	.+374    	; 0x1748 <__mulsf3+0x1e8>
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	49 f4       	brne	.+18     	; 0x15e8 <__mulsf3+0x88>
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	8a 89       	ldd	r24, Y+18	; 0x12
    15dc:	98 13       	cpse	r25, r24
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	2a 8b       	std	Y+18, r18	; 0x12
    15e2:	ce 01       	movw	r24, r28
    15e4:	41 96       	adiw	r24, 0x11	; 17
    15e6:	b0 c0       	rjmp	.+352    	; 0x1748 <__mulsf3+0x1e8>
    15e8:	2d 84       	ldd	r2, Y+13	; 0x0d
    15ea:	3e 84       	ldd	r3, Y+14	; 0x0e
    15ec:	4f 84       	ldd	r4, Y+15	; 0x0f
    15ee:	58 88       	ldd	r5, Y+16	; 0x10
    15f0:	6d 88       	ldd	r6, Y+21	; 0x15
    15f2:	7e 88       	ldd	r7, Y+22	; 0x16
    15f4:	8f 88       	ldd	r8, Y+23	; 0x17
    15f6:	98 8c       	ldd	r9, Y+24	; 0x18
    15f8:	ee 24       	eor	r14, r14
    15fa:	ff 24       	eor	r15, r15
    15fc:	87 01       	movw	r16, r14
    15fe:	aa 24       	eor	r10, r10
    1600:	bb 24       	eor	r11, r11
    1602:	65 01       	movw	r12, r10
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	e0 e0       	ldi	r30, 0x00	; 0
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	c1 01       	movw	r24, r2
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	89 2b       	or	r24, r25
    1618:	e9 f0       	breq	.+58     	; 0x1654 <__mulsf3+0xf4>
    161a:	e6 0c       	add	r14, r6
    161c:	f7 1c       	adc	r15, r7
    161e:	08 1d       	adc	r16, r8
    1620:	19 1d       	adc	r17, r9
    1622:	9a 01       	movw	r18, r20
    1624:	ab 01       	movw	r20, r22
    1626:	2a 0d       	add	r18, r10
    1628:	3b 1d       	adc	r19, r11
    162a:	4c 1d       	adc	r20, r12
    162c:	5d 1d       	adc	r21, r13
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a0 e0       	ldi	r26, 0x00	; 0
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e6 14       	cp	r14, r6
    1638:	f7 04       	cpc	r15, r7
    163a:	08 05       	cpc	r16, r8
    163c:	19 05       	cpc	r17, r9
    163e:	20 f4       	brcc	.+8      	; 0x1648 <__mulsf3+0xe8>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ba 01       	movw	r22, r20
    164a:	a9 01       	movw	r20, r18
    164c:	48 0f       	add	r20, r24
    164e:	59 1f       	adc	r21, r25
    1650:	6a 1f       	adc	r22, r26
    1652:	7b 1f       	adc	r23, r27
    1654:	aa 0c       	add	r10, r10
    1656:	bb 1c       	adc	r11, r11
    1658:	cc 1c       	adc	r12, r12
    165a:	dd 1c       	adc	r13, r13
    165c:	97 fe       	sbrs	r9, 7
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <__mulsf3+0x110>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	a8 2a       	or	r10, r24
    166a:	b9 2a       	or	r11, r25
    166c:	ca 2a       	or	r12, r26
    166e:	db 2a       	or	r13, r27
    1670:	31 96       	adiw	r30, 0x01	; 1
    1672:	e0 32       	cpi	r30, 0x20	; 32
    1674:	f1 05       	cpc	r31, r1
    1676:	49 f0       	breq	.+18     	; 0x168a <__mulsf3+0x12a>
    1678:	66 0c       	add	r6, r6
    167a:	77 1c       	adc	r7, r7
    167c:	88 1c       	adc	r8, r8
    167e:	99 1c       	adc	r9, r9
    1680:	56 94       	lsr	r5
    1682:	47 94       	ror	r4
    1684:	37 94       	ror	r3
    1686:	27 94       	ror	r2
    1688:	c3 cf       	rjmp	.-122    	; 0x1610 <__mulsf3+0xb0>
    168a:	fa 85       	ldd	r31, Y+10	; 0x0a
    168c:	ea 89       	ldd	r30, Y+18	; 0x12
    168e:	2b 89       	ldd	r18, Y+19	; 0x13
    1690:	3c 89       	ldd	r19, Y+20	; 0x14
    1692:	8b 85       	ldd	r24, Y+11	; 0x0b
    1694:	9c 85       	ldd	r25, Y+12	; 0x0c
    1696:	28 0f       	add	r18, r24
    1698:	39 1f       	adc	r19, r25
    169a:	2e 5f       	subi	r18, 0xFE	; 254
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	17 c0       	rjmp	.+46     	; 0x16ce <__mulsf3+0x16e>
    16a0:	ca 01       	movw	r24, r20
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	90 70       	andi	r25, 0x00	; 0
    16a6:	89 2b       	or	r24, r25
    16a8:	61 f0       	breq	.+24     	; 0x16c2 <__mulsf3+0x162>
    16aa:	16 95       	lsr	r17
    16ac:	07 95       	ror	r16
    16ae:	f7 94       	ror	r15
    16b0:	e7 94       	ror	r14
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 e0       	ldi	r26, 0x00	; 0
    16b8:	b0 e8       	ldi	r27, 0x80	; 128
    16ba:	e8 2a       	or	r14, r24
    16bc:	f9 2a       	or	r15, r25
    16be:	0a 2b       	or	r16, r26
    16c0:	1b 2b       	or	r17, r27
    16c2:	76 95       	lsr	r23
    16c4:	67 95       	ror	r22
    16c6:	57 95       	ror	r21
    16c8:	47 95       	ror	r20
    16ca:	2f 5f       	subi	r18, 0xFF	; 255
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	77 fd       	sbrc	r23, 7
    16d0:	e7 cf       	rjmp	.-50     	; 0x16a0 <__mulsf3+0x140>
    16d2:	0c c0       	rjmp	.+24     	; 0x16ec <__mulsf3+0x18c>
    16d4:	44 0f       	add	r20, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	17 fd       	sbrc	r17, 7
    16de:	41 60       	ori	r20, 0x01	; 1
    16e0:	ee 0c       	add	r14, r14
    16e2:	ff 1c       	adc	r15, r15
    16e4:	00 1f       	adc	r16, r16
    16e6:	11 1f       	adc	r17, r17
    16e8:	21 50       	subi	r18, 0x01	; 1
    16ea:	30 40       	sbci	r19, 0x00	; 0
    16ec:	40 30       	cpi	r20, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	59 07       	cpc	r21, r25
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	69 07       	cpc	r22, r25
    16f6:	90 e4       	ldi	r25, 0x40	; 64
    16f8:	79 07       	cpc	r23, r25
    16fa:	60 f3       	brcs	.-40     	; 0x16d4 <__mulsf3+0x174>
    16fc:	2b 8f       	std	Y+27, r18	; 0x1b
    16fe:	3c 8f       	std	Y+28, r19	; 0x1c
    1700:	db 01       	movw	r26, r22
    1702:	ca 01       	movw	r24, r20
    1704:	8f 77       	andi	r24, 0x7F	; 127
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	a0 70       	andi	r26, 0x00	; 0
    170a:	b0 70       	andi	r27, 0x00	; 0
    170c:	80 34       	cpi	r24, 0x40	; 64
    170e:	91 05       	cpc	r25, r1
    1710:	a1 05       	cpc	r26, r1
    1712:	b1 05       	cpc	r27, r1
    1714:	61 f4       	brne	.+24     	; 0x172e <__mulsf3+0x1ce>
    1716:	47 fd       	sbrc	r20, 7
    1718:	0a c0       	rjmp	.+20     	; 0x172e <__mulsf3+0x1ce>
    171a:	e1 14       	cp	r14, r1
    171c:	f1 04       	cpc	r15, r1
    171e:	01 05       	cpc	r16, r1
    1720:	11 05       	cpc	r17, r1
    1722:	29 f0       	breq	.+10     	; 0x172e <__mulsf3+0x1ce>
    1724:	40 5c       	subi	r20, 0xC0	; 192
    1726:	5f 4f       	sbci	r21, 0xFF	; 255
    1728:	6f 4f       	sbci	r22, 0xFF	; 255
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	40 78       	andi	r20, 0x80	; 128
    172e:	1a 8e       	std	Y+26, r1	; 0x1a
    1730:	fe 17       	cp	r31, r30
    1732:	11 f0       	breq	.+4      	; 0x1738 <__mulsf3+0x1d8>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	8a 8f       	std	Y+26, r24	; 0x1a
    1738:	4d 8f       	std	Y+29, r20	; 0x1d
    173a:	5e 8f       	std	Y+30, r21	; 0x1e
    173c:	6f 8f       	std	Y+31, r22	; 0x1f
    173e:	78 a3       	std	Y+32, r23	; 0x20
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	89 8f       	std	Y+25, r24	; 0x19
    1744:	ce 01       	movw	r24, r28
    1746:	49 96       	adiw	r24, 0x19	; 25
    1748:	0e 94 8e 0c 	call	0x191c	; 0x191c <__pack_f>
    174c:	a0 96       	adiw	r28, 0x20	; 32
    174e:	e2 e1       	ldi	r30, 0x12	; 18
    1750:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__epilogue_restores__>

00001754 <__gtsf2>:
    1754:	a8 e1       	ldi	r26, 0x18	; 24
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e0 eb       	ldi	r30, 0xB0	; 176
    175a:	fb e0       	ldi	r31, 0x0B	; 11
    175c:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
    1760:	69 83       	std	Y+1, r22	; 0x01
    1762:	7a 83       	std	Y+2, r23	; 0x02
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	9c 83       	std	Y+4, r25	; 0x04
    1768:	2d 83       	std	Y+5, r18	; 0x05
    176a:	3e 83       	std	Y+6, r19	; 0x06
    176c:	4f 83       	std	Y+7, r20	; 0x07
    176e:	58 87       	std	Y+8, r21	; 0x08
    1770:	89 e0       	ldi	r24, 0x09	; 9
    1772:	e8 2e       	mov	r14, r24
    1774:	f1 2c       	mov	r15, r1
    1776:	ec 0e       	add	r14, r28
    1778:	fd 1e       	adc	r15, r29
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	b7 01       	movw	r22, r14
    1780:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1784:	8e 01       	movw	r16, r28
    1786:	0f 5e       	subi	r16, 0xEF	; 239
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	ce 01       	movw	r24, r28
    178c:	05 96       	adiw	r24, 0x05	; 5
    178e:	b8 01       	movw	r22, r16
    1790:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	40 f0       	brcs	.+16     	; 0x17aa <__gtsf2+0x56>
    179a:	89 89       	ldd	r24, Y+17	; 0x11
    179c:	82 30       	cpi	r24, 0x02	; 2
    179e:	28 f0       	brcs	.+10     	; 0x17aa <__gtsf2+0x56>
    17a0:	c7 01       	movw	r24, r14
    17a2:	b8 01       	movw	r22, r16
    17a4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fpcmp_parts_f>
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <__gtsf2+0x58>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	68 96       	adiw	r28, 0x18	; 24
    17ae:	e6 e0       	ldi	r30, 0x06	; 6
    17b0:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

000017b4 <__gesf2>:
    17b4:	a8 e1       	ldi	r26, 0x18	; 24
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e0 ee       	ldi	r30, 0xE0	; 224
    17ba:	fb e0       	ldi	r31, 0x0B	; 11
    17bc:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
    17c0:	69 83       	std	Y+1, r22	; 0x01
    17c2:	7a 83       	std	Y+2, r23	; 0x02
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	2d 83       	std	Y+5, r18	; 0x05
    17ca:	3e 83       	std	Y+6, r19	; 0x06
    17cc:	4f 83       	std	Y+7, r20	; 0x07
    17ce:	58 87       	std	Y+8, r21	; 0x08
    17d0:	89 e0       	ldi	r24, 0x09	; 9
    17d2:	e8 2e       	mov	r14, r24
    17d4:	f1 2c       	mov	r15, r1
    17d6:	ec 0e       	add	r14, r28
    17d8:	fd 1e       	adc	r15, r29
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	b7 01       	movw	r22, r14
    17e0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    17e4:	8e 01       	movw	r16, r28
    17e6:	0f 5e       	subi	r16, 0xEF	; 239
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	ce 01       	movw	r24, r28
    17ec:	05 96       	adiw	r24, 0x05	; 5
    17ee:	b8 01       	movw	r22, r16
    17f0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	82 30       	cpi	r24, 0x02	; 2
    17f8:	40 f0       	brcs	.+16     	; 0x180a <__gesf2+0x56>
    17fa:	89 89       	ldd	r24, Y+17	; 0x11
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	28 f0       	brcs	.+10     	; 0x180a <__gesf2+0x56>
    1800:	c7 01       	movw	r24, r14
    1802:	b8 01       	movw	r22, r16
    1804:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fpcmp_parts_f>
    1808:	01 c0       	rjmp	.+2      	; 0x180c <__gesf2+0x58>
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	68 96       	adiw	r28, 0x18	; 24
    180e:	e6 e0       	ldi	r30, 0x06	; 6
    1810:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

00001814 <__ltsf2>:
    1814:	a8 e1       	ldi	r26, 0x18	; 24
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e0 e1       	ldi	r30, 0x10	; 16
    181a:	fc e0       	ldi	r31, 0x0C	; 12
    181c:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__prologue_saves__+0x18>
    1820:	69 83       	std	Y+1, r22	; 0x01
    1822:	7a 83       	std	Y+2, r23	; 0x02
    1824:	8b 83       	std	Y+3, r24	; 0x03
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	2d 83       	std	Y+5, r18	; 0x05
    182a:	3e 83       	std	Y+6, r19	; 0x06
    182c:	4f 83       	std	Y+7, r20	; 0x07
    182e:	58 87       	std	Y+8, r21	; 0x08
    1830:	89 e0       	ldi	r24, 0x09	; 9
    1832:	e8 2e       	mov	r14, r24
    1834:	f1 2c       	mov	r15, r1
    1836:	ec 0e       	add	r14, r28
    1838:	fd 1e       	adc	r15, r29
    183a:	ce 01       	movw	r24, r28
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	b7 01       	movw	r22, r14
    1840:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1844:	8e 01       	movw	r16, r28
    1846:	0f 5e       	subi	r16, 0xEF	; 239
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	ce 01       	movw	r24, r28
    184c:	05 96       	adiw	r24, 0x05	; 5
    184e:	b8 01       	movw	r22, r16
    1850:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	40 f0       	brcs	.+16     	; 0x186a <__ltsf2+0x56>
    185a:	89 89       	ldd	r24, Y+17	; 0x11
    185c:	82 30       	cpi	r24, 0x02	; 2
    185e:	28 f0       	brcs	.+10     	; 0x186a <__ltsf2+0x56>
    1860:	c7 01       	movw	r24, r14
    1862:	b8 01       	movw	r22, r16
    1864:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fpcmp_parts_f>
    1868:	01 c0       	rjmp	.+2      	; 0x186c <__ltsf2+0x58>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	68 96       	adiw	r28, 0x18	; 24
    186e:	e6 e0       	ldi	r30, 0x06	; 6
    1870:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__epilogue_restores__+0x18>

00001874 <__fixsfsi>:
    1874:	ac e0       	ldi	r26, 0x0C	; 12
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e0 e4       	ldi	r30, 0x40	; 64
    187a:	fc e0       	ldi	r31, 0x0C	; 12
    187c:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__prologue_saves__+0x20>
    1880:	69 83       	std	Y+1, r22	; 0x01
    1882:	7a 83       	std	Y+2, r23	; 0x02
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	be 01       	movw	r22, r28
    188e:	6b 5f       	subi	r22, 0xFB	; 251
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__unpack_f>
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	61 f1       	breq	.+88     	; 0x18f4 <__fixsfsi+0x80>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	50 f1       	brcs	.+84     	; 0x18f4 <__fixsfsi+0x80>
    18a0:	84 30       	cpi	r24, 0x04	; 4
    18a2:	21 f4       	brne	.+8      	; 0x18ac <__fixsfsi+0x38>
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	88 23       	and	r24, r24
    18a8:	51 f1       	breq	.+84     	; 0x18fe <__fixsfsi+0x8a>
    18aa:	2e c0       	rjmp	.+92     	; 0x1908 <__fixsfsi+0x94>
    18ac:	2f 81       	ldd	r18, Y+7	; 0x07
    18ae:	38 85       	ldd	r19, Y+8	; 0x08
    18b0:	37 fd       	sbrc	r19, 7
    18b2:	20 c0       	rjmp	.+64     	; 0x18f4 <__fixsfsi+0x80>
    18b4:	6e 81       	ldd	r22, Y+6	; 0x06
    18b6:	2f 31       	cpi	r18, 0x1F	; 31
    18b8:	31 05       	cpc	r19, r1
    18ba:	1c f0       	brlt	.+6      	; 0x18c2 <__fixsfsi+0x4e>
    18bc:	66 23       	and	r22, r22
    18be:	f9 f0       	breq	.+62     	; 0x18fe <__fixsfsi+0x8a>
    18c0:	23 c0       	rjmp	.+70     	; 0x1908 <__fixsfsi+0x94>
    18c2:	8e e1       	ldi	r24, 0x1E	; 30
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	82 1b       	sub	r24, r18
    18c8:	93 0b       	sbc	r25, r19
    18ca:	29 85       	ldd	r18, Y+9	; 0x09
    18cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    18d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <__fixsfsi+0x68>
    18d4:	56 95       	lsr	r21
    18d6:	47 95       	ror	r20
    18d8:	37 95       	ror	r19
    18da:	27 95       	ror	r18
    18dc:	8a 95       	dec	r24
    18de:	d2 f7       	brpl	.-12     	; 0x18d4 <__fixsfsi+0x60>
    18e0:	66 23       	and	r22, r22
    18e2:	b1 f0       	breq	.+44     	; 0x1910 <__fixsfsi+0x9c>
    18e4:	50 95       	com	r21
    18e6:	40 95       	com	r20
    18e8:	30 95       	com	r19
    18ea:	21 95       	neg	r18
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	4f 4f       	sbci	r20, 0xFF	; 255
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	0e c0       	rjmp	.+28     	; 0x1910 <__fixsfsi+0x9c>
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <__fixsfsi+0x9c>
    18fe:	2f ef       	ldi	r18, 0xFF	; 255
    1900:	3f ef       	ldi	r19, 0xFF	; 255
    1902:	4f ef       	ldi	r20, 0xFF	; 255
    1904:	5f e7       	ldi	r21, 0x7F	; 127
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <__fixsfsi+0x9c>
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e8       	ldi	r21, 0x80	; 128
    1910:	b9 01       	movw	r22, r18
    1912:	ca 01       	movw	r24, r20
    1914:	2c 96       	adiw	r28, 0x0c	; 12
    1916:	e2 e0       	ldi	r30, 0x02	; 2
    1918:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__epilogue_restores__+0x20>

0000191c <__pack_f>:
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	fc 01       	movw	r30, r24
    1928:	e4 80       	ldd	r14, Z+4	; 0x04
    192a:	f5 80       	ldd	r15, Z+5	; 0x05
    192c:	06 81       	ldd	r16, Z+6	; 0x06
    192e:	17 81       	ldd	r17, Z+7	; 0x07
    1930:	d1 80       	ldd	r13, Z+1	; 0x01
    1932:	80 81       	ld	r24, Z
    1934:	82 30       	cpi	r24, 0x02	; 2
    1936:	48 f4       	brcc	.+18     	; 0x194a <__pack_f+0x2e>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e1       	ldi	r26, 0x10	; 16
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e8 2a       	or	r14, r24
    1942:	f9 2a       	or	r15, r25
    1944:	0a 2b       	or	r16, r26
    1946:	1b 2b       	or	r17, r27
    1948:	a5 c0       	rjmp	.+330    	; 0x1a94 <__pack_f+0x178>
    194a:	84 30       	cpi	r24, 0x04	; 4
    194c:	09 f4       	brne	.+2      	; 0x1950 <__pack_f+0x34>
    194e:	9f c0       	rjmp	.+318    	; 0x1a8e <__pack_f+0x172>
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	21 f4       	brne	.+8      	; 0x195c <__pack_f+0x40>
    1954:	ee 24       	eor	r14, r14
    1956:	ff 24       	eor	r15, r15
    1958:	87 01       	movw	r16, r14
    195a:	05 c0       	rjmp	.+10     	; 0x1966 <__pack_f+0x4a>
    195c:	e1 14       	cp	r14, r1
    195e:	f1 04       	cpc	r15, r1
    1960:	01 05       	cpc	r16, r1
    1962:	11 05       	cpc	r17, r1
    1964:	19 f4       	brne	.+6      	; 0x196c <__pack_f+0x50>
    1966:	e0 e0       	ldi	r30, 0x00	; 0
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	96 c0       	rjmp	.+300    	; 0x1a98 <__pack_f+0x17c>
    196c:	62 81       	ldd	r22, Z+2	; 0x02
    196e:	73 81       	ldd	r23, Z+3	; 0x03
    1970:	9f ef       	ldi	r25, 0xFF	; 255
    1972:	62 38       	cpi	r22, 0x82	; 130
    1974:	79 07       	cpc	r23, r25
    1976:	0c f0       	brlt	.+2      	; 0x197a <__pack_f+0x5e>
    1978:	5b c0       	rjmp	.+182    	; 0x1a30 <__pack_f+0x114>
    197a:	22 e8       	ldi	r18, 0x82	; 130
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	26 1b       	sub	r18, r22
    1980:	37 0b       	sbc	r19, r23
    1982:	2a 31       	cpi	r18, 0x1A	; 26
    1984:	31 05       	cpc	r19, r1
    1986:	2c f0       	brlt	.+10     	; 0x1992 <__pack_f+0x76>
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	2a c0       	rjmp	.+84     	; 0x19e6 <__pack_f+0xca>
    1992:	b8 01       	movw	r22, r16
    1994:	a7 01       	movw	r20, r14
    1996:	02 2e       	mov	r0, r18
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <__pack_f+0x86>
    199a:	76 95       	lsr	r23
    199c:	67 95       	ror	r22
    199e:	57 95       	ror	r21
    19a0:	47 95       	ror	r20
    19a2:	0a 94       	dec	r0
    19a4:	d2 f7       	brpl	.-12     	; 0x199a <__pack_f+0x7e>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <__pack_f+0x9c>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	aa 1f       	adc	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	2a 95       	dec	r18
    19ba:	d2 f7       	brpl	.-12     	; 0x19b0 <__pack_f+0x94>
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	a1 09       	sbc	r26, r1
    19c0:	b1 09       	sbc	r27, r1
    19c2:	8e 21       	and	r24, r14
    19c4:	9f 21       	and	r25, r15
    19c6:	a0 23       	and	r26, r16
    19c8:	b1 23       	and	r27, r17
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	a1 05       	cpc	r26, r1
    19ce:	b1 05       	cpc	r27, r1
    19d0:	21 f0       	breq	.+8      	; 0x19da <__pack_f+0xbe>
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	9a 01       	movw	r18, r20
    19dc:	ab 01       	movw	r20, r22
    19de:	28 2b       	or	r18, r24
    19e0:	39 2b       	or	r19, r25
    19e2:	4a 2b       	or	r20, r26
    19e4:	5b 2b       	or	r21, r27
    19e6:	da 01       	movw	r26, r20
    19e8:	c9 01       	movw	r24, r18
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	90 70       	andi	r25, 0x00	; 0
    19ee:	a0 70       	andi	r26, 0x00	; 0
    19f0:	b0 70       	andi	r27, 0x00	; 0
    19f2:	80 34       	cpi	r24, 0x40	; 64
    19f4:	91 05       	cpc	r25, r1
    19f6:	a1 05       	cpc	r26, r1
    19f8:	b1 05       	cpc	r27, r1
    19fa:	39 f4       	brne	.+14     	; 0x1a0a <__pack_f+0xee>
    19fc:	27 ff       	sbrs	r18, 7
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <__pack_f+0xf6>
    1a00:	20 5c       	subi	r18, 0xC0	; 192
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	4f 4f       	sbci	r20, 0xFF	; 255
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <__pack_f+0xf6>
    1a0a:	21 5c       	subi	r18, 0xC1	; 193
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a10:	5f 4f       	sbci	r21, 0xFF	; 255
    1a12:	e0 e0       	ldi	r30, 0x00	; 0
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	20 30       	cpi	r18, 0x00	; 0
    1a18:	a0 e0       	ldi	r26, 0x00	; 0
    1a1a:	3a 07       	cpc	r19, r26
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	4a 07       	cpc	r20, r26
    1a20:	a0 e4       	ldi	r26, 0x40	; 64
    1a22:	5a 07       	cpc	r21, r26
    1a24:	10 f0       	brcs	.+4      	; 0x1a2a <__pack_f+0x10e>
    1a26:	e1 e0       	ldi	r30, 0x01	; 1
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	79 01       	movw	r14, r18
    1a2c:	8a 01       	movw	r16, r20
    1a2e:	27 c0       	rjmp	.+78     	; 0x1a7e <__pack_f+0x162>
    1a30:	60 38       	cpi	r22, 0x80	; 128
    1a32:	71 05       	cpc	r23, r1
    1a34:	64 f5       	brge	.+88     	; 0x1a8e <__pack_f+0x172>
    1a36:	fb 01       	movw	r30, r22
    1a38:	e1 58       	subi	r30, 0x81	; 129
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	c7 01       	movw	r24, r14
    1a40:	8f 77       	andi	r24, 0x7F	; 127
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	a0 70       	andi	r26, 0x00	; 0
    1a46:	b0 70       	andi	r27, 0x00	; 0
    1a48:	80 34       	cpi	r24, 0x40	; 64
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	a1 05       	cpc	r26, r1
    1a4e:	b1 05       	cpc	r27, r1
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <__pack_f+0x144>
    1a52:	e7 fe       	sbrs	r14, 7
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <__pack_f+0x154>
    1a56:	80 e4       	ldi	r24, 0x40	; 64
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e0       	ldi	r26, 0x00	; 0
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <__pack_f+0x14c>
    1a60:	8f e3       	ldi	r24, 0x3F	; 63
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 0e       	add	r14, r24
    1a6a:	f9 1e       	adc	r15, r25
    1a6c:	0a 1f       	adc	r16, r26
    1a6e:	1b 1f       	adc	r17, r27
    1a70:	17 ff       	sbrs	r17, 7
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <__pack_f+0x162>
    1a74:	16 95       	lsr	r17
    1a76:	07 95       	ror	r16
    1a78:	f7 94       	ror	r15
    1a7a:	e7 94       	ror	r14
    1a7c:	31 96       	adiw	r30, 0x01	; 1
    1a7e:	87 e0       	ldi	r24, 0x07	; 7
    1a80:	16 95       	lsr	r17
    1a82:	07 95       	ror	r16
    1a84:	f7 94       	ror	r15
    1a86:	e7 94       	ror	r14
    1a88:	8a 95       	dec	r24
    1a8a:	d1 f7       	brne	.-12     	; 0x1a80 <__pack_f+0x164>
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <__pack_f+0x17c>
    1a8e:	ee 24       	eor	r14, r14
    1a90:	ff 24       	eor	r15, r15
    1a92:	87 01       	movw	r16, r14
    1a94:	ef ef       	ldi	r30, 0xFF	; 255
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	6e 2f       	mov	r22, r30
    1a9a:	67 95       	ror	r22
    1a9c:	66 27       	eor	r22, r22
    1a9e:	67 95       	ror	r22
    1aa0:	90 2f       	mov	r25, r16
    1aa2:	9f 77       	andi	r25, 0x7F	; 127
    1aa4:	d7 94       	ror	r13
    1aa6:	dd 24       	eor	r13, r13
    1aa8:	d7 94       	ror	r13
    1aaa:	8e 2f       	mov	r24, r30
    1aac:	86 95       	lsr	r24
    1aae:	49 2f       	mov	r20, r25
    1ab0:	46 2b       	or	r20, r22
    1ab2:	58 2f       	mov	r21, r24
    1ab4:	5d 29       	or	r21, r13
    1ab6:	b7 01       	movw	r22, r14
    1ab8:	ca 01       	movw	r24, r20
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	08 95       	ret

00001ac6 <__unpack_f>:
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	db 01       	movw	r26, r22
    1aca:	40 81       	ld	r20, Z
    1acc:	51 81       	ldd	r21, Z+1	; 0x01
    1ace:	22 81       	ldd	r18, Z+2	; 0x02
    1ad0:	62 2f       	mov	r22, r18
    1ad2:	6f 77       	andi	r22, 0x7F	; 127
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	22 1f       	adc	r18, r18
    1ad8:	22 27       	eor	r18, r18
    1ada:	22 1f       	adc	r18, r18
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	89 2f       	mov	r24, r25
    1ae0:	88 0f       	add	r24, r24
    1ae2:	82 2b       	or	r24, r18
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	99 1f       	adc	r25, r25
    1aea:	99 27       	eor	r25, r25
    1aec:	99 1f       	adc	r25, r25
    1aee:	11 96       	adiw	r26, 0x01	; 1
    1af0:	9c 93       	st	X, r25
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	21 15       	cp	r18, r1
    1af6:	31 05       	cpc	r19, r1
    1af8:	a9 f5       	brne	.+106    	; 0x1b64 <__unpack_f+0x9e>
    1afa:	41 15       	cp	r20, r1
    1afc:	51 05       	cpc	r21, r1
    1afe:	61 05       	cpc	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <__unpack_f+0x42>
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	37 c0       	rjmp	.+110    	; 0x1b76 <__unpack_f+0xb0>
    1b08:	82 e8       	ldi	r24, 0x82	; 130
    1b0a:	9f ef       	ldi	r25, 0xFF	; 255
    1b0c:	13 96       	adiw	r26, 0x03	; 3
    1b0e:	9c 93       	st	X, r25
    1b10:	8e 93       	st	-X, r24
    1b12:	12 97       	sbiw	r26, 0x02	; 2
    1b14:	9a 01       	movw	r18, r20
    1b16:	ab 01       	movw	r20, r22
    1b18:	67 e0       	ldi	r22, 0x07	; 7
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	44 1f       	adc	r20, r20
    1b20:	55 1f       	adc	r21, r21
    1b22:	6a 95       	dec	r22
    1b24:	d1 f7       	brne	.-12     	; 0x1b1a <__unpack_f+0x54>
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	8c 93       	st	X, r24
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <__unpack_f+0x80>
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	44 1f       	adc	r20, r20
    1b32:	55 1f       	adc	r21, r21
    1b34:	12 96       	adiw	r26, 0x02	; 2
    1b36:	8d 91       	ld	r24, X+
    1b38:	9c 91       	ld	r25, X
    1b3a:	13 97       	sbiw	r26, 0x03	; 3
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	13 96       	adiw	r26, 0x03	; 3
    1b40:	9c 93       	st	X, r25
    1b42:	8e 93       	st	-X, r24
    1b44:	12 97       	sbiw	r26, 0x02	; 2
    1b46:	20 30       	cpi	r18, 0x00	; 0
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	38 07       	cpc	r19, r24
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	48 07       	cpc	r20, r24
    1b50:	80 e4       	ldi	r24, 0x40	; 64
    1b52:	58 07       	cpc	r21, r24
    1b54:	58 f3       	brcs	.-42     	; 0x1b2c <__unpack_f+0x66>
    1b56:	14 96       	adiw	r26, 0x04	; 4
    1b58:	2d 93       	st	X+, r18
    1b5a:	3d 93       	st	X+, r19
    1b5c:	4d 93       	st	X+, r20
    1b5e:	5c 93       	st	X, r21
    1b60:	17 97       	sbiw	r26, 0x07	; 7
    1b62:	08 95       	ret
    1b64:	2f 3f       	cpi	r18, 0xFF	; 255
    1b66:	31 05       	cpc	r19, r1
    1b68:	79 f4       	brne	.+30     	; 0x1b88 <__unpack_f+0xc2>
    1b6a:	41 15       	cp	r20, r1
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	61 05       	cpc	r22, r1
    1b70:	71 05       	cpc	r23, r1
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <__unpack_f+0xb4>
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	8c 93       	st	X, r24
    1b78:	08 95       	ret
    1b7a:	64 ff       	sbrs	r22, 4
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <__unpack_f+0xbe>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	8c 93       	st	X, r24
    1b82:	12 c0       	rjmp	.+36     	; 0x1ba8 <__unpack_f+0xe2>
    1b84:	1c 92       	st	X, r1
    1b86:	10 c0       	rjmp	.+32     	; 0x1ba8 <__unpack_f+0xe2>
    1b88:	2f 57       	subi	r18, 0x7F	; 127
    1b8a:	30 40       	sbci	r19, 0x00	; 0
    1b8c:	13 96       	adiw	r26, 0x03	; 3
    1b8e:	3c 93       	st	X, r19
    1b90:	2e 93       	st	-X, r18
    1b92:	12 97       	sbiw	r26, 0x02	; 2
    1b94:	83 e0       	ldi	r24, 0x03	; 3
    1b96:	8c 93       	st	X, r24
    1b98:	87 e0       	ldi	r24, 0x07	; 7
    1b9a:	44 0f       	add	r20, r20
    1b9c:	55 1f       	adc	r21, r21
    1b9e:	66 1f       	adc	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	8a 95       	dec	r24
    1ba4:	d1 f7       	brne	.-12     	; 0x1b9a <__unpack_f+0xd4>
    1ba6:	70 64       	ori	r23, 0x40	; 64
    1ba8:	14 96       	adiw	r26, 0x04	; 4
    1baa:	4d 93       	st	X+, r20
    1bac:	5d 93       	st	X+, r21
    1bae:	6d 93       	st	X+, r22
    1bb0:	7c 93       	st	X, r23
    1bb2:	17 97       	sbiw	r26, 0x07	; 7
    1bb4:	08 95       	ret

00001bb6 <__fpcmp_parts_f>:
    1bb6:	1f 93       	push	r17
    1bb8:	dc 01       	movw	r26, r24
    1bba:	fb 01       	movw	r30, r22
    1bbc:	9c 91       	ld	r25, X
    1bbe:	92 30       	cpi	r25, 0x02	; 2
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <__fpcmp_parts_f+0xe>
    1bc2:	47 c0       	rjmp	.+142    	; 0x1c52 <__fpcmp_parts_f+0x9c>
    1bc4:	80 81       	ld	r24, Z
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <__fpcmp_parts_f+0x16>
    1bca:	43 c0       	rjmp	.+134    	; 0x1c52 <__fpcmp_parts_f+0x9c>
    1bcc:	94 30       	cpi	r25, 0x04	; 4
    1bce:	51 f4       	brne	.+20     	; 0x1be4 <__fpcmp_parts_f+0x2e>
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	1c 91       	ld	r17, X
    1bd4:	84 30       	cpi	r24, 0x04	; 4
    1bd6:	99 f5       	brne	.+102    	; 0x1c3e <__fpcmp_parts_f+0x88>
    1bd8:	81 81       	ldd	r24, Z+1	; 0x01
    1bda:	68 2f       	mov	r22, r24
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	61 1b       	sub	r22, r17
    1be0:	71 09       	sbc	r23, r1
    1be2:	3f c0       	rjmp	.+126    	; 0x1c62 <__fpcmp_parts_f+0xac>
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <__fpcmp_parts_f+0x3a>
    1be8:	92 30       	cpi	r25, 0x02	; 2
    1bea:	31 f4       	brne	.+12     	; 0x1bf8 <__fpcmp_parts_f+0x42>
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	b9 f1       	breq	.+110    	; 0x1c5e <__fpcmp_parts_f+0xa8>
    1bf0:	81 81       	ldd	r24, Z+1	; 0x01
    1bf2:	88 23       	and	r24, r24
    1bf4:	89 f1       	breq	.+98     	; 0x1c58 <__fpcmp_parts_f+0xa2>
    1bf6:	2d c0       	rjmp	.+90     	; 0x1c52 <__fpcmp_parts_f+0x9c>
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	1c 91       	ld	r17, X
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	f1 f0       	breq	.+60     	; 0x1c3e <__fpcmp_parts_f+0x88>
    1c02:	81 81       	ldd	r24, Z+1	; 0x01
    1c04:	18 17       	cp	r17, r24
    1c06:	d9 f4       	brne	.+54     	; 0x1c3e <__fpcmp_parts_f+0x88>
    1c08:	12 96       	adiw	r26, 0x02	; 2
    1c0a:	2d 91       	ld	r18, X+
    1c0c:	3c 91       	ld	r19, X
    1c0e:	13 97       	sbiw	r26, 0x03	; 3
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	82 17       	cp	r24, r18
    1c16:	93 07       	cpc	r25, r19
    1c18:	94 f0       	brlt	.+36     	; 0x1c3e <__fpcmp_parts_f+0x88>
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	bc f0       	brlt	.+46     	; 0x1c4e <__fpcmp_parts_f+0x98>
    1c20:	14 96       	adiw	r26, 0x04	; 4
    1c22:	8d 91       	ld	r24, X+
    1c24:	9d 91       	ld	r25, X+
    1c26:	0d 90       	ld	r0, X+
    1c28:	bc 91       	ld	r27, X
    1c2a:	a0 2d       	mov	r26, r0
    1c2c:	24 81       	ldd	r18, Z+4	; 0x04
    1c2e:	35 81       	ldd	r19, Z+5	; 0x05
    1c30:	46 81       	ldd	r20, Z+6	; 0x06
    1c32:	57 81       	ldd	r21, Z+7	; 0x07
    1c34:	28 17       	cp	r18, r24
    1c36:	39 07       	cpc	r19, r25
    1c38:	4a 07       	cpc	r20, r26
    1c3a:	5b 07       	cpc	r21, r27
    1c3c:	18 f4       	brcc	.+6      	; 0x1c44 <__fpcmp_parts_f+0x8e>
    1c3e:	11 23       	and	r17, r17
    1c40:	41 f0       	breq	.+16     	; 0x1c52 <__fpcmp_parts_f+0x9c>
    1c42:	0a c0       	rjmp	.+20     	; 0x1c58 <__fpcmp_parts_f+0xa2>
    1c44:	82 17       	cp	r24, r18
    1c46:	93 07       	cpc	r25, r19
    1c48:	a4 07       	cpc	r26, r20
    1c4a:	b5 07       	cpc	r27, r21
    1c4c:	40 f4       	brcc	.+16     	; 0x1c5e <__fpcmp_parts_f+0xa8>
    1c4e:	11 23       	and	r17, r17
    1c50:	19 f0       	breq	.+6      	; 0x1c58 <__fpcmp_parts_f+0xa2>
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <__fpcmp_parts_f+0xac>
    1c58:	6f ef       	ldi	r22, 0xFF	; 255
    1c5a:	7f ef       	ldi	r23, 0xFF	; 255
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <__fpcmp_parts_f+0xac>
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	cb 01       	movw	r24, r22
    1c64:	1f 91       	pop	r17
    1c66:	08 95       	ret

00001c68 <fdevopen>:
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	8c 01       	movw	r16, r24
    1c72:	eb 01       	movw	r28, r22
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	31 f4       	brne	.+12     	; 0x1c84 <fdevopen+0x1c>
    1c78:	61 15       	cp	r22, r1
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	19 f4       	brne	.+6      	; 0x1c84 <fdevopen+0x1c>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	38 c0       	rjmp	.+112    	; 0x1cf4 <fdevopen+0x8c>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	6e e0       	ldi	r22, 0x0E	; 14
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	0e 94 ae 10 	call	0x215c	; 0x215c <calloc>
    1c90:	fc 01       	movw	r30, r24
    1c92:	9c 01       	movw	r18, r24
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	71 f1       	breq	.+92     	; 0x1cf4 <fdevopen+0x8c>
    1c98:	80 e8       	ldi	r24, 0x80	; 128
    1c9a:	83 83       	std	Z+3, r24	; 0x03
    1c9c:	20 97       	sbiw	r28, 0x00	; 0
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <fdevopen+0x54>
    1ca0:	d3 87       	std	Z+11, r29	; 0x0b
    1ca2:	c2 87       	std	Z+10, r28	; 0x0a
    1ca4:	81 e8       	ldi	r24, 0x81	; 129
    1ca6:	83 83       	std	Z+3, r24	; 0x03
    1ca8:	80 91 42 02 	lds	r24, 0x0242
    1cac:	90 91 43 02 	lds	r25, 0x0243
    1cb0:	89 2b       	or	r24, r25
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <fdevopen+0x54>
    1cb4:	f0 93 43 02 	sts	0x0243, r31
    1cb8:	e0 93 42 02 	sts	0x0242, r30
    1cbc:	01 15       	cp	r16, r1
    1cbe:	11 05       	cpc	r17, r1
    1cc0:	c9 f0       	breq	.+50     	; 0x1cf4 <fdevopen+0x8c>
    1cc2:	11 87       	std	Z+9, r17	; 0x09
    1cc4:	00 87       	std	Z+8, r16	; 0x08
    1cc6:	83 81       	ldd	r24, Z+3	; 0x03
    1cc8:	82 60       	ori	r24, 0x02	; 2
    1cca:	83 83       	std	Z+3, r24	; 0x03
    1ccc:	80 91 44 02 	lds	r24, 0x0244
    1cd0:	90 91 45 02 	lds	r25, 0x0245
    1cd4:	89 2b       	or	r24, r25
    1cd6:	71 f4       	brne	.+28     	; 0x1cf4 <fdevopen+0x8c>
    1cd8:	f0 93 45 02 	sts	0x0245, r31
    1cdc:	e0 93 44 02 	sts	0x0244, r30
    1ce0:	80 91 46 02 	lds	r24, 0x0246
    1ce4:	90 91 47 02 	lds	r25, 0x0247
    1ce8:	89 2b       	or	r24, r25
    1cea:	21 f4       	brne	.+8      	; 0x1cf4 <fdevopen+0x8c>
    1cec:	f0 93 47 02 	sts	0x0247, r31
    1cf0:	e0 93 46 02 	sts	0x0246, r30
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <printf>:
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e6 e8       	ldi	r30, 0x86	; 134
    1d06:	fe e0       	ldi	r31, 0x0E	; 14
    1d08:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__prologue_saves__+0x20>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	35 96       	adiw	r30, 0x05	; 5
    1d10:	61 91       	ld	r22, Z+
    1d12:	71 91       	ld	r23, Z+
    1d14:	80 91 44 02 	lds	r24, 0x0244
    1d18:	90 91 45 02 	lds	r25, 0x0245
    1d1c:	af 01       	movw	r20, r30
    1d1e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vfprintf>
    1d22:	20 96       	adiw	r28, 0x00	; 0
    1d24:	e2 e0       	ldi	r30, 0x02	; 2
    1d26:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__epilogue_restores__+0x20>

00001d2a <putchar>:
    1d2a:	60 91 44 02 	lds	r22, 0x0244
    1d2e:	70 91 45 02 	lds	r23, 0x0245
    1d32:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    1d36:	08 95       	ret

00001d38 <puts>:
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	8c 01       	movw	r16, r24
    1d42:	e0 91 44 02 	lds	r30, 0x0244
    1d46:	f0 91 45 02 	lds	r31, 0x0245
    1d4a:	83 81       	ldd	r24, Z+3	; 0x03
    1d4c:	81 ff       	sbrs	r24, 1
    1d4e:	21 c0       	rjmp	.+66     	; 0x1d92 <puts+0x5a>
    1d50:	c0 e0       	ldi	r28, 0x00	; 0
    1d52:	d0 e0       	ldi	r29, 0x00	; 0
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <puts+0x38>
    1d56:	e0 91 44 02 	lds	r30, 0x0244
    1d5a:	f0 91 45 02 	lds	r31, 0x0245
    1d5e:	20 85       	ldd	r18, Z+8	; 0x08
    1d60:	31 85       	ldd	r19, Z+9	; 0x09
    1d62:	bf 01       	movw	r22, r30
    1d64:	f9 01       	movw	r30, r18
    1d66:	09 95       	icall
    1d68:	89 2b       	or	r24, r25
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <puts+0x38>
    1d6c:	cf ef       	ldi	r28, 0xFF	; 255
    1d6e:	df ef       	ldi	r29, 0xFF	; 255
    1d70:	f8 01       	movw	r30, r16
    1d72:	81 91       	ld	r24, Z+
    1d74:	8f 01       	movw	r16, r30
    1d76:	88 23       	and	r24, r24
    1d78:	71 f7       	brne	.-36     	; 0x1d56 <puts+0x1e>
    1d7a:	e0 91 44 02 	lds	r30, 0x0244
    1d7e:	f0 91 45 02 	lds	r31, 0x0245
    1d82:	20 85       	ldd	r18, Z+8	; 0x08
    1d84:	31 85       	ldd	r19, Z+9	; 0x09
    1d86:	8a e0       	ldi	r24, 0x0A	; 10
    1d88:	bf 01       	movw	r22, r30
    1d8a:	f9 01       	movw	r30, r18
    1d8c:	09 95       	icall
    1d8e:	89 2b       	or	r24, r25
    1d90:	11 f0       	breq	.+4      	; 0x1d96 <puts+0x5e>
    1d92:	cf ef       	ldi	r28, 0xFF	; 255
    1d94:	df ef       	ldi	r29, 0xFF	; 255
    1d96:	ce 01       	movw	r24, r28
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	08 95       	ret

00001da2 <vfprintf>:
    1da2:	ab e0       	ldi	r26, 0x0B	; 11
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 ed       	ldi	r30, 0xD7	; 215
    1da8:	fe e0       	ldi	r31, 0x0E	; 14
    1daa:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__prologue_saves__>
    1dae:	3c 01       	movw	r6, r24
    1db0:	2b 01       	movw	r4, r22
    1db2:	5a 01       	movw	r10, r20
    1db4:	fc 01       	movw	r30, r24
    1db6:	17 82       	std	Z+7, r1	; 0x07
    1db8:	16 82       	std	Z+6, r1	; 0x06
    1dba:	83 81       	ldd	r24, Z+3	; 0x03
    1dbc:	81 fd       	sbrc	r24, 1
    1dbe:	03 c0       	rjmp	.+6      	; 0x1dc6 <vfprintf+0x24>
    1dc0:	6f ef       	ldi	r22, 0xFF	; 255
    1dc2:	7f ef       	ldi	r23, 0xFF	; 255
    1dc4:	c6 c1       	rjmp	.+908    	; 0x2152 <vfprintf+0x3b0>
    1dc6:	9a e0       	ldi	r25, 0x0A	; 10
    1dc8:	89 2e       	mov	r8, r25
    1dca:	1e 01       	movw	r2, r28
    1dcc:	08 94       	sec
    1dce:	21 1c       	adc	r2, r1
    1dd0:	31 1c       	adc	r3, r1
    1dd2:	f3 01       	movw	r30, r6
    1dd4:	23 81       	ldd	r18, Z+3	; 0x03
    1dd6:	f2 01       	movw	r30, r4
    1dd8:	23 fd       	sbrc	r18, 3
    1dda:	85 91       	lpm	r24, Z+
    1ddc:	23 ff       	sbrs	r18, 3
    1dde:	81 91       	ld	r24, Z+
    1de0:	2f 01       	movw	r4, r30
    1de2:	88 23       	and	r24, r24
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <vfprintf+0x46>
    1de6:	b2 c1       	rjmp	.+868    	; 0x214c <vfprintf+0x3aa>
    1de8:	85 32       	cpi	r24, 0x25	; 37
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <vfprintf+0x58>
    1dec:	23 fd       	sbrc	r18, 3
    1dee:	85 91       	lpm	r24, Z+
    1df0:	23 ff       	sbrs	r18, 3
    1df2:	81 91       	ld	r24, Z+
    1df4:	2f 01       	movw	r4, r30
    1df6:	85 32       	cpi	r24, 0x25	; 37
    1df8:	29 f4       	brne	.+10     	; 0x1e04 <vfprintf+0x62>
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	b3 01       	movw	r22, r6
    1dfe:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    1e02:	e7 cf       	rjmp	.-50     	; 0x1dd2 <vfprintf+0x30>
    1e04:	98 2f       	mov	r25, r24
    1e06:	ff 24       	eor	r15, r15
    1e08:	ee 24       	eor	r14, r14
    1e0a:	99 24       	eor	r9, r9
    1e0c:	ff e1       	ldi	r31, 0x1F	; 31
    1e0e:	ff 15       	cp	r31, r15
    1e10:	d0 f0       	brcs	.+52     	; 0x1e46 <vfprintf+0xa4>
    1e12:	9b 32       	cpi	r25, 0x2B	; 43
    1e14:	69 f0       	breq	.+26     	; 0x1e30 <vfprintf+0x8e>
    1e16:	9c 32       	cpi	r25, 0x2C	; 44
    1e18:	28 f4       	brcc	.+10     	; 0x1e24 <vfprintf+0x82>
    1e1a:	90 32       	cpi	r25, 0x20	; 32
    1e1c:	59 f0       	breq	.+22     	; 0x1e34 <vfprintf+0x92>
    1e1e:	93 32       	cpi	r25, 0x23	; 35
    1e20:	91 f4       	brne	.+36     	; 0x1e46 <vfprintf+0xa4>
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <vfprintf+0x9e>
    1e24:	9d 32       	cpi	r25, 0x2D	; 45
    1e26:	49 f0       	breq	.+18     	; 0x1e3a <vfprintf+0x98>
    1e28:	90 33       	cpi	r25, 0x30	; 48
    1e2a:	69 f4       	brne	.+26     	; 0x1e46 <vfprintf+0xa4>
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	24 c0       	rjmp	.+72     	; 0x1e78 <vfprintf+0xd6>
    1e30:	52 e0       	ldi	r21, 0x02	; 2
    1e32:	f5 2a       	or	r15, r21
    1e34:	84 e0       	ldi	r24, 0x04	; 4
    1e36:	f8 2a       	or	r15, r24
    1e38:	28 c0       	rjmp	.+80     	; 0x1e8a <vfprintf+0xe8>
    1e3a:	98 e0       	ldi	r25, 0x08	; 8
    1e3c:	f9 2a       	or	r15, r25
    1e3e:	25 c0       	rjmp	.+74     	; 0x1e8a <vfprintf+0xe8>
    1e40:	e0 e1       	ldi	r30, 0x10	; 16
    1e42:	fe 2a       	or	r15, r30
    1e44:	22 c0       	rjmp	.+68     	; 0x1e8a <vfprintf+0xe8>
    1e46:	f7 fc       	sbrc	r15, 7
    1e48:	29 c0       	rjmp	.+82     	; 0x1e9c <vfprintf+0xfa>
    1e4a:	89 2f       	mov	r24, r25
    1e4c:	80 53       	subi	r24, 0x30	; 48
    1e4e:	8a 30       	cpi	r24, 0x0A	; 10
    1e50:	70 f4       	brcc	.+28     	; 0x1e6e <vfprintf+0xcc>
    1e52:	f6 fe       	sbrs	r15, 6
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <vfprintf+0xbe>
    1e56:	98 9c       	mul	r9, r8
    1e58:	90 2c       	mov	r9, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	98 0e       	add	r9, r24
    1e5e:	15 c0       	rjmp	.+42     	; 0x1e8a <vfprintf+0xe8>
    1e60:	e8 9c       	mul	r14, r8
    1e62:	e0 2c       	mov	r14, r0
    1e64:	11 24       	eor	r1, r1
    1e66:	e8 0e       	add	r14, r24
    1e68:	f0 e2       	ldi	r31, 0x20	; 32
    1e6a:	ff 2a       	or	r15, r31
    1e6c:	0e c0       	rjmp	.+28     	; 0x1e8a <vfprintf+0xe8>
    1e6e:	9e 32       	cpi	r25, 0x2E	; 46
    1e70:	29 f4       	brne	.+10     	; 0x1e7c <vfprintf+0xda>
    1e72:	f6 fc       	sbrc	r15, 6
    1e74:	6b c1       	rjmp	.+726    	; 0x214c <vfprintf+0x3aa>
    1e76:	40 e4       	ldi	r20, 0x40	; 64
    1e78:	f4 2a       	or	r15, r20
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <vfprintf+0xe8>
    1e7c:	9c 36       	cpi	r25, 0x6C	; 108
    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <vfprintf+0xe4>
    1e80:	50 e8       	ldi	r21, 0x80	; 128
    1e82:	f5 2a       	or	r15, r21
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0xe8>
    1e86:	98 36       	cpi	r25, 0x68	; 104
    1e88:	49 f4       	brne	.+18     	; 0x1e9c <vfprintf+0xfa>
    1e8a:	f2 01       	movw	r30, r4
    1e8c:	23 fd       	sbrc	r18, 3
    1e8e:	95 91       	lpm	r25, Z+
    1e90:	23 ff       	sbrs	r18, 3
    1e92:	91 91       	ld	r25, Z+
    1e94:	2f 01       	movw	r4, r30
    1e96:	99 23       	and	r25, r25
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <vfprintf+0xfa>
    1e9a:	b8 cf       	rjmp	.-144    	; 0x1e0c <vfprintf+0x6a>
    1e9c:	89 2f       	mov	r24, r25
    1e9e:	85 54       	subi	r24, 0x45	; 69
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	18 f0       	brcs	.+6      	; 0x1eaa <vfprintf+0x108>
    1ea4:	80 52       	subi	r24, 0x20	; 32
    1ea6:	83 30       	cpi	r24, 0x03	; 3
    1ea8:	38 f4       	brcc	.+14     	; 0x1eb8 <vfprintf+0x116>
    1eaa:	44 e0       	ldi	r20, 0x04	; 4
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	a4 0e       	add	r10, r20
    1eb0:	b5 1e       	adc	r11, r21
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	59 83       	std	Y+1, r21	; 0x01
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <vfprintf+0x134>
    1eb8:	93 36       	cpi	r25, 0x63	; 99
    1eba:	31 f0       	breq	.+12     	; 0x1ec8 <vfprintf+0x126>
    1ebc:	93 37       	cpi	r25, 0x73	; 115
    1ebe:	79 f0       	breq	.+30     	; 0x1ede <vfprintf+0x13c>
    1ec0:	93 35       	cpi	r25, 0x53	; 83
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <vfprintf+0x124>
    1ec4:	56 c0       	rjmp	.+172    	; 0x1f72 <vfprintf+0x1d0>
    1ec6:	20 c0       	rjmp	.+64     	; 0x1f08 <vfprintf+0x166>
    1ec8:	f5 01       	movw	r30, r10
    1eca:	80 81       	ld	r24, Z
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	42 e0       	ldi	r20, 0x02	; 2
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	a4 0e       	add	r10, r20
    1ed4:	b5 1e       	adc	r11, r21
    1ed6:	61 01       	movw	r12, r2
    1ed8:	01 e0       	ldi	r16, 0x01	; 1
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	12 c0       	rjmp	.+36     	; 0x1f02 <vfprintf+0x160>
    1ede:	f5 01       	movw	r30, r10
    1ee0:	c0 80       	ld	r12, Z
    1ee2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ee4:	f6 fc       	sbrc	r15, 6
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <vfprintf+0x14c>
    1ee8:	6f ef       	ldi	r22, 0xFF	; 255
    1eea:	7f ef       	ldi	r23, 0xFF	; 255
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <vfprintf+0x150>
    1eee:	69 2d       	mov	r22, r9
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	42 e0       	ldi	r20, 0x02	; 2
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	a4 0e       	add	r10, r20
    1ef8:	b5 1e       	adc	r11, r21
    1efa:	c6 01       	movw	r24, r12
    1efc:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <strnlen>
    1f00:	8c 01       	movw	r16, r24
    1f02:	5f e7       	ldi	r21, 0x7F	; 127
    1f04:	f5 22       	and	r15, r21
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <vfprintf+0x18e>
    1f08:	f5 01       	movw	r30, r10
    1f0a:	c0 80       	ld	r12, Z
    1f0c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f0e:	f6 fc       	sbrc	r15, 6
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <vfprintf+0x176>
    1f12:	6f ef       	ldi	r22, 0xFF	; 255
    1f14:	7f ef       	ldi	r23, 0xFF	; 255
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <vfprintf+0x17a>
    1f18:	69 2d       	mov	r22, r9
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	42 e0       	ldi	r20, 0x02	; 2
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	a4 0e       	add	r10, r20
    1f22:	b5 1e       	adc	r11, r21
    1f24:	c6 01       	movw	r24, r12
    1f26:	0e 94 cf 11 	call	0x239e	; 0x239e <strnlen_P>
    1f2a:	8c 01       	movw	r16, r24
    1f2c:	50 e8       	ldi	r21, 0x80	; 128
    1f2e:	f5 2a       	or	r15, r21
    1f30:	f3 fe       	sbrs	r15, 3
    1f32:	07 c0       	rjmp	.+14     	; 0x1f42 <vfprintf+0x1a0>
    1f34:	1a c0       	rjmp	.+52     	; 0x1f6a <vfprintf+0x1c8>
    1f36:	80 e2       	ldi	r24, 0x20	; 32
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	b3 01       	movw	r22, r6
    1f3c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    1f40:	ea 94       	dec	r14
    1f42:	8e 2d       	mov	r24, r14
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	08 17       	cp	r16, r24
    1f48:	19 07       	cpc	r17, r25
    1f4a:	a8 f3       	brcs	.-22     	; 0x1f36 <vfprintf+0x194>
    1f4c:	0e c0       	rjmp	.+28     	; 0x1f6a <vfprintf+0x1c8>
    1f4e:	f6 01       	movw	r30, r12
    1f50:	f7 fc       	sbrc	r15, 7
    1f52:	85 91       	lpm	r24, Z+
    1f54:	f7 fe       	sbrs	r15, 7
    1f56:	81 91       	ld	r24, Z+
    1f58:	6f 01       	movw	r12, r30
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	b3 01       	movw	r22, r6
    1f5e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    1f62:	e1 10       	cpse	r14, r1
    1f64:	ea 94       	dec	r14
    1f66:	01 50       	subi	r16, 0x01	; 1
    1f68:	10 40       	sbci	r17, 0x00	; 0
    1f6a:	01 15       	cp	r16, r1
    1f6c:	11 05       	cpc	r17, r1
    1f6e:	79 f7       	brne	.-34     	; 0x1f4e <vfprintf+0x1ac>
    1f70:	ea c0       	rjmp	.+468    	; 0x2146 <vfprintf+0x3a4>
    1f72:	94 36       	cpi	r25, 0x64	; 100
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <vfprintf+0x1d8>
    1f76:	99 36       	cpi	r25, 0x69	; 105
    1f78:	69 f5       	brne	.+90     	; 0x1fd4 <vfprintf+0x232>
    1f7a:	f7 fe       	sbrs	r15, 7
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <vfprintf+0x1ec>
    1f7e:	f5 01       	movw	r30, r10
    1f80:	20 81       	ld	r18, Z
    1f82:	31 81       	ldd	r19, Z+1	; 0x01
    1f84:	42 81       	ldd	r20, Z+2	; 0x02
    1f86:	53 81       	ldd	r21, Z+3	; 0x03
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0a c0       	rjmp	.+20     	; 0x1fa2 <vfprintf+0x200>
    1f8e:	f5 01       	movw	r30, r10
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	9c 01       	movw	r18, r24
    1f96:	44 27       	eor	r20, r20
    1f98:	37 fd       	sbrc	r19, 7
    1f9a:	40 95       	com	r20
    1f9c:	54 2f       	mov	r21, r20
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a8 0e       	add	r10, r24
    1fa4:	b9 1e       	adc	r11, r25
    1fa6:	9f e6       	ldi	r25, 0x6F	; 111
    1fa8:	f9 22       	and	r15, r25
    1faa:	57 ff       	sbrs	r21, 7
    1fac:	09 c0       	rjmp	.+18     	; 0x1fc0 <vfprintf+0x21e>
    1fae:	50 95       	com	r21
    1fb0:	40 95       	com	r20
    1fb2:	30 95       	com	r19
    1fb4:	21 95       	neg	r18
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1fba:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbc:	e0 e8       	ldi	r30, 0x80	; 128
    1fbe:	fe 2a       	or	r15, r30
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	a1 01       	movw	r20, r2
    1fc6:	2a e0       	ldi	r18, 0x0A	; 10
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	0e 94 18 12 	call	0x2430	; 0x2430 <__ultoa_invert>
    1fce:	d8 2e       	mov	r13, r24
    1fd0:	d2 18       	sub	r13, r2
    1fd2:	40 c0       	rjmp	.+128    	; 0x2054 <vfprintf+0x2b2>
    1fd4:	95 37       	cpi	r25, 0x75	; 117
    1fd6:	29 f4       	brne	.+10     	; 0x1fe2 <vfprintf+0x240>
    1fd8:	1f 2d       	mov	r17, r15
    1fda:	1f 7e       	andi	r17, 0xEF	; 239
    1fdc:	2a e0       	ldi	r18, 0x0A	; 10
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	1d c0       	rjmp	.+58     	; 0x201c <vfprintf+0x27a>
    1fe2:	1f 2d       	mov	r17, r15
    1fe4:	19 7f       	andi	r17, 0xF9	; 249
    1fe6:	9f 36       	cpi	r25, 0x6F	; 111
    1fe8:	61 f0       	breq	.+24     	; 0x2002 <vfprintf+0x260>
    1fea:	90 37       	cpi	r25, 0x70	; 112
    1fec:	20 f4       	brcc	.+8      	; 0x1ff6 <vfprintf+0x254>
    1fee:	98 35       	cpi	r25, 0x58	; 88
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <vfprintf+0x252>
    1ff2:	ac c0       	rjmp	.+344    	; 0x214c <vfprintf+0x3aa>
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <vfprintf+0x272>
    1ff6:	90 37       	cpi	r25, 0x70	; 112
    1ff8:	39 f0       	breq	.+14     	; 0x2008 <vfprintf+0x266>
    1ffa:	98 37       	cpi	r25, 0x78	; 120
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <vfprintf+0x25e>
    1ffe:	a6 c0       	rjmp	.+332    	; 0x214c <vfprintf+0x3aa>
    2000:	04 c0       	rjmp	.+8      	; 0x200a <vfprintf+0x268>
    2002:	28 e0       	ldi	r18, 0x08	; 8
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	0a c0       	rjmp	.+20     	; 0x201c <vfprintf+0x27a>
    2008:	10 61       	ori	r17, 0x10	; 16
    200a:	14 fd       	sbrc	r17, 4
    200c:	14 60       	ori	r17, 0x04	; 4
    200e:	20 e1       	ldi	r18, 0x10	; 16
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	04 c0       	rjmp	.+8      	; 0x201c <vfprintf+0x27a>
    2014:	14 fd       	sbrc	r17, 4
    2016:	16 60       	ori	r17, 0x06	; 6
    2018:	20 e1       	ldi	r18, 0x10	; 16
    201a:	32 e0       	ldi	r19, 0x02	; 2
    201c:	17 ff       	sbrs	r17, 7
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <vfprintf+0x28e>
    2020:	f5 01       	movw	r30, r10
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	44 e0       	ldi	r20, 0x04	; 4
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <vfprintf+0x29e>
    2030:	f5 01       	movw	r30, r10
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	bc 01       	movw	r22, r24
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	42 e0       	ldi	r20, 0x02	; 2
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	a4 0e       	add	r10, r20
    2042:	b5 1e       	adc	r11, r21
    2044:	a1 01       	movw	r20, r2
    2046:	0e 94 18 12 	call	0x2430	; 0x2430 <__ultoa_invert>
    204a:	d8 2e       	mov	r13, r24
    204c:	d2 18       	sub	r13, r2
    204e:	8f e7       	ldi	r24, 0x7F	; 127
    2050:	f8 2e       	mov	r15, r24
    2052:	f1 22       	and	r15, r17
    2054:	f6 fe       	sbrs	r15, 6
    2056:	0b c0       	rjmp	.+22     	; 0x206e <vfprintf+0x2cc>
    2058:	5e ef       	ldi	r21, 0xFE	; 254
    205a:	f5 22       	and	r15, r21
    205c:	d9 14       	cp	r13, r9
    205e:	38 f4       	brcc	.+14     	; 0x206e <vfprintf+0x2cc>
    2060:	f4 fe       	sbrs	r15, 4
    2062:	07 c0       	rjmp	.+14     	; 0x2072 <vfprintf+0x2d0>
    2064:	f2 fc       	sbrc	r15, 2
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <vfprintf+0x2d0>
    2068:	8f ee       	ldi	r24, 0xEF	; 239
    206a:	f8 22       	and	r15, r24
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <vfprintf+0x2d0>
    206e:	1d 2d       	mov	r17, r13
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <vfprintf+0x2d2>
    2072:	19 2d       	mov	r17, r9
    2074:	f4 fe       	sbrs	r15, 4
    2076:	0d c0       	rjmp	.+26     	; 0x2092 <vfprintf+0x2f0>
    2078:	fe 01       	movw	r30, r28
    207a:	ed 0d       	add	r30, r13
    207c:	f1 1d       	adc	r31, r1
    207e:	80 81       	ld	r24, Z
    2080:	80 33       	cpi	r24, 0x30	; 48
    2082:	19 f4       	brne	.+6      	; 0x208a <vfprintf+0x2e8>
    2084:	99 ee       	ldi	r25, 0xE9	; 233
    2086:	f9 22       	and	r15, r25
    2088:	08 c0       	rjmp	.+16     	; 0x209a <vfprintf+0x2f8>
    208a:	1f 5f       	subi	r17, 0xFF	; 255
    208c:	f2 fe       	sbrs	r15, 2
    208e:	05 c0       	rjmp	.+10     	; 0x209a <vfprintf+0x2f8>
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <vfprintf+0x2f6>
    2092:	8f 2d       	mov	r24, r15
    2094:	86 78       	andi	r24, 0x86	; 134
    2096:	09 f0       	breq	.+2      	; 0x209a <vfprintf+0x2f8>
    2098:	1f 5f       	subi	r17, 0xFF	; 255
    209a:	0f 2d       	mov	r16, r15
    209c:	f3 fc       	sbrc	r15, 3
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <vfprintf+0x326>
    20a0:	f0 fe       	sbrs	r15, 0
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <vfprintf+0x320>
    20a4:	1e 15       	cp	r17, r14
    20a6:	10 f0       	brcs	.+4      	; 0x20ac <vfprintf+0x30a>
    20a8:	9d 2c       	mov	r9, r13
    20aa:	0b c0       	rjmp	.+22     	; 0x20c2 <vfprintf+0x320>
    20ac:	9d 2c       	mov	r9, r13
    20ae:	9e 0c       	add	r9, r14
    20b0:	91 1a       	sub	r9, r17
    20b2:	1e 2d       	mov	r17, r14
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <vfprintf+0x320>
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	b3 01       	movw	r22, r6
    20bc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    20c0:	1f 5f       	subi	r17, 0xFF	; 255
    20c2:	1e 15       	cp	r17, r14
    20c4:	c0 f3       	brcs	.-16     	; 0x20b6 <vfprintf+0x314>
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <vfprintf+0x32e>
    20c8:	1e 15       	cp	r17, r14
    20ca:	10 f4       	brcc	.+4      	; 0x20d0 <vfprintf+0x32e>
    20cc:	e1 1a       	sub	r14, r17
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <vfprintf+0x330>
    20d0:	ee 24       	eor	r14, r14
    20d2:	04 ff       	sbrs	r16, 4
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <vfprintf+0x352>
    20d6:	80 e3       	ldi	r24, 0x30	; 48
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	b3 01       	movw	r22, r6
    20dc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    20e0:	02 ff       	sbrs	r16, 2
    20e2:	1d c0       	rjmp	.+58     	; 0x211e <vfprintf+0x37c>
    20e4:	01 fd       	sbrc	r16, 1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <vfprintf+0x34c>
    20e8:	88 e7       	ldi	r24, 0x78	; 120
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e c0       	rjmp	.+28     	; 0x210a <vfprintf+0x368>
    20ee:	88 e5       	ldi	r24, 0x58	; 88
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <vfprintf+0x368>
    20f4:	80 2f       	mov	r24, r16
    20f6:	86 78       	andi	r24, 0x86	; 134
    20f8:	91 f0       	breq	.+36     	; 0x211e <vfprintf+0x37c>
    20fa:	01 ff       	sbrs	r16, 1
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <vfprintf+0x360>
    20fe:	8b e2       	ldi	r24, 0x2B	; 43
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <vfprintf+0x362>
    2102:	80 e2       	ldi	r24, 0x20	; 32
    2104:	f7 fc       	sbrc	r15, 7
    2106:	8d e2       	ldi	r24, 0x2D	; 45
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	b3 01       	movw	r22, r6
    210c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    2110:	06 c0       	rjmp	.+12     	; 0x211e <vfprintf+0x37c>
    2112:	80 e3       	ldi	r24, 0x30	; 48
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	b3 01       	movw	r22, r6
    2118:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    211c:	9a 94       	dec	r9
    211e:	d9 14       	cp	r13, r9
    2120:	c0 f3       	brcs	.-16     	; 0x2112 <vfprintf+0x370>
    2122:	da 94       	dec	r13
    2124:	f1 01       	movw	r30, r2
    2126:	ed 0d       	add	r30, r13
    2128:	f1 1d       	adc	r31, r1
    212a:	80 81       	ld	r24, Z
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	b3 01       	movw	r22, r6
    2130:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    2134:	dd 20       	and	r13, r13
    2136:	a9 f7       	brne	.-22     	; 0x2122 <vfprintf+0x380>
    2138:	06 c0       	rjmp	.+12     	; 0x2146 <vfprintf+0x3a4>
    213a:	80 e2       	ldi	r24, 0x20	; 32
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	b3 01       	movw	r22, r6
    2140:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    2144:	ea 94       	dec	r14
    2146:	ee 20       	and	r14, r14
    2148:	c1 f7       	brne	.-16     	; 0x213a <vfprintf+0x398>
    214a:	43 ce       	rjmp	.-890    	; 0x1dd2 <vfprintf+0x30>
    214c:	f3 01       	movw	r30, r6
    214e:	66 81       	ldd	r22, Z+6	; 0x06
    2150:	77 81       	ldd	r23, Z+7	; 0x07
    2152:	cb 01       	movw	r24, r22
    2154:	2b 96       	adiw	r28, 0x0b	; 11
    2156:	e2 e1       	ldi	r30, 0x12	; 18
    2158:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__epilogue_restores__>

0000215c <calloc>:
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	68 9f       	mul	r22, r24
    2166:	80 01       	movw	r16, r0
    2168:	69 9f       	mul	r22, r25
    216a:	10 0d       	add	r17, r0
    216c:	78 9f       	mul	r23, r24
    216e:	10 0d       	add	r17, r0
    2170:	11 24       	eor	r1, r1
    2172:	c8 01       	movw	r24, r16
    2174:	0e 94 ca 10 	call	0x2194	; 0x2194 <malloc>
    2178:	ec 01       	movw	r28, r24
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	29 f0       	breq	.+10     	; 0x2188 <calloc+0x2c>
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	a8 01       	movw	r20, r16
    2184:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memset>
    2188:	ce 01       	movw	r24, r28
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	08 95       	ret

00002194 <malloc>:
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	bc 01       	movw	r22, r24
    219a:	82 30       	cpi	r24, 0x02	; 2
    219c:	91 05       	cpc	r25, r1
    219e:	10 f4       	brcc	.+4      	; 0x21a4 <malloc+0x10>
    21a0:	62 e0       	ldi	r22, 0x02	; 2
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	a0 91 4a 02 	lds	r26, 0x024A
    21a8:	b0 91 4b 02 	lds	r27, 0x024B
    21ac:	ed 01       	movw	r28, r26
    21ae:	e0 e0       	ldi	r30, 0x00	; 0
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	21 c0       	rjmp	.+66     	; 0x21fa <malloc+0x66>
    21b8:	88 81       	ld	r24, Y
    21ba:	99 81       	ldd	r25, Y+1	; 0x01
    21bc:	86 17       	cp	r24, r22
    21be:	97 07       	cpc	r25, r23
    21c0:	69 f4       	brne	.+26     	; 0x21dc <malloc+0x48>
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	30 97       	sbiw	r30, 0x00	; 0
    21c8:	19 f0       	breq	.+6      	; 0x21d0 <malloc+0x3c>
    21ca:	93 83       	std	Z+3, r25	; 0x03
    21cc:	82 83       	std	Z+2, r24	; 0x02
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <malloc+0x44>
    21d0:	90 93 4b 02 	sts	0x024B, r25
    21d4:	80 93 4a 02 	sts	0x024A, r24
    21d8:	fe 01       	movw	r30, r28
    21da:	34 c0       	rjmp	.+104    	; 0x2244 <malloc+0xb0>
    21dc:	68 17       	cp	r22, r24
    21de:	79 07       	cpc	r23, r25
    21e0:	38 f4       	brcc	.+14     	; 0x21f0 <malloc+0x5c>
    21e2:	41 15       	cp	r20, r1
    21e4:	51 05       	cpc	r21, r1
    21e6:	19 f0       	breq	.+6      	; 0x21ee <malloc+0x5a>
    21e8:	84 17       	cp	r24, r20
    21ea:	95 07       	cpc	r25, r21
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <malloc+0x5c>
    21ee:	ac 01       	movw	r20, r24
    21f0:	fe 01       	movw	r30, r28
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	9c 01       	movw	r18, r24
    21f8:	e9 01       	movw	r28, r18
    21fa:	20 97       	sbiw	r28, 0x00	; 0
    21fc:	e9 f6       	brne	.-70     	; 0x21b8 <malloc+0x24>
    21fe:	41 15       	cp	r20, r1
    2200:	51 05       	cpc	r21, r1
    2202:	a9 f1       	breq	.+106    	; 0x226e <malloc+0xda>
    2204:	ca 01       	movw	r24, r20
    2206:	86 1b       	sub	r24, r22
    2208:	97 0b       	sbc	r25, r23
    220a:	04 97       	sbiw	r24, 0x04	; 4
    220c:	08 f4       	brcc	.+2      	; 0x2210 <malloc+0x7c>
    220e:	ba 01       	movw	r22, r20
    2210:	e0 e0       	ldi	r30, 0x00	; 0
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	2a c0       	rjmp	.+84     	; 0x226a <malloc+0xd6>
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	11 97       	sbiw	r26, 0x01	; 1
    221c:	84 17       	cp	r24, r20
    221e:	95 07       	cpc	r25, r21
    2220:	f9 f4       	brne	.+62     	; 0x2260 <malloc+0xcc>
    2222:	64 17       	cp	r22, r20
    2224:	75 07       	cpc	r23, r21
    2226:	81 f4       	brne	.+32     	; 0x2248 <malloc+0xb4>
    2228:	12 96       	adiw	r26, 0x02	; 2
    222a:	8d 91       	ld	r24, X+
    222c:	9c 91       	ld	r25, X
    222e:	13 97       	sbiw	r26, 0x03	; 3
    2230:	30 97       	sbiw	r30, 0x00	; 0
    2232:	19 f0       	breq	.+6      	; 0x223a <malloc+0xa6>
    2234:	93 83       	std	Z+3, r25	; 0x03
    2236:	82 83       	std	Z+2, r24	; 0x02
    2238:	04 c0       	rjmp	.+8      	; 0x2242 <malloc+0xae>
    223a:	90 93 4b 02 	sts	0x024B, r25
    223e:	80 93 4a 02 	sts	0x024A, r24
    2242:	fd 01       	movw	r30, r26
    2244:	32 96       	adiw	r30, 0x02	; 2
    2246:	4f c0       	rjmp	.+158    	; 0x22e6 <malloc+0x152>
    2248:	ca 01       	movw	r24, r20
    224a:	86 1b       	sub	r24, r22
    224c:	97 0b       	sbc	r25, r23
    224e:	fd 01       	movw	r30, r26
    2250:	e8 0f       	add	r30, r24
    2252:	f9 1f       	adc	r31, r25
    2254:	61 93       	st	Z+, r22
    2256:	71 93       	st	Z+, r23
    2258:	02 97       	sbiw	r24, 0x02	; 2
    225a:	8d 93       	st	X+, r24
    225c:	9c 93       	st	X, r25
    225e:	43 c0       	rjmp	.+134    	; 0x22e6 <malloc+0x152>
    2260:	fd 01       	movw	r30, r26
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	9c 01       	movw	r18, r24
    2268:	d9 01       	movw	r26, r18
    226a:	10 97       	sbiw	r26, 0x00	; 0
    226c:	a1 f6       	brne	.-88     	; 0x2216 <malloc+0x82>
    226e:	80 91 48 02 	lds	r24, 0x0248
    2272:	90 91 49 02 	lds	r25, 0x0249
    2276:	89 2b       	or	r24, r25
    2278:	41 f4       	brne	.+16     	; 0x228a <malloc+0xf6>
    227a:	80 91 3d 02 	lds	r24, 0x023D
    227e:	90 91 3e 02 	lds	r25, 0x023E
    2282:	90 93 49 02 	sts	0x0249, r25
    2286:	80 93 48 02 	sts	0x0248, r24
    228a:	40 91 3f 02 	lds	r20, 0x023F
    228e:	50 91 40 02 	lds	r21, 0x0240
    2292:	41 15       	cp	r20, r1
    2294:	51 05       	cpc	r21, r1
    2296:	41 f4       	brne	.+16     	; 0x22a8 <malloc+0x114>
    2298:	4d b7       	in	r20, 0x3d	; 61
    229a:	5e b7       	in	r21, 0x3e	; 62
    229c:	80 91 3b 02 	lds	r24, 0x023B
    22a0:	90 91 3c 02 	lds	r25, 0x023C
    22a4:	48 1b       	sub	r20, r24
    22a6:	59 0b       	sbc	r21, r25
    22a8:	20 91 48 02 	lds	r18, 0x0248
    22ac:	30 91 49 02 	lds	r19, 0x0249
    22b0:	24 17       	cp	r18, r20
    22b2:	35 07       	cpc	r19, r21
    22b4:	b0 f4       	brcc	.+44     	; 0x22e2 <malloc+0x14e>
    22b6:	ca 01       	movw	r24, r20
    22b8:	82 1b       	sub	r24, r18
    22ba:	93 0b       	sbc	r25, r19
    22bc:	86 17       	cp	r24, r22
    22be:	97 07       	cpc	r25, r23
    22c0:	80 f0       	brcs	.+32     	; 0x22e2 <malloc+0x14e>
    22c2:	ab 01       	movw	r20, r22
    22c4:	4e 5f       	subi	r20, 0xFE	; 254
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	84 17       	cp	r24, r20
    22ca:	95 07       	cpc	r25, r21
    22cc:	50 f0       	brcs	.+20     	; 0x22e2 <malloc+0x14e>
    22ce:	42 0f       	add	r20, r18
    22d0:	53 1f       	adc	r21, r19
    22d2:	50 93 49 02 	sts	0x0249, r21
    22d6:	40 93 48 02 	sts	0x0248, r20
    22da:	f9 01       	movw	r30, r18
    22dc:	61 93       	st	Z+, r22
    22de:	71 93       	st	Z+, r23
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <malloc+0x152>
    22e2:	e0 e0       	ldi	r30, 0x00	; 0
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	cf 01       	movw	r24, r30
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <free>:
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <free+0xa>
    22f6:	50 c0       	rjmp	.+160    	; 0x2398 <free+0xaa>
    22f8:	ec 01       	movw	r28, r24
    22fa:	22 97       	sbiw	r28, 0x02	; 2
    22fc:	1b 82       	std	Y+3, r1	; 0x03
    22fe:	1a 82       	std	Y+2, r1	; 0x02
    2300:	a0 91 4a 02 	lds	r26, 0x024A
    2304:	b0 91 4b 02 	lds	r27, 0x024B
    2308:	10 97       	sbiw	r26, 0x00	; 0
    230a:	09 f1       	breq	.+66     	; 0x234e <free+0x60>
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	ac 17       	cp	r26, r28
    2312:	bd 07       	cpc	r27, r29
    2314:	08 f1       	brcs	.+66     	; 0x2358 <free+0x6a>
    2316:	bb 83       	std	Y+3, r27	; 0x03
    2318:	aa 83       	std	Y+2, r26	; 0x02
    231a:	fe 01       	movw	r30, r28
    231c:	21 91       	ld	r18, Z+
    231e:	31 91       	ld	r19, Z+
    2320:	e2 0f       	add	r30, r18
    2322:	f3 1f       	adc	r31, r19
    2324:	ae 17       	cp	r26, r30
    2326:	bf 07       	cpc	r27, r31
    2328:	79 f4       	brne	.+30     	; 0x2348 <free+0x5a>
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	11 97       	sbiw	r26, 0x01	; 1
    2330:	28 0f       	add	r18, r24
    2332:	39 1f       	adc	r19, r25
    2334:	2e 5f       	subi	r18, 0xFE	; 254
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	39 83       	std	Y+1, r19	; 0x01
    233a:	28 83       	st	Y, r18
    233c:	12 96       	adiw	r26, 0x02	; 2
    233e:	8d 91       	ld	r24, X+
    2340:	9c 91       	ld	r25, X
    2342:	13 97       	sbiw	r26, 0x03	; 3
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	41 15       	cp	r20, r1
    234a:	51 05       	cpc	r21, r1
    234c:	71 f4       	brne	.+28     	; 0x236a <free+0x7c>
    234e:	d0 93 4b 02 	sts	0x024B, r29
    2352:	c0 93 4a 02 	sts	0x024A, r28
    2356:	20 c0       	rjmp	.+64     	; 0x2398 <free+0xaa>
    2358:	12 96       	adiw	r26, 0x02	; 2
    235a:	8d 91       	ld	r24, X+
    235c:	9c 91       	ld	r25, X
    235e:	13 97       	sbiw	r26, 0x03	; 3
    2360:	ad 01       	movw	r20, r26
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	11 f0       	breq	.+4      	; 0x236a <free+0x7c>
    2366:	dc 01       	movw	r26, r24
    2368:	d3 cf       	rjmp	.-90     	; 0x2310 <free+0x22>
    236a:	fa 01       	movw	r30, r20
    236c:	d3 83       	std	Z+3, r29	; 0x03
    236e:	c2 83       	std	Z+2, r28	; 0x02
    2370:	21 91       	ld	r18, Z+
    2372:	31 91       	ld	r19, Z+
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	ce 17       	cp	r28, r30
    237a:	df 07       	cpc	r29, r31
    237c:	69 f4       	brne	.+26     	; 0x2398 <free+0xaa>
    237e:	88 81       	ld	r24, Y
    2380:	99 81       	ldd	r25, Y+1	; 0x01
    2382:	28 0f       	add	r18, r24
    2384:	39 1f       	adc	r19, r25
    2386:	2e 5f       	subi	r18, 0xFE	; 254
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	fa 01       	movw	r30, r20
    238c:	31 83       	std	Z+1, r19	; 0x01
    238e:	20 83       	st	Z, r18
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	93 83       	std	Z+3, r25	; 0x03
    2396:	82 83       	std	Z+2, r24	; 0x02
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <strnlen_P>:
    239e:	fc 01       	movw	r30, r24
    23a0:	05 90       	lpm	r0, Z+
    23a2:	61 50       	subi	r22, 0x01	; 1
    23a4:	70 40       	sbci	r23, 0x00	; 0
    23a6:	01 10       	cpse	r0, r1
    23a8:	d8 f7       	brcc	.-10     	; 0x23a0 <strnlen_P+0x2>
    23aa:	80 95       	com	r24
    23ac:	90 95       	com	r25
    23ae:	8e 0f       	add	r24, r30
    23b0:	9f 1f       	adc	r25, r31
    23b2:	08 95       	ret

000023b4 <memset>:
    23b4:	dc 01       	movw	r26, r24
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <memset+0x6>
    23b8:	6d 93       	st	X+, r22
    23ba:	41 50       	subi	r20, 0x01	; 1
    23bc:	50 40       	sbci	r21, 0x00	; 0
    23be:	e0 f7       	brcc	.-8      	; 0x23b8 <memset+0x4>
    23c0:	08 95       	ret

000023c2 <strnlen>:
    23c2:	fc 01       	movw	r30, r24
    23c4:	61 50       	subi	r22, 0x01	; 1
    23c6:	70 40       	sbci	r23, 0x00	; 0
    23c8:	01 90       	ld	r0, Z+
    23ca:	01 10       	cpse	r0, r1
    23cc:	d8 f7       	brcc	.-10     	; 0x23c4 <strnlen+0x2>
    23ce:	80 95       	com	r24
    23d0:	90 95       	com	r25
    23d2:	8e 0f       	add	r24, r30
    23d4:	9f 1f       	adc	r25, r31
    23d6:	08 95       	ret

000023d8 <fputc>:
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	8c 01       	movw	r16, r24
    23e2:	eb 01       	movw	r28, r22
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	81 ff       	sbrs	r24, 1
    23e8:	1b c0       	rjmp	.+54     	; 0x2420 <fputc+0x48>
    23ea:	82 ff       	sbrs	r24, 2
    23ec:	0d c0       	rjmp	.+26     	; 0x2408 <fputc+0x30>
    23ee:	2e 81       	ldd	r18, Y+6	; 0x06
    23f0:	3f 81       	ldd	r19, Y+7	; 0x07
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	28 17       	cp	r18, r24
    23f8:	39 07       	cpc	r19, r25
    23fa:	64 f4       	brge	.+24     	; 0x2414 <fputc+0x3c>
    23fc:	e8 81       	ld	r30, Y
    23fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2400:	01 93       	st	Z+, r16
    2402:	f9 83       	std	Y+1, r31	; 0x01
    2404:	e8 83       	st	Y, r30
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <fputc+0x3c>
    2408:	e8 85       	ldd	r30, Y+8	; 0x08
    240a:	f9 85       	ldd	r31, Y+9	; 0x09
    240c:	80 2f       	mov	r24, r16
    240e:	09 95       	icall
    2410:	89 2b       	or	r24, r25
    2412:	31 f4       	brne	.+12     	; 0x2420 <fputc+0x48>
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	9f 81       	ldd	r25, Y+7	; 0x07
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	9f 83       	std	Y+7, r25	; 0x07
    241c:	8e 83       	std	Y+6, r24	; 0x06
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <fputc+0x4c>
    2420:	0f ef       	ldi	r16, 0xFF	; 255
    2422:	1f ef       	ldi	r17, 0xFF	; 255
    2424:	c8 01       	movw	r24, r16
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <__ultoa_invert>:
    2430:	fa 01       	movw	r30, r20
    2432:	aa 27       	eor	r26, r26
    2434:	28 30       	cpi	r18, 0x08	; 8
    2436:	51 f1       	breq	.+84     	; 0x248c <__ultoa_invert+0x5c>
    2438:	20 31       	cpi	r18, 0x10	; 16
    243a:	81 f1       	breq	.+96     	; 0x249c <__ultoa_invert+0x6c>
    243c:	e8 94       	clt
    243e:	6f 93       	push	r22
    2440:	6e 7f       	andi	r22, 0xFE	; 254
    2442:	6e 5f       	subi	r22, 0xFE	; 254
    2444:	7f 4f       	sbci	r23, 0xFF	; 255
    2446:	8f 4f       	sbci	r24, 0xFF	; 255
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	af 4f       	sbci	r26, 0xFF	; 255
    244c:	b1 e0       	ldi	r27, 0x01	; 1
    244e:	3e d0       	rcall	.+124    	; 0x24cc <__ultoa_invert+0x9c>
    2450:	b4 e0       	ldi	r27, 0x04	; 4
    2452:	3c d0       	rcall	.+120    	; 0x24cc <__ultoa_invert+0x9c>
    2454:	67 0f       	add	r22, r23
    2456:	78 1f       	adc	r23, r24
    2458:	89 1f       	adc	r24, r25
    245a:	9a 1f       	adc	r25, r26
    245c:	a1 1d       	adc	r26, r1
    245e:	68 0f       	add	r22, r24
    2460:	79 1f       	adc	r23, r25
    2462:	8a 1f       	adc	r24, r26
    2464:	91 1d       	adc	r25, r1
    2466:	a1 1d       	adc	r26, r1
    2468:	6a 0f       	add	r22, r26
    246a:	71 1d       	adc	r23, r1
    246c:	81 1d       	adc	r24, r1
    246e:	91 1d       	adc	r25, r1
    2470:	a1 1d       	adc	r26, r1
    2472:	20 d0       	rcall	.+64     	; 0x24b4 <__ultoa_invert+0x84>
    2474:	09 f4       	brne	.+2      	; 0x2478 <__ultoa_invert+0x48>
    2476:	68 94       	set
    2478:	3f 91       	pop	r19
    247a:	2a e0       	ldi	r18, 0x0A	; 10
    247c:	26 9f       	mul	r18, r22
    247e:	11 24       	eor	r1, r1
    2480:	30 19       	sub	r19, r0
    2482:	30 5d       	subi	r19, 0xD0	; 208
    2484:	31 93       	st	Z+, r19
    2486:	de f6       	brtc	.-74     	; 0x243e <__ultoa_invert+0xe>
    2488:	cf 01       	movw	r24, r30
    248a:	08 95       	ret
    248c:	46 2f       	mov	r20, r22
    248e:	47 70       	andi	r20, 0x07	; 7
    2490:	40 5d       	subi	r20, 0xD0	; 208
    2492:	41 93       	st	Z+, r20
    2494:	b3 e0       	ldi	r27, 0x03	; 3
    2496:	0f d0       	rcall	.+30     	; 0x24b6 <__ultoa_invert+0x86>
    2498:	c9 f7       	brne	.-14     	; 0x248c <__ultoa_invert+0x5c>
    249a:	f6 cf       	rjmp	.-20     	; 0x2488 <__ultoa_invert+0x58>
    249c:	46 2f       	mov	r20, r22
    249e:	4f 70       	andi	r20, 0x0F	; 15
    24a0:	40 5d       	subi	r20, 0xD0	; 208
    24a2:	4a 33       	cpi	r20, 0x3A	; 58
    24a4:	18 f0       	brcs	.+6      	; 0x24ac <__ultoa_invert+0x7c>
    24a6:	49 5d       	subi	r20, 0xD9	; 217
    24a8:	31 fd       	sbrc	r19, 1
    24aa:	40 52       	subi	r20, 0x20	; 32
    24ac:	41 93       	st	Z+, r20
    24ae:	02 d0       	rcall	.+4      	; 0x24b4 <__ultoa_invert+0x84>
    24b0:	a9 f7       	brne	.-22     	; 0x249c <__ultoa_invert+0x6c>
    24b2:	ea cf       	rjmp	.-44     	; 0x2488 <__ultoa_invert+0x58>
    24b4:	b4 e0       	ldi	r27, 0x04	; 4
    24b6:	a6 95       	lsr	r26
    24b8:	97 95       	ror	r25
    24ba:	87 95       	ror	r24
    24bc:	77 95       	ror	r23
    24be:	67 95       	ror	r22
    24c0:	ba 95       	dec	r27
    24c2:	c9 f7       	brne	.-14     	; 0x24b6 <__ultoa_invert+0x86>
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	61 05       	cpc	r22, r1
    24c8:	71 05       	cpc	r23, r1
    24ca:	08 95       	ret
    24cc:	9b 01       	movw	r18, r22
    24ce:	ac 01       	movw	r20, r24
    24d0:	0a 2e       	mov	r0, r26
    24d2:	06 94       	lsr	r0
    24d4:	57 95       	ror	r21
    24d6:	47 95       	ror	r20
    24d8:	37 95       	ror	r19
    24da:	27 95       	ror	r18
    24dc:	ba 95       	dec	r27
    24de:	c9 f7       	brne	.-14     	; 0x24d2 <__ultoa_invert+0xa2>
    24e0:	62 0f       	add	r22, r18
    24e2:	73 1f       	adc	r23, r19
    24e4:	84 1f       	adc	r24, r20
    24e6:	95 1f       	adc	r25, r21
    24e8:	a0 1d       	adc	r26, r0
    24ea:	08 95       	ret

000024ec <__udivmodsi4>:
    24ec:	a1 e2       	ldi	r26, 0x21	; 33
    24ee:	1a 2e       	mov	r1, r26
    24f0:	aa 1b       	sub	r26, r26
    24f2:	bb 1b       	sub	r27, r27
    24f4:	fd 01       	movw	r30, r26
    24f6:	0d c0       	rjmp	.+26     	; 0x2512 <__udivmodsi4_ep>

000024f8 <__udivmodsi4_loop>:
    24f8:	aa 1f       	adc	r26, r26
    24fa:	bb 1f       	adc	r27, r27
    24fc:	ee 1f       	adc	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	a2 17       	cp	r26, r18
    2502:	b3 07       	cpc	r27, r19
    2504:	e4 07       	cpc	r30, r20
    2506:	f5 07       	cpc	r31, r21
    2508:	20 f0       	brcs	.+8      	; 0x2512 <__udivmodsi4_ep>
    250a:	a2 1b       	sub	r26, r18
    250c:	b3 0b       	sbc	r27, r19
    250e:	e4 0b       	sbc	r30, r20
    2510:	f5 0b       	sbc	r31, r21

00002512 <__udivmodsi4_ep>:
    2512:	66 1f       	adc	r22, r22
    2514:	77 1f       	adc	r23, r23
    2516:	88 1f       	adc	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	1a 94       	dec	r1
    251c:	69 f7       	brne	.-38     	; 0x24f8 <__udivmodsi4_loop>
    251e:	60 95       	com	r22
    2520:	70 95       	com	r23
    2522:	80 95       	com	r24
    2524:	90 95       	com	r25
    2526:	9b 01       	movw	r18, r22
    2528:	ac 01       	movw	r20, r24
    252a:	bd 01       	movw	r22, r26
    252c:	cf 01       	movw	r24, r30
    252e:	08 95       	ret

00002530 <__prologue_saves__>:
    2530:	2f 92       	push	r2
    2532:	3f 92       	push	r3
    2534:	4f 92       	push	r4
    2536:	5f 92       	push	r5
    2538:	6f 92       	push	r6
    253a:	7f 92       	push	r7
    253c:	8f 92       	push	r8
    253e:	9f 92       	push	r9
    2540:	af 92       	push	r10
    2542:	bf 92       	push	r11
    2544:	cf 92       	push	r12
    2546:	df 92       	push	r13
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	ca 1b       	sub	r28, r26
    255a:	db 0b       	sbc	r29, r27
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	09 94       	ijmp

00002568 <__epilogue_restores__>:
    2568:	2a 88       	ldd	r2, Y+18	; 0x12
    256a:	39 88       	ldd	r3, Y+17	; 0x11
    256c:	48 88       	ldd	r4, Y+16	; 0x10
    256e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2570:	6e 84       	ldd	r6, Y+14	; 0x0e
    2572:	7d 84       	ldd	r7, Y+13	; 0x0d
    2574:	8c 84       	ldd	r8, Y+12	; 0x0c
    2576:	9b 84       	ldd	r9, Y+11	; 0x0b
    2578:	aa 84       	ldd	r10, Y+10	; 0x0a
    257a:	b9 84       	ldd	r11, Y+9	; 0x09
    257c:	c8 84       	ldd	r12, Y+8	; 0x08
    257e:	df 80       	ldd	r13, Y+7	; 0x07
    2580:	ee 80       	ldd	r14, Y+6	; 0x06
    2582:	fd 80       	ldd	r15, Y+5	; 0x05
    2584:	0c 81       	ldd	r16, Y+4	; 0x04
    2586:	1b 81       	ldd	r17, Y+3	; 0x03
    2588:	aa 81       	ldd	r26, Y+2	; 0x02
    258a:	b9 81       	ldd	r27, Y+1	; 0x01
    258c:	ce 0f       	add	r28, r30
    258e:	d1 1d       	adc	r29, r1
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	ed 01       	movw	r28, r26
    259c:	08 95       	ret

0000259e <_exit>:
    259e:	f8 94       	cli

000025a0 <__stop_program>:
    25a0:	ff cf       	rjmp	.-2      	; 0x25a0 <__stop_program>
