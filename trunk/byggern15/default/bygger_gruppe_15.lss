
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a8  00800100  00002628  000026bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002a8  008002a8  00002864  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d5e  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  000039a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001020  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000050d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_1>
       8:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e2       	ldi	r30, 0x28	; 40
      84:	f6 e2       	ldi	r31, 0x26	; 38
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a8 3a       	cpi	r26, 0xA8	; 168
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a8 ea       	ldi	r26, 0xA8	; 168
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a2 3b       	cpi	r26, 0xB2	; 178
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 88 00 	call	0x110	; 0x110 <init_UART>
	init_SRAM();
      c2:	0e 94 3f 01 	call	0x27e	; 0x27e <init_SRAM>
	init_joystick();
      c6:	0e 94 35 02 	call	0x46a	; 0x46a <init_joystick>
	SPI_MasterInit();	
      ca:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_MasterInit>
	CAN_init();
      ce:	0e 94 24 03 	call	0x648	; 0x648 <CAN_init>



	printf("Initialization complete\n");
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <puts>


	printf("CAN_test: %d", CAN_test());
      da:	0e 94 3e 03 	call	0x67c	; 0x67c <CAN_test>
      de:	9c 01       	movw	r18, r24
      e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x34>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x36>
      e4:	ed b7       	in	r30, 0x3d	; 61
      e6:	fe b7       	in	r31, 0x3e	; 62
      e8:	31 96       	adiw	r30, 0x01	; 1
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	91 83       	std	Z+1, r25	; 0x01
      f0:	80 83       	st	Z, r24
      f2:	33 83       	std	Z+3, r19	; 0x03
      f4:	22 83       	std	Z+2, r18	; 0x02
      f6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0

	
	
	

	butterfly_menu();
     102:	0e 94 0e 05 	call	0xa1c	; 0xa1c <butterfly_menu>

	return 0;	
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
	
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <init_UART>:
unsigned char buffer_stop;
unsigned char buffer_used;
*/

// Initialize UART interface
int init_UART(unsigned int baud){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9f 83       	std	Y+7, r25	; 0x07
     126:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	9f 81       	ldd	r25, Y+7	; 0x07
     12c:	cc 01       	movw	r24, r24
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	8a 83       	std	Y+2, r24	; 0x02
     134:	9b 83       	std	Y+3, r25	; 0x03
     136:	ac 83       	std	Y+4, r26	; 0x04
     138:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	ac 81       	ldd	r26, Y+4	; 0x04
     140:	bd 81       	ldd	r27, Y+5	; 0x05
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	aa 1f       	adc	r26, r26
     148:	bb 1f       	adc	r27, r27
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	aa 1f       	adc	r26, r26
     158:	bb 1f       	adc	r27, r27
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	9c 01       	movw	r18, r24
     164:	ad 01       	movw	r20, r26
     166:	8a ef       	ldi	r24, 0xFA	; 250
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	ab e4       	ldi	r26, 0x4B	; 75
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0e 94 b9 12 	call	0x2572	; 0x2572 <__udivmodsi4>
     176:	da 01       	movw	r26, r20
     178:	c9 01       	movw	r24, r18
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	a1 09       	sbc	r26, r1
     17e:	b1 09       	sbc	r27, r1
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	ac 83       	std	Y+4, r26	; 0x04
     186:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     188:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	ac 81       	ldd	r26, Y+4	; 0x04
     194:	bd 81       	ldd	r27, Y+5	; 0x05
     196:	89 2f       	mov	r24, r25
     198:	9a 2f       	mov	r25, r26
     19a:	ab 2f       	mov	r26, r27
     19c:	bb 27       	eor	r27, r27
     19e:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     1a0:	e9 e2       	ldi	r30, 0x29	; 41
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     1a8:	ea e2       	ldi	r30, 0x2A	; 42
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stop bit, 1 for 2 stop bit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 number of databits in payload: 011 for 8 bits. S. 192 in data sheet */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	86 60       	ori	r24, 0x06	; 6
     1b4:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	80 62       	ori	r24, 0x20	; 32
     1ba:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     1c2:	e0 e4       	ldi	r30, 0x40	; 64
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     1ca:	87 ef       	ldi	r24, 0xF7	; 247
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	2e e1       	ldi	r18, 0x1E	; 30
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	b9 01       	movw	r22, r18
     1d4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <fdevopen>

	return 0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0

} 
     1dc:	27 96       	adiw	r28, 0x07	; 7
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_put_char>:

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_put_char+0x6>
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	7b 83       	std	Y+3, r23	; 0x03
     1fe:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	31 f4       	brne	.+12     	; 0x212 <UART_put_char+0x24>
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	3b 81       	ldd	r19, Y+3	; 0x03
     20a:	8d e0       	ldi	r24, 0x0D	; 13
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     212:	eb e2       	ldi	r30, 0x2B	; 43
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 72       	andi	r24, 0x20	; 32
     21e:	90 70       	andi	r25, 0x00	; 0
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	b9 f3       	breq	.-18     	; 0x212 <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     224:	ec e2       	ldi	r30, 0x2C	; 44
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	80 83       	st	Z, r24
	return 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
}
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <UART_get_char+0x6>
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     24c:	eb e2       	ldi	r30, 0x2B	; 43
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 23       	and	r24, r24
     254:	dc f7       	brge	.-10     	; 0x24c <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     256:	ec e2       	ldi	r30, 0x2C	; 44
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	8d 30       	cpi	r24, 0x0D	; 13
     262:	11 f4       	brne	.+4      	; 0x268 <UART_get_char+0x2c>
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     268:	ec e2       	ldi	r30, 0x2C	; 44
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <init_SRAM>:
#include <util/delay.h>
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     286:	a5 e5       	ldi	r26, 0x55	; 85
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e5       	ldi	r30, 0x55	; 85
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 6c       	ori	r24, 0xC0	; 192
     292:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     294:	a6 e5       	ldi	r26, 0x56	; 86
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     2a2:	a0 e5       	ldi	r26, 0x50	; 80
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 e5       	ldi	r30, 0x50	; 80
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	65 97       	sbiw	r28, 0x15	; 21
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e1       	ldi	r25, 0x10	; 16
     2ce:	9d 8b       	std	Y+21, r25	; 0x15
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
	printf("Starting...\n");
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <puts>

	int i;
	for(i=0;i<0x800;i++)
     2da:	1b 8a       	std	Y+19, r1	; 0x13
     2dc:	1a 8a       	std	Y+18, r1	; 0x12
     2de:	80 c0       	rjmp	.+256    	; 0x3e0 <SRAM_test+0x12a>
	{
		ram_address[i] = (char)0x83;
     2e0:	2a 89       	ldd	r18, Y+18	; 0x12
     2e2:	3b 89       	ldd	r19, Y+19	; 0x13
     2e4:	8c 89       	ldd	r24, Y+20	; 0x14
     2e6:	9d 89       	ldd	r25, Y+21	; 0x15
     2e8:	fc 01       	movw	r30, r24
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	83 e8       	ldi	r24, 0x83	; 131
     2f0:	80 83       	st	Z, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e4       	ldi	r27, 0x40	; 64
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
     2fc:	9c 87       	std	Y+12, r25	; 0x0c
     2fe:	ad 87       	std	Y+13, r26	; 0x0d
     300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     302:	6b 85       	ldd	r22, Y+11	; 0x0b
     304:	7c 85       	ldd	r23, Y+12	; 0x0c
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	9e 85       	ldd	r25, Y+14	; 0x0e
     30a:	2a e9       	ldi	r18, 0x9A	; 154
     30c:	3b e9       	ldi	r19, 0x9B	; 155
     30e:	49 e9       	ldi	r20, 0x99	; 153
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	8f 83       	std	Y+7, r24	; 0x07
     31c:	98 87       	std	Y+8, r25	; 0x08
     31e:	a9 87       	std	Y+9, r26	; 0x09
     320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     322:	6f 81       	ldd	r22, Y+7	; 0x07
     324:	78 85       	ldd	r23, Y+8	; 0x08
     326:	89 85       	ldd	r24, Y+9	; 0x09
     328:	9a 85       	ldd	r25, Y+10	; 0x0a
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ltsf2>
     336:	88 23       	and	r24, r24
     338:	2c f4       	brge	.+10     	; 0x344 <SRAM_test+0x8e>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9e 83       	std	Y+6, r25	; 0x06
     340:	8d 83       	std	Y+5, r24	; 0x05
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <SRAM_test+0x10c>
	else if (__tmp > 65535)
     344:	6f 81       	ldd	r22, Y+7	; 0x07
     346:	78 85       	ldd	r23, Y+8	; 0x08
     348:	89 85       	ldd	r24, Y+9	; 0x09
     34a:	9a 85       	ldd	r25, Y+10	; 0x0a
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	57 e4       	ldi	r21, 0x47	; 71
     354:	0e 94 ed 0b 	call	0x17da	; 0x17da <__gtsf2>
     358:	18 16       	cp	r1, r24
     35a:	4c f5       	brge	.+82     	; 0x3ae <SRAM_test+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35c:	6b 85       	ldd	r22, Y+11	; 0x0b
     35e:	7c 85       	ldd	r23, Y+12	; 0x0c
     360:	8d 85       	ldd	r24, Y+13	; 0x0d
     362:	9e 85       	ldd	r25, Y+14	; 0x0e
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e2       	ldi	r20, 0x20	; 32
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	8d 83       	std	Y+5, r24	; 0x05
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <SRAM_test+0xee>
     386:	8a e7       	ldi	r24, 0x7A	; 122
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <SRAM_test+0xdc>
     396:	9c 83       	std	Y+4, r25	; 0x04
     398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	9e 83       	std	Y+6, r25	; 0x06
     3a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	69 f7       	brne	.-38     	; 0x386 <SRAM_test+0xd0>
     3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <SRAM_test+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ae:	6f 81       	ldd	r22, Y+7	; 0x07
     3b0:	78 85       	ldd	r23, Y+8	; 0x08
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9e 83       	std	Y+6, r25	; 0x06
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <SRAM_test+0x118>
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	9b 89       	ldd	r25, Y+19	; 0x13
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9b 8b       	std	Y+19, r25	; 0x13
     3de:	8a 8b       	std	Y+18, r24	; 0x12
     3e0:	8a 89       	ldd	r24, Y+18	; 0x12
     3e2:	9b 89       	ldd	r25, Y+19	; 0x13
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	80 30       	cpi	r24, 0x00	; 0
     3e8:	92 07       	cpc	r25, r18
     3ea:	0c f4       	brge	.+2      	; 0x3ee <SRAM_test+0x138>
     3ec:	79 cf       	rjmp	.-270    	; 0x2e0 <SRAM_test+0x2a>
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     3ee:	1b 8a       	std	Y+19, r1	; 0x13
     3f0:	1a 8a       	std	Y+18, r1	; 0x12
     3f2:	30 c0       	rjmp	.+96     	; 0x454 <SRAM_test+0x19e>
	{
		char c = (char)ram_address[i];
     3f4:	2a 89       	ldd	r18, Y+18	; 0x12
     3f6:	3b 89       	ldd	r19, Y+19	; 0x13
     3f8:	8c 89       	ldd	r24, Y+20	; 0x14
     3fa:	9d 89       	ldd	r25, Y+21	; 0x15
     3fc:	fc 01       	movw	r30, r24
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	80 81       	ld	r24, Z
     404:	89 8b       	std	Y+17, r24	; 0x11
		int j = (int)c;
     406:	89 89       	ldd	r24, Y+17	; 0x11
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	8f 87       	std	Y+15, r24	; 0x0f
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     410:	2a 89       	ldd	r18, Y+18	; 0x12
     412:	3b 89       	ldd	r19, Y+19	; 0x13
     414:	8c 89       	ldd	r24, Y+20	; 0x14
     416:	9d 89       	ldd	r25, Y+21	; 0x15
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	80 81       	ld	r24, Z
     420:	83 38       	cpi	r24, 0x83	; 131
     422:	99 f0       	breq	.+38     	; 0x44a <SRAM_test+0x194>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     424:	00 d0       	rcall	.+0      	; 0x426 <SRAM_test+0x170>
     426:	00 d0       	rcall	.+0      	; 0x428 <SRAM_test+0x172>
     428:	ed b7       	in	r30, 0x3d	; 61
     42a:	fe b7       	in	r31, 0x3e	; 62
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	8a 89       	ldd	r24, Y+18	; 0x12
     438:	9b 89       	ldd	r25, Y+19	; 0x13
     43a:	93 83       	std	Z+3, r25	; 0x03
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	9b 89       	ldd	r25, Y+19	; 0x13
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	9b 8b       	std	Y+19, r25	; 0x13
     452:	8a 8b       	std	Y+18, r24	; 0x12
     454:	8a 89       	ldd	r24, Y+18	; 0x12
     456:	9b 89       	ldd	r25, Y+19	; 0x13
     458:	28 e0       	ldi	r18, 0x08	; 8
     45a:	80 30       	cpi	r24, 0x00	; 0
     45c:	92 07       	cpc	r25, r18
     45e:	54 f2       	brlt	.-108    	; 0x3f4 <SRAM_test+0x13e>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     460:	88 e4       	ldi	r24, 0x48	; 72
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <puts>
     468:	ff cf       	rjmp	.-2      	; 0x468 <SRAM_test+0x1b2>

0000046a <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	// set port B: in
	DDRB = 0x00; //inputs
     472:	e7 e3       	ldi	r30, 0x37	; 55
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull-ups
     478:	e8 e3       	ldi	r30, 0x38	; 56
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
}
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <read_axis+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <read_axis+0x8>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	98 e1       	ldi	r25, 0x18	; 24
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	88 37       	cpi	r24, 0x78	; 120
     4a0:	b1 f4       	brne	.+44     	; 0x4ce <read_axis+0x48>
		adc_address[0] = 0x04;
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4aa:	e6 e3       	ldi	r30, 0x36	; 54
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	81 70       	andi	r24, 0x01	; 1
     4b6:	90 70       	andi	r25, 0x00	; 0
     4b8:	88 23       	and	r24, r24
     4ba:	b9 f7       	brne	.-18     	; 0x4aa <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	80 81       	ld	r24, Z
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	1d c0       	rjmp	.+58     	; 0x508 <__stack+0x9>
	}
	else if(axis == 'y'){
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	89 37       	cpi	r24, 0x79	; 121
     4d2:	c1 f4       	brne	.+48     	; 0x504 <__stack+0x5>
		adc_address[0] = 0x06;
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4dc:	e6 e3       	ldi	r30, 0x36	; 54
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	81 70       	andi	r24, 0x01	; 1
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	88 23       	and	r24, r24
     4ec:	b9 f7       	brne	.-18     	; 0x4dc <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     4ee:	e9 81       	ldd	r30, Y+1	; 0x01
     4f0:	fa 81       	ldd	r31, Y+2	; 0x02
     4f2:	80 81       	ld	r24, Z
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 50       	subi	r24, 0x00	; 0
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
	}
	return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	8c 83       	std	Y+4, r24	; 0x04
     508:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <eeprom_read_byte+0x6>
     51e:	0f 92       	push	r0
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     528:	ec e3       	ldi	r30, 0x3C	; 60
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 70       	andi	r24, 0x02	; 2
     534:	90 70       	andi	r25, 0x00	; 0
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	b9 f7       	brne	.-18     	; 0x528 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     53a:	ee e3       	ldi	r30, 0x3E	; 62
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     546:	e0 9a       	sbi	0x1c, 0	; 28
     548:	8d b3       	in	r24, 0x1d	; 29
     54a:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <read_buttons>:


// Read joystick buttons (Can be optimised with interrupt)
inline uint8_t read_buttons(){
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     562:	e6 e3       	ldi	r30, 0x36	; 54
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	86 70       	andi	r24, 0x06	; 6
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	95 95       	asr	r25
     572:	87 95       	ror	r24
}
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <SPI_MasterInit>:
#include <avr/interrupt.h>
#include "spi.h"

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     582:	a7 e3       	ldi	r26, 0x37	; 55
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e7 e3       	ldi	r30, 0x37	; 55
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	88 6b       	ori	r24, 0xB8	; 184
     590:	8c 93       	st	X, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     592:	ed e2       	ldi	r30, 0x2D	; 45
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	81 e5       	ldi	r24, 0x51	; 81
     598:	80 83       	st	Z, r24
	SPI_NoSlave();
     59a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     5b0:	ef e2       	ldi	r30, 0x2F	; 47
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     5b8:	ee e2       	ldi	r30, 0x2E	; 46
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	dc f7       	brge	.-10     	; 0x5b8 <SPI_MasterTransmit+0x14>
}
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <SPI_MasterReceive>:

// Recieve char over SPI
char SPI_MasterReceive(void)
{
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     5d8:	ee e2       	ldi	r30, 0x2E	; 46
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	dc f7       	brge	.-10     	; 0x5d8 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     5e2:	ef e2       	ldi	r30, 0x2F	; 47
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
}
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	0f 92       	push	r0
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	89 83       	std	Y+1, r24	; 0x01
	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	82 36       	cpi	r24, 0x62	; 98
     5fe:	41 f4       	brne	.+16     	; 0x610 <SPI_SelectSlave+0x22>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     600:	a8 e3       	ldi	r26, 0x38	; 56
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e3       	ldi	r30, 0x38	; 56
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	8c 93       	st	X, r24
     60e:	0a c0       	rjmp	.+20     	; 0x624 <SPI_SelectSlave+0x36>
	else if (slave == SPI_CAN)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	83 37       	cpi	r24, 0x73	; 115
     614:	39 f4       	brne	.+14     	; 0x624 <SPI_SelectSlave+0x36>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     616:	a8 e3       	ldi	r26, 0x38	; 56
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e3       	ldi	r30, 0x38	; 56
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8f 7e       	andi	r24, 0xEF	; 239
     622:	8c 93       	st	X, r24
}
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <SPI_NoSlave>:

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     634:	a8 e3       	ldi	r26, 0x38	; 56
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e8 e3       	ldi	r30, 0x38	; 56
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 61       	ori	r24, 0x18	; 24
     640:	8c 93       	st	X, r24
}
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <CAN_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>

//Initialize the CAN bus
void CAN_init(void){
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     650:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CAN_reset>

	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     654:	8f e0       	ldi	r24, 0x0F	; 15
     656:	60 ee       	ldi	r22, 0xE0	; 224
     658:	40 e4       	ldi	r20, 0x40	; 64
     65a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     65e:	80 e6       	ldi	r24, 0x60	; 96
     660:	60 e6       	ldi	r22, 0x60	; 96
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
     668:	8c e0       	ldi	r24, 0x0C	; 12
     66a:	6f e0       	ldi	r22, 0x0F	; 15
     66c:	4f ef       	ldi	r20, 0xFF	; 255
     66e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
	CAN_init_interrupt();
     672:	0e 94 57 04 	call	0x8ae	; 0x8ae <CAN_init_interrupt>
}
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	08 95       	ret

0000067c <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	27 97       	sbiw	r28, 0x07	; 7
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     690:	84 e5       	ldi	r24, 0x54	; 84
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <puts>
	

	

	CAN_message message;
	message.id = 0;
     698:	1a 82       	std	Y+2, r1	; 0x02
     69a:	19 82       	std	Y+1, r1	; 0x01
	message.length = 8;
     69c:	88 e0       	ldi	r24, 0x08	; 8
     69e:	8b 83       	std	Y+3, r24	; 0x03
	message.data = "1324567891011121314151617181920";
     6a0:	85 e6       	ldi	r24, 0x65	; 101
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9d 83       	std	Y+5, r25	; 0x05
     6a6:	8c 83       	std	Y+4, r24	; 0x04
	

	// Reset will move into configuration mode
	CAN_reset();
     6a8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CAN_reset>
	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     6ac:	8f e0       	ldi	r24, 0x0F	; 15
     6ae:	60 ee       	ldi	r22, 0xE0	; 224
     6b0:	40 e4       	ldi	r20, 0x40	; 64
     6b2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
     6b6:	80 e6       	ldi	r24, 0x60	; 96
     6b8:	60 e6       	ldi	r22, 0x60	; 96
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
     6c0:	8c e0       	ldi	r24, 0x0C	; 12
     6c2:	6f e0       	ldi	r22, 0x0F	; 15
     6c4:	4f ef       	ldi	r20, 0xFF	; 255
     6c6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
	/*// Blanking out recieved buffer (really needed??)
	for (i = 0;(i < 9); i++)
		received[i] = '\0';	*/

	// Sending data in CAN bus
	printf("Sending string: %s", message.data);
     6ca:	2c 81       	ldd	r18, Y+4	; 0x04
     6cc:	3d 81       	ldd	r19, Y+5	; 0x05
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <CAN_test+0x54>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <CAN_test+0x56>
     6d2:	ed b7       	in	r30, 0x3d	; 61
     6d4:	fe b7       	in	r31, 0x3e	; 62
     6d6:	31 96       	adiw	r30, 0x01	; 1
     6d8:	85 e8       	ldi	r24, 0x85	; 133
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	91 83       	std	Z+1, r25	; 0x01
     6de:	80 83       	st	Z, r24
     6e0:	33 83       	std	Z+3, r19	; 0x03
     6e2:	22 83       	std	Z+2, r18	; 0x02
     6e4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
	if (CAN_send(message.data, 0) != 0){
     6f0:	8c 81       	ldd	r24, Y+4	; 0x04
     6f2:	9d 81       	ldd	r25, Y+5	; 0x05
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	0e 94 92 03 	call	0x724	; 0x724 <CAN_send>
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	29 f0       	breq	.+10     	; 0x70a <CAN_test+0x8e>
		return -1;
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	9f 83       	std	Y+7, r25	; 0x07
     706:	8e 83       	std	Y+6, r24	; 0x06
     708:	02 c0       	rjmp	.+4      	; 0x70e <CAN_test+0x92>
	}

	return 0;
     70a:	1f 82       	std	Y+7, r1	; 0x07
     70c:	1e 82       	std	Y+6, r1	; 0x06
     70e:	8e 81       	ldd	r24, Y+6	; 0x06
     710:	9f 81       	ldd	r25, Y+7	; 0x07
}
     712:	27 96       	adiw	r28, 0x07	; 7
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <CAN_send>:

// Send string using CAN bus
int CAN_send(char* str, int id){
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	61 97       	sbiw	r28, 0x11	; 17
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	9d 87       	std	Y+13, r25	; 0x0d
     73a:	8c 87       	std	Y+12, r24	; 0x0c
     73c:	7f 87       	std	Y+15, r23	; 0x0f
     73e:	6e 87       	std	Y+14, r22	; 0x0e
	
	unsigned int part, i;
	int done = 0;
     740:	1a 82       	std	Y+2, r1	; 0x02
     742:	19 82       	std	Y+1, r1	; 0x01

	CAN_message messg;
	messg.id = id;
     744:	8e 85       	ldd	r24, Y+14	; 0x0e
     746:	9f 85       	ldd	r25, Y+15	; 0x0f
     748:	98 87       	std	Y+8, r25	; 0x08
     74a:	8f 83       	std	Y+7, r24	; 0x07
	for (part = 0; !done; part += 8){
     74c:	1e 82       	std	Y+6, r1	; 0x06
     74e:	1d 82       	std	Y+5, r1	; 0x05
     750:	7b c0       	rjmp	.+246    	; 0x848 <CAN_send+0x124>
		for(i = 0; i < 8; i++){
     752:	1c 82       	std	Y+4, r1	; 0x04
     754:	1b 82       	std	Y+3, r1	; 0x03
     756:	2d c0       	rjmp	.+90     	; 0x7b2 <CAN_send+0x8e>
			messg.data[i] = str[part+i];
     758:	2a 85       	ldd	r18, Y+10	; 0x0a
     75a:	3b 85       	ldd	r19, Y+11	; 0x0b
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	9c 81       	ldd	r25, Y+4	; 0x04
     760:	d9 01       	movw	r26, r18
     762:	a8 0f       	add	r26, r24
     764:	b9 1f       	adc	r27, r25
     766:	2d 81       	ldd	r18, Y+5	; 0x05
     768:	3e 81       	ldd	r19, Y+6	; 0x06
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	9c 81       	ldd	r25, Y+4	; 0x04
     76e:	28 0f       	add	r18, r24
     770:	39 1f       	adc	r19, r25
     772:	8c 85       	ldd	r24, Y+12	; 0x0c
     774:	9d 85       	ldd	r25, Y+13	; 0x0d
     776:	fc 01       	movw	r30, r24
     778:	e2 0f       	add	r30, r18
     77a:	f3 1f       	adc	r31, r19
     77c:	80 81       	ld	r24, Z
     77e:	8c 93       	st	X, r24
			if (messg.data[i] == '\0') {
     780:	2a 85       	ldd	r18, Y+10	; 0x0a
     782:	3b 85       	ldd	r19, Y+11	; 0x0b
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	9c 81       	ldd	r25, Y+4	; 0x04
     788:	f9 01       	movw	r30, r18
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	80 81       	ld	r24, Z
     790:	88 23       	and	r24, r24
     792:	51 f4       	brne	.+20     	; 0x7a8 <CAN_send+0x84>
				done = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	89 83       	std	Y+1, r24	; 0x01
				i++;
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	9c 83       	std	Y+4, r25	; 0x04
     7a4:	8b 83       	std	Y+3, r24	; 0x03
     7a6:	0a c0       	rjmp	.+20     	; 0x7bc <CAN_send+0x98>
	int done = 0;

	CAN_message messg;
	messg.id = id;
	for (part = 0; !done; part += 8){
		for(i = 0; i < 8; i++){
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	9c 83       	std	Y+4, r25	; 0x04
     7b0:	8b 83       	std	Y+3, r24	; 0x03
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	91 05       	cpc	r25, r1
     7ba:	70 f2       	brcs	.-100    	; 0x758 <CAN_send+0x34>
				i++;
				break;
			}
		}

		messg.length = i;
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	89 87       	std	Y+9, r24	; 0x09
		cli(); // disable interrupts, to protect SPI-communication 
     7c0:	f8 94       	cli

		CAN_bit_modify(TXB0SIDH, 0xFF, (messg.id<<13)); //transmit buffer 0 id high
     7c2:	81 e3       	ldi	r24, 0x31	; 49
     7c4:	6f ef       	ldi	r22, 0xFF	; 255
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
		CAN_bit_modify(TXB0SIDL, MASK_SIDL, (messg.id<<5));//transmit buffer 0 id low
     7cc:	8f 81       	ldd	r24, Y+7	; 0x07
     7ce:	98 85       	ldd	r25, Y+8	; 0x08
     7d0:	98 2f       	mov	r25, r24
     7d2:	92 95       	swap	r25
     7d4:	99 0f       	add	r25, r25
     7d6:	90 7e       	andi	r25, 0xE0	; 224
     7d8:	82 e3       	ldi	r24, 0x32	; 50
     7da:	60 ee       	ldi	r22, 0xE0	; 224
     7dc:	49 2f       	mov	r20, r25
     7de:	0e 94 fd 08 	call	0x11fa	; 0x11fa <CAN_bit_modify>
		CAN_write((char)messg.length, TXB0DLC);	// data length
     7e2:	89 85       	ldd	r24, Y+9	; 0x09
     7e4:	65 e3       	ldi	r22, 0x35	; 53
     7e6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CAN_write>
		CAN_load_tx(&messg, 0); //load transmit buffer from channel 0
     7ea:	ce 01       	movw	r24, r28
     7ec:	07 96       	adiw	r24, 0x07	; 7
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	0e 94 6f 08 	call	0x10de	; 0x10de <CAN_load_tx>
		//printf("\n\n%s\n\n", messg.data);
		//_delay_ms(1);
		CAN_rts(0); //request to send
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 bc 08 	call	0x1178	; 0x1178 <CAN_rts>

		//WHYY; BUT WHYYYYY?
		//wait for send OK ()
		for(i = 0; i < 0xffff; i++){
     7fa:	1c 82       	std	Y+4, r1	; 0x04
     7fc:	1b 82       	std	Y+3, r1	; 0x03
     7fe:	0d c0       	rjmp	.+26     	; 0x81a <CAN_send+0xf6>
			if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     800:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <CAN_read_status>
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	84 70       	andi	r24, 0x04	; 4
     80a:	90 70       	andi	r25, 0x00	; 0
     80c:	00 97       	sbiw	r24, 0x00	; 0
     80e:	59 f0       	breq	.+22     	; 0x826 <CAN_send+0x102>
		//_delay_ms(1);
		CAN_rts(0); //request to send

		//WHYY; BUT WHYYYYY?
		//wait for send OK ()
		for(i = 0; i < 0xffff; i++){
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	9c 83       	std	Y+4, r25	; 0x04
     818:	8b 83       	std	Y+3, r24	; 0x03
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	2f ef       	ldi	r18, 0xFF	; 255
     820:	8f 3f       	cpi	r24, 0xFF	; 255
     822:	92 07       	cpc	r25, r18
     824:	69 f7       	brne	.-38     	; 0x800 <CAN_send+0xdc>
			if((CAN_read_status() & MASK_TXREQ0) == 0) break;
		}
		sei(); // enable interrupts again
     826:	78 94       	sei
		if(i == 0xffff) return -1;
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	92 07       	cpc	r25, r18
     832:	29 f4       	brne	.+10     	; 0x83e <CAN_send+0x11a>
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	9f ef       	ldi	r25, 0xFF	; 255
     838:	99 8b       	std	Y+17, r25	; 0x11
     83a:	88 8b       	std	Y+16, r24	; 0x10
     83c:	0c c0       	rjmp	.+24     	; 0x856 <CAN_send+0x132>
	unsigned int part, i;
	int done = 0;

	CAN_message messg;
	messg.id = id;
	for (part = 0; !done; part += 8){
     83e:	8d 81       	ldd	r24, Y+5	; 0x05
     840:	9e 81       	ldd	r25, Y+6	; 0x06
     842:	08 96       	adiw	r24, 0x08	; 8
     844:	9e 83       	std	Y+6, r25	; 0x06
     846:	8d 83       	std	Y+5, r24	; 0x05
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	09 f4       	brne	.+2      	; 0x852 <CAN_send+0x12e>
     850:	80 cf       	rjmp	.-256    	; 0x752 <CAN_send+0x2e>
			if(i == 0xffff) return -1;
		}

		if(str[i] == '\0') break;
*/
	return 0;
     852:	19 8a       	std	Y+17, r1	; 0x11
     854:	18 8a       	std	Y+16, r1	; 0x10
     856:	88 89       	ldd	r24, Y+16	; 0x10
     858:	99 89       	ldd	r25, Y+17	; 0x11
}
     85a:	61 96       	adiw	r28, 0x11	; 17
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <CAN_receive+0x6>
     872:	00 d0       	rcall	.+0      	; 0x874 <CAN_receive+0x8>
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	7c 83       	std	Y+4, r23	; 0x04
     87e:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF) == 0); // loop until data received
     880:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <CAN_read_status>
     884:	88 2f       	mov	r24, r24
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	81 70       	andi	r24, 0x01	; 1
     88a:	90 70       	andi	r25, 0x00	; 0
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	c1 f3       	breq	.-16     	; 0x880 <CAN_receive+0x14>
	CAN_read_rx(msg, rx);
     890:	2b 81       	ldd	r18, Y+3	; 0x03
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	62 2f       	mov	r22, r18
     898:	0e 94 07 08 	call	0x100e	; 0x100e <CAN_read_rx>
	
	return 0;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0

}
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <CAN_init_interrupt>:
	GICR = GICR | (1<<INT0);
	sei();
}*/


void CAN_init_interrupt(){
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
//interrupt init
	PORTD = PORTD | 0b00001100;
     8b6:	a2 e3       	ldi	r26, 0x32	; 50
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e2 e3       	ldi	r30, 0x32	; 50
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	8c 60       	ori	r24, 0x0C	; 12
     8c2:	8c 93       	st	X, r24
	DDRD = DDRD & 	0b11110011;
     8c4:	a1 e3       	ldi	r26, 0x31	; 49
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	e1 e3       	ldi	r30, 0x31	; 49
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	83 7f       	andi	r24, 0xF3	; 243
     8d0:	8c 93       	st	X, r24
	MCUCR = MCUCR | (0<<ISC01) | (0<<ISC00) | (0<<ISC11) | (0<<ISC10);
     8d2:	a5 e5       	ldi	r26, 0x55	; 85
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e5 e5       	ldi	r30, 0x55	; 85
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	8c 93       	st	X, r24
	GICR = GICR | (1<<INT0) | (1<<INT1);
     8de:	ab e5       	ldi	r26, 0x5B	; 91
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	eb e5       	ldi	r30, 0x5B	; 91
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	80 6c       	ori	r24, 0xC0	; 192
     8ea:	8c 93       	st	X, r24
	sei();
     8ec:	78 94       	sei
}
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	08 95       	ret

000008f4 <__vector_1>:


SIGNAL(SIG_INTERRUPT0) {
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	00 d0       	rcall	.+0      	; 0x91c <__vector_1+0x28>
     91c:	00 d0       	rcall	.+0      	; 0x91e <__vector_1+0x2a>
     91e:	0f 92       	push	r0
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     924:	88 e9       	ldi	r24, 0x98	; 152
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	9d 83       	std	Y+5, r25	; 0x05
     92a:	8c 83       	std	Y+4, r24	; 0x04

	printf("Received0: ");
     92c:	00 d0       	rcall	.+0      	; 0x92e <__vector_1+0x3a>
     92e:	ed b7       	in	r30, 0x3d	; 61
     930:	fe b7       	in	r31, 0x3e	; 62
     932:	31 96       	adiw	r30, 0x01	; 1
     934:	81 ea       	ldi	r24, 0xA1	; 161
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
     93c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
    CAN_receive(&received, 0);
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	0e 94 36 04 	call	0x86c	; 0x86c <CAN_receive>
	printf("%s\n", received.data);
     950:	8c 81       	ldd	r24, Y+4	; 0x04
     952:	9d 81       	ldd	r25, Y+5	; 0x05
     954:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <puts>

}
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	ff 91       	pop	r31
     968:	ef 91       	pop	r30
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	0f 90       	pop	r0
     984:	1f 90       	pop	r1
     986:	18 95       	reti

00000988 <__vector_2>:
	printf("Received1: ");
    CAN_receive(&received, 1);
	printf("%s\n", received.data);

}*/
SIGNAL(SIG_INTERRUPT1) {
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	4f 93       	push	r20
     998:	5f 93       	push	r21
     99a:	6f 93       	push	r22
     99c:	7f 93       	push	r23
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <__vector_2+0x28>
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <__vector_2+0x2a>
     9b2:	0f 92       	push	r0
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     9b8:	88 e9       	ldi	r24, 0x98	; 152
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	9d 83       	std	Y+5, r25	; 0x05
     9be:	8c 83       	std	Y+4, r24	; 0x04

	printf("Received1: ");
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <__vector_2+0x3a>
     9c2:	ed b7       	in	r30, 0x3d	; 61
     9c4:	fe b7       	in	r31, 0x3e	; 62
     9c6:	31 96       	adiw	r30, 0x01	; 1
     9c8:	8d ea       	ldi	r24, 0xAD	; 173
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
     9d0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
    CAN_receive(&received, 1);
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	0e 94 36 04 	call	0x86c	; 0x86c <CAN_receive>
	printf("%s\n", received.data);
     9e4:	8c 81       	ldd	r24, Y+4	; 0x04
     9e6:	9d 81       	ldd	r25, Y+5	; 0x05
     9e8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <puts>

}
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	27 97       	sbiw	r28, 0x07	; 7
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     a34:	80 e3       	ldi	r24, 0x30	; 48
     a36:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     a38:	89 eb       	ldi	r24, 0xB9	; 185
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>

	while(1){
		last_button = button;
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     a44:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <butterfly_poll_joystick>
     a48:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	98 17       	cp	r25, r24
     a50:	b9 f3       	breq	.-18     	; 0xa40 <butterfly_menu+0x24>
			printf("state for: %d\n", menu_state);
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	28 2f       	mov	r18, r24
     a56:	33 27       	eor	r19, r19
     a58:	27 fd       	sbrc	r18, 7
     a5a:	30 95       	com	r19
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <butterfly_menu+0x42>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <butterfly_menu+0x44>
     a60:	ed b7       	in	r30, 0x3d	; 61
     a62:	fe b7       	in	r31, 0x3e	; 62
     a64:	31 96       	adiw	r30, 0x01	; 1
     a66:	83 ec       	ldi	r24, 0xC3	; 195
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	91 83       	std	Z+1, r25	; 0x01
     a6c:	80 83       	st	Z, r24
     a6e:	33 83       	std	Z+3, r19	; 0x03
     a70:	22 83       	std	Z+2, r18	; 0x02
     a72:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
			switch(button) {
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	3f 83       	std	Y+7, r19	; 0x07
     a86:	2e 83       	std	Y+6, r18	; 0x06
     a88:	8e 81       	ldd	r24, Y+6	; 0x06
     a8a:	9f 81       	ldd	r25, Y+7	; 0x07
     a8c:	85 36       	cpi	r24, 0x65	; 101
     a8e:	91 05       	cpc	r25, r1
     a90:	49 f1       	breq	.+82     	; 0xae4 <butterfly_menu+0xc8>
     a92:	2e 81       	ldd	r18, Y+6	; 0x06
     a94:	3f 81       	ldd	r19, Y+7	; 0x07
     a96:	26 36       	cpi	r18, 0x66	; 102
     a98:	31 05       	cpc	r19, r1
     a9a:	5c f4       	brge	.+22     	; 0xab2 <butterfly_menu+0x96>
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	80 33       	cpi	r24, 0x30	; 48
     aa2:	91 05       	cpc	r25, r1
     aa4:	69 f2       	breq	.-102    	; 0xa40 <butterfly_menu+0x24>
     aa6:	2e 81       	ldd	r18, Y+6	; 0x06
     aa8:	3f 81       	ldd	r19, Y+7	; 0x07
     aaa:	24 36       	cpi	r18, 0x64	; 100
     aac:	31 05       	cpc	r19, r1
     aae:	b1 f0       	breq	.+44     	; 0xadc <butterfly_menu+0xc0>
     ab0:	20 c0       	rjmp	.+64     	; 0xaf2 <butterfly_menu+0xd6>
     ab2:	8e 81       	ldd	r24, Y+6	; 0x06
     ab4:	9f 81       	ldd	r25, Y+7	; 0x07
     ab6:	82 37       	cpi	r24, 0x72	; 114
     ab8:	91 05       	cpc	r25, r1
     aba:	11 f2       	breq	.-124    	; 0xa40 <butterfly_menu+0x24>
     abc:	2e 81       	ldd	r18, Y+6	; 0x06
     abe:	3f 81       	ldd	r19, Y+7	; 0x07
     ac0:	25 37       	cpi	r18, 0x75	; 117
     ac2:	31 05       	cpc	r19, r1
     ac4:	39 f0       	breq	.+14     	; 0xad4 <butterfly_menu+0xb8>
     ac6:	8e 81       	ldd	r24, Y+6	; 0x06
     ac8:	9f 81       	ldd	r25, Y+7	; 0x07
     aca:	8c 36       	cpi	r24, 0x6C	; 108
     acc:	91 05       	cpc	r25, r1
     ace:	09 f4       	brne	.+2      	; 0xad2 <butterfly_menu+0xb6>
     ad0:	b7 cf       	rjmp	.-146    	; 0xa40 <butterfly_menu+0x24>
     ad2:	0f c0       	rjmp	.+30     	; 0xaf2 <butterfly_menu+0xd6>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	81 50       	subi	r24, 0x01	; 1
     ad8:	8b 83       	std	Y+3, r24	; 0x03
     ada:	0f c0       	rjmp	.+30     	; 0xafa <butterfly_menu+0xde>
				case 'd': menu_state++;				break;
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	8f 5f       	subi	r24, 0xFF	; 255
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	0b c0       	rjmp	.+22     	; 0xafa <butterfly_menu+0xde>
				case 'e': start_game(menu_state);	break;
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	99 27       	eor	r25, r25
     ae8:	87 fd       	sbrc	r24, 7
     aea:	90 95       	com	r25
     aec:	0e 94 fd 06 	call	0xdfa	; 0xdfa <start_game>
     af0:	04 c0       	rjmp	.+8      	; 0xafa <butterfly_menu+0xde>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     af2:	82 ed       	ldi	r24, 0xD2	; 210
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     afa:	8b 81       	ldd	r24, Y+3	; 0x03
     afc:	28 2f       	mov	r18, r24
     afe:	33 27       	eor	r19, r19
     b00:	27 fd       	sbrc	r18, 7
     b02:	30 95       	com	r19
     b04:	00 d0       	rcall	.+0      	; 0xb06 <butterfly_menu+0xea>
     b06:	00 d0       	rcall	.+0      	; 0xb08 <butterfly_menu+0xec>
     b08:	ed b7       	in	r30, 0x3d	; 61
     b0a:	fe b7       	in	r31, 0x3e	; 62
     b0c:	31 96       	adiw	r30, 0x01	; 1
     b0e:	88 ed       	ldi	r24, 0xD8	; 216
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
     b16:	33 83       	std	Z+3, r19	; 0x03
     b18:	22 83       	std	Z+2, r18	; 0x02
     b1a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <printf>
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	88 23       	and	r24, r24
     b2a:	14 f4       	brge	.+4      	; 0xb30 <butterfly_menu+0x114>
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	84 30       	cpi	r24, 0x04	; 4
     b34:	0c f0       	brlt	.+2      	; 0xb38 <butterfly_menu+0x11c>
     b36:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	28 2f       	mov	r18, r24
     b3c:	33 27       	eor	r19, r19
     b3e:	27 fd       	sbrc	r18, 7
     b40:	30 95       	com	r19
     b42:	3d 83       	std	Y+5, r19	; 0x05
     b44:	2c 83       	std	Y+4, r18	; 0x04
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
     b48:	9d 81       	ldd	r25, Y+5	; 0x05
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	91 05       	cpc	r25, r1
     b4e:	d1 f0       	breq	.+52     	; 0xb84 <butterfly_menu+0x168>
     b50:	2c 81       	ldd	r18, Y+4	; 0x04
     b52:	3d 81       	ldd	r19, Y+5	; 0x05
     b54:	22 30       	cpi	r18, 0x02	; 2
     b56:	31 05       	cpc	r19, r1
     b58:	2c f4       	brge	.+10     	; 0xb64 <butterfly_menu+0x148>
     b5a:	8c 81       	ldd	r24, Y+4	; 0x04
     b5c:	9d 81       	ldd	r25, Y+5	; 0x05
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	61 f0       	breq	.+24     	; 0xb7a <butterfly_menu+0x15e>
     b62:	1f c0       	rjmp	.+62     	; 0xba2 <butterfly_menu+0x186>
     b64:	2c 81       	ldd	r18, Y+4	; 0x04
     b66:	3d 81       	ldd	r19, Y+5	; 0x05
     b68:	22 30       	cpi	r18, 0x02	; 2
     b6a:	31 05       	cpc	r19, r1
     b6c:	81 f0       	breq	.+32     	; 0xb8e <butterfly_menu+0x172>
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	9d 81       	ldd	r25, Y+5	; 0x05
     b72:	83 30       	cpi	r24, 0x03	; 3
     b74:	91 05       	cpc	r25, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <butterfly_menu+0x17c>
     b78:	14 c0       	rjmp	.+40     	; 0xba2 <butterfly_menu+0x186>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     b7a:	89 ee       	ldi	r24, 0xE9	; 233
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     b82:	5e cf       	rjmp	.-324    	; 0xa40 <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     b8c:	59 cf       	rjmp	.-334    	; 0xa40 <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     b8e:	88 e1       	ldi	r24, 0x18	; 24
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     b96:	54 cf       	rjmp	.-344    	; 0xa40 <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     b98:	8d e2       	ldi	r24, 0x2D	; 45
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     ba0:	4f cf       	rjmp	.-354    	; 0xa40 <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     ba2:	1b 82       	std	Y+3, r1	; 0x03
     ba4:	4d cf       	rjmp	.-358    	; 0xa40 <butterfly_menu+0x24>

00000ba6 <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <butterfly_joystick_test+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <butterfly_joystick_test+0x8>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     bb2:	80 e3       	ldi	r24, 0x30	; 48
     bb4:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     bba:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <butterfly_poll_joystick>
     bbe:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	98 17       	cp	r25, r24
     bc6:	b9 f3       	breq	.-18     	; 0xbb6 <butterfly_joystick_test+0x10>
			switch(button) {
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3c 83       	std	Y+4, r19	; 0x04
     bd0:	2b 83       	std	Y+3, r18	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	85 36       	cpi	r24, 0x65	; 101
     bd8:	91 05       	cpc	r25, r1
     bda:	99 f1       	breq	.+102    	; 0xc42 <butterfly_joystick_test+0x9c>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	26 36       	cpi	r18, 0x66	; 102
     be2:	31 05       	cpc	r19, r1
     be4:	5c f4       	brge	.+22     	; 0xbfc <butterfly_joystick_test+0x56>
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	80 33       	cpi	r24, 0x30	; 48
     bec:	91 05       	cpc	r25, r1
     bee:	71 f1       	breq	.+92     	; 0xc4c <butterfly_joystick_test+0xa6>
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	24 36       	cpi	r18, 0x64	; 100
     bf6:	31 05       	cpc	r19, r1
     bf8:	f9 f0       	breq	.+62     	; 0xc38 <butterfly_joystick_test+0x92>
     bfa:	2d c0       	rjmp	.+90     	; 0xc56 <butterfly_joystick_test+0xb0>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	82 37       	cpi	r24, 0x72	; 114
     c02:	91 05       	cpc	r25, r1
     c04:	79 f0       	breq	.+30     	; 0xc24 <butterfly_joystick_test+0x7e>
     c06:	2b 81       	ldd	r18, Y+3	; 0x03
     c08:	3c 81       	ldd	r19, Y+4	; 0x04
     c0a:	25 37       	cpi	r18, 0x75	; 117
     c0c:	31 05       	cpc	r19, r1
     c0e:	79 f0       	breq	.+30     	; 0xc2e <butterfly_joystick_test+0x88>
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	8c 36       	cpi	r24, 0x6C	; 108
     c16:	91 05       	cpc	r25, r1
     c18:	f1 f4       	brne	.+60     	; 0xc56 <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
     c1a:	81 e4       	ldi	r24, 0x41	; 65
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c22:	c9 cf       	rjmp	.-110    	; 0xbb6 <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
     c24:	86 e4       	ldi	r24, 0x46	; 70
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c2c:	c4 cf       	rjmp	.-120    	; 0xbb6 <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
     c2e:	8c e4       	ldi	r24, 0x4C	; 76
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c36:	bf cf       	rjmp	.-130    	; 0xbb6 <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
     c38:	8f e4       	ldi	r24, 0x4F	; 79
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c40:	ba cf       	rjmp	.-140    	; 0xbb6 <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
     c42:	84 e5       	ldi	r24, 0x54	; 84
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c4a:	b5 cf       	rjmp	.-150    	; 0xbb6 <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
     c4c:	8a e5       	ldi	r24, 0x5A	; 90
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c54:	b0 cf       	rjmp	.-160    	; 0xbb6 <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
     c56:	82 ed       	ldi	r24, 0xD2	; 210
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     c5e:	ab cf       	rjmp	.-170    	; 0xbb6 <butterfly_joystick_test+0x10>

00000c60 <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <butterfly_print+0x6>
     c66:	00 d0       	rcall	.+0      	; 0xc68 <butterfly_print+0x8>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	cli(); //disable interrupts to protect SPI-communication
     c70:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     c72:	82 e6       	ldi	r24, 0x62	; 98
     c74:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     c78:	1a 82       	std	Y+2, r1	; 0x02
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	19 c0       	rjmp	.+50     	; 0xcb0 <butterfly_print+0x50>
		if (str[i] == '\0') break;
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	3a 81       	ldd	r19, Y+2	; 0x02
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	fc 01       	movw	r30, r24
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	a1 f0       	breq	.+40     	; 0xcba <butterfly_print+0x5a>
		SPI_MasterTransmit(str[i]);
     c92:	29 81       	ldd	r18, Y+1	; 0x01
     c94:	3a 81       	ldd	r19, Y+2	; 0x02
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	fc 01       	movw	r30, r24
     c9c:	e2 0f       	add	r30, r18
     c9e:	f3 1f       	adc	r31, r19
     ca0:	80 81       	ld	r24, Z
     ca2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

void butterfly_print(char * str){
	int i;
	cli(); //disable interrupts to protect SPI-communication
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	88 31       	cpi	r24, 0x18	; 24
     cb6:	91 05       	cpc	r25, r1
     cb8:	14 f3       	brlt	.-60     	; 0xc7e <butterfly_print+0x1e>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     cc0:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	

	sei(); //enable interrupts again
     cc4:	78 94       	sei
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	2f 97       	sbiw	r28, 0x0f	; 15
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
	char button;	

	cli(); //disable interrupts to protect SPI-communication
     ce8:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     cea:	82 e6       	ldi	r24, 0x62	; 98
     cec:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     cf0:	8e e2       	ldi	r24, 0x2E	; 46
     cf2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	a0 e2       	ldi	r26, 0x20	; 32
     cfc:	b1 e4       	ldi	r27, 0x41	; 65
     cfe:	8b 87       	std	Y+11, r24	; 0x0b
     d00:	9c 87       	std	Y+12, r25	; 0x0c
     d02:	ad 87       	std	Y+13, r26	; 0x0d
     d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d06:	6b 85       	ldd	r22, Y+11	; 0x0b
     d08:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0e:	2a e9       	ldi	r18, 0x9A	; 154
     d10:	3b e9       	ldi	r19, 0x9B	; 155
     d12:	49 e9       	ldi	r20, 0x99	; 153
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	8f 83       	std	Y+7, r24	; 0x07
     d20:	98 87       	std	Y+8, r25	; 0x08
     d22:	a9 87       	std	Y+9, r26	; 0x09
     d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d26:	6f 81       	ldd	r22, Y+7	; 0x07
     d28:	78 85       	ldd	r23, Y+8	; 0x08
     d2a:	89 85       	ldd	r24, Y+9	; 0x09
     d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e8       	ldi	r20, 0x80	; 128
     d34:	5f e3       	ldi	r21, 0x3F	; 63
     d36:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ltsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	2c f4       	brge	.+10     	; 0xd48 <butterfly_poll_joystick+0x74>
		__ticks = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
     d46:	3f c0       	rjmp	.+126    	; 0xdc6 <butterfly_poll_joystick+0xf2>
	else if (__tmp > 65535)
     d48:	6f 81       	ldd	r22, Y+7	; 0x07
     d4a:	78 85       	ldd	r23, Y+8	; 0x08
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	3f ef       	ldi	r19, 0xFF	; 255
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	57 e4       	ldi	r21, 0x47	; 71
     d58:	0e 94 ed 0b 	call	0x17da	; 0x17da <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	4c f5       	brge	.+82     	; 0xdb2 <butterfly_poll_joystick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	6b 85       	ldd	r22, Y+11	; 0x0b
     d62:	7c 85       	ldd	r23, Y+12	; 0x0c
     d64:	8d 85       	ldd	r24, Y+13	; 0x0d
     d66:	9e 85       	ldd	r25, Y+14	; 0x0e
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e2       	ldi	r20, 0x20	; 32
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05
     d88:	0f c0       	rjmp	.+30     	; 0xda8 <butterfly_poll_joystick+0xd4>
     d8a:	8a e7       	ldi	r24, 0x7A	; 122
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <butterfly_poll_joystick+0xc2>
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	69 f7       	brne	.-38     	; 0xd8a <butterfly_poll_joystick+0xb6>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <butterfly_poll_joystick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	78 85       	ldd	r23, Y+8	; 0x08
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <butterfly_poll_joystick+0xfe>
     dd6:	9a 83       	std	Y+2, r25	; 0x02
     dd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
     dda:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     dde:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
     de0:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

	sei(); //enable interrupts again
     de4:	78 94       	sei
	return button;
     de6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     de8:	2f 96       	adiw	r28, 0x0f	; 15
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <start_game>:

void start_game(enum menu_state_enum menu_state){
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	61 97       	sbiw	r28, 0x11	; 17
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
     e10:	8f 85       	ldd	r24, Y+15	; 0x0f
     e12:	28 2f       	mov	r18, r24
     e14:	33 27       	eor	r19, r19
     e16:	27 fd       	sbrc	r18, 7
     e18:	30 95       	com	r19
     e1a:	39 8b       	std	Y+17, r19	; 0x11
     e1c:	28 8b       	std	Y+16, r18	; 0x10
     e1e:	88 89       	ldd	r24, Y+16	; 0x10
     e20:	99 89       	ldd	r25, Y+17	; 0x11
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	91 05       	cpc	r25, r1
     e26:	d1 f0       	breq	.+52     	; 0xe5c <start_game+0x62>
     e28:	28 89       	ldd	r18, Y+16	; 0x10
     e2a:	39 89       	ldd	r19, Y+17	; 0x11
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	2c f4       	brge	.+10     	; 0xe3c <start_game+0x42>
     e32:	88 89       	ldd	r24, Y+16	; 0x10
     e34:	99 89       	ldd	r25, Y+17	; 0x11
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	61 f0       	breq	.+24     	; 0xe52 <start_game+0x58>
     e3a:	90 c0       	rjmp	.+288    	; 0xf5c <start_game+0x162>
     e3c:	28 89       	ldd	r18, Y+16	; 0x10
     e3e:	39 89       	ldd	r19, Y+17	; 0x11
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	81 f0       	breq	.+32     	; 0xe66 <start_game+0x6c>
     e46:	88 89       	ldd	r24, Y+16	; 0x10
     e48:	99 89       	ldd	r25, Y+17	; 0x11
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	91 05       	cpc	r25, r1
     e4e:	81 f0       	breq	.+32     	; 0xe70 <start_game+0x76>
     e50:	85 c0       	rjmp	.+266    	; 0xf5c <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
     e52:	81 e6       	ldi	r24, 0x61	; 97
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     e5a:	0e c0       	rjmp	.+28     	; 0xe78 <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
     e5c:	81 e7       	ldi	r24, 0x71	; 113
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
     e70:	8d e8       	ldi	r24, 0x8D	; 141
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 30 06 	call	0xc60	; 0xc60 <butterfly_print>
			break;
		default:			
			return;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	aa ef       	ldi	r26, 0xFA	; 250
     e7e:	b4 e4       	ldi	r27, 0x44	; 68
     e80:	8b 87       	std	Y+11, r24	; 0x0b
     e82:	9c 87       	std	Y+12, r25	; 0x0c
     e84:	ad 87       	std	Y+13, r26	; 0x0d
     e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e90:	2a e9       	ldi	r18, 0x9A	; 154
     e92:	3b e9       	ldi	r19, 0x9B	; 155
     e94:	49 e9       	ldi	r20, 0x99	; 153
     e96:	54 e4       	ldi	r21, 0x44	; 68
     e98:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8f 83       	std	Y+7, r24	; 0x07
     ea2:	98 87       	std	Y+8, r25	; 0x08
     ea4:	a9 87       	std	Y+9, r26	; 0x09
     ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <start_game+0xd0>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9e 83       	std	Y+6, r25	; 0x06
     ec6:	8d 83       	std	Y+5, r24	; 0x05
     ec8:	3f c0       	rjmp	.+126    	; 0xf48 <start_game+0x14e>
	else if (__tmp > 65535)
     eca:	6f 81       	ldd	r22, Y+7	; 0x07
     ecc:	78 85       	ldd	r23, Y+8	; 0x08
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	0e 94 ed 0b 	call	0x17da	; 0x17da <__gtsf2>
     ede:	18 16       	cp	r1, r24
     ee0:	4c f5       	brge	.+82     	; 0xf34 <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e2       	ldi	r20, 0x20	; 32
     ef0:	51 e4       	ldi	r21, 0x41	; 65
     ef2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <start_game+0x130>
     f0c:	8a e7       	ldi	r24, 0x7A	; 122
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <start_game+0x11e>
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	69 f7       	brne	.-38     	; 0xf0c <start_game+0x112>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <start_game+0x15a>
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
     f5c:	61 96       	adiw	r28, 0x11	; 17
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <CAN_reset>:
#include "mcp2515.h"
#include "spi.h"

// Reset the CAN chip
void CAN_reset(void){
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
     f76:	83 e7       	ldi	r24, 0x73	; 115
     f78:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
     f7c:	80 ec       	ldi	r24, 0xC0	; 192
     f7e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     f82:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	27 97       	sbiw	r28, 0x07	; 7
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	8b 83       	std	Y+3, r24	; 0x03
     fa8:	6d 83       	std	Y+5, r22	; 0x05
     faa:	5f 83       	std	Y+7, r21	; 0x07
     fac:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     fae:	83 e7       	ldi	r24, 0x73	; 115
     fb0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     fc0:	1a 82       	std	Y+2, r1	; 0x02
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	10 c0       	rjmp	.+32     	; 0xfe6 <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	8c 01       	movw	r16, r24
     fd0:	02 0f       	add	r16, r18
     fd2:	13 1f       	adc	r17, r19
     fd4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     fd8:	f8 01       	movw	r30, r16
     fda:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	29 81       	ldd	r18, Y+1	; 0x01
     fe8:	3a 81       	ldd	r19, Y+2	; 0x02
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	28 17       	cp	r18, r24
     ff0:	39 07       	cpc	r19, r25
     ff2:	4c f3       	brlt	.-46     	; 0xfc6 <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
     ff4:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
     ff8:	27 96       	adiw	r28, 0x07	; 7
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <CAN_read_rx+0xa>
    1018:	00 d0       	rcall	.+0      	; 0x101a <CAN_read_rx+0xc>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9c 83       	std	Y+4, r25	; 0x04
    1022:	8b 83       	std	Y+3, r24	; 0x03
    1024:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	90 f5       	brcc	.+100    	; 0x1090 <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	88 23       	and	r24, r24
    1030:	19 f4       	brne	.+6      	; 0x1038 <CAN_read_rx+0x2a>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	11 f4       	brne	.+4      	; 0x1042 <CAN_read_rx+0x34>
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
    1042:	83 e7       	ldi	r24, 0x73	; 115
    1044:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	80 69       	ori	r24, 0x90	; 144
    1054:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
    1058:	1a 82       	std	Y+2, r1	; 0x02
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	12 c0       	rjmp	.+36     	; 0x1082 <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
    105e:	eb 81       	ldd	r30, Y+3	; 0x03
    1060:	fc 81       	ldd	r31, Y+4	; 0x04
    1062:	23 81       	ldd	r18, Z+3	; 0x03
    1064:	34 81       	ldd	r19, Z+4	; 0x04
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	89 01       	movw	r16, r18
    106c:	08 0f       	add	r16, r24
    106e:	19 1f       	adc	r17, r25
    1070:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    1074:	f8 01       	movw	r30, r16
    1076:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	88 30       	cpi	r24, 0x08	; 8
    1088:	91 05       	cpc	r25, r1
    108a:	4c f3       	brlt	.-46     	; 0x105e <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
    108c:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <CAN_write>:

void CAN_write(char data, uint8_t address){
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <CAN_write+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <CAN_write+0x8>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8b 83       	std	Y+3, r24	; 0x03
    10b2:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	SPI_SelectSlave(SPI_CAN);	
    10b4:	83 e7       	ldi	r24, 0x73	; 115
    10b6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		SPI_MasterTransmit(data);
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    10cc:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(CAN_message* msg, uint8_t tx){
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <CAN_load_tx+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <CAN_load_tx+0x8>
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2 || msg->length > 8)
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	c0 f5       	brcc	.+112    	; 0x1168 <CAN_load_tx+0x8a>
    10f8:	eb 81       	ldd	r30, Y+3	; 0x03
    10fa:	fc 81       	ldd	r31, Y+4	; 0x04
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	89 30       	cpi	r24, 0x09	; 9
    1100:	98 f5       	brcc	.+102    	; 0x1168 <CAN_load_tx+0x8a>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	81 50       	subi	r24, 0x01	; 1
    1110:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
    1112:	83 e7       	ldi	r24, 0x73	; 115
    1114:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < msg->length; i++){
    1120:	1a 82       	std	Y+2, r1	; 0x02
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <CAN_load_tx+0x6a>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg->data[i]);
    1126:	eb 81       	ldd	r30, Y+3	; 0x03
    1128:	fc 81       	ldd	r31, Y+4	; 0x04
    112a:	23 81       	ldd	r18, Z+3	; 0x03
    112c:	34 81       	ldd	r19, Z+4	; 0x04
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	f9 01       	movw	r30, r18
    1134:	e8 0f       	add	r30, r24
    1136:	f9 1f       	adc	r31, r25
    1138:	80 81       	ld	r24, Z
    113a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < msg->length; i++){
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	eb 81       	ldd	r30, Y+3	; 0x03
    114a:	fc 81       	ldd	r31, Y+4	; 0x04
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	82 17       	cp	r24, r18
    1158:	93 07       	cpc	r25, r19
    115a:	2c f3       	brlt	.-54     	; 0x1126 <CAN_load_tx+0x48>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg->data[i]);
	}

	SPI_NoSlave();
    115c:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	printf("\n");
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <putchar>
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <CAN_rts>:

void CAN_rts(uint8_t tx){
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	88 23       	and	r24, r24
    1188:	19 f4       	brne	.+6      	; 0x1190 <CAN_rts+0x18>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	19 f4       	brne	.+6      	; 0x119c <CAN_rts+0x24>
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	59 f4       	brne	.+22     	; 0x11b8 <CAN_rts+0x40>
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
    11a6:	83 e7       	ldi	r24, 0x73	; 115
    11a8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	80 68       	ori	r24, 0x80	; 128
    11b0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    11b4:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <CAN_read_status>:

uint8_t CAN_read_status(void){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
    11ca:	83 e7       	ldi	r24, 0x73	; 115
    11cc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
    11d0:	80 ea       	ldi	r24, 0xA0	; 160
    11d2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
    11d6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
    11da:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
    11dc:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	
	return (uint8_t) status;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <CAN_rx_status>:

uint8_t CAN_rx_status(void){
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
return 0;
    11f2:	80 e0       	ldi	r24, 0x00	; 0

}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <CAN_bit_modify>:
void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <CAN_bit_modify+0x6>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	6a 83       	std	Y+2, r22	; 0x02
    120a:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
    120c:	83 e7       	ldi	r24, 0x73	; 115
    120e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
    122a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <__fixunssfsi>:
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	7b 01       	movw	r14, r22
    1244:	8c 01       	movw	r16, r24
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	5f e4       	ldi	r21, 0x4F	; 79
    124e:	0e 94 1d 0c 	call	0x183a	; 0x183a <__gesf2>
    1252:	88 23       	and	r24, r24
    1254:	8c f0       	brlt	.+34     	; 0x1278 <__fixunssfsi+0x3e>
    1256:	c8 01       	movw	r24, r16
    1258:	b7 01       	movw	r22, r14
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	5f e4       	ldi	r21, 0x4F	; 79
    1262:	0e 94 95 0a 	call	0x152a	; 0x152a <__subsf3>
    1266:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fixsfsi>
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	20 50       	subi	r18, 0x00	; 0
    1270:	30 40       	sbci	r19, 0x00	; 0
    1272:	40 40       	sbci	r20, 0x00	; 0
    1274:	50 48       	sbci	r21, 0x80	; 128
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <__fixunssfsi+0x4a>
    1278:	c8 01       	movw	r24, r16
    127a:	b7 01       	movw	r22, r14
    127c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fixsfsi>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	b9 01       	movw	r22, r18
    1286:	ca 01       	movw	r24, r20
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	08 95       	ret

00001292 <_fpadd_parts>:
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f9 e0       	ldi	r31, 0x09	; 9
    129a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__>
    129e:	dc 01       	movw	r26, r24
    12a0:	2b 01       	movw	r4, r22
    12a2:	fa 01       	movw	r30, r20
    12a4:	9c 91       	ld	r25, X
    12a6:	92 30       	cpi	r25, 0x02	; 2
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <_fpadd_parts+0x1a>
    12aa:	39 c1       	rjmp	.+626    	; 0x151e <_fpadd_parts+0x28c>
    12ac:	eb 01       	movw	r28, r22
    12ae:	88 81       	ld	r24, Y
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	08 f4       	brcc	.+2      	; 0x12b6 <_fpadd_parts+0x24>
    12b4:	33 c1       	rjmp	.+614    	; 0x151c <_fpadd_parts+0x28a>
    12b6:	94 30       	cpi	r25, 0x04	; 4
    12b8:	69 f4       	brne	.+26     	; 0x12d4 <_fpadd_parts+0x42>
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <_fpadd_parts+0x2e>
    12be:	2f c1       	rjmp	.+606    	; 0x151e <_fpadd_parts+0x28c>
    12c0:	11 96       	adiw	r26, 0x01	; 1
    12c2:	9c 91       	ld	r25, X
    12c4:	11 97       	sbiw	r26, 0x01	; 1
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	98 17       	cp	r25, r24
    12ca:	09 f4       	brne	.+2      	; 0x12ce <_fpadd_parts+0x3c>
    12cc:	28 c1       	rjmp	.+592    	; 0x151e <_fpadd_parts+0x28c>
    12ce:	a9 e9       	ldi	r26, 0x99	; 153
    12d0:	b2 e0       	ldi	r27, 0x02	; 2
    12d2:	25 c1       	rjmp	.+586    	; 0x151e <_fpadd_parts+0x28c>
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	09 f4       	brne	.+2      	; 0x12da <_fpadd_parts+0x48>
    12d8:	21 c1       	rjmp	.+578    	; 0x151c <_fpadd_parts+0x28a>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	a9 f4       	brne	.+42     	; 0x1308 <_fpadd_parts+0x76>
    12de:	92 30       	cpi	r25, 0x02	; 2
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <_fpadd_parts+0x52>
    12e2:	1d c1       	rjmp	.+570    	; 0x151e <_fpadd_parts+0x28c>
    12e4:	9a 01       	movw	r18, r20
    12e6:	ad 01       	movw	r20, r26
    12e8:	88 e0       	ldi	r24, 0x08	; 8
    12ea:	ea 01       	movw	r28, r20
    12ec:	09 90       	ld	r0, Y+
    12ee:	ae 01       	movw	r20, r28
    12f0:	e9 01       	movw	r28, r18
    12f2:	09 92       	st	Y+, r0
    12f4:	9e 01       	movw	r18, r28
    12f6:	81 50       	subi	r24, 0x01	; 1
    12f8:	c1 f7       	brne	.-16     	; 0x12ea <_fpadd_parts+0x58>
    12fa:	e2 01       	movw	r28, r4
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	9c 91       	ld	r25, X
    1302:	89 23       	and	r24, r25
    1304:	81 83       	std	Z+1, r24	; 0x01
    1306:	08 c1       	rjmp	.+528    	; 0x1518 <_fpadd_parts+0x286>
    1308:	92 30       	cpi	r25, 0x02	; 2
    130a:	09 f4       	brne	.+2      	; 0x130e <_fpadd_parts+0x7c>
    130c:	07 c1       	rjmp	.+526    	; 0x151c <_fpadd_parts+0x28a>
    130e:	12 96       	adiw	r26, 0x02	; 2
    1310:	2d 90       	ld	r2, X+
    1312:	3c 90       	ld	r3, X
    1314:	13 97       	sbiw	r26, 0x03	; 3
    1316:	eb 01       	movw	r28, r22
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	14 96       	adiw	r26, 0x04	; 4
    131e:	ad 90       	ld	r10, X+
    1320:	bd 90       	ld	r11, X+
    1322:	cd 90       	ld	r12, X+
    1324:	dc 90       	ld	r13, X
    1326:	17 97       	sbiw	r26, 0x07	; 7
    1328:	ec 80       	ldd	r14, Y+4	; 0x04
    132a:	fd 80       	ldd	r15, Y+5	; 0x05
    132c:	0e 81       	ldd	r16, Y+6	; 0x06
    132e:	1f 81       	ldd	r17, Y+7	; 0x07
    1330:	91 01       	movw	r18, r2
    1332:	28 1b       	sub	r18, r24
    1334:	39 0b       	sbc	r19, r25
    1336:	b9 01       	movw	r22, r18
    1338:	37 ff       	sbrs	r19, 7
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <_fpadd_parts+0xb2>
    133c:	66 27       	eor	r22, r22
    133e:	77 27       	eor	r23, r23
    1340:	62 1b       	sub	r22, r18
    1342:	73 0b       	sbc	r23, r19
    1344:	60 32       	cpi	r22, 0x20	; 32
    1346:	71 05       	cpc	r23, r1
    1348:	0c f0       	brlt	.+2      	; 0x134c <_fpadd_parts+0xba>
    134a:	61 c0       	rjmp	.+194    	; 0x140e <_fpadd_parts+0x17c>
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	6c f5       	brge	.+90     	; 0x13ac <_fpadd_parts+0x11a>
    1352:	37 01       	movw	r6, r14
    1354:	48 01       	movw	r8, r16
    1356:	06 2e       	mov	r0, r22
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <_fpadd_parts+0xd0>
    135a:	96 94       	lsr	r9
    135c:	87 94       	ror	r8
    135e:	77 94       	ror	r7
    1360:	67 94       	ror	r6
    1362:	0a 94       	dec	r0
    1364:	d2 f7       	brpl	.-12     	; 0x135a <_fpadd_parts+0xc8>
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <_fpadd_parts+0xe6>
    1370:	22 0f       	add	r18, r18
    1372:	33 1f       	adc	r19, r19
    1374:	44 1f       	adc	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	6a 95       	dec	r22
    137a:	d2 f7       	brpl	.-12     	; 0x1370 <_fpadd_parts+0xde>
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	30 40       	sbci	r19, 0x00	; 0
    1380:	40 40       	sbci	r20, 0x00	; 0
    1382:	50 40       	sbci	r21, 0x00	; 0
    1384:	2e 21       	and	r18, r14
    1386:	3f 21       	and	r19, r15
    1388:	40 23       	and	r20, r16
    138a:	51 23       	and	r21, r17
    138c:	21 15       	cp	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	41 05       	cpc	r20, r1
    1392:	51 05       	cpc	r21, r1
    1394:	21 f0       	breq	.+8      	; 0x139e <_fpadd_parts+0x10c>
    1396:	21 e0       	ldi	r18, 0x01	; 1
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	79 01       	movw	r14, r18
    13a0:	8a 01       	movw	r16, r20
    13a2:	e6 28       	or	r14, r6
    13a4:	f7 28       	or	r15, r7
    13a6:	08 29       	or	r16, r8
    13a8:	19 29       	or	r17, r9
    13aa:	3c c0       	rjmp	.+120    	; 0x1424 <_fpadd_parts+0x192>
    13ac:	23 2b       	or	r18, r19
    13ae:	d1 f1       	breq	.+116    	; 0x1424 <_fpadd_parts+0x192>
    13b0:	26 0e       	add	r2, r22
    13b2:	37 1e       	adc	r3, r23
    13b4:	35 01       	movw	r6, r10
    13b6:	46 01       	movw	r8, r12
    13b8:	06 2e       	mov	r0, r22
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <_fpadd_parts+0x132>
    13bc:	96 94       	lsr	r9
    13be:	87 94       	ror	r8
    13c0:	77 94       	ror	r7
    13c2:	67 94       	ror	r6
    13c4:	0a 94       	dec	r0
    13c6:	d2 f7       	brpl	.-12     	; 0x13bc <_fpadd_parts+0x12a>
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <_fpadd_parts+0x148>
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	44 1f       	adc	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	6a 95       	dec	r22
    13dc:	d2 f7       	brpl	.-12     	; 0x13d2 <_fpadd_parts+0x140>
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	30 40       	sbci	r19, 0x00	; 0
    13e2:	40 40       	sbci	r20, 0x00	; 0
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	2a 21       	and	r18, r10
    13e8:	3b 21       	and	r19, r11
    13ea:	4c 21       	and	r20, r12
    13ec:	5d 21       	and	r21, r13
    13ee:	21 15       	cp	r18, r1
    13f0:	31 05       	cpc	r19, r1
    13f2:	41 05       	cpc	r20, r1
    13f4:	51 05       	cpc	r21, r1
    13f6:	21 f0       	breq	.+8      	; 0x1400 <_fpadd_parts+0x16e>
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	59 01       	movw	r10, r18
    1402:	6a 01       	movw	r12, r20
    1404:	a6 28       	or	r10, r6
    1406:	b7 28       	or	r11, r7
    1408:	c8 28       	or	r12, r8
    140a:	d9 28       	or	r13, r9
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <_fpadd_parts+0x192>
    140e:	82 15       	cp	r24, r2
    1410:	93 05       	cpc	r25, r3
    1412:	2c f0       	brlt	.+10     	; 0x141e <_fpadd_parts+0x18c>
    1414:	1c 01       	movw	r2, r24
    1416:	aa 24       	eor	r10, r10
    1418:	bb 24       	eor	r11, r11
    141a:	65 01       	movw	r12, r10
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <_fpadd_parts+0x192>
    141e:	ee 24       	eor	r14, r14
    1420:	ff 24       	eor	r15, r15
    1422:	87 01       	movw	r16, r14
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	9c 91       	ld	r25, X
    1428:	d2 01       	movw	r26, r4
    142a:	11 96       	adiw	r26, 0x01	; 1
    142c:	8c 91       	ld	r24, X
    142e:	98 17       	cp	r25, r24
    1430:	09 f4       	brne	.+2      	; 0x1434 <_fpadd_parts+0x1a2>
    1432:	45 c0       	rjmp	.+138    	; 0x14be <_fpadd_parts+0x22c>
    1434:	99 23       	and	r25, r25
    1436:	39 f0       	breq	.+14     	; 0x1446 <_fpadd_parts+0x1b4>
    1438:	a8 01       	movw	r20, r16
    143a:	97 01       	movw	r18, r14
    143c:	2a 19       	sub	r18, r10
    143e:	3b 09       	sbc	r19, r11
    1440:	4c 09       	sbc	r20, r12
    1442:	5d 09       	sbc	r21, r13
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <_fpadd_parts+0x1c0>
    1446:	a6 01       	movw	r20, r12
    1448:	95 01       	movw	r18, r10
    144a:	2e 19       	sub	r18, r14
    144c:	3f 09       	sbc	r19, r15
    144e:	40 0b       	sbc	r20, r16
    1450:	51 0b       	sbc	r21, r17
    1452:	57 fd       	sbrc	r21, 7
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <_fpadd_parts+0x1d4>
    1456:	11 82       	std	Z+1, r1	; 0x01
    1458:	33 82       	std	Z+3, r3	; 0x03
    145a:	22 82       	std	Z+2, r2	; 0x02
    145c:	24 83       	std	Z+4, r18	; 0x04
    145e:	35 83       	std	Z+5, r19	; 0x05
    1460:	46 83       	std	Z+6, r20	; 0x06
    1462:	57 83       	std	Z+7, r21	; 0x07
    1464:	1d c0       	rjmp	.+58     	; 0x14a0 <_fpadd_parts+0x20e>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	81 83       	std	Z+1, r24	; 0x01
    146a:	33 82       	std	Z+3, r3	; 0x03
    146c:	22 82       	std	Z+2, r2	; 0x02
    146e:	88 27       	eor	r24, r24
    1470:	99 27       	eor	r25, r25
    1472:	dc 01       	movw	r26, r24
    1474:	82 1b       	sub	r24, r18
    1476:	93 0b       	sbc	r25, r19
    1478:	a4 0b       	sbc	r26, r20
    147a:	b5 0b       	sbc	r27, r21
    147c:	84 83       	std	Z+4, r24	; 0x04
    147e:	95 83       	std	Z+5, r25	; 0x05
    1480:	a6 83       	std	Z+6, r26	; 0x06
    1482:	b7 83       	std	Z+7, r27	; 0x07
    1484:	0d c0       	rjmp	.+26     	; 0x14a0 <_fpadd_parts+0x20e>
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	44 1f       	adc	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	24 83       	std	Z+4, r18	; 0x04
    1490:	35 83       	std	Z+5, r19	; 0x05
    1492:	46 83       	std	Z+6, r20	; 0x06
    1494:	57 83       	std	Z+7, r21	; 0x07
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	93 83       	std	Z+3, r25	; 0x03
    149e:	82 83       	std	Z+2, r24	; 0x02
    14a0:	24 81       	ldd	r18, Z+4	; 0x04
    14a2:	35 81       	ldd	r19, Z+5	; 0x05
    14a4:	46 81       	ldd	r20, Z+6	; 0x06
    14a6:	57 81       	ldd	r21, Z+7	; 0x07
    14a8:	da 01       	movw	r26, r20
    14aa:	c9 01       	movw	r24, r18
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	a1 09       	sbc	r26, r1
    14b0:	b1 09       	sbc	r27, r1
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	af 4f       	sbci	r26, 0xFF	; 255
    14b8:	bf 43       	sbci	r27, 0x3F	; 63
    14ba:	28 f3       	brcs	.-54     	; 0x1486 <_fpadd_parts+0x1f4>
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4 <_fpadd_parts+0x242>
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	33 82       	std	Z+3, r3	; 0x03
    14c2:	22 82       	std	Z+2, r2	; 0x02
    14c4:	ea 0c       	add	r14, r10
    14c6:	fb 1c       	adc	r15, r11
    14c8:	0c 1d       	adc	r16, r12
    14ca:	1d 1d       	adc	r17, r13
    14cc:	e4 82       	std	Z+4, r14	; 0x04
    14ce:	f5 82       	std	Z+5, r15	; 0x05
    14d0:	06 83       	std	Z+6, r16	; 0x06
    14d2:	17 83       	std	Z+7, r17	; 0x07
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	80 83       	st	Z, r24
    14d8:	24 81       	ldd	r18, Z+4	; 0x04
    14da:	35 81       	ldd	r19, Z+5	; 0x05
    14dc:	46 81       	ldd	r20, Z+6	; 0x06
    14de:	57 81       	ldd	r21, Z+7	; 0x07
    14e0:	57 ff       	sbrs	r21, 7
    14e2:	1a c0       	rjmp	.+52     	; 0x1518 <_fpadd_parts+0x286>
    14e4:	c9 01       	movw	r24, r18
    14e6:	aa 27       	eor	r26, r26
    14e8:	97 fd       	sbrc	r25, 7
    14ea:	a0 95       	com	r26
    14ec:	ba 2f       	mov	r27, r26
    14ee:	81 70       	andi	r24, 0x01	; 1
    14f0:	90 70       	andi	r25, 0x00	; 0
    14f2:	a0 70       	andi	r26, 0x00	; 0
    14f4:	b0 70       	andi	r27, 0x00	; 0
    14f6:	56 95       	lsr	r21
    14f8:	47 95       	ror	r20
    14fa:	37 95       	ror	r19
    14fc:	27 95       	ror	r18
    14fe:	82 2b       	or	r24, r18
    1500:	93 2b       	or	r25, r19
    1502:	a4 2b       	or	r26, r20
    1504:	b5 2b       	or	r27, r21
    1506:	84 83       	std	Z+4, r24	; 0x04
    1508:	95 83       	std	Z+5, r25	; 0x05
    150a:	a6 83       	std	Z+6, r26	; 0x06
    150c:	b7 83       	std	Z+7, r27	; 0x07
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	93 83       	std	Z+3, r25	; 0x03
    1516:	82 83       	std	Z+2, r24	; 0x02
    1518:	df 01       	movw	r26, r30
    151a:	01 c0       	rjmp	.+2      	; 0x151e <_fpadd_parts+0x28c>
    151c:	d2 01       	movw	r26, r4
    151e:	cd 01       	movw	r24, r26
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	e2 e1       	ldi	r30, 0x12	; 18
    1526:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__>

0000152a <__subsf3>:
    152a:	a0 e2       	ldi	r26, 0x20	; 32
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e9       	ldi	r30, 0x9B	; 155
    1530:	fa e0       	ldi	r31, 0x0A	; 10
    1532:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
    1536:	69 83       	std	Y+1, r22	; 0x01
    1538:	7a 83       	std	Y+2, r23	; 0x02
    153a:	8b 83       	std	Y+3, r24	; 0x03
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	2d 83       	std	Y+5, r18	; 0x05
    1540:	3e 83       	std	Y+6, r19	; 0x06
    1542:	4f 83       	std	Y+7, r20	; 0x07
    1544:	58 87       	std	Y+8, r21	; 0x08
    1546:	e9 e0       	ldi	r30, 0x09	; 9
    1548:	ee 2e       	mov	r14, r30
    154a:	f1 2c       	mov	r15, r1
    154c:	ec 0e       	add	r14, r28
    154e:	fd 1e       	adc	r15, r29
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	b7 01       	movw	r22, r14
    1556:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    155a:	8e 01       	movw	r16, r28
    155c:	0f 5e       	subi	r16, 0xEF	; 239
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	ce 01       	movw	r24, r28
    1562:	05 96       	adiw	r24, 0x05	; 5
    1564:	b8 01       	movw	r22, r16
    1566:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    156a:	8a 89       	ldd	r24, Y+18	; 0x12
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	89 27       	eor	r24, r25
    1570:	8a 8b       	std	Y+18, r24	; 0x12
    1572:	c7 01       	movw	r24, r14
    1574:	b8 01       	movw	r22, r16
    1576:	ae 01       	movw	r20, r28
    1578:	47 5e       	subi	r20, 0xE7	; 231
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	0e 94 49 09 	call	0x1292	; 0x1292 <_fpadd_parts>
    1580:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__pack_f>
    1584:	a0 96       	adiw	r28, 0x20	; 32
    1586:	e6 e0       	ldi	r30, 0x06	; 6
    1588:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

0000158c <__addsf3>:
    158c:	a0 e2       	ldi	r26, 0x20	; 32
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ec ec       	ldi	r30, 0xCC	; 204
    1592:	fa e0       	ldi	r31, 0x0A	; 10
    1594:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
    1598:	69 83       	std	Y+1, r22	; 0x01
    159a:	7a 83       	std	Y+2, r23	; 0x02
    159c:	8b 83       	std	Y+3, r24	; 0x03
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	2d 83       	std	Y+5, r18	; 0x05
    15a2:	3e 83       	std	Y+6, r19	; 0x06
    15a4:	4f 83       	std	Y+7, r20	; 0x07
    15a6:	58 87       	std	Y+8, r21	; 0x08
    15a8:	f9 e0       	ldi	r31, 0x09	; 9
    15aa:	ef 2e       	mov	r14, r31
    15ac:	f1 2c       	mov	r15, r1
    15ae:	ec 0e       	add	r14, r28
    15b0:	fd 1e       	adc	r15, r29
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	b7 01       	movw	r22, r14
    15b8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    15bc:	8e 01       	movw	r16, r28
    15be:	0f 5e       	subi	r16, 0xEF	; 239
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	05 96       	adiw	r24, 0x05	; 5
    15c6:	b8 01       	movw	r22, r16
    15c8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    15cc:	c7 01       	movw	r24, r14
    15ce:	b8 01       	movw	r22, r16
    15d0:	ae 01       	movw	r20, r28
    15d2:	47 5e       	subi	r20, 0xE7	; 231
    15d4:	5f 4f       	sbci	r21, 0xFF	; 255
    15d6:	0e 94 49 09 	call	0x1292	; 0x1292 <_fpadd_parts>
    15da:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__pack_f>
    15de:	a0 96       	adiw	r28, 0x20	; 32
    15e0:	e6 e0       	ldi	r30, 0x06	; 6
    15e2:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

000015e6 <__mulsf3>:
    15e6:	a0 e2       	ldi	r26, 0x20	; 32
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 ef       	ldi	r30, 0xF9	; 249
    15ec:	fa e0       	ldi	r31, 0x0A	; 10
    15ee:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__>
    15f2:	69 83       	std	Y+1, r22	; 0x01
    15f4:	7a 83       	std	Y+2, r23	; 0x02
    15f6:	8b 83       	std	Y+3, r24	; 0x03
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	2d 83       	std	Y+5, r18	; 0x05
    15fc:	3e 83       	std	Y+6, r19	; 0x06
    15fe:	4f 83       	std	Y+7, r20	; 0x07
    1600:	58 87       	std	Y+8, r21	; 0x08
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	be 01       	movw	r22, r28
    1608:	67 5f       	subi	r22, 0xF7	; 247
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    1610:	ce 01       	movw	r24, r28
    1612:	05 96       	adiw	r24, 0x05	; 5
    1614:	be 01       	movw	r22, r28
    1616:	6f 5e       	subi	r22, 0xEF	; 239
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    161e:	99 85       	ldd	r25, Y+9	; 0x09
    1620:	92 30       	cpi	r25, 0x02	; 2
    1622:	88 f0       	brcs	.+34     	; 0x1646 <__mulsf3+0x60>
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	c8 f0       	brcs	.+50     	; 0x165c <__mulsf3+0x76>
    162a:	94 30       	cpi	r25, 0x04	; 4
    162c:	19 f4       	brne	.+6      	; 0x1634 <__mulsf3+0x4e>
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	51 f4       	brne	.+20     	; 0x1646 <__mulsf3+0x60>
    1632:	04 c0       	rjmp	.+8      	; 0x163c <__mulsf3+0x56>
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	29 f4       	brne	.+10     	; 0x1642 <__mulsf3+0x5c>
    1638:	92 30       	cpi	r25, 0x02	; 2
    163a:	81 f4       	brne	.+32     	; 0x165c <__mulsf3+0x76>
    163c:	89 e9       	ldi	r24, 0x99	; 153
    163e:	92 e0       	ldi	r25, 0x02	; 2
    1640:	c6 c0       	rjmp	.+396    	; 0x17ce <__mulsf3+0x1e8>
    1642:	92 30       	cpi	r25, 0x02	; 2
    1644:	49 f4       	brne	.+18     	; 0x1658 <__mulsf3+0x72>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	8a 89       	ldd	r24, Y+18	; 0x12
    164c:	98 13       	cpse	r25, r24
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	2a 87       	std	Y+10, r18	; 0x0a
    1652:	ce 01       	movw	r24, r28
    1654:	09 96       	adiw	r24, 0x09	; 9
    1656:	bb c0       	rjmp	.+374    	; 0x17ce <__mulsf3+0x1e8>
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	49 f4       	brne	.+18     	; 0x166e <__mulsf3+0x88>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	8a 89       	ldd	r24, Y+18	; 0x12
    1662:	98 13       	cpse	r25, r24
    1664:	21 e0       	ldi	r18, 0x01	; 1
    1666:	2a 8b       	std	Y+18, r18	; 0x12
    1668:	ce 01       	movw	r24, r28
    166a:	41 96       	adiw	r24, 0x11	; 17
    166c:	b0 c0       	rjmp	.+352    	; 0x17ce <__mulsf3+0x1e8>
    166e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1670:	3e 84       	ldd	r3, Y+14	; 0x0e
    1672:	4f 84       	ldd	r4, Y+15	; 0x0f
    1674:	58 88       	ldd	r5, Y+16	; 0x10
    1676:	6d 88       	ldd	r6, Y+21	; 0x15
    1678:	7e 88       	ldd	r7, Y+22	; 0x16
    167a:	8f 88       	ldd	r8, Y+23	; 0x17
    167c:	98 8c       	ldd	r9, Y+24	; 0x18
    167e:	ee 24       	eor	r14, r14
    1680:	ff 24       	eor	r15, r15
    1682:	87 01       	movw	r16, r14
    1684:	aa 24       	eor	r10, r10
    1686:	bb 24       	eor	r11, r11
    1688:	65 01       	movw	r12, r10
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	e0 e0       	ldi	r30, 0x00	; 0
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	c1 01       	movw	r24, r2
    1698:	81 70       	andi	r24, 0x01	; 1
    169a:	90 70       	andi	r25, 0x00	; 0
    169c:	89 2b       	or	r24, r25
    169e:	e9 f0       	breq	.+58     	; 0x16da <__mulsf3+0xf4>
    16a0:	e6 0c       	add	r14, r6
    16a2:	f7 1c       	adc	r15, r7
    16a4:	08 1d       	adc	r16, r8
    16a6:	19 1d       	adc	r17, r9
    16a8:	9a 01       	movw	r18, r20
    16aa:	ab 01       	movw	r20, r22
    16ac:	2a 0d       	add	r18, r10
    16ae:	3b 1d       	adc	r19, r11
    16b0:	4c 1d       	adc	r20, r12
    16b2:	5d 1d       	adc	r21, r13
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e6 14       	cp	r14, r6
    16be:	f7 04       	cpc	r15, r7
    16c0:	08 05       	cpc	r16, r8
    16c2:	19 05       	cpc	r17, r9
    16c4:	20 f4       	brcc	.+8      	; 0x16ce <__mulsf3+0xe8>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e0       	ldi	r26, 0x00	; 0
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ba 01       	movw	r22, r20
    16d0:	a9 01       	movw	r20, r18
    16d2:	48 0f       	add	r20, r24
    16d4:	59 1f       	adc	r21, r25
    16d6:	6a 1f       	adc	r22, r26
    16d8:	7b 1f       	adc	r23, r27
    16da:	aa 0c       	add	r10, r10
    16dc:	bb 1c       	adc	r11, r11
    16de:	cc 1c       	adc	r12, r12
    16e0:	dd 1c       	adc	r13, r13
    16e2:	97 fe       	sbrs	r9, 7
    16e4:	08 c0       	rjmp	.+16     	; 0x16f6 <__mulsf3+0x110>
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 e0       	ldi	r26, 0x00	; 0
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	a8 2a       	or	r10, r24
    16f0:	b9 2a       	or	r11, r25
    16f2:	ca 2a       	or	r12, r26
    16f4:	db 2a       	or	r13, r27
    16f6:	31 96       	adiw	r30, 0x01	; 1
    16f8:	e0 32       	cpi	r30, 0x20	; 32
    16fa:	f1 05       	cpc	r31, r1
    16fc:	49 f0       	breq	.+18     	; 0x1710 <__mulsf3+0x12a>
    16fe:	66 0c       	add	r6, r6
    1700:	77 1c       	adc	r7, r7
    1702:	88 1c       	adc	r8, r8
    1704:	99 1c       	adc	r9, r9
    1706:	56 94       	lsr	r5
    1708:	47 94       	ror	r4
    170a:	37 94       	ror	r3
    170c:	27 94       	ror	r2
    170e:	c3 cf       	rjmp	.-122    	; 0x1696 <__mulsf3+0xb0>
    1710:	fa 85       	ldd	r31, Y+10	; 0x0a
    1712:	ea 89       	ldd	r30, Y+18	; 0x12
    1714:	2b 89       	ldd	r18, Y+19	; 0x13
    1716:	3c 89       	ldd	r19, Y+20	; 0x14
    1718:	8b 85       	ldd	r24, Y+11	; 0x0b
    171a:	9c 85       	ldd	r25, Y+12	; 0x0c
    171c:	28 0f       	add	r18, r24
    171e:	39 1f       	adc	r19, r25
    1720:	2e 5f       	subi	r18, 0xFE	; 254
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	17 c0       	rjmp	.+46     	; 0x1754 <__mulsf3+0x16e>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	89 2b       	or	r24, r25
    172e:	61 f0       	breq	.+24     	; 0x1748 <__mulsf3+0x162>
    1730:	16 95       	lsr	r17
    1732:	07 95       	ror	r16
    1734:	f7 94       	ror	r15
    1736:	e7 94       	ror	r14
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e8       	ldi	r27, 0x80	; 128
    1740:	e8 2a       	or	r14, r24
    1742:	f9 2a       	or	r15, r25
    1744:	0a 2b       	or	r16, r26
    1746:	1b 2b       	or	r17, r27
    1748:	76 95       	lsr	r23
    174a:	67 95       	ror	r22
    174c:	57 95       	ror	r21
    174e:	47 95       	ror	r20
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	77 fd       	sbrc	r23, 7
    1756:	e7 cf       	rjmp	.-50     	; 0x1726 <__mulsf3+0x140>
    1758:	0c c0       	rjmp	.+24     	; 0x1772 <__mulsf3+0x18c>
    175a:	44 0f       	add	r20, r20
    175c:	55 1f       	adc	r21, r21
    175e:	66 1f       	adc	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	17 fd       	sbrc	r17, 7
    1764:	41 60       	ori	r20, 0x01	; 1
    1766:	ee 0c       	add	r14, r14
    1768:	ff 1c       	adc	r15, r15
    176a:	00 1f       	adc	r16, r16
    176c:	11 1f       	adc	r17, r17
    176e:	21 50       	subi	r18, 0x01	; 1
    1770:	30 40       	sbci	r19, 0x00	; 0
    1772:	40 30       	cpi	r20, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	59 07       	cpc	r21, r25
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	69 07       	cpc	r22, r25
    177c:	90 e4       	ldi	r25, 0x40	; 64
    177e:	79 07       	cpc	r23, r25
    1780:	60 f3       	brcs	.-40     	; 0x175a <__mulsf3+0x174>
    1782:	2b 8f       	std	Y+27, r18	; 0x1b
    1784:	3c 8f       	std	Y+28, r19	; 0x1c
    1786:	db 01       	movw	r26, r22
    1788:	ca 01       	movw	r24, r20
    178a:	8f 77       	andi	r24, 0x7F	; 127
    178c:	90 70       	andi	r25, 0x00	; 0
    178e:	a0 70       	andi	r26, 0x00	; 0
    1790:	b0 70       	andi	r27, 0x00	; 0
    1792:	80 34       	cpi	r24, 0x40	; 64
    1794:	91 05       	cpc	r25, r1
    1796:	a1 05       	cpc	r26, r1
    1798:	b1 05       	cpc	r27, r1
    179a:	61 f4       	brne	.+24     	; 0x17b4 <__mulsf3+0x1ce>
    179c:	47 fd       	sbrc	r20, 7
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <__mulsf3+0x1ce>
    17a0:	e1 14       	cp	r14, r1
    17a2:	f1 04       	cpc	r15, r1
    17a4:	01 05       	cpc	r16, r1
    17a6:	11 05       	cpc	r17, r1
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <__mulsf3+0x1ce>
    17aa:	40 5c       	subi	r20, 0xC0	; 192
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	6f 4f       	sbci	r22, 0xFF	; 255
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	40 78       	andi	r20, 0x80	; 128
    17b4:	1a 8e       	std	Y+26, r1	; 0x1a
    17b6:	fe 17       	cp	r31, r30
    17b8:	11 f0       	breq	.+4      	; 0x17be <__mulsf3+0x1d8>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	8a 8f       	std	Y+26, r24	; 0x1a
    17be:	4d 8f       	std	Y+29, r20	; 0x1d
    17c0:	5e 8f       	std	Y+30, r21	; 0x1e
    17c2:	6f 8f       	std	Y+31, r22	; 0x1f
    17c4:	78 a3       	std	Y+32, r23	; 0x20
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	89 8f       	std	Y+25, r24	; 0x19
    17ca:	ce 01       	movw	r24, r28
    17cc:	49 96       	adiw	r24, 0x19	; 25
    17ce:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__pack_f>
    17d2:	a0 96       	adiw	r28, 0x20	; 32
    17d4:	e2 e1       	ldi	r30, 0x12	; 18
    17d6:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__>

000017da <__gtsf2>:
    17da:	a8 e1       	ldi	r26, 0x18	; 24
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 ef       	ldi	r30, 0xF3	; 243
    17e0:	fb e0       	ldi	r31, 0x0B	; 11
    17e2:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
    17e6:	69 83       	std	Y+1, r22	; 0x01
    17e8:	7a 83       	std	Y+2, r23	; 0x02
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	2d 83       	std	Y+5, r18	; 0x05
    17f0:	3e 83       	std	Y+6, r19	; 0x06
    17f2:	4f 83       	std	Y+7, r20	; 0x07
    17f4:	58 87       	std	Y+8, r21	; 0x08
    17f6:	89 e0       	ldi	r24, 0x09	; 9
    17f8:	e8 2e       	mov	r14, r24
    17fa:	f1 2c       	mov	r15, r1
    17fc:	ec 0e       	add	r14, r28
    17fe:	fd 1e       	adc	r15, r29
    1800:	ce 01       	movw	r24, r28
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	b7 01       	movw	r22, r14
    1806:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    180a:	8e 01       	movw	r16, r28
    180c:	0f 5e       	subi	r16, 0xEF	; 239
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	ce 01       	movw	r24, r28
    1812:	05 96       	adiw	r24, 0x05	; 5
    1814:	b8 01       	movw	r22, r16
    1816:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	40 f0       	brcs	.+16     	; 0x1830 <__gtsf2+0x56>
    1820:	89 89       	ldd	r24, Y+17	; 0x11
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	28 f0       	brcs	.+10     	; 0x1830 <__gtsf2+0x56>
    1826:	c7 01       	movw	r24, r14
    1828:	b8 01       	movw	r22, r16
    182a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fpcmp_parts_f>
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <__gtsf2+0x58>
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	68 96       	adiw	r28, 0x18	; 24
    1834:	e6 e0       	ldi	r30, 0x06	; 6
    1836:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

0000183a <__gesf2>:
    183a:	a8 e1       	ldi	r26, 0x18	; 24
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e3 e2       	ldi	r30, 0x23	; 35
    1840:	fc e0       	ldi	r31, 0x0C	; 12
    1842:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
    1846:	69 83       	std	Y+1, r22	; 0x01
    1848:	7a 83       	std	Y+2, r23	; 0x02
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	2d 83       	std	Y+5, r18	; 0x05
    1850:	3e 83       	std	Y+6, r19	; 0x06
    1852:	4f 83       	std	Y+7, r20	; 0x07
    1854:	58 87       	std	Y+8, r21	; 0x08
    1856:	89 e0       	ldi	r24, 0x09	; 9
    1858:	e8 2e       	mov	r14, r24
    185a:	f1 2c       	mov	r15, r1
    185c:	ec 0e       	add	r14, r28
    185e:	fd 1e       	adc	r15, r29
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	b7 01       	movw	r22, r14
    1866:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    186a:	8e 01       	movw	r16, r28
    186c:	0f 5e       	subi	r16, 0xEF	; 239
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	ce 01       	movw	r24, r28
    1872:	05 96       	adiw	r24, 0x05	; 5
    1874:	b8 01       	movw	r22, r16
    1876:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	40 f0       	brcs	.+16     	; 0x1890 <__gesf2+0x56>
    1880:	89 89       	ldd	r24, Y+17	; 0x11
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	28 f0       	brcs	.+10     	; 0x1890 <__gesf2+0x56>
    1886:	c7 01       	movw	r24, r14
    1888:	b8 01       	movw	r22, r16
    188a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fpcmp_parts_f>
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <__gesf2+0x58>
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	68 96       	adiw	r28, 0x18	; 24
    1894:	e6 e0       	ldi	r30, 0x06	; 6
    1896:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

0000189a <__ltsf2>:
    189a:	a8 e1       	ldi	r26, 0x18	; 24
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e3 e5       	ldi	r30, 0x53	; 83
    18a0:	fc e0       	ldi	r31, 0x0C	; 12
    18a2:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
    18a6:	69 83       	std	Y+1, r22	; 0x01
    18a8:	7a 83       	std	Y+2, r23	; 0x02
    18aa:	8b 83       	std	Y+3, r24	; 0x03
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	2d 83       	std	Y+5, r18	; 0x05
    18b0:	3e 83       	std	Y+6, r19	; 0x06
    18b2:	4f 83       	std	Y+7, r20	; 0x07
    18b4:	58 87       	std	Y+8, r21	; 0x08
    18b6:	89 e0       	ldi	r24, 0x09	; 9
    18b8:	e8 2e       	mov	r14, r24
    18ba:	f1 2c       	mov	r15, r1
    18bc:	ec 0e       	add	r14, r28
    18be:	fd 1e       	adc	r15, r29
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	b7 01       	movw	r22, r14
    18c6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    18ca:	8e 01       	movw	r16, r28
    18cc:	0f 5e       	subi	r16, 0xEF	; 239
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	ce 01       	movw	r24, r28
    18d2:	05 96       	adiw	r24, 0x05	; 5
    18d4:	b8 01       	movw	r22, r16
    18d6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    18da:	89 85       	ldd	r24, Y+9	; 0x09
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	40 f0       	brcs	.+16     	; 0x18f0 <__ltsf2+0x56>
    18e0:	89 89       	ldd	r24, Y+17	; 0x11
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	28 f0       	brcs	.+10     	; 0x18f0 <__ltsf2+0x56>
    18e6:	c7 01       	movw	r24, r14
    18e8:	b8 01       	movw	r22, r16
    18ea:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fpcmp_parts_f>
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <__ltsf2+0x58>
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	68 96       	adiw	r28, 0x18	; 24
    18f4:	e6 e0       	ldi	r30, 0x06	; 6
    18f6:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

000018fa <__fixsfsi>:
    18fa:	ac e0       	ldi	r26, 0x0C	; 12
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e3 e8       	ldi	r30, 0x83	; 131
    1900:	fc e0       	ldi	r31, 0x0C	; 12
    1902:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__+0x20>
    1906:	69 83       	std	Y+1, r22	; 0x01
    1908:	7a 83       	std	Y+2, r23	; 0x02
    190a:	8b 83       	std	Y+3, r24	; 0x03
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	be 01       	movw	r22, r28
    1914:	6b 5f       	subi	r22, 0xFB	; 251
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__unpack_f>
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	61 f1       	breq	.+88     	; 0x197a <__fixsfsi+0x80>
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	50 f1       	brcs	.+84     	; 0x197a <__fixsfsi+0x80>
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	21 f4       	brne	.+8      	; 0x1932 <__fixsfsi+0x38>
    192a:	8e 81       	ldd	r24, Y+6	; 0x06
    192c:	88 23       	and	r24, r24
    192e:	51 f1       	breq	.+84     	; 0x1984 <__fixsfsi+0x8a>
    1930:	2e c0       	rjmp	.+92     	; 0x198e <__fixsfsi+0x94>
    1932:	2f 81       	ldd	r18, Y+7	; 0x07
    1934:	38 85       	ldd	r19, Y+8	; 0x08
    1936:	37 fd       	sbrc	r19, 7
    1938:	20 c0       	rjmp	.+64     	; 0x197a <__fixsfsi+0x80>
    193a:	6e 81       	ldd	r22, Y+6	; 0x06
    193c:	2f 31       	cpi	r18, 0x1F	; 31
    193e:	31 05       	cpc	r19, r1
    1940:	1c f0       	brlt	.+6      	; 0x1948 <__fixsfsi+0x4e>
    1942:	66 23       	and	r22, r22
    1944:	f9 f0       	breq	.+62     	; 0x1984 <__fixsfsi+0x8a>
    1946:	23 c0       	rjmp	.+70     	; 0x198e <__fixsfsi+0x94>
    1948:	8e e1       	ldi	r24, 0x1E	; 30
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	82 1b       	sub	r24, r18
    194e:	93 0b       	sbc	r25, r19
    1950:	29 85       	ldd	r18, Y+9	; 0x09
    1952:	3a 85       	ldd	r19, Y+10	; 0x0a
    1954:	4b 85       	ldd	r20, Y+11	; 0x0b
    1956:	5c 85       	ldd	r21, Y+12	; 0x0c
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <__fixsfsi+0x68>
    195a:	56 95       	lsr	r21
    195c:	47 95       	ror	r20
    195e:	37 95       	ror	r19
    1960:	27 95       	ror	r18
    1962:	8a 95       	dec	r24
    1964:	d2 f7       	brpl	.-12     	; 0x195a <__fixsfsi+0x60>
    1966:	66 23       	and	r22, r22
    1968:	b1 f0       	breq	.+44     	; 0x1996 <__fixsfsi+0x9c>
    196a:	50 95       	com	r21
    196c:	40 95       	com	r20
    196e:	30 95       	com	r19
    1970:	21 95       	neg	r18
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
    1974:	4f 4f       	sbci	r20, 0xFF	; 255
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <__fixsfsi+0x9c>
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <__fixsfsi+0x9c>
    1984:	2f ef       	ldi	r18, 0xFF	; 255
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f ef       	ldi	r20, 0xFF	; 255
    198a:	5f e7       	ldi	r21, 0x7F	; 127
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <__fixsfsi+0x9c>
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e8       	ldi	r21, 0x80	; 128
    1996:	b9 01       	movw	r22, r18
    1998:	ca 01       	movw	r24, r20
    199a:	2c 96       	adiw	r28, 0x0c	; 12
    199c:	e2 e0       	ldi	r30, 0x02	; 2
    199e:	0c 94 07 13 	jmp	0x260e	; 0x260e <__epilogue_restores__+0x20>

000019a2 <__pack_f>:
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	fc 01       	movw	r30, r24
    19ae:	e4 80       	ldd	r14, Z+4	; 0x04
    19b0:	f5 80       	ldd	r15, Z+5	; 0x05
    19b2:	06 81       	ldd	r16, Z+6	; 0x06
    19b4:	17 81       	ldd	r17, Z+7	; 0x07
    19b6:	d1 80       	ldd	r13, Z+1	; 0x01
    19b8:	80 81       	ld	r24, Z
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	48 f4       	brcc	.+18     	; 0x19d0 <__pack_f+0x2e>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e1       	ldi	r26, 0x10	; 16
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e8 2a       	or	r14, r24
    19c8:	f9 2a       	or	r15, r25
    19ca:	0a 2b       	or	r16, r26
    19cc:	1b 2b       	or	r17, r27
    19ce:	a5 c0       	rjmp	.+330    	; 0x1b1a <__pack_f+0x178>
    19d0:	84 30       	cpi	r24, 0x04	; 4
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <__pack_f+0x34>
    19d4:	9f c0       	rjmp	.+318    	; 0x1b14 <__pack_f+0x172>
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	21 f4       	brne	.+8      	; 0x19e2 <__pack_f+0x40>
    19da:	ee 24       	eor	r14, r14
    19dc:	ff 24       	eor	r15, r15
    19de:	87 01       	movw	r16, r14
    19e0:	05 c0       	rjmp	.+10     	; 0x19ec <__pack_f+0x4a>
    19e2:	e1 14       	cp	r14, r1
    19e4:	f1 04       	cpc	r15, r1
    19e6:	01 05       	cpc	r16, r1
    19e8:	11 05       	cpc	r17, r1
    19ea:	19 f4       	brne	.+6      	; 0x19f2 <__pack_f+0x50>
    19ec:	e0 e0       	ldi	r30, 0x00	; 0
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	96 c0       	rjmp	.+300    	; 0x1b1e <__pack_f+0x17c>
    19f2:	62 81       	ldd	r22, Z+2	; 0x02
    19f4:	73 81       	ldd	r23, Z+3	; 0x03
    19f6:	9f ef       	ldi	r25, 0xFF	; 255
    19f8:	62 38       	cpi	r22, 0x82	; 130
    19fa:	79 07       	cpc	r23, r25
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <__pack_f+0x5e>
    19fe:	5b c0       	rjmp	.+182    	; 0x1ab6 <__pack_f+0x114>
    1a00:	22 e8       	ldi	r18, 0x82	; 130
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	26 1b       	sub	r18, r22
    1a06:	37 0b       	sbc	r19, r23
    1a08:	2a 31       	cpi	r18, 0x1A	; 26
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f0       	brlt	.+10     	; 0x1a18 <__pack_f+0x76>
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	2a c0       	rjmp	.+84     	; 0x1a6c <__pack_f+0xca>
    1a18:	b8 01       	movw	r22, r16
    1a1a:	a7 01       	movw	r20, r14
    1a1c:	02 2e       	mov	r0, r18
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <__pack_f+0x86>
    1a20:	76 95       	lsr	r23
    1a22:	67 95       	ror	r22
    1a24:	57 95       	ror	r21
    1a26:	47 95       	ror	r20
    1a28:	0a 94       	dec	r0
    1a2a:	d2 f7       	brpl	.-12     	; 0x1a20 <__pack_f+0x7e>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <__pack_f+0x9c>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	2a 95       	dec	r18
    1a40:	d2 f7       	brpl	.-12     	; 0x1a36 <__pack_f+0x94>
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	a1 09       	sbc	r26, r1
    1a46:	b1 09       	sbc	r27, r1
    1a48:	8e 21       	and	r24, r14
    1a4a:	9f 21       	and	r25, r15
    1a4c:	a0 23       	and	r26, r16
    1a4e:	b1 23       	and	r27, r17
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	a1 05       	cpc	r26, r1
    1a54:	b1 05       	cpc	r27, r1
    1a56:	21 f0       	breq	.+8      	; 0x1a60 <__pack_f+0xbe>
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	9a 01       	movw	r18, r20
    1a62:	ab 01       	movw	r20, r22
    1a64:	28 2b       	or	r18, r24
    1a66:	39 2b       	or	r19, r25
    1a68:	4a 2b       	or	r20, r26
    1a6a:	5b 2b       	or	r21, r27
    1a6c:	da 01       	movw	r26, r20
    1a6e:	c9 01       	movw	r24, r18
    1a70:	8f 77       	andi	r24, 0x7F	; 127
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	a0 70       	andi	r26, 0x00	; 0
    1a76:	b0 70       	andi	r27, 0x00	; 0
    1a78:	80 34       	cpi	r24, 0x40	; 64
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	a1 05       	cpc	r26, r1
    1a7e:	b1 05       	cpc	r27, r1
    1a80:	39 f4       	brne	.+14     	; 0x1a90 <__pack_f+0xee>
    1a82:	27 ff       	sbrs	r18, 7
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <__pack_f+0xf6>
    1a86:	20 5c       	subi	r18, 0xC0	; 192
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <__pack_f+0xf6>
    1a90:	21 5c       	subi	r18, 0xC1	; 193
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	4f 4f       	sbci	r20, 0xFF	; 255
    1a96:	5f 4f       	sbci	r21, 0xFF	; 255
    1a98:	e0 e0       	ldi	r30, 0x00	; 0
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	20 30       	cpi	r18, 0x00	; 0
    1a9e:	a0 e0       	ldi	r26, 0x00	; 0
    1aa0:	3a 07       	cpc	r19, r26
    1aa2:	a0 e0       	ldi	r26, 0x00	; 0
    1aa4:	4a 07       	cpc	r20, r26
    1aa6:	a0 e4       	ldi	r26, 0x40	; 64
    1aa8:	5a 07       	cpc	r21, r26
    1aaa:	10 f0       	brcs	.+4      	; 0x1ab0 <__pack_f+0x10e>
    1aac:	e1 e0       	ldi	r30, 0x01	; 1
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	79 01       	movw	r14, r18
    1ab2:	8a 01       	movw	r16, r20
    1ab4:	27 c0       	rjmp	.+78     	; 0x1b04 <__pack_f+0x162>
    1ab6:	60 38       	cpi	r22, 0x80	; 128
    1ab8:	71 05       	cpc	r23, r1
    1aba:	64 f5       	brge	.+88     	; 0x1b14 <__pack_f+0x172>
    1abc:	fb 01       	movw	r30, r22
    1abe:	e1 58       	subi	r30, 0x81	; 129
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	d8 01       	movw	r26, r16
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	8f 77       	andi	r24, 0x7F	; 127
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	a0 70       	andi	r26, 0x00	; 0
    1acc:	b0 70       	andi	r27, 0x00	; 0
    1ace:	80 34       	cpi	r24, 0x40	; 64
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	a1 05       	cpc	r26, r1
    1ad4:	b1 05       	cpc	r27, r1
    1ad6:	39 f4       	brne	.+14     	; 0x1ae6 <__pack_f+0x144>
    1ad8:	e7 fe       	sbrs	r14, 7
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <__pack_f+0x154>
    1adc:	80 e4       	ldi	r24, 0x40	; 64
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <__pack_f+0x14c>
    1ae6:	8f e3       	ldi	r24, 0x3F	; 63
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e0       	ldi	r26, 0x00	; 0
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 0e       	add	r14, r24
    1af0:	f9 1e       	adc	r15, r25
    1af2:	0a 1f       	adc	r16, r26
    1af4:	1b 1f       	adc	r17, r27
    1af6:	17 ff       	sbrs	r17, 7
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <__pack_f+0x162>
    1afa:	16 95       	lsr	r17
    1afc:	07 95       	ror	r16
    1afe:	f7 94       	ror	r15
    1b00:	e7 94       	ror	r14
    1b02:	31 96       	adiw	r30, 0x01	; 1
    1b04:	87 e0       	ldi	r24, 0x07	; 7
    1b06:	16 95       	lsr	r17
    1b08:	07 95       	ror	r16
    1b0a:	f7 94       	ror	r15
    1b0c:	e7 94       	ror	r14
    1b0e:	8a 95       	dec	r24
    1b10:	d1 f7       	brne	.-12     	; 0x1b06 <__pack_f+0x164>
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <__pack_f+0x17c>
    1b14:	ee 24       	eor	r14, r14
    1b16:	ff 24       	eor	r15, r15
    1b18:	87 01       	movw	r16, r14
    1b1a:	ef ef       	ldi	r30, 0xFF	; 255
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	6e 2f       	mov	r22, r30
    1b20:	67 95       	ror	r22
    1b22:	66 27       	eor	r22, r22
    1b24:	67 95       	ror	r22
    1b26:	90 2f       	mov	r25, r16
    1b28:	9f 77       	andi	r25, 0x7F	; 127
    1b2a:	d7 94       	ror	r13
    1b2c:	dd 24       	eor	r13, r13
    1b2e:	d7 94       	ror	r13
    1b30:	8e 2f       	mov	r24, r30
    1b32:	86 95       	lsr	r24
    1b34:	49 2f       	mov	r20, r25
    1b36:	46 2b       	or	r20, r22
    1b38:	58 2f       	mov	r21, r24
    1b3a:	5d 29       	or	r21, r13
    1b3c:	b7 01       	movw	r22, r14
    1b3e:	ca 01       	movw	r24, r20
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	08 95       	ret

00001b4c <__unpack_f>:
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	db 01       	movw	r26, r22
    1b50:	40 81       	ld	r20, Z
    1b52:	51 81       	ldd	r21, Z+1	; 0x01
    1b54:	22 81       	ldd	r18, Z+2	; 0x02
    1b56:	62 2f       	mov	r22, r18
    1b58:	6f 77       	andi	r22, 0x7F	; 127
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	22 1f       	adc	r18, r18
    1b5e:	22 27       	eor	r18, r18
    1b60:	22 1f       	adc	r18, r18
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	89 2f       	mov	r24, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	82 2b       	or	r24, r18
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	99 1f       	adc	r25, r25
    1b70:	99 27       	eor	r25, r25
    1b72:	99 1f       	adc	r25, r25
    1b74:	11 96       	adiw	r26, 0x01	; 1
    1b76:	9c 93       	st	X, r25
    1b78:	11 97       	sbiw	r26, 0x01	; 1
    1b7a:	21 15       	cp	r18, r1
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	a9 f5       	brne	.+106    	; 0x1bea <__unpack_f+0x9e>
    1b80:	41 15       	cp	r20, r1
    1b82:	51 05       	cpc	r21, r1
    1b84:	61 05       	cpc	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	11 f4       	brne	.+4      	; 0x1b8e <__unpack_f+0x42>
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	37 c0       	rjmp	.+110    	; 0x1bfc <__unpack_f+0xb0>
    1b8e:	82 e8       	ldi	r24, 0x82	; 130
    1b90:	9f ef       	ldi	r25, 0xFF	; 255
    1b92:	13 96       	adiw	r26, 0x03	; 3
    1b94:	9c 93       	st	X, r25
    1b96:	8e 93       	st	-X, r24
    1b98:	12 97       	sbiw	r26, 0x02	; 2
    1b9a:	9a 01       	movw	r18, r20
    1b9c:	ab 01       	movw	r20, r22
    1b9e:	67 e0       	ldi	r22, 0x07	; 7
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	44 1f       	adc	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	6a 95       	dec	r22
    1baa:	d1 f7       	brne	.-12     	; 0x1ba0 <__unpack_f+0x54>
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	8c 93       	st	X, r24
    1bb0:	0d c0       	rjmp	.+26     	; 0x1bcc <__unpack_f+0x80>
    1bb2:	22 0f       	add	r18, r18
    1bb4:	33 1f       	adc	r19, r19
    1bb6:	44 1f       	adc	r20, r20
    1bb8:	55 1f       	adc	r21, r21
    1bba:	12 96       	adiw	r26, 0x02	; 2
    1bbc:	8d 91       	ld	r24, X+
    1bbe:	9c 91       	ld	r25, X
    1bc0:	13 97       	sbiw	r26, 0x03	; 3
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	13 96       	adiw	r26, 0x03	; 3
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	20 30       	cpi	r18, 0x00	; 0
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	38 07       	cpc	r19, r24
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	48 07       	cpc	r20, r24
    1bd6:	80 e4       	ldi	r24, 0x40	; 64
    1bd8:	58 07       	cpc	r21, r24
    1bda:	58 f3       	brcs	.-42     	; 0x1bb2 <__unpack_f+0x66>
    1bdc:	14 96       	adiw	r26, 0x04	; 4
    1bde:	2d 93       	st	X+, r18
    1be0:	3d 93       	st	X+, r19
    1be2:	4d 93       	st	X+, r20
    1be4:	5c 93       	st	X, r21
    1be6:	17 97       	sbiw	r26, 0x07	; 7
    1be8:	08 95       	ret
    1bea:	2f 3f       	cpi	r18, 0xFF	; 255
    1bec:	31 05       	cpc	r19, r1
    1bee:	79 f4       	brne	.+30     	; 0x1c0e <__unpack_f+0xc2>
    1bf0:	41 15       	cp	r20, r1
    1bf2:	51 05       	cpc	r21, r1
    1bf4:	61 05       	cpc	r22, r1
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	19 f4       	brne	.+6      	; 0x1c00 <__unpack_f+0xb4>
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	8c 93       	st	X, r24
    1bfe:	08 95       	ret
    1c00:	64 ff       	sbrs	r22, 4
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <__unpack_f+0xbe>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	8c 93       	st	X, r24
    1c08:	12 c0       	rjmp	.+36     	; 0x1c2e <__unpack_f+0xe2>
    1c0a:	1c 92       	st	X, r1
    1c0c:	10 c0       	rjmp	.+32     	; 0x1c2e <__unpack_f+0xe2>
    1c0e:	2f 57       	subi	r18, 0x7F	; 127
    1c10:	30 40       	sbci	r19, 0x00	; 0
    1c12:	13 96       	adiw	r26, 0x03	; 3
    1c14:	3c 93       	st	X, r19
    1c16:	2e 93       	st	-X, r18
    1c18:	12 97       	sbiw	r26, 0x02	; 2
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	8c 93       	st	X, r24
    1c1e:	87 e0       	ldi	r24, 0x07	; 7
    1c20:	44 0f       	add	r20, r20
    1c22:	55 1f       	adc	r21, r21
    1c24:	66 1f       	adc	r22, r22
    1c26:	77 1f       	adc	r23, r23
    1c28:	8a 95       	dec	r24
    1c2a:	d1 f7       	brne	.-12     	; 0x1c20 <__unpack_f+0xd4>
    1c2c:	70 64       	ori	r23, 0x40	; 64
    1c2e:	14 96       	adiw	r26, 0x04	; 4
    1c30:	4d 93       	st	X+, r20
    1c32:	5d 93       	st	X+, r21
    1c34:	6d 93       	st	X+, r22
    1c36:	7c 93       	st	X, r23
    1c38:	17 97       	sbiw	r26, 0x07	; 7
    1c3a:	08 95       	ret

00001c3c <__fpcmp_parts_f>:
    1c3c:	1f 93       	push	r17
    1c3e:	dc 01       	movw	r26, r24
    1c40:	fb 01       	movw	r30, r22
    1c42:	9c 91       	ld	r25, X
    1c44:	92 30       	cpi	r25, 0x02	; 2
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <__fpcmp_parts_f+0xe>
    1c48:	47 c0       	rjmp	.+142    	; 0x1cd8 <__fpcmp_parts_f+0x9c>
    1c4a:	80 81       	ld	r24, Z
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	08 f4       	brcc	.+2      	; 0x1c52 <__fpcmp_parts_f+0x16>
    1c50:	43 c0       	rjmp	.+134    	; 0x1cd8 <__fpcmp_parts_f+0x9c>
    1c52:	94 30       	cpi	r25, 0x04	; 4
    1c54:	51 f4       	brne	.+20     	; 0x1c6a <__fpcmp_parts_f+0x2e>
    1c56:	11 96       	adiw	r26, 0x01	; 1
    1c58:	1c 91       	ld	r17, X
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	99 f5       	brne	.+102    	; 0x1cc4 <__fpcmp_parts_f+0x88>
    1c5e:	81 81       	ldd	r24, Z+1	; 0x01
    1c60:	68 2f       	mov	r22, r24
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	61 1b       	sub	r22, r17
    1c66:	71 09       	sbc	r23, r1
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <__fpcmp_parts_f+0xac>
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	21 f0       	breq	.+8      	; 0x1c76 <__fpcmp_parts_f+0x3a>
    1c6e:	92 30       	cpi	r25, 0x02	; 2
    1c70:	31 f4       	brne	.+12     	; 0x1c7e <__fpcmp_parts_f+0x42>
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	b9 f1       	breq	.+110    	; 0x1ce4 <__fpcmp_parts_f+0xa8>
    1c76:	81 81       	ldd	r24, Z+1	; 0x01
    1c78:	88 23       	and	r24, r24
    1c7a:	89 f1       	breq	.+98     	; 0x1cde <__fpcmp_parts_f+0xa2>
    1c7c:	2d c0       	rjmp	.+90     	; 0x1cd8 <__fpcmp_parts_f+0x9c>
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	1c 91       	ld	r17, X
    1c82:	11 97       	sbiw	r26, 0x01	; 1
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	f1 f0       	breq	.+60     	; 0x1cc4 <__fpcmp_parts_f+0x88>
    1c88:	81 81       	ldd	r24, Z+1	; 0x01
    1c8a:	18 17       	cp	r17, r24
    1c8c:	d9 f4       	brne	.+54     	; 0x1cc4 <__fpcmp_parts_f+0x88>
    1c8e:	12 96       	adiw	r26, 0x02	; 2
    1c90:	2d 91       	ld	r18, X+
    1c92:	3c 91       	ld	r19, X
    1c94:	13 97       	sbiw	r26, 0x03	; 3
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	82 17       	cp	r24, r18
    1c9c:	93 07       	cpc	r25, r19
    1c9e:	94 f0       	brlt	.+36     	; 0x1cc4 <__fpcmp_parts_f+0x88>
    1ca0:	28 17       	cp	r18, r24
    1ca2:	39 07       	cpc	r19, r25
    1ca4:	bc f0       	brlt	.+46     	; 0x1cd4 <__fpcmp_parts_f+0x98>
    1ca6:	14 96       	adiw	r26, 0x04	; 4
    1ca8:	8d 91       	ld	r24, X+
    1caa:	9d 91       	ld	r25, X+
    1cac:	0d 90       	ld	r0, X+
    1cae:	bc 91       	ld	r27, X
    1cb0:	a0 2d       	mov	r26, r0
    1cb2:	24 81       	ldd	r18, Z+4	; 0x04
    1cb4:	35 81       	ldd	r19, Z+5	; 0x05
    1cb6:	46 81       	ldd	r20, Z+6	; 0x06
    1cb8:	57 81       	ldd	r21, Z+7	; 0x07
    1cba:	28 17       	cp	r18, r24
    1cbc:	39 07       	cpc	r19, r25
    1cbe:	4a 07       	cpc	r20, r26
    1cc0:	5b 07       	cpc	r21, r27
    1cc2:	18 f4       	brcc	.+6      	; 0x1cca <__fpcmp_parts_f+0x8e>
    1cc4:	11 23       	and	r17, r17
    1cc6:	41 f0       	breq	.+16     	; 0x1cd8 <__fpcmp_parts_f+0x9c>
    1cc8:	0a c0       	rjmp	.+20     	; 0x1cde <__fpcmp_parts_f+0xa2>
    1cca:	82 17       	cp	r24, r18
    1ccc:	93 07       	cpc	r25, r19
    1cce:	a4 07       	cpc	r26, r20
    1cd0:	b5 07       	cpc	r27, r21
    1cd2:	40 f4       	brcc	.+16     	; 0x1ce4 <__fpcmp_parts_f+0xa8>
    1cd4:	11 23       	and	r17, r17
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <__fpcmp_parts_f+0xa2>
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <__fpcmp_parts_f+0xac>
    1cde:	6f ef       	ldi	r22, 0xFF	; 255
    1ce0:	7f ef       	ldi	r23, 0xFF	; 255
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <__fpcmp_parts_f+0xac>
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	cb 01       	movw	r24, r22
    1cea:	1f 91       	pop	r17
    1cec:	08 95       	ret

00001cee <fdevopen>:
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	eb 01       	movw	r28, r22
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <fdevopen+0x1c>
    1cfe:	61 15       	cp	r22, r1
    1d00:	71 05       	cpc	r23, r1
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <fdevopen+0x1c>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	38 c0       	rjmp	.+112    	; 0x1d7a <fdevopen+0x8c>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	6e e0       	ldi	r22, 0x0E	; 14
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <calloc>
    1d16:	fc 01       	movw	r30, r24
    1d18:	9c 01       	movw	r18, r24
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	71 f1       	breq	.+92     	; 0x1d7a <fdevopen+0x8c>
    1d1e:	80 e8       	ldi	r24, 0x80	; 128
    1d20:	83 83       	std	Z+3, r24	; 0x03
    1d22:	20 97       	sbiw	r28, 0x00	; 0
    1d24:	71 f0       	breq	.+28     	; 0x1d42 <fdevopen+0x54>
    1d26:	d3 87       	std	Z+11, r29	; 0x0b
    1d28:	c2 87       	std	Z+10, r28	; 0x0a
    1d2a:	81 e8       	ldi	r24, 0x81	; 129
    1d2c:	83 83       	std	Z+3, r24	; 0x03
    1d2e:	80 91 a8 02 	lds	r24, 0x02A8
    1d32:	90 91 a9 02 	lds	r25, 0x02A9
    1d36:	89 2b       	or	r24, r25
    1d38:	21 f4       	brne	.+8      	; 0x1d42 <fdevopen+0x54>
    1d3a:	f0 93 a9 02 	sts	0x02A9, r31
    1d3e:	e0 93 a8 02 	sts	0x02A8, r30
    1d42:	01 15       	cp	r16, r1
    1d44:	11 05       	cpc	r17, r1
    1d46:	c9 f0       	breq	.+50     	; 0x1d7a <fdevopen+0x8c>
    1d48:	11 87       	std	Z+9, r17	; 0x09
    1d4a:	00 87       	std	Z+8, r16	; 0x08
    1d4c:	83 81       	ldd	r24, Z+3	; 0x03
    1d4e:	82 60       	ori	r24, 0x02	; 2
    1d50:	83 83       	std	Z+3, r24	; 0x03
    1d52:	80 91 aa 02 	lds	r24, 0x02AA
    1d56:	90 91 ab 02 	lds	r25, 0x02AB
    1d5a:	89 2b       	or	r24, r25
    1d5c:	71 f4       	brne	.+28     	; 0x1d7a <fdevopen+0x8c>
    1d5e:	f0 93 ab 02 	sts	0x02AB, r31
    1d62:	e0 93 aa 02 	sts	0x02AA, r30
    1d66:	80 91 ac 02 	lds	r24, 0x02AC
    1d6a:	90 91 ad 02 	lds	r25, 0x02AD
    1d6e:	89 2b       	or	r24, r25
    1d70:	21 f4       	brne	.+8      	; 0x1d7a <fdevopen+0x8c>
    1d72:	f0 93 ad 02 	sts	0x02AD, r31
    1d76:	e0 93 ac 02 	sts	0x02AC, r30
    1d7a:	c9 01       	movw	r24, r18
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <printf>:
    1d86:	a0 e0       	ldi	r26, 0x00	; 0
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1d8c:	fe e0       	ldi	r31, 0x0E	; 14
    1d8e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__+0x20>
    1d92:	fe 01       	movw	r30, r28
    1d94:	35 96       	adiw	r30, 0x05	; 5
    1d96:	61 91       	ld	r22, Z+
    1d98:	71 91       	ld	r23, Z+
    1d9a:	80 91 aa 02 	lds	r24, 0x02AA
    1d9e:	90 91 ab 02 	lds	r25, 0x02AB
    1da2:	af 01       	movw	r20, r30
    1da4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vfprintf>
    1da8:	20 96       	adiw	r28, 0x00	; 0
    1daa:	e2 e0       	ldi	r30, 0x02	; 2
    1dac:	0c 94 07 13 	jmp	0x260e	; 0x260e <__epilogue_restores__+0x20>

00001db0 <putchar>:
    1db0:	60 91 aa 02 	lds	r22, 0x02AA
    1db4:	70 91 ab 02 	lds	r23, 0x02AB
    1db8:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    1dbc:	08 95       	ret

00001dbe <puts>:
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	8c 01       	movw	r16, r24
    1dc8:	e0 91 aa 02 	lds	r30, 0x02AA
    1dcc:	f0 91 ab 02 	lds	r31, 0x02AB
    1dd0:	83 81       	ldd	r24, Z+3	; 0x03
    1dd2:	81 ff       	sbrs	r24, 1
    1dd4:	21 c0       	rjmp	.+66     	; 0x1e18 <puts+0x5a>
    1dd6:	c0 e0       	ldi	r28, 0x00	; 0
    1dd8:	d0 e0       	ldi	r29, 0x00	; 0
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <puts+0x38>
    1ddc:	e0 91 aa 02 	lds	r30, 0x02AA
    1de0:	f0 91 ab 02 	lds	r31, 0x02AB
    1de4:	20 85       	ldd	r18, Z+8	; 0x08
    1de6:	31 85       	ldd	r19, Z+9	; 0x09
    1de8:	bf 01       	movw	r22, r30
    1dea:	f9 01       	movw	r30, r18
    1dec:	09 95       	icall
    1dee:	89 2b       	or	r24, r25
    1df0:	11 f0       	breq	.+4      	; 0x1df6 <puts+0x38>
    1df2:	cf ef       	ldi	r28, 0xFF	; 255
    1df4:	df ef       	ldi	r29, 0xFF	; 255
    1df6:	f8 01       	movw	r30, r16
    1df8:	81 91       	ld	r24, Z+
    1dfa:	8f 01       	movw	r16, r30
    1dfc:	88 23       	and	r24, r24
    1dfe:	71 f7       	brne	.-36     	; 0x1ddc <puts+0x1e>
    1e00:	e0 91 aa 02 	lds	r30, 0x02AA
    1e04:	f0 91 ab 02 	lds	r31, 0x02AB
    1e08:	20 85       	ldd	r18, Z+8	; 0x08
    1e0a:	31 85       	ldd	r19, Z+9	; 0x09
    1e0c:	8a e0       	ldi	r24, 0x0A	; 10
    1e0e:	bf 01       	movw	r22, r30
    1e10:	f9 01       	movw	r30, r18
    1e12:	09 95       	icall
    1e14:	89 2b       	or	r24, r25
    1e16:	11 f0       	breq	.+4      	; 0x1e1c <puts+0x5e>
    1e18:	cf ef       	ldi	r28, 0xFF	; 255
    1e1a:	df ef       	ldi	r29, 0xFF	; 255
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	08 95       	ret

00001e28 <vfprintf>:
    1e28:	ab e0       	ldi	r26, 0x0B	; 11
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ea e1       	ldi	r30, 0x1A	; 26
    1e2e:	ff e0       	ldi	r31, 0x0F	; 15
    1e30:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__>
    1e34:	3c 01       	movw	r6, r24
    1e36:	2b 01       	movw	r4, r22
    1e38:	5a 01       	movw	r10, r20
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	17 82       	std	Z+7, r1	; 0x07
    1e3e:	16 82       	std	Z+6, r1	; 0x06
    1e40:	83 81       	ldd	r24, Z+3	; 0x03
    1e42:	81 fd       	sbrc	r24, 1
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <vfprintf+0x24>
    1e46:	6f ef       	ldi	r22, 0xFF	; 255
    1e48:	7f ef       	ldi	r23, 0xFF	; 255
    1e4a:	c6 c1       	rjmp	.+908    	; 0x21d8 <vfprintf+0x3b0>
    1e4c:	9a e0       	ldi	r25, 0x0A	; 10
    1e4e:	89 2e       	mov	r8, r25
    1e50:	1e 01       	movw	r2, r28
    1e52:	08 94       	sec
    1e54:	21 1c       	adc	r2, r1
    1e56:	31 1c       	adc	r3, r1
    1e58:	f3 01       	movw	r30, r6
    1e5a:	23 81       	ldd	r18, Z+3	; 0x03
    1e5c:	f2 01       	movw	r30, r4
    1e5e:	23 fd       	sbrc	r18, 3
    1e60:	85 91       	lpm	r24, Z+
    1e62:	23 ff       	sbrs	r18, 3
    1e64:	81 91       	ld	r24, Z+
    1e66:	2f 01       	movw	r4, r30
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <vfprintf+0x46>
    1e6c:	b2 c1       	rjmp	.+868    	; 0x21d2 <vfprintf+0x3aa>
    1e6e:	85 32       	cpi	r24, 0x25	; 37
    1e70:	39 f4       	brne	.+14     	; 0x1e80 <vfprintf+0x58>
    1e72:	23 fd       	sbrc	r18, 3
    1e74:	85 91       	lpm	r24, Z+
    1e76:	23 ff       	sbrs	r18, 3
    1e78:	81 91       	ld	r24, Z+
    1e7a:	2f 01       	movw	r4, r30
    1e7c:	85 32       	cpi	r24, 0x25	; 37
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <vfprintf+0x62>
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	b3 01       	movw	r22, r6
    1e84:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    1e88:	e7 cf       	rjmp	.-50     	; 0x1e58 <vfprintf+0x30>
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	ff 24       	eor	r15, r15
    1e8e:	ee 24       	eor	r14, r14
    1e90:	99 24       	eor	r9, r9
    1e92:	ff e1       	ldi	r31, 0x1F	; 31
    1e94:	ff 15       	cp	r31, r15
    1e96:	d0 f0       	brcs	.+52     	; 0x1ecc <vfprintf+0xa4>
    1e98:	9b 32       	cpi	r25, 0x2B	; 43
    1e9a:	69 f0       	breq	.+26     	; 0x1eb6 <vfprintf+0x8e>
    1e9c:	9c 32       	cpi	r25, 0x2C	; 44
    1e9e:	28 f4       	brcc	.+10     	; 0x1eaa <vfprintf+0x82>
    1ea0:	90 32       	cpi	r25, 0x20	; 32
    1ea2:	59 f0       	breq	.+22     	; 0x1eba <vfprintf+0x92>
    1ea4:	93 32       	cpi	r25, 0x23	; 35
    1ea6:	91 f4       	brne	.+36     	; 0x1ecc <vfprintf+0xa4>
    1ea8:	0e c0       	rjmp	.+28     	; 0x1ec6 <vfprintf+0x9e>
    1eaa:	9d 32       	cpi	r25, 0x2D	; 45
    1eac:	49 f0       	breq	.+18     	; 0x1ec0 <vfprintf+0x98>
    1eae:	90 33       	cpi	r25, 0x30	; 48
    1eb0:	69 f4       	brne	.+26     	; 0x1ecc <vfprintf+0xa4>
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	24 c0       	rjmp	.+72     	; 0x1efe <vfprintf+0xd6>
    1eb6:	52 e0       	ldi	r21, 0x02	; 2
    1eb8:	f5 2a       	or	r15, r21
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	f8 2a       	or	r15, r24
    1ebe:	28 c0       	rjmp	.+80     	; 0x1f10 <vfprintf+0xe8>
    1ec0:	98 e0       	ldi	r25, 0x08	; 8
    1ec2:	f9 2a       	or	r15, r25
    1ec4:	25 c0       	rjmp	.+74     	; 0x1f10 <vfprintf+0xe8>
    1ec6:	e0 e1       	ldi	r30, 0x10	; 16
    1ec8:	fe 2a       	or	r15, r30
    1eca:	22 c0       	rjmp	.+68     	; 0x1f10 <vfprintf+0xe8>
    1ecc:	f7 fc       	sbrc	r15, 7
    1ece:	29 c0       	rjmp	.+82     	; 0x1f22 <vfprintf+0xfa>
    1ed0:	89 2f       	mov	r24, r25
    1ed2:	80 53       	subi	r24, 0x30	; 48
    1ed4:	8a 30       	cpi	r24, 0x0A	; 10
    1ed6:	70 f4       	brcc	.+28     	; 0x1ef4 <vfprintf+0xcc>
    1ed8:	f6 fe       	sbrs	r15, 6
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <vfprintf+0xbe>
    1edc:	98 9c       	mul	r9, r8
    1ede:	90 2c       	mov	r9, r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	98 0e       	add	r9, r24
    1ee4:	15 c0       	rjmp	.+42     	; 0x1f10 <vfprintf+0xe8>
    1ee6:	e8 9c       	mul	r14, r8
    1ee8:	e0 2c       	mov	r14, r0
    1eea:	11 24       	eor	r1, r1
    1eec:	e8 0e       	add	r14, r24
    1eee:	f0 e2       	ldi	r31, 0x20	; 32
    1ef0:	ff 2a       	or	r15, r31
    1ef2:	0e c0       	rjmp	.+28     	; 0x1f10 <vfprintf+0xe8>
    1ef4:	9e 32       	cpi	r25, 0x2E	; 46
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <vfprintf+0xda>
    1ef8:	f6 fc       	sbrc	r15, 6
    1efa:	6b c1       	rjmp	.+726    	; 0x21d2 <vfprintf+0x3aa>
    1efc:	40 e4       	ldi	r20, 0x40	; 64
    1efe:	f4 2a       	or	r15, r20
    1f00:	07 c0       	rjmp	.+14     	; 0x1f10 <vfprintf+0xe8>
    1f02:	9c 36       	cpi	r25, 0x6C	; 108
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <vfprintf+0xe4>
    1f06:	50 e8       	ldi	r21, 0x80	; 128
    1f08:	f5 2a       	or	r15, r21
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <vfprintf+0xe8>
    1f0c:	98 36       	cpi	r25, 0x68	; 104
    1f0e:	49 f4       	brne	.+18     	; 0x1f22 <vfprintf+0xfa>
    1f10:	f2 01       	movw	r30, r4
    1f12:	23 fd       	sbrc	r18, 3
    1f14:	95 91       	lpm	r25, Z+
    1f16:	23 ff       	sbrs	r18, 3
    1f18:	91 91       	ld	r25, Z+
    1f1a:	2f 01       	movw	r4, r30
    1f1c:	99 23       	and	r25, r25
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <vfprintf+0xfa>
    1f20:	b8 cf       	rjmp	.-144    	; 0x1e92 <vfprintf+0x6a>
    1f22:	89 2f       	mov	r24, r25
    1f24:	85 54       	subi	r24, 0x45	; 69
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	18 f0       	brcs	.+6      	; 0x1f30 <vfprintf+0x108>
    1f2a:	80 52       	subi	r24, 0x20	; 32
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	38 f4       	brcc	.+14     	; 0x1f3e <vfprintf+0x116>
    1f30:	44 e0       	ldi	r20, 0x04	; 4
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	a4 0e       	add	r10, r20
    1f36:	b5 1e       	adc	r11, r21
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	59 83       	std	Y+1, r21	; 0x01
    1f3c:	0f c0       	rjmp	.+30     	; 0x1f5c <vfprintf+0x134>
    1f3e:	93 36       	cpi	r25, 0x63	; 99
    1f40:	31 f0       	breq	.+12     	; 0x1f4e <vfprintf+0x126>
    1f42:	93 37       	cpi	r25, 0x73	; 115
    1f44:	79 f0       	breq	.+30     	; 0x1f64 <vfprintf+0x13c>
    1f46:	93 35       	cpi	r25, 0x53	; 83
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <vfprintf+0x124>
    1f4a:	56 c0       	rjmp	.+172    	; 0x1ff8 <vfprintf+0x1d0>
    1f4c:	20 c0       	rjmp	.+64     	; 0x1f8e <vfprintf+0x166>
    1f4e:	f5 01       	movw	r30, r10
    1f50:	80 81       	ld	r24, Z
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	42 e0       	ldi	r20, 0x02	; 2
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	a4 0e       	add	r10, r20
    1f5a:	b5 1e       	adc	r11, r21
    1f5c:	61 01       	movw	r12, r2
    1f5e:	01 e0       	ldi	r16, 0x01	; 1
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	12 c0       	rjmp	.+36     	; 0x1f88 <vfprintf+0x160>
    1f64:	f5 01       	movw	r30, r10
    1f66:	c0 80       	ld	r12, Z
    1f68:	d1 80       	ldd	r13, Z+1	; 0x01
    1f6a:	f6 fc       	sbrc	r15, 6
    1f6c:	03 c0       	rjmp	.+6      	; 0x1f74 <vfprintf+0x14c>
    1f6e:	6f ef       	ldi	r22, 0xFF	; 255
    1f70:	7f ef       	ldi	r23, 0xFF	; 255
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x150>
    1f74:	69 2d       	mov	r22, r9
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	42 e0       	ldi	r20, 0x02	; 2
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	a4 0e       	add	r10, r20
    1f7e:	b5 1e       	adc	r11, r21
    1f80:	c6 01       	movw	r24, r12
    1f82:	0e 94 24 12 	call	0x2448	; 0x2448 <strnlen>
    1f86:	8c 01       	movw	r16, r24
    1f88:	5f e7       	ldi	r21, 0x7F	; 127
    1f8a:	f5 22       	and	r15, r21
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <vfprintf+0x18e>
    1f8e:	f5 01       	movw	r30, r10
    1f90:	c0 80       	ld	r12, Z
    1f92:	d1 80       	ldd	r13, Z+1	; 0x01
    1f94:	f6 fc       	sbrc	r15, 6
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <vfprintf+0x176>
    1f98:	6f ef       	ldi	r22, 0xFF	; 255
    1f9a:	7f ef       	ldi	r23, 0xFF	; 255
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <vfprintf+0x17a>
    1f9e:	69 2d       	mov	r22, r9
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	42 e0       	ldi	r20, 0x02	; 2
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	a4 0e       	add	r10, r20
    1fa8:	b5 1e       	adc	r11, r21
    1faa:	c6 01       	movw	r24, r12
    1fac:	0e 94 12 12 	call	0x2424	; 0x2424 <strnlen_P>
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	50 e8       	ldi	r21, 0x80	; 128
    1fb4:	f5 2a       	or	r15, r21
    1fb6:	f3 fe       	sbrs	r15, 3
    1fb8:	07 c0       	rjmp	.+14     	; 0x1fc8 <vfprintf+0x1a0>
    1fba:	1a c0       	rjmp	.+52     	; 0x1ff0 <vfprintf+0x1c8>
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	b3 01       	movw	r22, r6
    1fc2:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    1fc6:	ea 94       	dec	r14
    1fc8:	8e 2d       	mov	r24, r14
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	08 17       	cp	r16, r24
    1fce:	19 07       	cpc	r17, r25
    1fd0:	a8 f3       	brcs	.-22     	; 0x1fbc <vfprintf+0x194>
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <vfprintf+0x1c8>
    1fd4:	f6 01       	movw	r30, r12
    1fd6:	f7 fc       	sbrc	r15, 7
    1fd8:	85 91       	lpm	r24, Z+
    1fda:	f7 fe       	sbrs	r15, 7
    1fdc:	81 91       	ld	r24, Z+
    1fde:	6f 01       	movw	r12, r30
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	b3 01       	movw	r22, r6
    1fe4:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    1fe8:	e1 10       	cpse	r14, r1
    1fea:	ea 94       	dec	r14
    1fec:	01 50       	subi	r16, 0x01	; 1
    1fee:	10 40       	sbci	r17, 0x00	; 0
    1ff0:	01 15       	cp	r16, r1
    1ff2:	11 05       	cpc	r17, r1
    1ff4:	79 f7       	brne	.-34     	; 0x1fd4 <vfprintf+0x1ac>
    1ff6:	ea c0       	rjmp	.+468    	; 0x21cc <vfprintf+0x3a4>
    1ff8:	94 36       	cpi	r25, 0x64	; 100
    1ffa:	11 f0       	breq	.+4      	; 0x2000 <vfprintf+0x1d8>
    1ffc:	99 36       	cpi	r25, 0x69	; 105
    1ffe:	69 f5       	brne	.+90     	; 0x205a <vfprintf+0x232>
    2000:	f7 fe       	sbrs	r15, 7
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <vfprintf+0x1ec>
    2004:	f5 01       	movw	r30, r10
    2006:	20 81       	ld	r18, Z
    2008:	31 81       	ldd	r19, Z+1	; 0x01
    200a:	42 81       	ldd	r20, Z+2	; 0x02
    200c:	53 81       	ldd	r21, Z+3	; 0x03
    200e:	84 e0       	ldi	r24, 0x04	; 4
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0a c0       	rjmp	.+20     	; 0x2028 <vfprintf+0x200>
    2014:	f5 01       	movw	r30, r10
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	9c 01       	movw	r18, r24
    201c:	44 27       	eor	r20, r20
    201e:	37 fd       	sbrc	r19, 7
    2020:	40 95       	com	r20
    2022:	54 2f       	mov	r21, r20
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a8 0e       	add	r10, r24
    202a:	b9 1e       	adc	r11, r25
    202c:	9f e6       	ldi	r25, 0x6F	; 111
    202e:	f9 22       	and	r15, r25
    2030:	57 ff       	sbrs	r21, 7
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <vfprintf+0x21e>
    2034:	50 95       	com	r21
    2036:	40 95       	com	r20
    2038:	30 95       	com	r19
    203a:	21 95       	neg	r18
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	4f 4f       	sbci	r20, 0xFF	; 255
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	e0 e8       	ldi	r30, 0x80	; 128
    2044:	fe 2a       	or	r15, r30
    2046:	ca 01       	movw	r24, r20
    2048:	b9 01       	movw	r22, r18
    204a:	a1 01       	movw	r20, r2
    204c:	2a e0       	ldi	r18, 0x0A	; 10
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__ultoa_invert>
    2054:	d8 2e       	mov	r13, r24
    2056:	d2 18       	sub	r13, r2
    2058:	40 c0       	rjmp	.+128    	; 0x20da <vfprintf+0x2b2>
    205a:	95 37       	cpi	r25, 0x75	; 117
    205c:	29 f4       	brne	.+10     	; 0x2068 <vfprintf+0x240>
    205e:	1f 2d       	mov	r17, r15
    2060:	1f 7e       	andi	r17, 0xEF	; 239
    2062:	2a e0       	ldi	r18, 0x0A	; 10
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	1d c0       	rjmp	.+58     	; 0x20a2 <vfprintf+0x27a>
    2068:	1f 2d       	mov	r17, r15
    206a:	19 7f       	andi	r17, 0xF9	; 249
    206c:	9f 36       	cpi	r25, 0x6F	; 111
    206e:	61 f0       	breq	.+24     	; 0x2088 <vfprintf+0x260>
    2070:	90 37       	cpi	r25, 0x70	; 112
    2072:	20 f4       	brcc	.+8      	; 0x207c <vfprintf+0x254>
    2074:	98 35       	cpi	r25, 0x58	; 88
    2076:	09 f0       	breq	.+2      	; 0x207a <vfprintf+0x252>
    2078:	ac c0       	rjmp	.+344    	; 0x21d2 <vfprintf+0x3aa>
    207a:	0f c0       	rjmp	.+30     	; 0x209a <vfprintf+0x272>
    207c:	90 37       	cpi	r25, 0x70	; 112
    207e:	39 f0       	breq	.+14     	; 0x208e <vfprintf+0x266>
    2080:	98 37       	cpi	r25, 0x78	; 120
    2082:	09 f0       	breq	.+2      	; 0x2086 <vfprintf+0x25e>
    2084:	a6 c0       	rjmp	.+332    	; 0x21d2 <vfprintf+0x3aa>
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <vfprintf+0x268>
    2088:	28 e0       	ldi	r18, 0x08	; 8
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	0a c0       	rjmp	.+20     	; 0x20a2 <vfprintf+0x27a>
    208e:	10 61       	ori	r17, 0x10	; 16
    2090:	14 fd       	sbrc	r17, 4
    2092:	14 60       	ori	r17, 0x04	; 4
    2094:	20 e1       	ldi	r18, 0x10	; 16
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <vfprintf+0x27a>
    209a:	14 fd       	sbrc	r17, 4
    209c:	16 60       	ori	r17, 0x06	; 6
    209e:	20 e1       	ldi	r18, 0x10	; 16
    20a0:	32 e0       	ldi	r19, 0x02	; 2
    20a2:	17 ff       	sbrs	r17, 7
    20a4:	08 c0       	rjmp	.+16     	; 0x20b6 <vfprintf+0x28e>
    20a6:	f5 01       	movw	r30, r10
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	44 e0       	ldi	r20, 0x04	; 4
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	08 c0       	rjmp	.+16     	; 0x20c6 <vfprintf+0x29e>
    20b6:	f5 01       	movw	r30, r10
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	bc 01       	movw	r22, r24
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	42 e0       	ldi	r20, 0x02	; 2
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	a4 0e       	add	r10, r20
    20c8:	b5 1e       	adc	r11, r21
    20ca:	a1 01       	movw	r20, r2
    20cc:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__ultoa_invert>
    20d0:	d8 2e       	mov	r13, r24
    20d2:	d2 18       	sub	r13, r2
    20d4:	8f e7       	ldi	r24, 0x7F	; 127
    20d6:	f8 2e       	mov	r15, r24
    20d8:	f1 22       	and	r15, r17
    20da:	f6 fe       	sbrs	r15, 6
    20dc:	0b c0       	rjmp	.+22     	; 0x20f4 <vfprintf+0x2cc>
    20de:	5e ef       	ldi	r21, 0xFE	; 254
    20e0:	f5 22       	and	r15, r21
    20e2:	d9 14       	cp	r13, r9
    20e4:	38 f4       	brcc	.+14     	; 0x20f4 <vfprintf+0x2cc>
    20e6:	f4 fe       	sbrs	r15, 4
    20e8:	07 c0       	rjmp	.+14     	; 0x20f8 <vfprintf+0x2d0>
    20ea:	f2 fc       	sbrc	r15, 2
    20ec:	05 c0       	rjmp	.+10     	; 0x20f8 <vfprintf+0x2d0>
    20ee:	8f ee       	ldi	r24, 0xEF	; 239
    20f0:	f8 22       	and	r15, r24
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x2d0>
    20f4:	1d 2d       	mov	r17, r13
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <vfprintf+0x2d2>
    20f8:	19 2d       	mov	r17, r9
    20fa:	f4 fe       	sbrs	r15, 4
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <vfprintf+0x2f0>
    20fe:	fe 01       	movw	r30, r28
    2100:	ed 0d       	add	r30, r13
    2102:	f1 1d       	adc	r31, r1
    2104:	80 81       	ld	r24, Z
    2106:	80 33       	cpi	r24, 0x30	; 48
    2108:	19 f4       	brne	.+6      	; 0x2110 <vfprintf+0x2e8>
    210a:	99 ee       	ldi	r25, 0xE9	; 233
    210c:	f9 22       	and	r15, r25
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <vfprintf+0x2f8>
    2110:	1f 5f       	subi	r17, 0xFF	; 255
    2112:	f2 fe       	sbrs	r15, 2
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <vfprintf+0x2f8>
    2116:	03 c0       	rjmp	.+6      	; 0x211e <vfprintf+0x2f6>
    2118:	8f 2d       	mov	r24, r15
    211a:	86 78       	andi	r24, 0x86	; 134
    211c:	09 f0       	breq	.+2      	; 0x2120 <vfprintf+0x2f8>
    211e:	1f 5f       	subi	r17, 0xFF	; 255
    2120:	0f 2d       	mov	r16, r15
    2122:	f3 fc       	sbrc	r15, 3
    2124:	14 c0       	rjmp	.+40     	; 0x214e <vfprintf+0x326>
    2126:	f0 fe       	sbrs	r15, 0
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <vfprintf+0x320>
    212a:	1e 15       	cp	r17, r14
    212c:	10 f0       	brcs	.+4      	; 0x2132 <vfprintf+0x30a>
    212e:	9d 2c       	mov	r9, r13
    2130:	0b c0       	rjmp	.+22     	; 0x2148 <vfprintf+0x320>
    2132:	9d 2c       	mov	r9, r13
    2134:	9e 0c       	add	r9, r14
    2136:	91 1a       	sub	r9, r17
    2138:	1e 2d       	mov	r17, r14
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <vfprintf+0x320>
    213c:	80 e2       	ldi	r24, 0x20	; 32
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	b3 01       	movw	r22, r6
    2142:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    2146:	1f 5f       	subi	r17, 0xFF	; 255
    2148:	1e 15       	cp	r17, r14
    214a:	c0 f3       	brcs	.-16     	; 0x213c <vfprintf+0x314>
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <vfprintf+0x32e>
    214e:	1e 15       	cp	r17, r14
    2150:	10 f4       	brcc	.+4      	; 0x2156 <vfprintf+0x32e>
    2152:	e1 1a       	sub	r14, r17
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <vfprintf+0x330>
    2156:	ee 24       	eor	r14, r14
    2158:	04 ff       	sbrs	r16, 4
    215a:	0f c0       	rjmp	.+30     	; 0x217a <vfprintf+0x352>
    215c:	80 e3       	ldi	r24, 0x30	; 48
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	b3 01       	movw	r22, r6
    2162:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    2166:	02 ff       	sbrs	r16, 2
    2168:	1d c0       	rjmp	.+58     	; 0x21a4 <vfprintf+0x37c>
    216a:	01 fd       	sbrc	r16, 1
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <vfprintf+0x34c>
    216e:	88 e7       	ldi	r24, 0x78	; 120
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <vfprintf+0x368>
    2174:	88 e5       	ldi	r24, 0x58	; 88
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <vfprintf+0x368>
    217a:	80 2f       	mov	r24, r16
    217c:	86 78       	andi	r24, 0x86	; 134
    217e:	91 f0       	breq	.+36     	; 0x21a4 <vfprintf+0x37c>
    2180:	01 ff       	sbrs	r16, 1
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <vfprintf+0x360>
    2184:	8b e2       	ldi	r24, 0x2B	; 43
    2186:	01 c0       	rjmp	.+2      	; 0x218a <vfprintf+0x362>
    2188:	80 e2       	ldi	r24, 0x20	; 32
    218a:	f7 fc       	sbrc	r15, 7
    218c:	8d e2       	ldi	r24, 0x2D	; 45
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	b3 01       	movw	r22, r6
    2192:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <vfprintf+0x37c>
    2198:	80 e3       	ldi	r24, 0x30	; 48
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	b3 01       	movw	r22, r6
    219e:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    21a2:	9a 94       	dec	r9
    21a4:	d9 14       	cp	r13, r9
    21a6:	c0 f3       	brcs	.-16     	; 0x2198 <vfprintf+0x370>
    21a8:	da 94       	dec	r13
    21aa:	f1 01       	movw	r30, r2
    21ac:	ed 0d       	add	r30, r13
    21ae:	f1 1d       	adc	r31, r1
    21b0:	80 81       	ld	r24, Z
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	b3 01       	movw	r22, r6
    21b6:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    21ba:	dd 20       	and	r13, r13
    21bc:	a9 f7       	brne	.-22     	; 0x21a8 <vfprintf+0x380>
    21be:	06 c0       	rjmp	.+12     	; 0x21cc <vfprintf+0x3a4>
    21c0:	80 e2       	ldi	r24, 0x20	; 32
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	b3 01       	movw	r22, r6
    21c6:	0e 94 2f 12 	call	0x245e	; 0x245e <fputc>
    21ca:	ea 94       	dec	r14
    21cc:	ee 20       	and	r14, r14
    21ce:	c1 f7       	brne	.-16     	; 0x21c0 <vfprintf+0x398>
    21d0:	43 ce       	rjmp	.-890    	; 0x1e58 <vfprintf+0x30>
    21d2:	f3 01       	movw	r30, r6
    21d4:	66 81       	ldd	r22, Z+6	; 0x06
    21d6:	77 81       	ldd	r23, Z+7	; 0x07
    21d8:	cb 01       	movw	r24, r22
    21da:	2b 96       	adiw	r28, 0x0b	; 11
    21dc:	e2 e1       	ldi	r30, 0x12	; 18
    21de:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__>

000021e2 <calloc>:
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	68 9f       	mul	r22, r24
    21ec:	80 01       	movw	r16, r0
    21ee:	69 9f       	mul	r22, r25
    21f0:	10 0d       	add	r17, r0
    21f2:	78 9f       	mul	r23, r24
    21f4:	10 0d       	add	r17, r0
    21f6:	11 24       	eor	r1, r1
    21f8:	c8 01       	movw	r24, r16
    21fa:	0e 94 0d 11 	call	0x221a	; 0x221a <malloc>
    21fe:	ec 01       	movw	r28, r24
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	29 f0       	breq	.+10     	; 0x220e <calloc+0x2c>
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	a8 01       	movw	r20, r16
    220a:	0e 94 1d 12 	call	0x243a	; 0x243a <memset>
    220e:	ce 01       	movw	r24, r28
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	08 95       	ret

0000221a <malloc>:
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	bc 01       	movw	r22, r24
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	91 05       	cpc	r25, r1
    2224:	10 f4       	brcc	.+4      	; 0x222a <malloc+0x10>
    2226:	62 e0       	ldi	r22, 0x02	; 2
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	a0 91 b0 02 	lds	r26, 0x02B0
    222e:	b0 91 b1 02 	lds	r27, 0x02B1
    2232:	ed 01       	movw	r28, r26
    2234:	e0 e0       	ldi	r30, 0x00	; 0
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	21 c0       	rjmp	.+66     	; 0x2280 <malloc+0x66>
    223e:	88 81       	ld	r24, Y
    2240:	99 81       	ldd	r25, Y+1	; 0x01
    2242:	86 17       	cp	r24, r22
    2244:	97 07       	cpc	r25, r23
    2246:	69 f4       	brne	.+26     	; 0x2262 <malloc+0x48>
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	30 97       	sbiw	r30, 0x00	; 0
    224e:	19 f0       	breq	.+6      	; 0x2256 <malloc+0x3c>
    2250:	93 83       	std	Z+3, r25	; 0x03
    2252:	82 83       	std	Z+2, r24	; 0x02
    2254:	04 c0       	rjmp	.+8      	; 0x225e <malloc+0x44>
    2256:	90 93 b1 02 	sts	0x02B1, r25
    225a:	80 93 b0 02 	sts	0x02B0, r24
    225e:	fe 01       	movw	r30, r28
    2260:	34 c0       	rjmp	.+104    	; 0x22ca <malloc+0xb0>
    2262:	68 17       	cp	r22, r24
    2264:	79 07       	cpc	r23, r25
    2266:	38 f4       	brcc	.+14     	; 0x2276 <malloc+0x5c>
    2268:	41 15       	cp	r20, r1
    226a:	51 05       	cpc	r21, r1
    226c:	19 f0       	breq	.+6      	; 0x2274 <malloc+0x5a>
    226e:	84 17       	cp	r24, r20
    2270:	95 07       	cpc	r25, r21
    2272:	08 f4       	brcc	.+2      	; 0x2276 <malloc+0x5c>
    2274:	ac 01       	movw	r20, r24
    2276:	fe 01       	movw	r30, r28
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	9c 01       	movw	r18, r24
    227e:	e9 01       	movw	r28, r18
    2280:	20 97       	sbiw	r28, 0x00	; 0
    2282:	e9 f6       	brne	.-70     	; 0x223e <malloc+0x24>
    2284:	41 15       	cp	r20, r1
    2286:	51 05       	cpc	r21, r1
    2288:	a9 f1       	breq	.+106    	; 0x22f4 <malloc+0xda>
    228a:	ca 01       	movw	r24, r20
    228c:	86 1b       	sub	r24, r22
    228e:	97 0b       	sbc	r25, r23
    2290:	04 97       	sbiw	r24, 0x04	; 4
    2292:	08 f4       	brcc	.+2      	; 0x2296 <malloc+0x7c>
    2294:	ba 01       	movw	r22, r20
    2296:	e0 e0       	ldi	r30, 0x00	; 0
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	2a c0       	rjmp	.+84     	; 0x22f0 <malloc+0xd6>
    229c:	8d 91       	ld	r24, X+
    229e:	9c 91       	ld	r25, X
    22a0:	11 97       	sbiw	r26, 0x01	; 1
    22a2:	84 17       	cp	r24, r20
    22a4:	95 07       	cpc	r25, r21
    22a6:	f9 f4       	brne	.+62     	; 0x22e6 <malloc+0xcc>
    22a8:	64 17       	cp	r22, r20
    22aa:	75 07       	cpc	r23, r21
    22ac:	81 f4       	brne	.+32     	; 0x22ce <malloc+0xb4>
    22ae:	12 96       	adiw	r26, 0x02	; 2
    22b0:	8d 91       	ld	r24, X+
    22b2:	9c 91       	ld	r25, X
    22b4:	13 97       	sbiw	r26, 0x03	; 3
    22b6:	30 97       	sbiw	r30, 0x00	; 0
    22b8:	19 f0       	breq	.+6      	; 0x22c0 <malloc+0xa6>
    22ba:	93 83       	std	Z+3, r25	; 0x03
    22bc:	82 83       	std	Z+2, r24	; 0x02
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <malloc+0xae>
    22c0:	90 93 b1 02 	sts	0x02B1, r25
    22c4:	80 93 b0 02 	sts	0x02B0, r24
    22c8:	fd 01       	movw	r30, r26
    22ca:	32 96       	adiw	r30, 0x02	; 2
    22cc:	4f c0       	rjmp	.+158    	; 0x236c <malloc+0x152>
    22ce:	ca 01       	movw	r24, r20
    22d0:	86 1b       	sub	r24, r22
    22d2:	97 0b       	sbc	r25, r23
    22d4:	fd 01       	movw	r30, r26
    22d6:	e8 0f       	add	r30, r24
    22d8:	f9 1f       	adc	r31, r25
    22da:	61 93       	st	Z+, r22
    22dc:	71 93       	st	Z+, r23
    22de:	02 97       	sbiw	r24, 0x02	; 2
    22e0:	8d 93       	st	X+, r24
    22e2:	9c 93       	st	X, r25
    22e4:	43 c0       	rjmp	.+134    	; 0x236c <malloc+0x152>
    22e6:	fd 01       	movw	r30, r26
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	9c 01       	movw	r18, r24
    22ee:	d9 01       	movw	r26, r18
    22f0:	10 97       	sbiw	r26, 0x00	; 0
    22f2:	a1 f6       	brne	.-88     	; 0x229c <malloc+0x82>
    22f4:	80 91 ae 02 	lds	r24, 0x02AE
    22f8:	90 91 af 02 	lds	r25, 0x02AF
    22fc:	89 2b       	or	r24, r25
    22fe:	41 f4       	brne	.+16     	; 0x2310 <malloc+0xf6>
    2300:	80 91 a3 02 	lds	r24, 0x02A3
    2304:	90 91 a4 02 	lds	r25, 0x02A4
    2308:	90 93 af 02 	sts	0x02AF, r25
    230c:	80 93 ae 02 	sts	0x02AE, r24
    2310:	40 91 a5 02 	lds	r20, 0x02A5
    2314:	50 91 a6 02 	lds	r21, 0x02A6
    2318:	41 15       	cp	r20, r1
    231a:	51 05       	cpc	r21, r1
    231c:	41 f4       	brne	.+16     	; 0x232e <malloc+0x114>
    231e:	4d b7       	in	r20, 0x3d	; 61
    2320:	5e b7       	in	r21, 0x3e	; 62
    2322:	80 91 a1 02 	lds	r24, 0x02A1
    2326:	90 91 a2 02 	lds	r25, 0x02A2
    232a:	48 1b       	sub	r20, r24
    232c:	59 0b       	sbc	r21, r25
    232e:	20 91 ae 02 	lds	r18, 0x02AE
    2332:	30 91 af 02 	lds	r19, 0x02AF
    2336:	24 17       	cp	r18, r20
    2338:	35 07       	cpc	r19, r21
    233a:	b0 f4       	brcc	.+44     	; 0x2368 <malloc+0x14e>
    233c:	ca 01       	movw	r24, r20
    233e:	82 1b       	sub	r24, r18
    2340:	93 0b       	sbc	r25, r19
    2342:	86 17       	cp	r24, r22
    2344:	97 07       	cpc	r25, r23
    2346:	80 f0       	brcs	.+32     	; 0x2368 <malloc+0x14e>
    2348:	ab 01       	movw	r20, r22
    234a:	4e 5f       	subi	r20, 0xFE	; 254
    234c:	5f 4f       	sbci	r21, 0xFF	; 255
    234e:	84 17       	cp	r24, r20
    2350:	95 07       	cpc	r25, r21
    2352:	50 f0       	brcs	.+20     	; 0x2368 <malloc+0x14e>
    2354:	42 0f       	add	r20, r18
    2356:	53 1f       	adc	r21, r19
    2358:	50 93 af 02 	sts	0x02AF, r21
    235c:	40 93 ae 02 	sts	0x02AE, r20
    2360:	f9 01       	movw	r30, r18
    2362:	61 93       	st	Z+, r22
    2364:	71 93       	st	Z+, r23
    2366:	02 c0       	rjmp	.+4      	; 0x236c <malloc+0x152>
    2368:	e0 e0       	ldi	r30, 0x00	; 0
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	cf 01       	movw	r24, r30
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	08 95       	ret

00002374 <free>:
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	09 f4       	brne	.+2      	; 0x237e <free+0xa>
    237c:	50 c0       	rjmp	.+160    	; 0x241e <free+0xaa>
    237e:	ec 01       	movw	r28, r24
    2380:	22 97       	sbiw	r28, 0x02	; 2
    2382:	1b 82       	std	Y+3, r1	; 0x03
    2384:	1a 82       	std	Y+2, r1	; 0x02
    2386:	a0 91 b0 02 	lds	r26, 0x02B0
    238a:	b0 91 b1 02 	lds	r27, 0x02B1
    238e:	10 97       	sbiw	r26, 0x00	; 0
    2390:	09 f1       	breq	.+66     	; 0x23d4 <free+0x60>
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	ac 17       	cp	r26, r28
    2398:	bd 07       	cpc	r27, r29
    239a:	08 f1       	brcs	.+66     	; 0x23de <free+0x6a>
    239c:	bb 83       	std	Y+3, r27	; 0x03
    239e:	aa 83       	std	Y+2, r26	; 0x02
    23a0:	fe 01       	movw	r30, r28
    23a2:	21 91       	ld	r18, Z+
    23a4:	31 91       	ld	r19, Z+
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	ae 17       	cp	r26, r30
    23ac:	bf 07       	cpc	r27, r31
    23ae:	79 f4       	brne	.+30     	; 0x23ce <free+0x5a>
    23b0:	8d 91       	ld	r24, X+
    23b2:	9c 91       	ld	r25, X
    23b4:	11 97       	sbiw	r26, 0x01	; 1
    23b6:	28 0f       	add	r18, r24
    23b8:	39 1f       	adc	r19, r25
    23ba:	2e 5f       	subi	r18, 0xFE	; 254
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	39 83       	std	Y+1, r19	; 0x01
    23c0:	28 83       	st	Y, r18
    23c2:	12 96       	adiw	r26, 0x02	; 2
    23c4:	8d 91       	ld	r24, X+
    23c6:	9c 91       	ld	r25, X
    23c8:	13 97       	sbiw	r26, 0x03	; 3
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	41 15       	cp	r20, r1
    23d0:	51 05       	cpc	r21, r1
    23d2:	71 f4       	brne	.+28     	; 0x23f0 <free+0x7c>
    23d4:	d0 93 b1 02 	sts	0x02B1, r29
    23d8:	c0 93 b0 02 	sts	0x02B0, r28
    23dc:	20 c0       	rjmp	.+64     	; 0x241e <free+0xaa>
    23de:	12 96       	adiw	r26, 0x02	; 2
    23e0:	8d 91       	ld	r24, X+
    23e2:	9c 91       	ld	r25, X
    23e4:	13 97       	sbiw	r26, 0x03	; 3
    23e6:	ad 01       	movw	r20, r26
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	11 f0       	breq	.+4      	; 0x23f0 <free+0x7c>
    23ec:	dc 01       	movw	r26, r24
    23ee:	d3 cf       	rjmp	.-90     	; 0x2396 <free+0x22>
    23f0:	fa 01       	movw	r30, r20
    23f2:	d3 83       	std	Z+3, r29	; 0x03
    23f4:	c2 83       	std	Z+2, r28	; 0x02
    23f6:	21 91       	ld	r18, Z+
    23f8:	31 91       	ld	r19, Z+
    23fa:	e2 0f       	add	r30, r18
    23fc:	f3 1f       	adc	r31, r19
    23fe:	ce 17       	cp	r28, r30
    2400:	df 07       	cpc	r29, r31
    2402:	69 f4       	brne	.+26     	; 0x241e <free+0xaa>
    2404:	88 81       	ld	r24, Y
    2406:	99 81       	ldd	r25, Y+1	; 0x01
    2408:	28 0f       	add	r18, r24
    240a:	39 1f       	adc	r19, r25
    240c:	2e 5f       	subi	r18, 0xFE	; 254
    240e:	3f 4f       	sbci	r19, 0xFF	; 255
    2410:	fa 01       	movw	r30, r20
    2412:	31 83       	std	Z+1, r19	; 0x01
    2414:	20 83       	st	Z, r18
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	9b 81       	ldd	r25, Y+3	; 0x03
    241a:	93 83       	std	Z+3, r25	; 0x03
    241c:	82 83       	std	Z+2, r24	; 0x02
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	08 95       	ret

00002424 <strnlen_P>:
    2424:	fc 01       	movw	r30, r24
    2426:	05 90       	lpm	r0, Z+
    2428:	61 50       	subi	r22, 0x01	; 1
    242a:	70 40       	sbci	r23, 0x00	; 0
    242c:	01 10       	cpse	r0, r1
    242e:	d8 f7       	brcc	.-10     	; 0x2426 <strnlen_P+0x2>
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	8e 0f       	add	r24, r30
    2436:	9f 1f       	adc	r25, r31
    2438:	08 95       	ret

0000243a <memset>:
    243a:	dc 01       	movw	r26, r24
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <memset+0x6>
    243e:	6d 93       	st	X+, r22
    2440:	41 50       	subi	r20, 0x01	; 1
    2442:	50 40       	sbci	r21, 0x00	; 0
    2444:	e0 f7       	brcc	.-8      	; 0x243e <memset+0x4>
    2446:	08 95       	ret

00002448 <strnlen>:
    2448:	fc 01       	movw	r30, r24
    244a:	61 50       	subi	r22, 0x01	; 1
    244c:	70 40       	sbci	r23, 0x00	; 0
    244e:	01 90       	ld	r0, Z+
    2450:	01 10       	cpse	r0, r1
    2452:	d8 f7       	brcc	.-10     	; 0x244a <strnlen+0x2>
    2454:	80 95       	com	r24
    2456:	90 95       	com	r25
    2458:	8e 0f       	add	r24, r30
    245a:	9f 1f       	adc	r25, r31
    245c:	08 95       	ret

0000245e <fputc>:
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	8c 01       	movw	r16, r24
    2468:	eb 01       	movw	r28, r22
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	81 ff       	sbrs	r24, 1
    246e:	1b c0       	rjmp	.+54     	; 0x24a6 <fputc+0x48>
    2470:	82 ff       	sbrs	r24, 2
    2472:	0d c0       	rjmp	.+26     	; 0x248e <fputc+0x30>
    2474:	2e 81       	ldd	r18, Y+6	; 0x06
    2476:	3f 81       	ldd	r19, Y+7	; 0x07
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	28 17       	cp	r18, r24
    247e:	39 07       	cpc	r19, r25
    2480:	64 f4       	brge	.+24     	; 0x249a <fputc+0x3c>
    2482:	e8 81       	ld	r30, Y
    2484:	f9 81       	ldd	r31, Y+1	; 0x01
    2486:	01 93       	st	Z+, r16
    2488:	f9 83       	std	Y+1, r31	; 0x01
    248a:	e8 83       	st	Y, r30
    248c:	06 c0       	rjmp	.+12     	; 0x249a <fputc+0x3c>
    248e:	e8 85       	ldd	r30, Y+8	; 0x08
    2490:	f9 85       	ldd	r31, Y+9	; 0x09
    2492:	80 2f       	mov	r24, r16
    2494:	09 95       	icall
    2496:	89 2b       	or	r24, r25
    2498:	31 f4       	brne	.+12     	; 0x24a6 <fputc+0x48>
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	9f 81       	ldd	r25, Y+7	; 0x07
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	9f 83       	std	Y+7, r25	; 0x07
    24a2:	8e 83       	std	Y+6, r24	; 0x06
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <fputc+0x4c>
    24a6:	0f ef       	ldi	r16, 0xFF	; 255
    24a8:	1f ef       	ldi	r17, 0xFF	; 255
    24aa:	c8 01       	movw	r24, r16
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	08 95       	ret

000024b6 <__ultoa_invert>:
    24b6:	fa 01       	movw	r30, r20
    24b8:	aa 27       	eor	r26, r26
    24ba:	28 30       	cpi	r18, 0x08	; 8
    24bc:	51 f1       	breq	.+84     	; 0x2512 <__ultoa_invert+0x5c>
    24be:	20 31       	cpi	r18, 0x10	; 16
    24c0:	81 f1       	breq	.+96     	; 0x2522 <__ultoa_invert+0x6c>
    24c2:	e8 94       	clt
    24c4:	6f 93       	push	r22
    24c6:	6e 7f       	andi	r22, 0xFE	; 254
    24c8:	6e 5f       	subi	r22, 0xFE	; 254
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	af 4f       	sbci	r26, 0xFF	; 255
    24d2:	b1 e0       	ldi	r27, 0x01	; 1
    24d4:	3e d0       	rcall	.+124    	; 0x2552 <__ultoa_invert+0x9c>
    24d6:	b4 e0       	ldi	r27, 0x04	; 4
    24d8:	3c d0       	rcall	.+120    	; 0x2552 <__ultoa_invert+0x9c>
    24da:	67 0f       	add	r22, r23
    24dc:	78 1f       	adc	r23, r24
    24de:	89 1f       	adc	r24, r25
    24e0:	9a 1f       	adc	r25, r26
    24e2:	a1 1d       	adc	r26, r1
    24e4:	68 0f       	add	r22, r24
    24e6:	79 1f       	adc	r23, r25
    24e8:	8a 1f       	adc	r24, r26
    24ea:	91 1d       	adc	r25, r1
    24ec:	a1 1d       	adc	r26, r1
    24ee:	6a 0f       	add	r22, r26
    24f0:	71 1d       	adc	r23, r1
    24f2:	81 1d       	adc	r24, r1
    24f4:	91 1d       	adc	r25, r1
    24f6:	a1 1d       	adc	r26, r1
    24f8:	20 d0       	rcall	.+64     	; 0x253a <__ultoa_invert+0x84>
    24fa:	09 f4       	brne	.+2      	; 0x24fe <__ultoa_invert+0x48>
    24fc:	68 94       	set
    24fe:	3f 91       	pop	r19
    2500:	2a e0       	ldi	r18, 0x0A	; 10
    2502:	26 9f       	mul	r18, r22
    2504:	11 24       	eor	r1, r1
    2506:	30 19       	sub	r19, r0
    2508:	30 5d       	subi	r19, 0xD0	; 208
    250a:	31 93       	st	Z+, r19
    250c:	de f6       	brtc	.-74     	; 0x24c4 <__ultoa_invert+0xe>
    250e:	cf 01       	movw	r24, r30
    2510:	08 95       	ret
    2512:	46 2f       	mov	r20, r22
    2514:	47 70       	andi	r20, 0x07	; 7
    2516:	40 5d       	subi	r20, 0xD0	; 208
    2518:	41 93       	st	Z+, r20
    251a:	b3 e0       	ldi	r27, 0x03	; 3
    251c:	0f d0       	rcall	.+30     	; 0x253c <__ultoa_invert+0x86>
    251e:	c9 f7       	brne	.-14     	; 0x2512 <__ultoa_invert+0x5c>
    2520:	f6 cf       	rjmp	.-20     	; 0x250e <__ultoa_invert+0x58>
    2522:	46 2f       	mov	r20, r22
    2524:	4f 70       	andi	r20, 0x0F	; 15
    2526:	40 5d       	subi	r20, 0xD0	; 208
    2528:	4a 33       	cpi	r20, 0x3A	; 58
    252a:	18 f0       	brcs	.+6      	; 0x2532 <__ultoa_invert+0x7c>
    252c:	49 5d       	subi	r20, 0xD9	; 217
    252e:	31 fd       	sbrc	r19, 1
    2530:	40 52       	subi	r20, 0x20	; 32
    2532:	41 93       	st	Z+, r20
    2534:	02 d0       	rcall	.+4      	; 0x253a <__ultoa_invert+0x84>
    2536:	a9 f7       	brne	.-22     	; 0x2522 <__ultoa_invert+0x6c>
    2538:	ea cf       	rjmp	.-44     	; 0x250e <__ultoa_invert+0x58>
    253a:	b4 e0       	ldi	r27, 0x04	; 4
    253c:	a6 95       	lsr	r26
    253e:	97 95       	ror	r25
    2540:	87 95       	ror	r24
    2542:	77 95       	ror	r23
    2544:	67 95       	ror	r22
    2546:	ba 95       	dec	r27
    2548:	c9 f7       	brne	.-14     	; 0x253c <__ultoa_invert+0x86>
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	61 05       	cpc	r22, r1
    254e:	71 05       	cpc	r23, r1
    2550:	08 95       	ret
    2552:	9b 01       	movw	r18, r22
    2554:	ac 01       	movw	r20, r24
    2556:	0a 2e       	mov	r0, r26
    2558:	06 94       	lsr	r0
    255a:	57 95       	ror	r21
    255c:	47 95       	ror	r20
    255e:	37 95       	ror	r19
    2560:	27 95       	ror	r18
    2562:	ba 95       	dec	r27
    2564:	c9 f7       	brne	.-14     	; 0x2558 <__ultoa_invert+0xa2>
    2566:	62 0f       	add	r22, r18
    2568:	73 1f       	adc	r23, r19
    256a:	84 1f       	adc	r24, r20
    256c:	95 1f       	adc	r25, r21
    256e:	a0 1d       	adc	r26, r0
    2570:	08 95       	ret

00002572 <__udivmodsi4>:
    2572:	a1 e2       	ldi	r26, 0x21	; 33
    2574:	1a 2e       	mov	r1, r26
    2576:	aa 1b       	sub	r26, r26
    2578:	bb 1b       	sub	r27, r27
    257a:	fd 01       	movw	r30, r26
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <__udivmodsi4_ep>

0000257e <__udivmodsi4_loop>:
    257e:	aa 1f       	adc	r26, r26
    2580:	bb 1f       	adc	r27, r27
    2582:	ee 1f       	adc	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	a2 17       	cp	r26, r18
    2588:	b3 07       	cpc	r27, r19
    258a:	e4 07       	cpc	r30, r20
    258c:	f5 07       	cpc	r31, r21
    258e:	20 f0       	brcs	.+8      	; 0x2598 <__udivmodsi4_ep>
    2590:	a2 1b       	sub	r26, r18
    2592:	b3 0b       	sbc	r27, r19
    2594:	e4 0b       	sbc	r30, r20
    2596:	f5 0b       	sbc	r31, r21

00002598 <__udivmodsi4_ep>:
    2598:	66 1f       	adc	r22, r22
    259a:	77 1f       	adc	r23, r23
    259c:	88 1f       	adc	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	1a 94       	dec	r1
    25a2:	69 f7       	brne	.-38     	; 0x257e <__udivmodsi4_loop>
    25a4:	60 95       	com	r22
    25a6:	70 95       	com	r23
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	9b 01       	movw	r18, r22
    25ae:	ac 01       	movw	r20, r24
    25b0:	bd 01       	movw	r22, r26
    25b2:	cf 01       	movw	r24, r30
    25b4:	08 95       	ret

000025b6 <__prologue_saves__>:
    25b6:	2f 92       	push	r2
    25b8:	3f 92       	push	r3
    25ba:	4f 92       	push	r4
    25bc:	5f 92       	push	r5
    25be:	6f 92       	push	r6
    25c0:	7f 92       	push	r7
    25c2:	8f 92       	push	r8
    25c4:	9f 92       	push	r9
    25c6:	af 92       	push	r10
    25c8:	bf 92       	push	r11
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	ca 1b       	sub	r28, r26
    25e0:	db 0b       	sbc	r29, r27
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	09 94       	ijmp

000025ee <__epilogue_restores__>:
    25ee:	2a 88       	ldd	r2, Y+18	; 0x12
    25f0:	39 88       	ldd	r3, Y+17	; 0x11
    25f2:	48 88       	ldd	r4, Y+16	; 0x10
    25f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    25fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2600:	b9 84       	ldd	r11, Y+9	; 0x09
    2602:	c8 84       	ldd	r12, Y+8	; 0x08
    2604:	df 80       	ldd	r13, Y+7	; 0x07
    2606:	ee 80       	ldd	r14, Y+6	; 0x06
    2608:	fd 80       	ldd	r15, Y+5	; 0x05
    260a:	0c 81       	ldd	r16, Y+4	; 0x04
    260c:	1b 81       	ldd	r17, Y+3	; 0x03
    260e:	aa 81       	ldd	r26, Y+2	; 0x02
    2610:	b9 81       	ldd	r27, Y+1	; 0x01
    2612:	ce 0f       	add	r28, r30
    2614:	d1 1d       	adc	r29, r1
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	ed 01       	movw	r28, r26
    2622:	08 95       	ret

00002624 <_exit>:
    2624:	f8 94       	cli

00002626 <__stop_program>:
    2626:	ff cf       	rjmp	.-2      	; 0x2626 <__stop_program>
