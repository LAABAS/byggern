
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  000024ee  00002582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080027a  0080027a  000026fc  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000029d  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c4a  00000000  00000000  00002a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  000036c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e7f  00000000  00000000  00003cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00004b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  00004ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ee       	ldi	r30, 0xEE	; 238
      84:	f4 e2       	ldi	r31, 0x24	; 36
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	aa 37       	cpi	r26, 0x7A	; 122
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	aa e7       	ldi	r26, 0x7A	; 122
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a4 38       	cpi	r26, 0x84	; 132
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 88 00 	call	0x110	; 0x110 <init_UART>
	init_SRAM();
      c2:	0e 94 3f 01 	call	0x27e	; 0x27e <init_SRAM>
	init_joystick();
      c6:	0e 94 35 02 	call	0x46a	; 0x46a <init_joystick>
	SPI_MasterInit();	
      ca:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_MasterInit>
	CAN_init();
      ce:	0e 94 24 03 	call	0x648	; 0x648 <CAN_init>
	printf("Initialization complete\n");
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <puts>


	printf("CAN_test: %d", CAN_test());
      da:	0e 94 37 03 	call	0x66e	; 0x66e <CAN_test>
      de:	9c 01       	movw	r18, r24
      e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x34>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x36>
      e4:	ed b7       	in	r30, 0x3d	; 61
      e6:	fe b7       	in	r31, 0x3e	; 62
      e8:	31 96       	adiw	r30, 0x01	; 1
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	91 83       	std	Z+1, r25	; 0x01
      f0:	80 83       	st	Z, r24
      f2:	33 83       	std	Z+3, r19	; 0x03
      f4:	22 83       	std	Z+2, r18	; 0x02
      f6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <printf>
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0

	
	
	

	butterfly_menu();
     102:	0e 94 db 05 	call	0xbb6	; 0xbb6 <butterfly_menu>

	return 0;	
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
	
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <init_UART>:
unsigned char buffer_stop;
unsigned char buffer_used;
*/

// Initialize UART interface
int init_UART(unsigned int baud){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9f 83       	std	Y+7, r25	; 0x07
     126:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	9f 81       	ldd	r25, Y+7	; 0x07
     12c:	cc 01       	movw	r24, r24
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	8a 83       	std	Y+2, r24	; 0x02
     134:	9b 83       	std	Y+3, r25	; 0x03
     136:	ac 83       	std	Y+4, r26	; 0x04
     138:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	ac 81       	ldd	r26, Y+4	; 0x04
     140:	bd 81       	ldd	r27, Y+5	; 0x05
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	aa 1f       	adc	r26, r26
     148:	bb 1f       	adc	r27, r27
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	aa 1f       	adc	r26, r26
     158:	bb 1f       	adc	r27, r27
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	9c 01       	movw	r18, r24
     164:	ad 01       	movw	r20, r26
     166:	8a ef       	ldi	r24, 0xFA	; 250
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	ab e4       	ldi	r26, 0x4B	; 75
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0e 94 1c 12 	call	0x2438	; 0x2438 <__udivmodsi4>
     176:	da 01       	movw	r26, r20
     178:	c9 01       	movw	r24, r18
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	a1 09       	sbc	r26, r1
     17e:	b1 09       	sbc	r27, r1
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	ac 83       	std	Y+4, r26	; 0x04
     186:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     188:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	ac 81       	ldd	r26, Y+4	; 0x04
     194:	bd 81       	ldd	r27, Y+5	; 0x05
     196:	89 2f       	mov	r24, r25
     198:	9a 2f       	mov	r25, r26
     19a:	ab 2f       	mov	r26, r27
     19c:	bb 27       	eor	r27, r27
     19e:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     1a0:	e9 e2       	ldi	r30, 0x29	; 41
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     1a8:	ea e2       	ldi	r30, 0x2A	; 42
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stop bit, 1 for 2 stop bit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 number of databits in payload: 011 for 8 bits. S. 192 in data sheet */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	86 60       	ori	r24, 0x06	; 6
     1b4:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	80 62       	ori	r24, 0x20	; 32
     1ba:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     1c2:	e0 e4       	ldi	r30, 0x40	; 64
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     1ca:	87 ef       	ldi	r24, 0xF7	; 247
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	2e e1       	ldi	r18, 0x1E	; 30
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	b9 01       	movw	r22, r18
     1d4:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fdevopen>

	return 0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0

} 
     1dc:	27 96       	adiw	r28, 0x07	; 7
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_put_char>:

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_put_char+0x6>
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	7b 83       	std	Y+3, r23	; 0x03
     1fe:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	31 f4       	brne	.+12     	; 0x212 <UART_put_char+0x24>
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	3b 81       	ldd	r19, Y+3	; 0x03
     20a:	8d e0       	ldi	r24, 0x0D	; 13
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     212:	eb e2       	ldi	r30, 0x2B	; 43
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 72       	andi	r24, 0x20	; 32
     21e:	90 70       	andi	r25, 0x00	; 0
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	b9 f3       	breq	.-18     	; 0x212 <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     224:	ec e2       	ldi	r30, 0x2C	; 44
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	80 83       	st	Z, r24
	return 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
}
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <UART_get_char+0x6>
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     24c:	eb e2       	ldi	r30, 0x2B	; 43
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 23       	and	r24, r24
     254:	dc f7       	brge	.-10     	; 0x24c <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     256:	ec e2       	ldi	r30, 0x2C	; 44
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	8d 30       	cpi	r24, 0x0D	; 13
     262:	11 f4       	brne	.+4      	; 0x268 <UART_get_char+0x2c>
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     268:	ec e2       	ldi	r30, 0x2C	; 44
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <init_SRAM>:
#include <util/delay.h>
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     286:	a5 e5       	ldi	r26, 0x55	; 85
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e5       	ldi	r30, 0x55	; 85
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 6c       	ori	r24, 0xC0	; 192
     292:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     294:	a6 e5       	ldi	r26, 0x56	; 86
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     2a2:	a0 e5       	ldi	r26, 0x50	; 80
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 e5       	ldi	r30, 0x50	; 80
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	65 97       	sbiw	r28, 0x15	; 21
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e1       	ldi	r25, 0x10	; 16
     2ce:	9d 8b       	std	Y+21, r25	; 0x15
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
	printf("Starting...\n");
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <puts>

	int i;
	for(i=0;i<0x800;i++)
     2da:	1b 8a       	std	Y+19, r1	; 0x13
     2dc:	1a 8a       	std	Y+18, r1	; 0x12
     2de:	80 c0       	rjmp	.+256    	; 0x3e0 <SRAM_test+0x12a>
	{
		ram_address[i] = (char)0x83;
     2e0:	2a 89       	ldd	r18, Y+18	; 0x12
     2e2:	3b 89       	ldd	r19, Y+19	; 0x13
     2e4:	8c 89       	ldd	r24, Y+20	; 0x14
     2e6:	9d 89       	ldd	r25, Y+21	; 0x15
     2e8:	fc 01       	movw	r30, r24
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	83 e8       	ldi	r24, 0x83	; 131
     2f0:	80 83       	st	Z, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e4       	ldi	r27, 0x40	; 64
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
     2fc:	9c 87       	std	Y+12, r25	; 0x0c
     2fe:	ad 87       	std	Y+13, r26	; 0x0d
     300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     302:	6b 85       	ldd	r22, Y+11	; 0x0b
     304:	7c 85       	ldd	r23, Y+12	; 0x0c
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	9e 85       	ldd	r25, Y+14	; 0x0e
     30a:	2a e9       	ldi	r18, 0x9A	; 154
     30c:	3b e9       	ldi	r19, 0x9B	; 155
     30e:	49 e9       	ldi	r20, 0x99	; 153
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	8f 83       	std	Y+7, r24	; 0x07
     31c:	98 87       	std	Y+8, r25	; 0x08
     31e:	a9 87       	std	Y+9, r26	; 0x09
     320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     322:	6f 81       	ldd	r22, Y+7	; 0x07
     324:	78 85       	ldd	r23, Y+8	; 0x08
     326:	89 85       	ldd	r24, Y+9	; 0x09
     328:	9a 85       	ldd	r25, Y+10	; 0x0a
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__ltsf2>
     336:	88 23       	and	r24, r24
     338:	2c f4       	brge	.+10     	; 0x344 <SRAM_test+0x8e>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9e 83       	std	Y+6, r25	; 0x06
     340:	8d 83       	std	Y+5, r24	; 0x05
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <SRAM_test+0x10c>
	else if (__tmp > 65535)
     344:	6f 81       	ldd	r22, Y+7	; 0x07
     346:	78 85       	ldd	r23, Y+8	; 0x08
     348:	89 85       	ldd	r24, Y+9	; 0x09
     34a:	9a 85       	ldd	r25, Y+10	; 0x0a
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	57 e4       	ldi	r21, 0x47	; 71
     354:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__gtsf2>
     358:	18 16       	cp	r1, r24
     35a:	4c f5       	brge	.+82     	; 0x3ae <SRAM_test+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35c:	6b 85       	ldd	r22, Y+11	; 0x0b
     35e:	7c 85       	ldd	r23, Y+12	; 0x0c
     360:	8d 85       	ldd	r24, Y+13	; 0x0d
     362:	9e 85       	ldd	r25, Y+14	; 0x0e
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e2       	ldi	r20, 0x20	; 32
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	8d 83       	std	Y+5, r24	; 0x05
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <SRAM_test+0xee>
     386:	8a e7       	ldi	r24, 0x7A	; 122
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <SRAM_test+0xdc>
     396:	9c 83       	std	Y+4, r25	; 0x04
     398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	9e 83       	std	Y+6, r25	; 0x06
     3a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	69 f7       	brne	.-38     	; 0x386 <SRAM_test+0xd0>
     3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <SRAM_test+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ae:	6f 81       	ldd	r22, Y+7	; 0x07
     3b0:	78 85       	ldd	r23, Y+8	; 0x08
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9e 83       	std	Y+6, r25	; 0x06
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <SRAM_test+0x118>
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	9b 89       	ldd	r25, Y+19	; 0x13
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9b 8b       	std	Y+19, r25	; 0x13
     3de:	8a 8b       	std	Y+18, r24	; 0x12
     3e0:	8a 89       	ldd	r24, Y+18	; 0x12
     3e2:	9b 89       	ldd	r25, Y+19	; 0x13
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	80 30       	cpi	r24, 0x00	; 0
     3e8:	92 07       	cpc	r25, r18
     3ea:	0c f4       	brge	.+2      	; 0x3ee <SRAM_test+0x138>
     3ec:	79 cf       	rjmp	.-270    	; 0x2e0 <SRAM_test+0x2a>
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     3ee:	1b 8a       	std	Y+19, r1	; 0x13
     3f0:	1a 8a       	std	Y+18, r1	; 0x12
     3f2:	30 c0       	rjmp	.+96     	; 0x454 <SRAM_test+0x19e>
	{
		char c = (char)ram_address[i];
     3f4:	2a 89       	ldd	r18, Y+18	; 0x12
     3f6:	3b 89       	ldd	r19, Y+19	; 0x13
     3f8:	8c 89       	ldd	r24, Y+20	; 0x14
     3fa:	9d 89       	ldd	r25, Y+21	; 0x15
     3fc:	fc 01       	movw	r30, r24
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	80 81       	ld	r24, Z
     404:	89 8b       	std	Y+17, r24	; 0x11
		int j = (int)c;
     406:	89 89       	ldd	r24, Y+17	; 0x11
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	8f 87       	std	Y+15, r24	; 0x0f
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     410:	2a 89       	ldd	r18, Y+18	; 0x12
     412:	3b 89       	ldd	r19, Y+19	; 0x13
     414:	8c 89       	ldd	r24, Y+20	; 0x14
     416:	9d 89       	ldd	r25, Y+21	; 0x15
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	80 81       	ld	r24, Z
     420:	83 38       	cpi	r24, 0x83	; 131
     422:	99 f0       	breq	.+38     	; 0x44a <SRAM_test+0x194>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     424:	00 d0       	rcall	.+0      	; 0x426 <SRAM_test+0x170>
     426:	00 d0       	rcall	.+0      	; 0x428 <SRAM_test+0x172>
     428:	ed b7       	in	r30, 0x3d	; 61
     42a:	fe b7       	in	r31, 0x3e	; 62
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	8a 89       	ldd	r24, Y+18	; 0x12
     438:	9b 89       	ldd	r25, Y+19	; 0x13
     43a:	93 83       	std	Z+3, r25	; 0x03
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <printf>
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	9b 89       	ldd	r25, Y+19	; 0x13
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	9b 8b       	std	Y+19, r25	; 0x13
     452:	8a 8b       	std	Y+18, r24	; 0x12
     454:	8a 89       	ldd	r24, Y+18	; 0x12
     456:	9b 89       	ldd	r25, Y+19	; 0x13
     458:	28 e0       	ldi	r18, 0x08	; 8
     45a:	80 30       	cpi	r24, 0x00	; 0
     45c:	92 07       	cpc	r25, r18
     45e:	54 f2       	brlt	.-108    	; 0x3f4 <SRAM_test+0x13e>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     460:	88 e4       	ldi	r24, 0x48	; 72
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <puts>
     468:	ff cf       	rjmp	.-2      	; 0x468 <SRAM_test+0x1b2>

0000046a <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	// set port B: in
	DDRB = 0x00; //inputs
     472:	e7 e3       	ldi	r30, 0x37	; 55
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull-ups
     478:	e8 e3       	ldi	r30, 0x38	; 56
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
}
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <read_axis+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <read_axis+0x8>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	98 e1       	ldi	r25, 0x18	; 24
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	88 37       	cpi	r24, 0x78	; 120
     4a0:	b1 f4       	brne	.+44     	; 0x4ce <read_axis+0x48>
		adc_address[0] = 0x04;
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4aa:	e6 e3       	ldi	r30, 0x36	; 54
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	81 70       	andi	r24, 0x01	; 1
     4b6:	90 70       	andi	r25, 0x00	; 0
     4b8:	88 23       	and	r24, r24
     4ba:	b9 f7       	brne	.-18     	; 0x4aa <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	80 81       	ld	r24, Z
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	1d c0       	rjmp	.+58     	; 0x508 <__stack+0x9>
	}
	else if(axis == 'y'){
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	89 37       	cpi	r24, 0x79	; 121
     4d2:	c1 f4       	brne	.+48     	; 0x504 <__stack+0x5>
		adc_address[0] = 0x06;
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     4dc:	e6 e3       	ldi	r30, 0x36	; 54
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	81 70       	andi	r24, 0x01	; 1
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	88 23       	and	r24, r24
     4ec:	b9 f7       	brne	.-18     	; 0x4dc <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     4ee:	e9 81       	ldd	r30, Y+1	; 0x01
     4f0:	fa 81       	ldd	r31, Y+2	; 0x02
     4f2:	80 81       	ld	r24, Z
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 50       	subi	r24, 0x00	; 0
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	0e 94 8c 02 	call	0x518	; 0x518 <eeprom_read_byte>
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
	}
	return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	8c 83       	std	Y+4, r24	; 0x04
     508:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <eeprom_read_byte+0x6>
     51e:	0f 92       	push	r0
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     528:	ec e3       	ldi	r30, 0x3C	; 60
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 70       	andi	r24, 0x02	; 2
     534:	90 70       	andi	r25, 0x00	; 0
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	b9 f7       	brne	.-18     	; 0x528 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     53a:	ee e3       	ldi	r30, 0x3E	; 62
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     546:	e0 9a       	sbi	0x1c, 0	; 28
     548:	8d b3       	in	r24, 0x1d	; 29
     54a:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <read_buttons>:


// Read joystick buttons (Can be optimised with interrupt)
inline uint8_t read_buttons(){
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     562:	e6 e3       	ldi	r30, 0x36	; 54
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	86 70       	andi	r24, 0x06	; 6
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	95 95       	asr	r25
     572:	87 95       	ror	r24
}
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <SPI_MasterInit>:
#include <avr/io.h>
#include "spi.h"

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     582:	a7 e3       	ldi	r26, 0x37	; 55
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e7 e3       	ldi	r30, 0x37	; 55
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	88 6b       	ori	r24, 0xB8	; 184
     590:	8c 93       	st	X, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     592:	ed e2       	ldi	r30, 0x2D	; 45
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	81 e5       	ldi	r24, 0x51	; 81
     598:	80 83       	st	Z, r24
	SPI_NoSlave();
     59a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
     5b0:	ef e2       	ldi	r30, 0x2F	; 47
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     5b8:	ee e2       	ldi	r30, 0x2E	; 46
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	dc f7       	brge	.-10     	; 0x5b8 <SPI_MasterTransmit+0x14>
}
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <SPI_MasterReceive>:

// Recieve char over SPI
char SPI_MasterReceive(void)
{
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     5d8:	ee e2       	ldi	r30, 0x2E	; 46
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	dc f7       	brge	.-10     	; 0x5d8 <SPI_MasterReceive+0xe>
	
	

	/* Return data register */
	return SPDR;
     5e2:	ef e2       	ldi	r30, 0x2F	; 47
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
}
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	0f 92       	push	r0
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	89 83       	std	Y+1, r24	; 0x01

	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	82 36       	cpi	r24, 0x62	; 98
     5fe:	41 f4       	brne	.+16     	; 0x610 <SPI_SelectSlave+0x22>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     600:	a8 e3       	ldi	r26, 0x38	; 56
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e3       	ldi	r30, 0x38	; 56
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	8c 93       	st	X, r24
     60e:	0a c0       	rjmp	.+20     	; 0x624 <SPI_SelectSlave+0x36>
	else if (slave == SPI_CAN)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	83 37       	cpi	r24, 0x73	; 115
     614:	39 f4       	brne	.+14     	; 0x624 <SPI_SelectSlave+0x36>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     616:	a8 e3       	ldi	r26, 0x38	; 56
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e3       	ldi	r30, 0x38	; 56
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8f 7e       	andi	r24, 0xEF	; 239
     622:	8c 93       	st	X, r24
}
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <SPI_NoSlave>:

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     634:	a8 e3       	ldi	r26, 0x38	; 56
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e8 e3       	ldi	r30, 0x38	; 56
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 61       	ori	r24, 0x18	; 24
     640:	8c 93       	st	X, r24
}
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <CAN_init>:
#include "spi.h"
#include "settings.h"
#include <util/delay.h>

//Initialize the CAN bus
void CAN_init(void){
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     650:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_reset>

	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     654:	8f e0       	ldi	r24, 0x0F	; 15
     656:	60 ee       	ldi	r22, 0xE0	; 224
     658:	40 e4       	ldi	r20, 0x40	; 64
     65a:	0e 94 bb 05 	call	0xb76	; 0xb76 <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     65e:	80 e6       	ldi	r24, 0x60	; 96
     660:	60 e6       	ldi	r22, 0x60	; 96
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	0e 94 bb 05 	call	0xb76	; 0xb76 <CAN_bit_modify>
		
}
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	68 97       	sbiw	r28, 0x18	; 24
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     682:	84 e5       	ldi	r24, 0x54	; 84
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <puts>
	
	char received[9];
	char read[9];
	int i;
	
	char *send = "test1234";
     68a:	85 e6       	ldi	r24, 0x65	; 101
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01

	// Reset will move into configuration mode
	CAN_reset();
     692:	0e 94 4a 04 	call	0x894	; 0x894 <CAN_reset>
	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode
     696:	8f e0       	ldi	r24, 0x0F	; 15
     698:	60 ee       	ldi	r22, 0xE0	; 224
     69a:	40 e4       	ldi	r20, 0x40	; 64
     69c:	0e 94 bb 05 	call	0xb76	; 0xb76 <CAN_bit_modify>

	// Blanking out recieved buffer (really needed??)
	for (i = 0;(i < 9); i++)
     6a0:	1c 82       	std	Y+4, r1	; 0x04
     6a2:	1b 82       	std	Y+3, r1	; 0x03
     6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <CAN_test+0x52>
		received[i] = '\0';	
     6a6:	2b 81       	ldd	r18, Y+3	; 0x03
     6a8:	3c 81       	ldd	r19, Y+4	; 0x04
     6aa:	ce 01       	movw	r24, r28
     6ac:	05 96       	adiw	r24, 0x05	; 5
     6ae:	fc 01       	movw	r30, r24
     6b0:	e2 0f       	add	r30, r18
     6b2:	f3 1f       	adc	r31, r19
     6b4:	10 82       	st	Z, r1
	// Reset will move into configuration mode
	CAN_reset();
	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_LOOPBACK); //set loopback mode

	// Blanking out recieved buffer (really needed??)
	for (i = 0;(i < 9); i++)
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	9c 83       	std	Y+4, r25	; 0x04
     6be:	8b 83       	std	Y+3, r24	; 0x03
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	9c 81       	ldd	r25, Y+4	; 0x04
     6c4:	89 30       	cpi	r24, 0x09	; 9
     6c6:	91 05       	cpc	r25, r1
     6c8:	74 f3       	brlt	.-36     	; 0x6a6 <CAN_test+0x38>
		received[i] = '\0';	

	// Sending data in CAN bus
	printf("Sending string: %s", send);
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <CAN_test+0x5e>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <CAN_test+0x60>
     6ce:	ed b7       	in	r30, 0x3d	; 61
     6d0:	fe b7       	in	r31, 0x3e	; 62
     6d2:	31 96       	adiw	r30, 0x01	; 1
     6d4:	8e e6       	ldi	r24, 0x6E	; 110
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	93 83       	std	Z+3, r25	; 0x03
     6e2:	82 83       	std	Z+2, r24	; 0x02
     6e4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <printf>
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
	if (CAN_send(0, send, 8) != 0){
     6f0:	29 81       	ldd	r18, Y+1	; 0x01
     6f2:	3a 81       	ldd	r19, Y+2	; 0x02
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	b9 01       	movw	r22, r18
     6fa:	48 e0       	ldi	r20, 0x08	; 8
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 c8 03 	call	0x790	; 0x790 <CAN_send>
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	29 f0       	breq	.+10     	; 0x710 <CAN_test+0xa2>
		return -1;
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9f ef       	ldi	r25, 0xFF	; 255
     70a:	98 8f       	std	Y+24, r25	; 0x18
     70c:	8f 8b       	std	Y+23, r24	; 0x17
     70e:	35 c0       	rjmp	.+106    	; 0x77a <CAN_test+0x10c>
	}

	// Receiving data on CAN bus
	printf("Received: ");
     710:	00 d0       	rcall	.+0      	; 0x712 <CAN_test+0xa4>
     712:	ed b7       	in	r30, 0x3d	; 61
     714:	fe b7       	in	r31, 0x3e	; 62
     716:	31 96       	adiw	r30, 0x01	; 1
     718:	81 e8       	ldi	r24, 0x81	; 129
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
     720:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <printf>
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
	CAN_receive(received, 0); //rxbuffer 0
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	0e 94 27 04 	call	0x84e	; 0x84e <CAN_receive>
	for (i = 0;(i < 9); i++)
     734:	1c 82       	std	Y+4, r1	; 0x04
     736:	1b 82       	std	Y+3, r1	; 0x03
     738:	15 c0       	rjmp	.+42     	; 0x764 <CAN_test+0xf6>
		read[i] = received[i];
     73a:	4b 81       	ldd	r20, Y+3	; 0x03
     73c:	5c 81       	ldd	r21, Y+4	; 0x04
     73e:	2b 81       	ldd	r18, Y+3	; 0x03
     740:	3c 81       	ldd	r19, Y+4	; 0x04
     742:	ce 01       	movw	r24, r28
     744:	05 96       	adiw	r24, 0x05	; 5
     746:	fc 01       	movw	r30, r24
     748:	e2 0f       	add	r30, r18
     74a:	f3 1f       	adc	r31, r19
     74c:	20 81       	ld	r18, Z
     74e:	ce 01       	movw	r24, r28
     750:	0e 96       	adiw	r24, 0x0e	; 14
     752:	fc 01       	movw	r30, r24
     754:	e4 0f       	add	r30, r20
     756:	f5 1f       	adc	r31, r21
     758:	20 83       	st	Z, r18
	}

	// Receiving data on CAN bus
	printf("Received: ");
	CAN_receive(received, 0); //rxbuffer 0
	for (i = 0;(i < 9); i++)
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	89 30       	cpi	r24, 0x09	; 9
     76a:	91 05       	cpc	r25, r1
     76c:	34 f3       	brlt	.-52     	; 0x73a <CAN_test+0xcc>
		read[i] = received[i];
	
	printf("%s\n", read);
     76e:	ce 01       	movw	r24, r28
     770:	0e 96       	adiw	r24, 0x0e	; 14
     772:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <puts>

	return 0;
     776:	18 8e       	std	Y+24, r1	; 0x18
     778:	1f 8a       	std	Y+23, r1	; 0x17
     77a:	8f 89       	ldd	r24, Y+23	; 0x17
     77c:	98 8d       	ldd	r25, Y+24	; 0x18
}
     77e:	68 96       	adiw	r28, 0x18	; 24
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <CAN_send>:

// Send string using CAN bus
int CAN_send(int id, char* data, int n){
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	2a 97       	sbiw	r28, 0x0a	; 10
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	9c 83       	std	Y+4, r25	; 0x04
     7a6:	8b 83       	std	Y+3, r24	; 0x03
     7a8:	7e 83       	std	Y+6, r23	; 0x06
     7aa:	6d 83       	std	Y+5, r22	; 0x05
     7ac:	58 87       	std	Y+8, r21	; 0x08
     7ae:	4f 83       	std	Y+7, r20	; 0x07
	
	unsigned int i;
	CAN_bit_modify(TXB0SIDH, 0xFF, (id<<13)); //transmit buffer 0 id high
     7b0:	81 e3       	ldi	r24, 0x31	; 49
     7b2:	6f ef       	ldi	r22, 0xFF	; 255
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	0e 94 bb 05 	call	0xb76	; 0xb76 <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	98 2f       	mov	r25, r24
     7be:	92 95       	swap	r25
     7c0:	99 0f       	add	r25, r25
     7c2:	90 7e       	andi	r25, 0xE0	; 224
     7c4:	82 e3       	ldi	r24, 0x32	; 50
     7c6:	60 ee       	ldi	r22, 0xE0	; 224
     7c8:	49 2f       	mov	r20, r25
     7ca:	0e 94 bb 05 	call	0xb76	; 0xb76 <CAN_bit_modify>
	CAN_write((char *)&n, TXB0DLC, 1);	// data length (as char pointer)
     7ce:	ce 01       	movw	r24, r28
     7d0:	07 96       	adiw	r24, 0x07	; 7
     7d2:	65 e3       	ldi	r22, 0x35	; 53
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <CAN_write>
	CAN_load_tx(data, 0, n); //load transmit buffer
     7dc:	2f 81       	ldd	r18, Y+7	; 0x07
     7de:	38 85       	ldd	r19, Y+8	; 0x08
     7e0:	8d 81       	ldd	r24, Y+5	; 0x05
     7e2:	9e 81       	ldd	r25, Y+6	; 0x06
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	a9 01       	movw	r20, r18
     7e8:	0e 94 2c 05 	call	0xa58	; 0xa58 <CAN_load_tx>
	CAN_rts(0); //request to send
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CAN_rts>
	

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     7f2:	1a 82       	std	Y+2, r1	; 0x02
     7f4:	19 82       	std	Y+1, r1	; 0x01
     7f6:	0d c0       	rjmp	.+26     	; 0x812 <CAN_send+0x82>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     7f8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <CAN_read_status>
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	84 70       	andi	r24, 0x04	; 4
     802:	90 70       	andi	r25, 0x00	; 0
     804:	00 97       	sbiw	r24, 0x00	; 0
     806:	59 f0       	breq	.+22     	; 0x81e <CAN_send+0x8e>
	CAN_load_tx(data, 0, n); //load transmit buffer
	CAN_rts(0); //request to send
	

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	2f ef       	ldi	r18, 0xFF	; 255
     818:	8f 3f       	cpi	r24, 0xFF	; 255
     81a:	92 07       	cpc	r25, r18
     81c:	69 f7       	brne	.-38     	; 0x7f8 <CAN_send+0x68>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	if(i == 0xffff) return -1;
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	8f 3f       	cpi	r24, 0xFF	; 255
     826:	92 07       	cpc	r25, r18
     828:	29 f4       	brne	.+10     	; 0x834 <CAN_send+0xa4>
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	9a 87       	std	Y+10, r25	; 0x0a
     830:	89 87       	std	Y+9, r24	; 0x09
     832:	02 c0       	rjmp	.+4      	; 0x838 <CAN_send+0xa8>
	return 0;
     834:	1a 86       	std	Y+10, r1	; 0x0a
     836:	19 86       	std	Y+9, r1	; 0x09
     838:	89 85       	ldd	r24, Y+9	; 0x09
     83a:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     83c:	2a 96       	adiw	r28, 0x0a	; 10
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	08 95       	ret

0000084e <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(char * data, int rx){
     84e:	df 93       	push	r29
     850:	cf 93       	push	r28
     852:	00 d0       	rcall	.+0      	; 0x854 <CAN_receive+0x6>
     854:	00 d0       	rcall	.+0      	; 0x856 <CAN_receive+0x8>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	9a 83       	std	Y+2, r25	; 0x02
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	7c 83       	std	Y+4, r23	; 0x04
     860:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF) == 0); // loop until data received
     862:	0e 94 9e 05 	call	0xb3c	; 0xb3c <CAN_read_status>
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	81 70       	andi	r24, 0x01	; 1
     86c:	90 70       	andi	r25, 0x00	; 0
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	c1 f3       	breq	.-16     	; 0x862 <CAN_receive+0x14>
	CAN_read_rx(data, rx, 8);
     872:	2b 81       	ldd	r18, Y+3	; 0x03
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	62 2f       	mov	r22, r18
     87a:	48 e0       	ldi	r20, 0x08	; 8
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	0e 94 9a 04 	call	0x934	; 0x934 <CAN_read_rx>
	
	return 0;
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0

}
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	08 95       	ret

00000894 <CAN_reset>:

// Reset the CAN chip
void CAN_reset(void){
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
     89c:	83 e7       	ldi	r24, 0x73	; 115
     89e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
     8a2:	80 ec       	ldi	r24, 0xC0	; 192
     8a4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     8a8:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	08 95       	ret

000008b2 <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	27 97       	sbiw	r28, 0x07	; 7
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	9c 83       	std	Y+4, r25	; 0x04
     8cc:	8b 83       	std	Y+3, r24	; 0x03
     8ce:	6d 83       	std	Y+5, r22	; 0x05
     8d0:	5f 83       	std	Y+7, r21	; 0x07
     8d2:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     8d4:	83 e7       	ldi	r24, 0x73	; 115
     8d6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     8e0:	8d 81       	ldd	r24, Y+5	; 0x05
     8e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     8e6:	1a 82       	std	Y+2, r1	; 0x02
     8e8:	19 82       	std	Y+1, r1	; 0x01
     8ea:	10 c0       	rjmp	.+32     	; 0x90c <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
     8ec:	29 81       	ldd	r18, Y+1	; 0x01
     8ee:	3a 81       	ldd	r19, Y+2	; 0x02
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	8c 01       	movw	r16, r24
     8f6:	02 0f       	add	r16, r18
     8f8:	13 1f       	adc	r17, r19
     8fa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     8fe:	f8 01       	movw	r30, r16
     900:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	29 81       	ldd	r18, Y+1	; 0x01
     90e:	3a 81       	ldd	r19, Y+2	; 0x02
     910:	8e 81       	ldd	r24, Y+6	; 0x06
     912:	9f 81       	ldd	r25, Y+7	; 0x07
     914:	28 17       	cp	r18, r24
     916:	39 07       	cpc	r19, r25
     918:	4c f3       	brlt	.-46     	; 0x8ec <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
     91a:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
     91e:	27 96       	adiw	r28, 0x07	; 7
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	08 95       	ret

00000934 <CAN_read_rx>:

void CAN_read_rx(char* data, uint8_t rx, int data_count){
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	27 97       	sbiw	r28, 0x07	; 7
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	9c 83       	std	Y+4, r25	; 0x04
     94e:	8b 83       	std	Y+3, r24	; 0x03
     950:	6d 83       	std	Y+5, r22	; 0x05
     952:	5f 83       	std	Y+7, r21	; 0x07
     954:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	if (rx>1 || data_count > 8)
     956:	8d 81       	ldd	r24, Y+5	; 0x05
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	b8 f5       	brcc	.+110    	; 0x9ca <CAN_read_rx+0x96>
     95c:	8e 81       	ldd	r24, Y+6	; 0x06
     95e:	9f 81       	ldd	r25, Y+7	; 0x07
     960:	89 30       	cpi	r24, 0x09	; 9
     962:	91 05       	cpc	r25, r1
     964:	94 f5       	brge	.+100    	; 0x9ca <CAN_read_rx+0x96>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
     966:	8d 81       	ldd	r24, Y+5	; 0x05
     968:	88 23       	and	r24, r24
     96a:	19 f4       	brne	.+6      	; 0x972 <CAN_read_rx+0x3e>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	8d 83       	std	Y+5, r24	; 0x05
     970:	05 c0       	rjmp	.+10     	; 0x97c <CAN_read_rx+0x48>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
     972:	8d 81       	ldd	r24, Y+5	; 0x05
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	11 f4       	brne	.+4      	; 0x97c <CAN_read_rx+0x48>
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
     97c:	83 e7       	ldi	r24, 0x73	; 115
     97e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
     982:	8d 81       	ldd	r24, Y+5	; 0x05
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	80 69       	ori	r24, 0x90	; 144
     98e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for (i = 0; i < data_count; i++){
     992:	1a 82       	std	Y+2, r1	; 0x02
     994:	19 82       	std	Y+1, r1	; 0x01
     996:	10 c0       	rjmp	.+32     	; 0x9b8 <CAN_read_rx+0x84>
		data[i] = SPI_MasterReceive();
     998:	29 81       	ldd	r18, Y+1	; 0x01
     99a:	3a 81       	ldd	r19, Y+2	; 0x02
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	9c 81       	ldd	r25, Y+4	; 0x04
     9a0:	8c 01       	movw	r16, r24
     9a2:	02 0f       	add	r16, r18
     9a4:	13 1f       	adc	r17, r19
     9a6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     9aa:	f8 01       	movw	r30, r16
     9ac:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < data_count; i++){
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	9a 83       	std	Y+2, r25	; 0x02
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	29 81       	ldd	r18, Y+1	; 0x01
     9ba:	3a 81       	ldd	r19, Y+2	; 0x02
     9bc:	8e 81       	ldd	r24, Y+6	; 0x06
     9be:	9f 81       	ldd	r25, Y+7	; 0x07
     9c0:	28 17       	cp	r18, r24
     9c2:	39 07       	cpc	r19, r25
     9c4:	4c f3       	brlt	.-46     	; 0x998 <CAN_read_rx+0x64>
		data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
     9c6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     9ca:	27 96       	adiw	r28, 0x07	; 7
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	08 95       	ret

000009e0 <CAN_write>:

void CAN_write(char* data, uint8_t address, int data_count){
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	27 97       	sbiw	r28, 0x07	; 7
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	9c 83       	std	Y+4, r25	; 0x04
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	6d 83       	std	Y+5, r22	; 0x05
     9fa:	5f 83       	std	Y+7, r21	; 0x07
     9fc:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     9fe:	83 e7       	ldi	r24, 0x73	; 115
     a00:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     a0a:	8d 81       	ldd	r24, Y+5	; 0x05
     a0c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     a10:	1a 82       	std	Y+2, r1	; 0x02
     a12:	19 82       	std	Y+1, r1	; 0x01
     a14:	0f c0       	rjmp	.+30     	; 0xa34 <CAN_write+0x54>
		SPI_MasterTransmit(data[i]);
     a16:	29 81       	ldd	r18, Y+1	; 0x01
     a18:	3a 81       	ldd	r19, Y+2	; 0x02
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	9c 81       	ldd	r25, Y+4	; 0x04
     a1e:	fc 01       	movw	r30, r24
     a20:	e2 0f       	add	r30, r18
     a22:	f3 1f       	adc	r31, r19
     a24:	80 81       	ld	r24, Z
     a26:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_WRITE);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	29 81       	ldd	r18, Y+1	; 0x01
     a36:	3a 81       	ldd	r19, Y+2	; 0x02
     a38:	8e 81       	ldd	r24, Y+6	; 0x06
     a3a:	9f 81       	ldd	r25, Y+7	; 0x07
     a3c:	28 17       	cp	r18, r24
     a3e:	39 07       	cpc	r19, r25
     a40:	54 f3       	brlt	.-44     	; 0xa16 <CAN_write+0x36>
		SPI_MasterTransmit(data[i]);
	}

	SPI_NoSlave();
     a42:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>

}
     a46:	27 96       	adiw	r28, 0x07	; 7
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* data, uint8_t tx, int data_count){
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	27 97       	sbiw	r28, 0x07	; 7
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	9c 83       	std	Y+4, r25	; 0x04
     a6e:	8b 83       	std	Y+3, r24	; 0x03
     a70:	6d 83       	std	Y+5, r22	; 0x05
     a72:	5f 83       	std	Y+7, r21	; 0x07
     a74:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	if (tx>2 || data_count > 8)
     a76:	8d 81       	ldd	r24, Y+5	; 0x05
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	98 f5       	brcc	.+102    	; 0xae2 <CAN_load_tx+0x8a>
     a7c:	8e 81       	ldd	r24, Y+6	; 0x06
     a7e:	9f 81       	ldd	r25, Y+7	; 0x07
     a80:	89 30       	cpi	r24, 0x09	; 9
     a82:	91 05       	cpc	r25, r1
     a84:	74 f5       	brge	.+92     	; 0xae2 <CAN_load_tx+0x8a>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
     a86:	8d 81       	ldd	r24, Y+5	; 0x05
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	81 50       	subi	r24, 0x01	; 1
     a94:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
     a96:	83 e7       	ldi	r24, 0x73	; 115
     a98:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
     a9c:	8d 81       	ldd	r24, Y+5	; 0x05
     a9e:	80 64       	ori	r24, 0x40	; 64
     aa0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     aa4:	1a 82       	std	Y+2, r1	; 0x02
     aa6:	19 82       	std	Y+1, r1	; 0x01
     aa8:	0f c0       	rjmp	.+30     	; 0xac8 <CAN_load_tx+0x70>
		//printf("%c", data[i]);
		SPI_MasterTransmit(data[i]);
     aaa:	29 81       	ldd	r18, Y+1	; 0x01
     aac:	3a 81       	ldd	r19, Y+2	; 0x02
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	fc 01       	movw	r30, r24
     ab4:	e2 0f       	add	r30, r18
     ab6:	f3 1f       	adc	r31, r19
     ab8:	80 81       	ld	r24, Z
     aba:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < data_count; i++){
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	29 81       	ldd	r18, Y+1	; 0x01
     aca:	3a 81       	ldd	r19, Y+2	; 0x02
     acc:	8e 81       	ldd	r24, Y+6	; 0x06
     ace:	9f 81       	ldd	r25, Y+7	; 0x07
     ad0:	28 17       	cp	r18, r24
     ad2:	39 07       	cpc	r19, r25
     ad4:	54 f3       	brlt	.-44     	; 0xaaa <CAN_load_tx+0x52>
		//printf("%c", data[i]);
		SPI_MasterTransmit(data[i]);
	}

	SPI_NoSlave();
     ad6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	printf("\n");
     ada:	8a e0       	ldi	r24, 0x0A	; 10
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <putchar>
}
     ae2:	27 96       	adiw	r28, 0x07	; 7
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	08 95       	ret

00000af4 <CAN_rts>:

void CAN_rts(uint8_t tx){
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	0f 92       	push	r0
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	88 23       	and	r24, r24
     b04:	19 f4       	brne	.+6      	; 0xb0c <CAN_rts+0x18>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	89 83       	std	Y+1, r24	; 0x01
     b0a:	0b c0       	rjmp	.+22     	; 0xb22 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	19 f4       	brne	.+6      	; 0xb18 <CAN_rts+0x24>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	59 f4       	brne	.+22     	; 0xb34 <CAN_rts+0x40>
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
     b22:	83 e7       	ldi	r24, 0x73	; 115
     b24:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	80 68       	ori	r24, 0x80	; 128
     b2c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
     b30:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     b34:	0f 90       	pop	r0
     b36:	cf 91       	pop	r28
     b38:	df 91       	pop	r29
     b3a:	08 95       	ret

00000b3c <CAN_read_status>:

uint8_t CAN_read_status(void){
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	0f 92       	push	r0
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
     b46:	83 e7       	ldi	r24, 0x73	; 115
     b48:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
     b4c:	80 ea       	ldi	r24, 0xA0	; 160
     b4e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     b52:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     b56:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     b58:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	
	return (uint8_t) status;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01

}
     b5e:	0f 90       	pop	r0
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <CAN_rx_status>:

uint8_t CAN_rx_status(void){
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
return 0;
     b6e:	80 e0       	ldi	r24, 0x00	; 0

}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <CAN_bit_modify>:
void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <CAN_bit_modify+0x6>
     b7c:	0f 92       	push	r0
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	6a 83       	std	Y+2, r22	; 0x02
     b86:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
     b88:	83 e7       	ldi	r24, 0x73	; 115
     b8a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>

	SPI_NoSlave();
     ba6:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	27 97       	sbiw	r28, 0x07	; 7
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     bce:	80 e3       	ldi	r24, 0x30	; 48
     bd0:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     bd2:	8c e8       	ldi	r24, 0x8C	; 140
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>

	while(1){
		last_button = button;
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     bde:	0e 94 35 07 	call	0xe6a	; 0xe6a <butterfly_poll_joystick>
     be2:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	98 17       	cp	r25, r24
     bea:	b9 f3       	breq	.-18     	; 0xbda <butterfly_menu+0x24>
			printf("state for: %d\n", menu_state);
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	28 2f       	mov	r18, r24
     bf0:	33 27       	eor	r19, r19
     bf2:	27 fd       	sbrc	r18, 7
     bf4:	30 95       	com	r19
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <butterfly_menu+0x42>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <butterfly_menu+0x44>
     bfa:	ed b7       	in	r30, 0x3d	; 61
     bfc:	fe b7       	in	r31, 0x3e	; 62
     bfe:	31 96       	adiw	r30, 0x01	; 1
     c00:	86 e9       	ldi	r24, 0x96	; 150
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
     c08:	33 83       	std	Z+3, r19	; 0x03
     c0a:	22 83       	std	Z+2, r18	; 0x02
     c0c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <printf>
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
			switch(button) {
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	3f 83       	std	Y+7, r19	; 0x07
     c20:	2e 83       	std	Y+6, r18	; 0x06
     c22:	8e 81       	ldd	r24, Y+6	; 0x06
     c24:	9f 81       	ldd	r25, Y+7	; 0x07
     c26:	85 36       	cpi	r24, 0x65	; 101
     c28:	91 05       	cpc	r25, r1
     c2a:	49 f1       	breq	.+82     	; 0xc7e <butterfly_menu+0xc8>
     c2c:	2e 81       	ldd	r18, Y+6	; 0x06
     c2e:	3f 81       	ldd	r19, Y+7	; 0x07
     c30:	26 36       	cpi	r18, 0x66	; 102
     c32:	31 05       	cpc	r19, r1
     c34:	5c f4       	brge	.+22     	; 0xc4c <butterfly_menu+0x96>
     c36:	8e 81       	ldd	r24, Y+6	; 0x06
     c38:	9f 81       	ldd	r25, Y+7	; 0x07
     c3a:	80 33       	cpi	r24, 0x30	; 48
     c3c:	91 05       	cpc	r25, r1
     c3e:	69 f2       	breq	.-102    	; 0xbda <butterfly_menu+0x24>
     c40:	2e 81       	ldd	r18, Y+6	; 0x06
     c42:	3f 81       	ldd	r19, Y+7	; 0x07
     c44:	24 36       	cpi	r18, 0x64	; 100
     c46:	31 05       	cpc	r19, r1
     c48:	b1 f0       	breq	.+44     	; 0xc76 <butterfly_menu+0xc0>
     c4a:	20 c0       	rjmp	.+64     	; 0xc8c <butterfly_menu+0xd6>
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	9f 81       	ldd	r25, Y+7	; 0x07
     c50:	82 37       	cpi	r24, 0x72	; 114
     c52:	91 05       	cpc	r25, r1
     c54:	11 f2       	breq	.-124    	; 0xbda <butterfly_menu+0x24>
     c56:	2e 81       	ldd	r18, Y+6	; 0x06
     c58:	3f 81       	ldd	r19, Y+7	; 0x07
     c5a:	25 37       	cpi	r18, 0x75	; 117
     c5c:	31 05       	cpc	r19, r1
     c5e:	39 f0       	breq	.+14     	; 0xc6e <butterfly_menu+0xb8>
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	9f 81       	ldd	r25, Y+7	; 0x07
     c64:	8c 36       	cpi	r24, 0x6C	; 108
     c66:	91 05       	cpc	r25, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <butterfly_menu+0xb6>
     c6a:	b7 cf       	rjmp	.-146    	; 0xbda <butterfly_menu+0x24>
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <butterfly_menu+0xd6>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	81 50       	subi	r24, 0x01	; 1
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	0f c0       	rjmp	.+30     	; 0xc94 <butterfly_menu+0xde>
				case 'd': menu_state++;				break;
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	0b c0       	rjmp	.+22     	; 0xc94 <butterfly_menu+0xde>
				case 'e': start_game(menu_state);	break;
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	99 27       	eor	r25, r25
     c82:	87 fd       	sbrc	r24, 7
     c84:	90 95       	com	r25
     c86:	0e 94 c6 07 	call	0xf8c	; 0xf8c <start_game>
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <butterfly_menu+0xde>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     c8c:	85 ea       	ldi	r24, 0xA5	; 165
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	33 27       	eor	r19, r19
     c9a:	27 fd       	sbrc	r18, 7
     c9c:	30 95       	com	r19
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <butterfly_menu+0xea>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <butterfly_menu+0xec>
     ca2:	ed b7       	in	r30, 0x3d	; 61
     ca4:	fe b7       	in	r31, 0x3e	; 62
     ca6:	31 96       	adiw	r30, 0x01	; 1
     ca8:	8b ea       	ldi	r24, 0xAB	; 171
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	33 83       	std	Z+3, r19	; 0x03
     cb2:	22 83       	std	Z+2, r18	; 0x02
     cb4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <printf>
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	88 23       	and	r24, r24
     cc4:	14 f4       	brge	.+4      	; 0xcca <butterfly_menu+0x114>
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	84 30       	cpi	r24, 0x04	; 4
     cce:	0c f0       	brlt	.+2      	; 0xcd2 <butterfly_menu+0x11c>
     cd0:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	28 2f       	mov	r18, r24
     cd6:	33 27       	eor	r19, r19
     cd8:	27 fd       	sbrc	r18, 7
     cda:	30 95       	com	r19
     cdc:	3d 83       	std	Y+5, r19	; 0x05
     cde:	2c 83       	std	Y+4, r18	; 0x04
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	91 05       	cpc	r25, r1
     ce8:	d1 f0       	breq	.+52     	; 0xd1e <butterfly_menu+0x168>
     cea:	2c 81       	ldd	r18, Y+4	; 0x04
     cec:	3d 81       	ldd	r19, Y+5	; 0x05
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	2c f4       	brge	.+10     	; 0xcfe <butterfly_menu+0x148>
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	9d 81       	ldd	r25, Y+5	; 0x05
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	61 f0       	breq	.+24     	; 0xd14 <butterfly_menu+0x15e>
     cfc:	1f c0       	rjmp	.+62     	; 0xd3c <butterfly_menu+0x186>
     cfe:	2c 81       	ldd	r18, Y+4	; 0x04
     d00:	3d 81       	ldd	r19, Y+5	; 0x05
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	81 f0       	breq	.+32     	; 0xd28 <butterfly_menu+0x172>
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	91 05       	cpc	r25, r1
     d10:	81 f0       	breq	.+32     	; 0xd32 <butterfly_menu+0x17c>
     d12:	14 c0       	rjmp	.+40     	; 0xd3c <butterfly_menu+0x186>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     d14:	8c eb       	ldi	r24, 0xBC	; 188
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     d1c:	5e cf       	rjmp	.-324    	; 0xbda <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     d1e:	84 ed       	ldi	r24, 0xD4	; 212
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     d26:	59 cf       	rjmp	.-334    	; 0xbda <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     d28:	8b ee       	ldi	r24, 0xEB	; 235
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     d30:	54 cf       	rjmp	.-344    	; 0xbda <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     d3a:	4f cf       	rjmp	.-354    	; 0xbda <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     d3c:	1b 82       	std	Y+3, r1	; 0x03
     d3e:	4d cf       	rjmp	.-358    	; 0xbda <butterfly_menu+0x24>

00000d40 <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <butterfly_joystick_test+0x6>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <butterfly_joystick_test+0x8>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     d4c:	80 e3       	ldi	r24, 0x30	; 48
     d4e:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     d54:	0e 94 35 07 	call	0xe6a	; 0xe6a <butterfly_poll_joystick>
     d58:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	98 17       	cp	r25, r24
     d60:	b9 f3       	breq	.-18     	; 0xd50 <butterfly_joystick_test+0x10>
			switch(button) {
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 83       	std	Y+4, r19	; 0x04
     d6a:	2b 83       	std	Y+3, r18	; 0x03
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	85 36       	cpi	r24, 0x65	; 101
     d72:	91 05       	cpc	r25, r1
     d74:	99 f1       	breq	.+102    	; 0xddc <butterfly_joystick_test+0x9c>
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	26 36       	cpi	r18, 0x66	; 102
     d7c:	31 05       	cpc	r19, r1
     d7e:	5c f4       	brge	.+22     	; 0xd96 <butterfly_joystick_test+0x56>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	80 33       	cpi	r24, 0x30	; 48
     d86:	91 05       	cpc	r25, r1
     d88:	71 f1       	breq	.+92     	; 0xde6 <butterfly_joystick_test+0xa6>
     d8a:	2b 81       	ldd	r18, Y+3	; 0x03
     d8c:	3c 81       	ldd	r19, Y+4	; 0x04
     d8e:	24 36       	cpi	r18, 0x64	; 100
     d90:	31 05       	cpc	r19, r1
     d92:	f9 f0       	breq	.+62     	; 0xdd2 <butterfly_joystick_test+0x92>
     d94:	2d c0       	rjmp	.+90     	; 0xdf0 <butterfly_joystick_test+0xb0>
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	82 37       	cpi	r24, 0x72	; 114
     d9c:	91 05       	cpc	r25, r1
     d9e:	79 f0       	breq	.+30     	; 0xdbe <butterfly_joystick_test+0x7e>
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	25 37       	cpi	r18, 0x75	; 117
     da6:	31 05       	cpc	r19, r1
     da8:	79 f0       	breq	.+30     	; 0xdc8 <butterfly_joystick_test+0x88>
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	8c 36       	cpi	r24, 0x6C	; 108
     db0:	91 05       	cpc	r25, r1
     db2:	f1 f4       	brne	.+60     	; 0xdf0 <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
     db4:	84 e1       	ldi	r24, 0x14	; 20
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     dbc:	c9 cf       	rjmp	.-110    	; 0xd50 <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
     dbe:	89 e1       	ldi	r24, 0x19	; 25
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     dc6:	c4 cf       	rjmp	.-120    	; 0xd50 <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
     dc8:	8f e1       	ldi	r24, 0x1F	; 31
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     dd0:	bf cf       	rjmp	.-130    	; 0xd50 <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
     dd2:	82 e2       	ldi	r24, 0x22	; 34
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     dda:	ba cf       	rjmp	.-140    	; 0xd50 <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
     ddc:	87 e2       	ldi	r24, 0x27	; 39
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     de4:	b5 cf       	rjmp	.-150    	; 0xd50 <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
     de6:	8d e2       	ldi	r24, 0x2D	; 45
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     dee:	b0 cf       	rjmp	.-160    	; 0xd50 <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
     df0:	85 ea       	ldi	r24, 0xA5	; 165
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     df8:	ab cf       	rjmp	.-170    	; 0xd50 <butterfly_joystick_test+0x10>

00000dfa <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <butterfly_print+0x6>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <butterfly_print+0x8>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	SPI_SelectSlave(SPI_BUTTERFLY);
     e0a:	82 e6       	ldi	r24, 0x62	; 98
     e0c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     e10:	1a 82       	std	Y+2, r1	; 0x02
     e12:	19 82       	std	Y+1, r1	; 0x01
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <butterfly_print+0x4e>
		if (str[i] == '\0') break;
     e16:	29 81       	ldd	r18, Y+1	; 0x01
     e18:	3a 81       	ldd	r19, Y+2	; 0x02
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	fc 01       	movw	r30, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	a1 f0       	breq	.+40     	; 0xe52 <butterfly_print+0x58>
		SPI_MasterTransmit(str[i]);
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	3a 81       	ldd	r19, Y+2	; 0x02
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	fc 01       	movw	r30, r24
     e34:	e2 0f       	add	r30, r18
     e36:	f3 1f       	adc	r31, r19
     e38:	80 81       	ld	r24, Z
     e3a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
}

void butterfly_print(char * str){
	int i;
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	88 31       	cpi	r24, 0x18	; 24
     e4e:	91 05       	cpc	r25, r1
     e50:	14 f3       	brlt	.-60     	; 0xe16 <butterfly_print+0x1c>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
	SPI_NoSlave();
     e58:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	2f 97       	sbiw	r28, 0x0f	; 15
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
	char button;	
	SPI_SelectSlave(SPI_BUTTERFLY);
     e7e:	82 e6       	ldi	r24, 0x62	; 98
     e80:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     e84:	8e e2       	ldi	r24, 0x2E	; 46
     e86:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SPI_MasterTransmit>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e2       	ldi	r26, 0x20	; 32
     e90:	b1 e4       	ldi	r27, 0x41	; 65
     e92:	8b 87       	std	Y+11, r24	; 0x0b
     e94:	9c 87       	std	Y+12, r25	; 0x0c
     e96:	ad 87       	std	Y+13, r26	; 0x0d
     e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea2:	2a e9       	ldi	r18, 0x9A	; 154
     ea4:	3b e9       	ldi	r19, 0x9B	; 155
     ea6:	49 e9       	ldi	r20, 0x99	; 153
     ea8:	54 e4       	ldi	r21, 0x44	; 68
     eaa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	8f 83       	std	Y+7, r24	; 0x07
     eb4:	98 87       	std	Y+8, r25	; 0x08
     eb6:	a9 87       	std	Y+9, r26	; 0x09
     eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eba:	6f 81       	ldd	r22, Y+7	; 0x07
     ebc:	78 85       	ldd	r23, Y+8	; 0x08
     ebe:	89 85       	ldd	r24, Y+9	; 0x09
     ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	5f e3       	ldi	r21, 0x3F	; 63
     eca:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__ltsf2>
     ece:	88 23       	and	r24, r24
     ed0:	2c f4       	brge	.+10     	; 0xedc <butterfly_poll_joystick+0x72>
		__ticks = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <butterfly_poll_joystick+0xf0>
	else if (__tmp > 65535)
     edc:	6f 81       	ldd	r22, Y+7	; 0x07
     ede:	78 85       	ldd	r23, Y+8	; 0x08
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	4c f5       	brge	.+82     	; 0xf46 <butterfly_poll_joystick+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
     efa:	9e 85       	ldd	r25, Y+14	; 0x0e
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <butterfly_poll_joystick+0xd2>
     f1e:	8a e7       	ldi	r24, 0x7A	; 122
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <butterfly_poll_joystick+0xc0>
     f2e:	9c 83       	std	Y+4, r25	; 0x04
     f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	9e 83       	std	Y+6, r25	; 0x06
     f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	69 f7       	brne	.-38     	; 0xf1e <butterfly_poll_joystick+0xb4>
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <butterfly_poll_joystick+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <butterfly_poll_joystick+0xfc>
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
     f6e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <SPI_MasterReceive>
     f72:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
     f74:	0e 94 16 03 	call	0x62c	; 0x62c <SPI_NoSlave>
	return button;
     f78:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     f7a:	2f 96       	adiw	r28, 0x0f	; 15
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <start_game>:

void start_game(enum menu_state_enum menu_state){
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	61 97       	sbiw	r28, 0x11	; 17
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	28 2f       	mov	r18, r24
     fa6:	33 27       	eor	r19, r19
     fa8:	27 fd       	sbrc	r18, 7
     faa:	30 95       	com	r19
     fac:	39 8b       	std	Y+17, r19	; 0x11
     fae:	28 8b       	std	Y+16, r18	; 0x10
     fb0:	88 89       	ldd	r24, Y+16	; 0x10
     fb2:	99 89       	ldd	r25, Y+17	; 0x11
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	91 05       	cpc	r25, r1
     fb8:	d1 f0       	breq	.+52     	; 0xfee <start_game+0x62>
     fba:	28 89       	ldd	r18, Y+16	; 0x10
     fbc:	39 89       	ldd	r19, Y+17	; 0x11
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	2c f4       	brge	.+10     	; 0xfce <start_game+0x42>
     fc4:	88 89       	ldd	r24, Y+16	; 0x10
     fc6:	99 89       	ldd	r25, Y+17	; 0x11
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	61 f0       	breq	.+24     	; 0xfe4 <start_game+0x58>
     fcc:	90 c0       	rjmp	.+288    	; 0x10ee <start_game+0x162>
     fce:	28 89       	ldd	r18, Y+16	; 0x10
     fd0:	39 89       	ldd	r19, Y+17	; 0x11
     fd2:	22 30       	cpi	r18, 0x02	; 2
     fd4:	31 05       	cpc	r19, r1
     fd6:	81 f0       	breq	.+32     	; 0xff8 <start_game+0x6c>
     fd8:	88 89       	ldd	r24, Y+16	; 0x10
     fda:	99 89       	ldd	r25, Y+17	; 0x11
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	81 f0       	breq	.+32     	; 0x1002 <start_game+0x76>
     fe2:	85 c0       	rjmp	.+266    	; 0x10ee <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
     fe4:	84 e3       	ldi	r24, 0x34	; 52
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     fec:	0e c0       	rjmp	.+28     	; 0x100a <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
     fee:	84 e4       	ldi	r24, 0x44	; 68
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
     ff8:	83 e5       	ldi	r24, 0x53	; 83
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
    1000:	04 c0       	rjmp	.+8      	; 0x100a <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
    1002:	80 e6       	ldi	r24, 0x60	; 96
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 fd 06 	call	0xdfa	; 0xdfa <butterfly_print>
			break;
		default:			
			return;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	aa ef       	ldi	r26, 0xFA	; 250
    1010:	b4 e4       	ldi	r27, 0x44	; 68
    1012:	8b 87       	std	Y+11, r24	; 0x0b
    1014:	9c 87       	std	Y+12, r25	; 0x0c
    1016:	ad 87       	std	Y+13, r26	; 0x0d
    1018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101a:	6b 85       	ldd	r22, Y+11	; 0x0b
    101c:	7c 85       	ldd	r23, Y+12	; 0x0c
    101e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1020:	9e 85       	ldd	r25, Y+14	; 0x0e
    1022:	2a e9       	ldi	r18, 0x9A	; 154
    1024:	3b e9       	ldi	r19, 0x9B	; 155
    1026:	49 e9       	ldi	r20, 0x99	; 153
    1028:	54 e4       	ldi	r21, 0x44	; 68
    102a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	8f 83       	std	Y+7, r24	; 0x07
    1034:	98 87       	std	Y+8, r25	; 0x08
    1036:	a9 87       	std	Y+9, r26	; 0x09
    1038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    103a:	6f 81       	ldd	r22, Y+7	; 0x07
    103c:	78 85       	ldd	r23, Y+8	; 0x08
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e8       	ldi	r20, 0x80	; 128
    1048:	5f e3       	ldi	r21, 0x3F	; 63
    104a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__ltsf2>
    104e:	88 23       	and	r24, r24
    1050:	2c f4       	brge	.+10     	; 0x105c <start_game+0xd0>
		__ticks = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	3f c0       	rjmp	.+126    	; 0x10da <start_game+0x14e>
	else if (__tmp > 65535)
    105c:	6f 81       	ldd	r22, Y+7	; 0x07
    105e:	78 85       	ldd	r23, Y+8	; 0x08
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	9a 85       	ldd	r25, Y+10	; 0x0a
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	3f ef       	ldi	r19, 0xFF	; 255
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	57 e4       	ldi	r21, 0x47	; 71
    106c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__gtsf2>
    1070:	18 16       	cp	r1, r24
    1072:	4c f5       	brge	.+82     	; 0x10c6 <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1074:	6b 85       	ldd	r22, Y+11	; 0x0b
    1076:	7c 85       	ldd	r23, Y+12	; 0x0c
    1078:	8d 85       	ldd	r24, Y+13	; 0x0d
    107a:	9e 85       	ldd	r25, Y+14	; 0x0e
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <start_game+0x130>
    109e:	8a e7       	ldi	r24, 0x7A	; 122
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 83       	std	Y+4, r25	; 0x04
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <start_game+0x11e>
    10ae:	9c 83       	std	Y+4, r25	; 0x04
    10b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	69 f7       	brne	.-38     	; 0x109e <start_game+0x112>
    10c4:	14 c0       	rjmp	.+40     	; 0x10ee <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixunssfsi>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	8d 83       	std	Y+5, r24	; 0x05
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <start_game+0x15a>
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
    10ee:	61 96       	adiw	r28, 0x11	; 17
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <__fixunssfsi>:
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	7b 01       	movw	r14, r22
    110a:	8c 01       	movw	r16, r24
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	5f e4       	ldi	r21, 0x4F	; 79
    1114:	0e 94 80 0b 	call	0x1700	; 0x1700 <__gesf2>
    1118:	88 23       	and	r24, r24
    111a:	8c f0       	brlt	.+34     	; 0x113e <__fixunssfsi+0x3e>
    111c:	c8 01       	movw	r24, r16
    111e:	b7 01       	movw	r22, r14
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	5f e4       	ldi	r21, 0x4F	; 79
    1128:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__subsf3>
    112c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixsfsi>
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
    1134:	20 50       	subi	r18, 0x00	; 0
    1136:	30 40       	sbci	r19, 0x00	; 0
    1138:	40 40       	sbci	r20, 0x00	; 0
    113a:	50 48       	sbci	r21, 0x80	; 128
    113c:	06 c0       	rjmp	.+12     	; 0x114a <__fixunssfsi+0x4a>
    113e:	c8 01       	movw	r24, r16
    1140:	b7 01       	movw	r22, r14
    1142:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fixsfsi>
    1146:	9b 01       	movw	r18, r22
    1148:	ac 01       	movw	r20, r24
    114a:	b9 01       	movw	r22, r18
    114c:	ca 01       	movw	r24, r20
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	08 95       	ret

00001158 <_fpadd_parts>:
    1158:	a0 e0       	ldi	r26, 0x00	; 0
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e2 eb       	ldi	r30, 0xB2	; 178
    115e:	f8 e0       	ldi	r31, 0x08	; 8
    1160:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__>
    1164:	dc 01       	movw	r26, r24
    1166:	2b 01       	movw	r4, r22
    1168:	fa 01       	movw	r30, r20
    116a:	9c 91       	ld	r25, X
    116c:	92 30       	cpi	r25, 0x02	; 2
    116e:	08 f4       	brcc	.+2      	; 0x1172 <_fpadd_parts+0x1a>
    1170:	39 c1       	rjmp	.+626    	; 0x13e4 <_fpadd_parts+0x28c>
    1172:	eb 01       	movw	r28, r22
    1174:	88 81       	ld	r24, Y
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <_fpadd_parts+0x24>
    117a:	33 c1       	rjmp	.+614    	; 0x13e2 <_fpadd_parts+0x28a>
    117c:	94 30       	cpi	r25, 0x04	; 4
    117e:	69 f4       	brne	.+26     	; 0x119a <_fpadd_parts+0x42>
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	09 f0       	breq	.+2      	; 0x1186 <_fpadd_parts+0x2e>
    1184:	2f c1       	rjmp	.+606    	; 0x13e4 <_fpadd_parts+0x28c>
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	9c 91       	ld	r25, X
    118a:	11 97       	sbiw	r26, 0x01	; 1
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	98 17       	cp	r25, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <_fpadd_parts+0x3c>
    1192:	28 c1       	rjmp	.+592    	; 0x13e4 <_fpadd_parts+0x28c>
    1194:	ac e6       	ldi	r26, 0x6C	; 108
    1196:	b2 e0       	ldi	r27, 0x02	; 2
    1198:	25 c1       	rjmp	.+586    	; 0x13e4 <_fpadd_parts+0x28c>
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	09 f4       	brne	.+2      	; 0x11a0 <_fpadd_parts+0x48>
    119e:	21 c1       	rjmp	.+578    	; 0x13e2 <_fpadd_parts+0x28a>
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	a9 f4       	brne	.+42     	; 0x11ce <_fpadd_parts+0x76>
    11a4:	92 30       	cpi	r25, 0x02	; 2
    11a6:	09 f0       	breq	.+2      	; 0x11aa <_fpadd_parts+0x52>
    11a8:	1d c1       	rjmp	.+570    	; 0x13e4 <_fpadd_parts+0x28c>
    11aa:	9a 01       	movw	r18, r20
    11ac:	ad 01       	movw	r20, r26
    11ae:	88 e0       	ldi	r24, 0x08	; 8
    11b0:	ea 01       	movw	r28, r20
    11b2:	09 90       	ld	r0, Y+
    11b4:	ae 01       	movw	r20, r28
    11b6:	e9 01       	movw	r28, r18
    11b8:	09 92       	st	Y+, r0
    11ba:	9e 01       	movw	r18, r28
    11bc:	81 50       	subi	r24, 0x01	; 1
    11be:	c1 f7       	brne	.-16     	; 0x11b0 <_fpadd_parts+0x58>
    11c0:	e2 01       	movw	r28, r4
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	9c 91       	ld	r25, X
    11c8:	89 23       	and	r24, r25
    11ca:	81 83       	std	Z+1, r24	; 0x01
    11cc:	08 c1       	rjmp	.+528    	; 0x13de <_fpadd_parts+0x286>
    11ce:	92 30       	cpi	r25, 0x02	; 2
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <_fpadd_parts+0x7c>
    11d2:	07 c1       	rjmp	.+526    	; 0x13e2 <_fpadd_parts+0x28a>
    11d4:	12 96       	adiw	r26, 0x02	; 2
    11d6:	2d 90       	ld	r2, X+
    11d8:	3c 90       	ld	r3, X
    11da:	13 97       	sbiw	r26, 0x03	; 3
    11dc:	eb 01       	movw	r28, r22
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	14 96       	adiw	r26, 0x04	; 4
    11e4:	ad 90       	ld	r10, X+
    11e6:	bd 90       	ld	r11, X+
    11e8:	cd 90       	ld	r12, X+
    11ea:	dc 90       	ld	r13, X
    11ec:	17 97       	sbiw	r26, 0x07	; 7
    11ee:	ec 80       	ldd	r14, Y+4	; 0x04
    11f0:	fd 80       	ldd	r15, Y+5	; 0x05
    11f2:	0e 81       	ldd	r16, Y+6	; 0x06
    11f4:	1f 81       	ldd	r17, Y+7	; 0x07
    11f6:	91 01       	movw	r18, r2
    11f8:	28 1b       	sub	r18, r24
    11fa:	39 0b       	sbc	r19, r25
    11fc:	b9 01       	movw	r22, r18
    11fe:	37 ff       	sbrs	r19, 7
    1200:	04 c0       	rjmp	.+8      	; 0x120a <_fpadd_parts+0xb2>
    1202:	66 27       	eor	r22, r22
    1204:	77 27       	eor	r23, r23
    1206:	62 1b       	sub	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	60 32       	cpi	r22, 0x20	; 32
    120c:	71 05       	cpc	r23, r1
    120e:	0c f0       	brlt	.+2      	; 0x1212 <_fpadd_parts+0xba>
    1210:	61 c0       	rjmp	.+194    	; 0x12d4 <_fpadd_parts+0x17c>
    1212:	12 16       	cp	r1, r18
    1214:	13 06       	cpc	r1, r19
    1216:	6c f5       	brge	.+90     	; 0x1272 <_fpadd_parts+0x11a>
    1218:	37 01       	movw	r6, r14
    121a:	48 01       	movw	r8, r16
    121c:	06 2e       	mov	r0, r22
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <_fpadd_parts+0xd0>
    1220:	96 94       	lsr	r9
    1222:	87 94       	ror	r8
    1224:	77 94       	ror	r7
    1226:	67 94       	ror	r6
    1228:	0a 94       	dec	r0
    122a:	d2 f7       	brpl	.-12     	; 0x1220 <_fpadd_parts+0xc8>
    122c:	21 e0       	ldi	r18, 0x01	; 1
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	04 c0       	rjmp	.+8      	; 0x123e <_fpadd_parts+0xe6>
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	44 1f       	adc	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	6a 95       	dec	r22
    1240:	d2 f7       	brpl	.-12     	; 0x1236 <_fpadd_parts+0xde>
    1242:	21 50       	subi	r18, 0x01	; 1
    1244:	30 40       	sbci	r19, 0x00	; 0
    1246:	40 40       	sbci	r20, 0x00	; 0
    1248:	50 40       	sbci	r21, 0x00	; 0
    124a:	2e 21       	and	r18, r14
    124c:	3f 21       	and	r19, r15
    124e:	40 23       	and	r20, r16
    1250:	51 23       	and	r21, r17
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	41 05       	cpc	r20, r1
    1258:	51 05       	cpc	r21, r1
    125a:	21 f0       	breq	.+8      	; 0x1264 <_fpadd_parts+0x10c>
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	79 01       	movw	r14, r18
    1266:	8a 01       	movw	r16, r20
    1268:	e6 28       	or	r14, r6
    126a:	f7 28       	or	r15, r7
    126c:	08 29       	or	r16, r8
    126e:	19 29       	or	r17, r9
    1270:	3c c0       	rjmp	.+120    	; 0x12ea <_fpadd_parts+0x192>
    1272:	23 2b       	or	r18, r19
    1274:	d1 f1       	breq	.+116    	; 0x12ea <_fpadd_parts+0x192>
    1276:	26 0e       	add	r2, r22
    1278:	37 1e       	adc	r3, r23
    127a:	35 01       	movw	r6, r10
    127c:	46 01       	movw	r8, r12
    127e:	06 2e       	mov	r0, r22
    1280:	04 c0       	rjmp	.+8      	; 0x128a <_fpadd_parts+0x132>
    1282:	96 94       	lsr	r9
    1284:	87 94       	ror	r8
    1286:	77 94       	ror	r7
    1288:	67 94       	ror	r6
    128a:	0a 94       	dec	r0
    128c:	d2 f7       	brpl	.-12     	; 0x1282 <_fpadd_parts+0x12a>
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <_fpadd_parts+0x148>
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	44 1f       	adc	r20, r20
    129e:	55 1f       	adc	r21, r21
    12a0:	6a 95       	dec	r22
    12a2:	d2 f7       	brpl	.-12     	; 0x1298 <_fpadd_parts+0x140>
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	30 40       	sbci	r19, 0x00	; 0
    12a8:	40 40       	sbci	r20, 0x00	; 0
    12aa:	50 40       	sbci	r21, 0x00	; 0
    12ac:	2a 21       	and	r18, r10
    12ae:	3b 21       	and	r19, r11
    12b0:	4c 21       	and	r20, r12
    12b2:	5d 21       	and	r21, r13
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	41 05       	cpc	r20, r1
    12ba:	51 05       	cpc	r21, r1
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <_fpadd_parts+0x16e>
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	59 01       	movw	r10, r18
    12c8:	6a 01       	movw	r12, r20
    12ca:	a6 28       	or	r10, r6
    12cc:	b7 28       	or	r11, r7
    12ce:	c8 28       	or	r12, r8
    12d0:	d9 28       	or	r13, r9
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <_fpadd_parts+0x192>
    12d4:	82 15       	cp	r24, r2
    12d6:	93 05       	cpc	r25, r3
    12d8:	2c f0       	brlt	.+10     	; 0x12e4 <_fpadd_parts+0x18c>
    12da:	1c 01       	movw	r2, r24
    12dc:	aa 24       	eor	r10, r10
    12de:	bb 24       	eor	r11, r11
    12e0:	65 01       	movw	r12, r10
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <_fpadd_parts+0x192>
    12e4:	ee 24       	eor	r14, r14
    12e6:	ff 24       	eor	r15, r15
    12e8:	87 01       	movw	r16, r14
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	9c 91       	ld	r25, X
    12ee:	d2 01       	movw	r26, r4
    12f0:	11 96       	adiw	r26, 0x01	; 1
    12f2:	8c 91       	ld	r24, X
    12f4:	98 17       	cp	r25, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <_fpadd_parts+0x1a2>
    12f8:	45 c0       	rjmp	.+138    	; 0x1384 <_fpadd_parts+0x22c>
    12fa:	99 23       	and	r25, r25
    12fc:	39 f0       	breq	.+14     	; 0x130c <_fpadd_parts+0x1b4>
    12fe:	a8 01       	movw	r20, r16
    1300:	97 01       	movw	r18, r14
    1302:	2a 19       	sub	r18, r10
    1304:	3b 09       	sbc	r19, r11
    1306:	4c 09       	sbc	r20, r12
    1308:	5d 09       	sbc	r21, r13
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <_fpadd_parts+0x1c0>
    130c:	a6 01       	movw	r20, r12
    130e:	95 01       	movw	r18, r10
    1310:	2e 19       	sub	r18, r14
    1312:	3f 09       	sbc	r19, r15
    1314:	40 0b       	sbc	r20, r16
    1316:	51 0b       	sbc	r21, r17
    1318:	57 fd       	sbrc	r21, 7
    131a:	08 c0       	rjmp	.+16     	; 0x132c <_fpadd_parts+0x1d4>
    131c:	11 82       	std	Z+1, r1	; 0x01
    131e:	33 82       	std	Z+3, r3	; 0x03
    1320:	22 82       	std	Z+2, r2	; 0x02
    1322:	24 83       	std	Z+4, r18	; 0x04
    1324:	35 83       	std	Z+5, r19	; 0x05
    1326:	46 83       	std	Z+6, r20	; 0x06
    1328:	57 83       	std	Z+7, r21	; 0x07
    132a:	1d c0       	rjmp	.+58     	; 0x1366 <_fpadd_parts+0x20e>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	81 83       	std	Z+1, r24	; 0x01
    1330:	33 82       	std	Z+3, r3	; 0x03
    1332:	22 82       	std	Z+2, r2	; 0x02
    1334:	88 27       	eor	r24, r24
    1336:	99 27       	eor	r25, r25
    1338:	dc 01       	movw	r26, r24
    133a:	82 1b       	sub	r24, r18
    133c:	93 0b       	sbc	r25, r19
    133e:	a4 0b       	sbc	r26, r20
    1340:	b5 0b       	sbc	r27, r21
    1342:	84 83       	std	Z+4, r24	; 0x04
    1344:	95 83       	std	Z+5, r25	; 0x05
    1346:	a6 83       	std	Z+6, r26	; 0x06
    1348:	b7 83       	std	Z+7, r27	; 0x07
    134a:	0d c0       	rjmp	.+26     	; 0x1366 <_fpadd_parts+0x20e>
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	44 1f       	adc	r20, r20
    1352:	55 1f       	adc	r21, r21
    1354:	24 83       	std	Z+4, r18	; 0x04
    1356:	35 83       	std	Z+5, r19	; 0x05
    1358:	46 83       	std	Z+6, r20	; 0x06
    135a:	57 83       	std	Z+7, r21	; 0x07
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	93 81       	ldd	r25, Z+3	; 0x03
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	93 83       	std	Z+3, r25	; 0x03
    1364:	82 83       	std	Z+2, r24	; 0x02
    1366:	24 81       	ldd	r18, Z+4	; 0x04
    1368:	35 81       	ldd	r19, Z+5	; 0x05
    136a:	46 81       	ldd	r20, Z+6	; 0x06
    136c:	57 81       	ldd	r21, Z+7	; 0x07
    136e:	da 01       	movw	r26, r20
    1370:	c9 01       	movw	r24, r18
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	a1 09       	sbc	r26, r1
    1376:	b1 09       	sbc	r27, r1
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	af 4f       	sbci	r26, 0xFF	; 255
    137e:	bf 43       	sbci	r27, 0x3F	; 63
    1380:	28 f3       	brcs	.-54     	; 0x134c <_fpadd_parts+0x1f4>
    1382:	0b c0       	rjmp	.+22     	; 0x139a <_fpadd_parts+0x242>
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	33 82       	std	Z+3, r3	; 0x03
    1388:	22 82       	std	Z+2, r2	; 0x02
    138a:	ea 0c       	add	r14, r10
    138c:	fb 1c       	adc	r15, r11
    138e:	0c 1d       	adc	r16, r12
    1390:	1d 1d       	adc	r17, r13
    1392:	e4 82       	std	Z+4, r14	; 0x04
    1394:	f5 82       	std	Z+5, r15	; 0x05
    1396:	06 83       	std	Z+6, r16	; 0x06
    1398:	17 83       	std	Z+7, r17	; 0x07
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	80 83       	st	Z, r24
    139e:	24 81       	ldd	r18, Z+4	; 0x04
    13a0:	35 81       	ldd	r19, Z+5	; 0x05
    13a2:	46 81       	ldd	r20, Z+6	; 0x06
    13a4:	57 81       	ldd	r21, Z+7	; 0x07
    13a6:	57 ff       	sbrs	r21, 7
    13a8:	1a c0       	rjmp	.+52     	; 0x13de <_fpadd_parts+0x286>
    13aa:	c9 01       	movw	r24, r18
    13ac:	aa 27       	eor	r26, r26
    13ae:	97 fd       	sbrc	r25, 7
    13b0:	a0 95       	com	r26
    13b2:	ba 2f       	mov	r27, r26
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	90 70       	andi	r25, 0x00	; 0
    13b8:	a0 70       	andi	r26, 0x00	; 0
    13ba:	b0 70       	andi	r27, 0x00	; 0
    13bc:	56 95       	lsr	r21
    13be:	47 95       	ror	r20
    13c0:	37 95       	ror	r19
    13c2:	27 95       	ror	r18
    13c4:	82 2b       	or	r24, r18
    13c6:	93 2b       	or	r25, r19
    13c8:	a4 2b       	or	r26, r20
    13ca:	b5 2b       	or	r27, r21
    13cc:	84 83       	std	Z+4, r24	; 0x04
    13ce:	95 83       	std	Z+5, r25	; 0x05
    13d0:	a6 83       	std	Z+6, r26	; 0x06
    13d2:	b7 83       	std	Z+7, r27	; 0x07
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	93 83       	std	Z+3, r25	; 0x03
    13dc:	82 83       	std	Z+2, r24	; 0x02
    13de:	df 01       	movw	r26, r30
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <_fpadd_parts+0x28c>
    13e2:	d2 01       	movw	r26, r4
    13e4:	cd 01       	movw	r24, r26
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	e2 e1       	ldi	r30, 0x12	; 18
    13ec:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__>

000013f0 <__subsf3>:
    13f0:	a0 e2       	ldi	r26, 0x20	; 32
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ee ef       	ldi	r30, 0xFE	; 254
    13f6:	f9 e0       	ldi	r31, 0x09	; 9
    13f8:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
    13fc:	69 83       	std	Y+1, r22	; 0x01
    13fe:	7a 83       	std	Y+2, r23	; 0x02
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	2d 83       	std	Y+5, r18	; 0x05
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	4f 83       	std	Y+7, r20	; 0x07
    140a:	58 87       	std	Y+8, r21	; 0x08
    140c:	e9 e0       	ldi	r30, 0x09	; 9
    140e:	ee 2e       	mov	r14, r30
    1410:	f1 2c       	mov	r15, r1
    1412:	ec 0e       	add	r14, r28
    1414:	fd 1e       	adc	r15, r29
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	b7 01       	movw	r22, r14
    141c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1420:	8e 01       	movw	r16, r28
    1422:	0f 5e       	subi	r16, 0xEF	; 239
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	ce 01       	movw	r24, r28
    1428:	05 96       	adiw	r24, 0x05	; 5
    142a:	b8 01       	movw	r22, r16
    142c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1430:	8a 89       	ldd	r24, Y+18	; 0x12
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	89 27       	eor	r24, r25
    1436:	8a 8b       	std	Y+18, r24	; 0x12
    1438:	c7 01       	movw	r24, r14
    143a:	b8 01       	movw	r22, r16
    143c:	ae 01       	movw	r20, r28
    143e:	47 5e       	subi	r20, 0xE7	; 231
    1440:	5f 4f       	sbci	r21, 0xFF	; 255
    1442:	0e 94 ac 08 	call	0x1158	; 0x1158 <_fpadd_parts>
    1446:	0e 94 34 0c 	call	0x1868	; 0x1868 <__pack_f>
    144a:	a0 96       	adiw	r28, 0x20	; 32
    144c:	e6 e0       	ldi	r30, 0x06	; 6
    144e:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

00001452 <__addsf3>:
    1452:	a0 e2       	ldi	r26, 0x20	; 32
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e2       	ldi	r30, 0x2F	; 47
    1458:	fa e0       	ldi	r31, 0x0A	; 10
    145a:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
    145e:	69 83       	std	Y+1, r22	; 0x01
    1460:	7a 83       	std	Y+2, r23	; 0x02
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	2d 83       	std	Y+5, r18	; 0x05
    1468:	3e 83       	std	Y+6, r19	; 0x06
    146a:	4f 83       	std	Y+7, r20	; 0x07
    146c:	58 87       	std	Y+8, r21	; 0x08
    146e:	f9 e0       	ldi	r31, 0x09	; 9
    1470:	ef 2e       	mov	r14, r31
    1472:	f1 2c       	mov	r15, r1
    1474:	ec 0e       	add	r14, r28
    1476:	fd 1e       	adc	r15, r29
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	b7 01       	movw	r22, r14
    147e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1482:	8e 01       	movw	r16, r28
    1484:	0f 5e       	subi	r16, 0xEF	; 239
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	ce 01       	movw	r24, r28
    148a:	05 96       	adiw	r24, 0x05	; 5
    148c:	b8 01       	movw	r22, r16
    148e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1492:	c7 01       	movw	r24, r14
    1494:	b8 01       	movw	r22, r16
    1496:	ae 01       	movw	r20, r28
    1498:	47 5e       	subi	r20, 0xE7	; 231
    149a:	5f 4f       	sbci	r21, 0xFF	; 255
    149c:	0e 94 ac 08 	call	0x1158	; 0x1158 <_fpadd_parts>
    14a0:	0e 94 34 0c 	call	0x1868	; 0x1868 <__pack_f>
    14a4:	a0 96       	adiw	r28, 0x20	; 32
    14a6:	e6 e0       	ldi	r30, 0x06	; 6
    14a8:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

000014ac <__mulsf3>:
    14ac:	a0 e2       	ldi	r26, 0x20	; 32
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ec e5       	ldi	r30, 0x5C	; 92
    14b2:	fa e0       	ldi	r31, 0x0A	; 10
    14b4:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__>
    14b8:	69 83       	std	Y+1, r22	; 0x01
    14ba:	7a 83       	std	Y+2, r23	; 0x02
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	2d 83       	std	Y+5, r18	; 0x05
    14c2:	3e 83       	std	Y+6, r19	; 0x06
    14c4:	4f 83       	std	Y+7, r20	; 0x07
    14c6:	58 87       	std	Y+8, r21	; 0x08
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	be 01       	movw	r22, r28
    14ce:	67 5f       	subi	r22, 0xF7	; 247
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    14d6:	ce 01       	movw	r24, r28
    14d8:	05 96       	adiw	r24, 0x05	; 5
    14da:	be 01       	movw	r22, r28
    14dc:	6f 5e       	subi	r22, 0xEF	; 239
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    14e4:	99 85       	ldd	r25, Y+9	; 0x09
    14e6:	92 30       	cpi	r25, 0x02	; 2
    14e8:	88 f0       	brcs	.+34     	; 0x150c <__mulsf3+0x60>
    14ea:	89 89       	ldd	r24, Y+17	; 0x11
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	c8 f0       	brcs	.+50     	; 0x1522 <__mulsf3+0x76>
    14f0:	94 30       	cpi	r25, 0x04	; 4
    14f2:	19 f4       	brne	.+6      	; 0x14fa <__mulsf3+0x4e>
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	51 f4       	brne	.+20     	; 0x150c <__mulsf3+0x60>
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <__mulsf3+0x56>
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	29 f4       	brne	.+10     	; 0x1508 <__mulsf3+0x5c>
    14fe:	92 30       	cpi	r25, 0x02	; 2
    1500:	81 f4       	brne	.+32     	; 0x1522 <__mulsf3+0x76>
    1502:	8c e6       	ldi	r24, 0x6C	; 108
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	c6 c0       	rjmp	.+396    	; 0x1694 <__mulsf3+0x1e8>
    1508:	92 30       	cpi	r25, 0x02	; 2
    150a:	49 f4       	brne	.+18     	; 0x151e <__mulsf3+0x72>
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1510:	8a 89       	ldd	r24, Y+18	; 0x12
    1512:	98 13       	cpse	r25, r24
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	2a 87       	std	Y+10, r18	; 0x0a
    1518:	ce 01       	movw	r24, r28
    151a:	09 96       	adiw	r24, 0x09	; 9
    151c:	bb c0       	rjmp	.+374    	; 0x1694 <__mulsf3+0x1e8>
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	49 f4       	brne	.+18     	; 0x1534 <__mulsf3+0x88>
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	8a 89       	ldd	r24, Y+18	; 0x12
    1528:	98 13       	cpse	r25, r24
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	2a 8b       	std	Y+18, r18	; 0x12
    152e:	ce 01       	movw	r24, r28
    1530:	41 96       	adiw	r24, 0x11	; 17
    1532:	b0 c0       	rjmp	.+352    	; 0x1694 <__mulsf3+0x1e8>
    1534:	2d 84       	ldd	r2, Y+13	; 0x0d
    1536:	3e 84       	ldd	r3, Y+14	; 0x0e
    1538:	4f 84       	ldd	r4, Y+15	; 0x0f
    153a:	58 88       	ldd	r5, Y+16	; 0x10
    153c:	6d 88       	ldd	r6, Y+21	; 0x15
    153e:	7e 88       	ldd	r7, Y+22	; 0x16
    1540:	8f 88       	ldd	r8, Y+23	; 0x17
    1542:	98 8c       	ldd	r9, Y+24	; 0x18
    1544:	ee 24       	eor	r14, r14
    1546:	ff 24       	eor	r15, r15
    1548:	87 01       	movw	r16, r14
    154a:	aa 24       	eor	r10, r10
    154c:	bb 24       	eor	r11, r11
    154e:	65 01       	movw	r12, r10
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	e0 e0       	ldi	r30, 0x00	; 0
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	c1 01       	movw	r24, r2
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	89 2b       	or	r24, r25
    1564:	e9 f0       	breq	.+58     	; 0x15a0 <__mulsf3+0xf4>
    1566:	e6 0c       	add	r14, r6
    1568:	f7 1c       	adc	r15, r7
    156a:	08 1d       	adc	r16, r8
    156c:	19 1d       	adc	r17, r9
    156e:	9a 01       	movw	r18, r20
    1570:	ab 01       	movw	r20, r22
    1572:	2a 0d       	add	r18, r10
    1574:	3b 1d       	adc	r19, r11
    1576:	4c 1d       	adc	r20, r12
    1578:	5d 1d       	adc	r21, r13
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e6 14       	cp	r14, r6
    1584:	f7 04       	cpc	r15, r7
    1586:	08 05       	cpc	r16, r8
    1588:	19 05       	cpc	r17, r9
    158a:	20 f4       	brcc	.+8      	; 0x1594 <__mulsf3+0xe8>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ba 01       	movw	r22, r20
    1596:	a9 01       	movw	r20, r18
    1598:	48 0f       	add	r20, r24
    159a:	59 1f       	adc	r21, r25
    159c:	6a 1f       	adc	r22, r26
    159e:	7b 1f       	adc	r23, r27
    15a0:	aa 0c       	add	r10, r10
    15a2:	bb 1c       	adc	r11, r11
    15a4:	cc 1c       	adc	r12, r12
    15a6:	dd 1c       	adc	r13, r13
    15a8:	97 fe       	sbrs	r9, 7
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <__mulsf3+0x110>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	a8 2a       	or	r10, r24
    15b6:	b9 2a       	or	r11, r25
    15b8:	ca 2a       	or	r12, r26
    15ba:	db 2a       	or	r13, r27
    15bc:	31 96       	adiw	r30, 0x01	; 1
    15be:	e0 32       	cpi	r30, 0x20	; 32
    15c0:	f1 05       	cpc	r31, r1
    15c2:	49 f0       	breq	.+18     	; 0x15d6 <__mulsf3+0x12a>
    15c4:	66 0c       	add	r6, r6
    15c6:	77 1c       	adc	r7, r7
    15c8:	88 1c       	adc	r8, r8
    15ca:	99 1c       	adc	r9, r9
    15cc:	56 94       	lsr	r5
    15ce:	47 94       	ror	r4
    15d0:	37 94       	ror	r3
    15d2:	27 94       	ror	r2
    15d4:	c3 cf       	rjmp	.-122    	; 0x155c <__mulsf3+0xb0>
    15d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    15d8:	ea 89       	ldd	r30, Y+18	; 0x12
    15da:	2b 89       	ldd	r18, Y+19	; 0x13
    15dc:	3c 89       	ldd	r19, Y+20	; 0x14
    15de:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e2:	28 0f       	add	r18, r24
    15e4:	39 1f       	adc	r19, r25
    15e6:	2e 5f       	subi	r18, 0xFE	; 254
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	17 c0       	rjmp	.+46     	; 0x161a <__mulsf3+0x16e>
    15ec:	ca 01       	movw	r24, r20
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	89 2b       	or	r24, r25
    15f4:	61 f0       	breq	.+24     	; 0x160e <__mulsf3+0x162>
    15f6:	16 95       	lsr	r17
    15f8:	07 95       	ror	r16
    15fa:	f7 94       	ror	r15
    15fc:	e7 94       	ror	r14
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e8       	ldi	r27, 0x80	; 128
    1606:	e8 2a       	or	r14, r24
    1608:	f9 2a       	or	r15, r25
    160a:	0a 2b       	or	r16, r26
    160c:	1b 2b       	or	r17, r27
    160e:	76 95       	lsr	r23
    1610:	67 95       	ror	r22
    1612:	57 95       	ror	r21
    1614:	47 95       	ror	r20
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	77 fd       	sbrc	r23, 7
    161c:	e7 cf       	rjmp	.-50     	; 0x15ec <__mulsf3+0x140>
    161e:	0c c0       	rjmp	.+24     	; 0x1638 <__mulsf3+0x18c>
    1620:	44 0f       	add	r20, r20
    1622:	55 1f       	adc	r21, r21
    1624:	66 1f       	adc	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	17 fd       	sbrc	r17, 7
    162a:	41 60       	ori	r20, 0x01	; 1
    162c:	ee 0c       	add	r14, r14
    162e:	ff 1c       	adc	r15, r15
    1630:	00 1f       	adc	r16, r16
    1632:	11 1f       	adc	r17, r17
    1634:	21 50       	subi	r18, 0x01	; 1
    1636:	30 40       	sbci	r19, 0x00	; 0
    1638:	40 30       	cpi	r20, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	59 07       	cpc	r21, r25
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	69 07       	cpc	r22, r25
    1642:	90 e4       	ldi	r25, 0x40	; 64
    1644:	79 07       	cpc	r23, r25
    1646:	60 f3       	brcs	.-40     	; 0x1620 <__mulsf3+0x174>
    1648:	2b 8f       	std	Y+27, r18	; 0x1b
    164a:	3c 8f       	std	Y+28, r19	; 0x1c
    164c:	db 01       	movw	r26, r22
    164e:	ca 01       	movw	r24, r20
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	90 70       	andi	r25, 0x00	; 0
    1654:	a0 70       	andi	r26, 0x00	; 0
    1656:	b0 70       	andi	r27, 0x00	; 0
    1658:	80 34       	cpi	r24, 0x40	; 64
    165a:	91 05       	cpc	r25, r1
    165c:	a1 05       	cpc	r26, r1
    165e:	b1 05       	cpc	r27, r1
    1660:	61 f4       	brne	.+24     	; 0x167a <__mulsf3+0x1ce>
    1662:	47 fd       	sbrc	r20, 7
    1664:	0a c0       	rjmp	.+20     	; 0x167a <__mulsf3+0x1ce>
    1666:	e1 14       	cp	r14, r1
    1668:	f1 04       	cpc	r15, r1
    166a:	01 05       	cpc	r16, r1
    166c:	11 05       	cpc	r17, r1
    166e:	29 f0       	breq	.+10     	; 0x167a <__mulsf3+0x1ce>
    1670:	40 5c       	subi	r20, 0xC0	; 192
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	6f 4f       	sbci	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	40 78       	andi	r20, 0x80	; 128
    167a:	1a 8e       	std	Y+26, r1	; 0x1a
    167c:	fe 17       	cp	r31, r30
    167e:	11 f0       	breq	.+4      	; 0x1684 <__mulsf3+0x1d8>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	8a 8f       	std	Y+26, r24	; 0x1a
    1684:	4d 8f       	std	Y+29, r20	; 0x1d
    1686:	5e 8f       	std	Y+30, r21	; 0x1e
    1688:	6f 8f       	std	Y+31, r22	; 0x1f
    168a:	78 a3       	std	Y+32, r23	; 0x20
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	89 8f       	std	Y+25, r24	; 0x19
    1690:	ce 01       	movw	r24, r28
    1692:	49 96       	adiw	r24, 0x19	; 25
    1694:	0e 94 34 0c 	call	0x1868	; 0x1868 <__pack_f>
    1698:	a0 96       	adiw	r28, 0x20	; 32
    169a:	e2 e1       	ldi	r30, 0x12	; 18
    169c:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__>

000016a0 <__gtsf2>:
    16a0:	a8 e1       	ldi	r26, 0x18	; 24
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e6 e5       	ldi	r30, 0x56	; 86
    16a6:	fb e0       	ldi	r31, 0x0B	; 11
    16a8:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
    16ac:	69 83       	std	Y+1, r22	; 0x01
    16ae:	7a 83       	std	Y+2, r23	; 0x02
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	2d 83       	std	Y+5, r18	; 0x05
    16b6:	3e 83       	std	Y+6, r19	; 0x06
    16b8:	4f 83       	std	Y+7, r20	; 0x07
    16ba:	58 87       	std	Y+8, r21	; 0x08
    16bc:	89 e0       	ldi	r24, 0x09	; 9
    16be:	e8 2e       	mov	r14, r24
    16c0:	f1 2c       	mov	r15, r1
    16c2:	ec 0e       	add	r14, r28
    16c4:	fd 1e       	adc	r15, r29
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	b7 01       	movw	r22, r14
    16cc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    16d0:	8e 01       	movw	r16, r28
    16d2:	0f 5e       	subi	r16, 0xEF	; 239
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	ce 01       	movw	r24, r28
    16d8:	05 96       	adiw	r24, 0x05	; 5
    16da:	b8 01       	movw	r22, r16
    16dc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	40 f0       	brcs	.+16     	; 0x16f6 <__gtsf2+0x56>
    16e6:	89 89       	ldd	r24, Y+17	; 0x11
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	28 f0       	brcs	.+10     	; 0x16f6 <__gtsf2+0x56>
    16ec:	c7 01       	movw	r24, r14
    16ee:	b8 01       	movw	r22, r16
    16f0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fpcmp_parts_f>
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <__gtsf2+0x58>
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	68 96       	adiw	r28, 0x18	; 24
    16fa:	e6 e0       	ldi	r30, 0x06	; 6
    16fc:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

00001700 <__gesf2>:
    1700:	a8 e1       	ldi	r26, 0x18	; 24
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e6 e8       	ldi	r30, 0x86	; 134
    1706:	fb e0       	ldi	r31, 0x0B	; 11
    1708:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
    170c:	69 83       	std	Y+1, r22	; 0x01
    170e:	7a 83       	std	Y+2, r23	; 0x02
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	2d 83       	std	Y+5, r18	; 0x05
    1716:	3e 83       	std	Y+6, r19	; 0x06
    1718:	4f 83       	std	Y+7, r20	; 0x07
    171a:	58 87       	std	Y+8, r21	; 0x08
    171c:	89 e0       	ldi	r24, 0x09	; 9
    171e:	e8 2e       	mov	r14, r24
    1720:	f1 2c       	mov	r15, r1
    1722:	ec 0e       	add	r14, r28
    1724:	fd 1e       	adc	r15, r29
    1726:	ce 01       	movw	r24, r28
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	b7 01       	movw	r22, r14
    172c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1730:	8e 01       	movw	r16, r28
    1732:	0f 5e       	subi	r16, 0xEF	; 239
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	ce 01       	movw	r24, r28
    1738:	05 96       	adiw	r24, 0x05	; 5
    173a:	b8 01       	movw	r22, r16
    173c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	40 f0       	brcs	.+16     	; 0x1756 <__gesf2+0x56>
    1746:	89 89       	ldd	r24, Y+17	; 0x11
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	28 f0       	brcs	.+10     	; 0x1756 <__gesf2+0x56>
    174c:	c7 01       	movw	r24, r14
    174e:	b8 01       	movw	r22, r16
    1750:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fpcmp_parts_f>
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <__gesf2+0x58>
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	68 96       	adiw	r28, 0x18	; 24
    175a:	e6 e0       	ldi	r30, 0x06	; 6
    175c:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

00001760 <__ltsf2>:
    1760:	a8 e1       	ldi	r26, 0x18	; 24
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e6 eb       	ldi	r30, 0xB6	; 182
    1766:	fb e0       	ldi	r31, 0x0B	; 11
    1768:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
    176c:	69 83       	std	Y+1, r22	; 0x01
    176e:	7a 83       	std	Y+2, r23	; 0x02
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	2d 83       	std	Y+5, r18	; 0x05
    1776:	3e 83       	std	Y+6, r19	; 0x06
    1778:	4f 83       	std	Y+7, r20	; 0x07
    177a:	58 87       	std	Y+8, r21	; 0x08
    177c:	89 e0       	ldi	r24, 0x09	; 9
    177e:	e8 2e       	mov	r14, r24
    1780:	f1 2c       	mov	r15, r1
    1782:	ec 0e       	add	r14, r28
    1784:	fd 1e       	adc	r15, r29
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	b7 01       	movw	r22, r14
    178c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    1790:	8e 01       	movw	r16, r28
    1792:	0f 5e       	subi	r16, 0xEF	; 239
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	ce 01       	movw	r24, r28
    1798:	05 96       	adiw	r24, 0x05	; 5
    179a:	b8 01       	movw	r22, r16
    179c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	40 f0       	brcs	.+16     	; 0x17b6 <__ltsf2+0x56>
    17a6:	89 89       	ldd	r24, Y+17	; 0x11
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	28 f0       	brcs	.+10     	; 0x17b6 <__ltsf2+0x56>
    17ac:	c7 01       	movw	r24, r14
    17ae:	b8 01       	movw	r22, r16
    17b0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fpcmp_parts_f>
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <__ltsf2+0x58>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	68 96       	adiw	r28, 0x18	; 24
    17ba:	e6 e0       	ldi	r30, 0x06	; 6
    17bc:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

000017c0 <__fixsfsi>:
    17c0:	ac e0       	ldi	r26, 0x0C	; 12
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e6 ee       	ldi	r30, 0xE6	; 230
    17c6:	fb e0       	ldi	r31, 0x0B	; 11
    17c8:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__prologue_saves__+0x20>
    17cc:	69 83       	std	Y+1, r22	; 0x01
    17ce:	7a 83       	std	Y+2, r23	; 0x02
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	be 01       	movw	r22, r28
    17da:	6b 5f       	subi	r22, 0xFB	; 251
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__unpack_f>
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	61 f1       	breq	.+88     	; 0x1840 <__fixsfsi+0x80>
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	50 f1       	brcs	.+84     	; 0x1840 <__fixsfsi+0x80>
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <__fixsfsi+0x38>
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	88 23       	and	r24, r24
    17f4:	51 f1       	breq	.+84     	; 0x184a <__fixsfsi+0x8a>
    17f6:	2e c0       	rjmp	.+92     	; 0x1854 <__fixsfsi+0x94>
    17f8:	2f 81       	ldd	r18, Y+7	; 0x07
    17fa:	38 85       	ldd	r19, Y+8	; 0x08
    17fc:	37 fd       	sbrc	r19, 7
    17fe:	20 c0       	rjmp	.+64     	; 0x1840 <__fixsfsi+0x80>
    1800:	6e 81       	ldd	r22, Y+6	; 0x06
    1802:	2f 31       	cpi	r18, 0x1F	; 31
    1804:	31 05       	cpc	r19, r1
    1806:	1c f0       	brlt	.+6      	; 0x180e <__fixsfsi+0x4e>
    1808:	66 23       	and	r22, r22
    180a:	f9 f0       	breq	.+62     	; 0x184a <__fixsfsi+0x8a>
    180c:	23 c0       	rjmp	.+70     	; 0x1854 <__fixsfsi+0x94>
    180e:	8e e1       	ldi	r24, 0x1E	; 30
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	82 1b       	sub	r24, r18
    1814:	93 0b       	sbc	r25, r19
    1816:	29 85       	ldd	r18, Y+9	; 0x09
    1818:	3a 85       	ldd	r19, Y+10	; 0x0a
    181a:	4b 85       	ldd	r20, Y+11	; 0x0b
    181c:	5c 85       	ldd	r21, Y+12	; 0x0c
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <__fixsfsi+0x68>
    1820:	56 95       	lsr	r21
    1822:	47 95       	ror	r20
    1824:	37 95       	ror	r19
    1826:	27 95       	ror	r18
    1828:	8a 95       	dec	r24
    182a:	d2 f7       	brpl	.-12     	; 0x1820 <__fixsfsi+0x60>
    182c:	66 23       	and	r22, r22
    182e:	b1 f0       	breq	.+44     	; 0x185c <__fixsfsi+0x9c>
    1830:	50 95       	com	r21
    1832:	40 95       	com	r20
    1834:	30 95       	com	r19
    1836:	21 95       	neg	r18
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	4f 4f       	sbci	r20, 0xFF	; 255
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	0e c0       	rjmp	.+28     	; 0x185c <__fixsfsi+0x9c>
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	09 c0       	rjmp	.+18     	; 0x185c <__fixsfsi+0x9c>
    184a:	2f ef       	ldi	r18, 0xFF	; 255
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f ef       	ldi	r20, 0xFF	; 255
    1850:	5f e7       	ldi	r21, 0x7F	; 127
    1852:	04 c0       	rjmp	.+8      	; 0x185c <__fixsfsi+0x9c>
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	50 e8       	ldi	r21, 0x80	; 128
    185c:	b9 01       	movw	r22, r18
    185e:	ca 01       	movw	r24, r20
    1860:	2c 96       	adiw	r28, 0x0c	; 12
    1862:	e2 e0       	ldi	r30, 0x02	; 2
    1864:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__epilogue_restores__+0x20>

00001868 <__pack_f>:
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	fc 01       	movw	r30, r24
    1874:	e4 80       	ldd	r14, Z+4	; 0x04
    1876:	f5 80       	ldd	r15, Z+5	; 0x05
    1878:	06 81       	ldd	r16, Z+6	; 0x06
    187a:	17 81       	ldd	r17, Z+7	; 0x07
    187c:	d1 80       	ldd	r13, Z+1	; 0x01
    187e:	80 81       	ld	r24, Z
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	48 f4       	brcc	.+18     	; 0x1896 <__pack_f+0x2e>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e1       	ldi	r26, 0x10	; 16
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e8 2a       	or	r14, r24
    188e:	f9 2a       	or	r15, r25
    1890:	0a 2b       	or	r16, r26
    1892:	1b 2b       	or	r17, r27
    1894:	a5 c0       	rjmp	.+330    	; 0x19e0 <__pack_f+0x178>
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	09 f4       	brne	.+2      	; 0x189c <__pack_f+0x34>
    189a:	9f c0       	rjmp	.+318    	; 0x19da <__pack_f+0x172>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	21 f4       	brne	.+8      	; 0x18a8 <__pack_f+0x40>
    18a0:	ee 24       	eor	r14, r14
    18a2:	ff 24       	eor	r15, r15
    18a4:	87 01       	movw	r16, r14
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <__pack_f+0x4a>
    18a8:	e1 14       	cp	r14, r1
    18aa:	f1 04       	cpc	r15, r1
    18ac:	01 05       	cpc	r16, r1
    18ae:	11 05       	cpc	r17, r1
    18b0:	19 f4       	brne	.+6      	; 0x18b8 <__pack_f+0x50>
    18b2:	e0 e0       	ldi	r30, 0x00	; 0
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	96 c0       	rjmp	.+300    	; 0x19e4 <__pack_f+0x17c>
    18b8:	62 81       	ldd	r22, Z+2	; 0x02
    18ba:	73 81       	ldd	r23, Z+3	; 0x03
    18bc:	9f ef       	ldi	r25, 0xFF	; 255
    18be:	62 38       	cpi	r22, 0x82	; 130
    18c0:	79 07       	cpc	r23, r25
    18c2:	0c f0       	brlt	.+2      	; 0x18c6 <__pack_f+0x5e>
    18c4:	5b c0       	rjmp	.+182    	; 0x197c <__pack_f+0x114>
    18c6:	22 e8       	ldi	r18, 0x82	; 130
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	26 1b       	sub	r18, r22
    18cc:	37 0b       	sbc	r19, r23
    18ce:	2a 31       	cpi	r18, 0x1A	; 26
    18d0:	31 05       	cpc	r19, r1
    18d2:	2c f0       	brlt	.+10     	; 0x18de <__pack_f+0x76>
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	2a c0       	rjmp	.+84     	; 0x1932 <__pack_f+0xca>
    18de:	b8 01       	movw	r22, r16
    18e0:	a7 01       	movw	r20, r14
    18e2:	02 2e       	mov	r0, r18
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <__pack_f+0x86>
    18e6:	76 95       	lsr	r23
    18e8:	67 95       	ror	r22
    18ea:	57 95       	ror	r21
    18ec:	47 95       	ror	r20
    18ee:	0a 94       	dec	r0
    18f0:	d2 f7       	brpl	.-12     	; 0x18e6 <__pack_f+0x7e>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 e0       	ldi	r26, 0x00	; 0
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <__pack_f+0x9c>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	aa 1f       	adc	r26, r26
    1902:	bb 1f       	adc	r27, r27
    1904:	2a 95       	dec	r18
    1906:	d2 f7       	brpl	.-12     	; 0x18fc <__pack_f+0x94>
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	a1 09       	sbc	r26, r1
    190c:	b1 09       	sbc	r27, r1
    190e:	8e 21       	and	r24, r14
    1910:	9f 21       	and	r25, r15
    1912:	a0 23       	and	r26, r16
    1914:	b1 23       	and	r27, r17
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	a1 05       	cpc	r26, r1
    191a:	b1 05       	cpc	r27, r1
    191c:	21 f0       	breq	.+8      	; 0x1926 <__pack_f+0xbe>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a0 e0       	ldi	r26, 0x00	; 0
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	9a 01       	movw	r18, r20
    1928:	ab 01       	movw	r20, r22
    192a:	28 2b       	or	r18, r24
    192c:	39 2b       	or	r19, r25
    192e:	4a 2b       	or	r20, r26
    1930:	5b 2b       	or	r21, r27
    1932:	da 01       	movw	r26, r20
    1934:	c9 01       	movw	r24, r18
    1936:	8f 77       	andi	r24, 0x7F	; 127
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	a0 70       	andi	r26, 0x00	; 0
    193c:	b0 70       	andi	r27, 0x00	; 0
    193e:	80 34       	cpi	r24, 0x40	; 64
    1940:	91 05       	cpc	r25, r1
    1942:	a1 05       	cpc	r26, r1
    1944:	b1 05       	cpc	r27, r1
    1946:	39 f4       	brne	.+14     	; 0x1956 <__pack_f+0xee>
    1948:	27 ff       	sbrs	r18, 7
    194a:	09 c0       	rjmp	.+18     	; 0x195e <__pack_f+0xf6>
    194c:	20 5c       	subi	r18, 0xC0	; 192
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	4f 4f       	sbci	r20, 0xFF	; 255
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	04 c0       	rjmp	.+8      	; 0x195e <__pack_f+0xf6>
    1956:	21 5c       	subi	r18, 0xC1	; 193
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	4f 4f       	sbci	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	e0 e0       	ldi	r30, 0x00	; 0
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	20 30       	cpi	r18, 0x00	; 0
    1964:	a0 e0       	ldi	r26, 0x00	; 0
    1966:	3a 07       	cpc	r19, r26
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	4a 07       	cpc	r20, r26
    196c:	a0 e4       	ldi	r26, 0x40	; 64
    196e:	5a 07       	cpc	r21, r26
    1970:	10 f0       	brcs	.+4      	; 0x1976 <__pack_f+0x10e>
    1972:	e1 e0       	ldi	r30, 0x01	; 1
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	79 01       	movw	r14, r18
    1978:	8a 01       	movw	r16, r20
    197a:	27 c0       	rjmp	.+78     	; 0x19ca <__pack_f+0x162>
    197c:	60 38       	cpi	r22, 0x80	; 128
    197e:	71 05       	cpc	r23, r1
    1980:	64 f5       	brge	.+88     	; 0x19da <__pack_f+0x172>
    1982:	fb 01       	movw	r30, r22
    1984:	e1 58       	subi	r30, 0x81	; 129
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	d8 01       	movw	r26, r16
    198a:	c7 01       	movw	r24, r14
    198c:	8f 77       	andi	r24, 0x7F	; 127
    198e:	90 70       	andi	r25, 0x00	; 0
    1990:	a0 70       	andi	r26, 0x00	; 0
    1992:	b0 70       	andi	r27, 0x00	; 0
    1994:	80 34       	cpi	r24, 0x40	; 64
    1996:	91 05       	cpc	r25, r1
    1998:	a1 05       	cpc	r26, r1
    199a:	b1 05       	cpc	r27, r1
    199c:	39 f4       	brne	.+14     	; 0x19ac <__pack_f+0x144>
    199e:	e7 fe       	sbrs	r14, 7
    19a0:	0d c0       	rjmp	.+26     	; 0x19bc <__pack_f+0x154>
    19a2:	80 e4       	ldi	r24, 0x40	; 64
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e0       	ldi	r26, 0x00	; 0
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <__pack_f+0x14c>
    19ac:	8f e3       	ldi	r24, 0x3F	; 63
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e8 0e       	add	r14, r24
    19b6:	f9 1e       	adc	r15, r25
    19b8:	0a 1f       	adc	r16, r26
    19ba:	1b 1f       	adc	r17, r27
    19bc:	17 ff       	sbrs	r17, 7
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <__pack_f+0x162>
    19c0:	16 95       	lsr	r17
    19c2:	07 95       	ror	r16
    19c4:	f7 94       	ror	r15
    19c6:	e7 94       	ror	r14
    19c8:	31 96       	adiw	r30, 0x01	; 1
    19ca:	87 e0       	ldi	r24, 0x07	; 7
    19cc:	16 95       	lsr	r17
    19ce:	07 95       	ror	r16
    19d0:	f7 94       	ror	r15
    19d2:	e7 94       	ror	r14
    19d4:	8a 95       	dec	r24
    19d6:	d1 f7       	brne	.-12     	; 0x19cc <__pack_f+0x164>
    19d8:	05 c0       	rjmp	.+10     	; 0x19e4 <__pack_f+0x17c>
    19da:	ee 24       	eor	r14, r14
    19dc:	ff 24       	eor	r15, r15
    19de:	87 01       	movw	r16, r14
    19e0:	ef ef       	ldi	r30, 0xFF	; 255
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	6e 2f       	mov	r22, r30
    19e6:	67 95       	ror	r22
    19e8:	66 27       	eor	r22, r22
    19ea:	67 95       	ror	r22
    19ec:	90 2f       	mov	r25, r16
    19ee:	9f 77       	andi	r25, 0x7F	; 127
    19f0:	d7 94       	ror	r13
    19f2:	dd 24       	eor	r13, r13
    19f4:	d7 94       	ror	r13
    19f6:	8e 2f       	mov	r24, r30
    19f8:	86 95       	lsr	r24
    19fa:	49 2f       	mov	r20, r25
    19fc:	46 2b       	or	r20, r22
    19fe:	58 2f       	mov	r21, r24
    1a00:	5d 29       	or	r21, r13
    1a02:	b7 01       	movw	r22, r14
    1a04:	ca 01       	movw	r24, r20
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	08 95       	ret

00001a12 <__unpack_f>:
    1a12:	fc 01       	movw	r30, r24
    1a14:	db 01       	movw	r26, r22
    1a16:	40 81       	ld	r20, Z
    1a18:	51 81       	ldd	r21, Z+1	; 0x01
    1a1a:	22 81       	ldd	r18, Z+2	; 0x02
    1a1c:	62 2f       	mov	r22, r18
    1a1e:	6f 77       	andi	r22, 0x7F	; 127
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	22 1f       	adc	r18, r18
    1a24:	22 27       	eor	r18, r18
    1a26:	22 1f       	adc	r18, r18
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	89 2f       	mov	r24, r25
    1a2c:	88 0f       	add	r24, r24
    1a2e:	82 2b       	or	r24, r18
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	99 1f       	adc	r25, r25
    1a36:	99 27       	eor	r25, r25
    1a38:	99 1f       	adc	r25, r25
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	9c 93       	st	X, r25
    1a3e:	11 97       	sbiw	r26, 0x01	; 1
    1a40:	21 15       	cp	r18, r1
    1a42:	31 05       	cpc	r19, r1
    1a44:	a9 f5       	brne	.+106    	; 0x1ab0 <__unpack_f+0x9e>
    1a46:	41 15       	cp	r20, r1
    1a48:	51 05       	cpc	r21, r1
    1a4a:	61 05       	cpc	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <__unpack_f+0x42>
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	37 c0       	rjmp	.+110    	; 0x1ac2 <__unpack_f+0xb0>
    1a54:	82 e8       	ldi	r24, 0x82	; 130
    1a56:	9f ef       	ldi	r25, 0xFF	; 255
    1a58:	13 96       	adiw	r26, 0x03	; 3
    1a5a:	9c 93       	st	X, r25
    1a5c:	8e 93       	st	-X, r24
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
    1a60:	9a 01       	movw	r18, r20
    1a62:	ab 01       	movw	r20, r22
    1a64:	67 e0       	ldi	r22, 0x07	; 7
    1a66:	22 0f       	add	r18, r18
    1a68:	33 1f       	adc	r19, r19
    1a6a:	44 1f       	adc	r20, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	6a 95       	dec	r22
    1a70:	d1 f7       	brne	.-12     	; 0x1a66 <__unpack_f+0x54>
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	8c 93       	st	X, r24
    1a76:	0d c0       	rjmp	.+26     	; 0x1a92 <__unpack_f+0x80>
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	44 1f       	adc	r20, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	13 97       	sbiw	r26, 0x03	; 3
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	13 96       	adiw	r26, 0x03	; 3
    1a8c:	9c 93       	st	X, r25
    1a8e:	8e 93       	st	-X, r24
    1a90:	12 97       	sbiw	r26, 0x02	; 2
    1a92:	20 30       	cpi	r18, 0x00	; 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	38 07       	cpc	r19, r24
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	48 07       	cpc	r20, r24
    1a9c:	80 e4       	ldi	r24, 0x40	; 64
    1a9e:	58 07       	cpc	r21, r24
    1aa0:	58 f3       	brcs	.-42     	; 0x1a78 <__unpack_f+0x66>
    1aa2:	14 96       	adiw	r26, 0x04	; 4
    1aa4:	2d 93       	st	X+, r18
    1aa6:	3d 93       	st	X+, r19
    1aa8:	4d 93       	st	X+, r20
    1aaa:	5c 93       	st	X, r21
    1aac:	17 97       	sbiw	r26, 0x07	; 7
    1aae:	08 95       	ret
    1ab0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	79 f4       	brne	.+30     	; 0x1ad4 <__unpack_f+0xc2>
    1ab6:	41 15       	cp	r20, r1
    1ab8:	51 05       	cpc	r21, r1
    1aba:	61 05       	cpc	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	19 f4       	brne	.+6      	; 0x1ac6 <__unpack_f+0xb4>
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	8c 93       	st	X, r24
    1ac4:	08 95       	ret
    1ac6:	64 ff       	sbrs	r22, 4
    1ac8:	03 c0       	rjmp	.+6      	; 0x1ad0 <__unpack_f+0xbe>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	8c 93       	st	X, r24
    1ace:	12 c0       	rjmp	.+36     	; 0x1af4 <__unpack_f+0xe2>
    1ad0:	1c 92       	st	X, r1
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <__unpack_f+0xe2>
    1ad4:	2f 57       	subi	r18, 0x7F	; 127
    1ad6:	30 40       	sbci	r19, 0x00	; 0
    1ad8:	13 96       	adiw	r26, 0x03	; 3
    1ada:	3c 93       	st	X, r19
    1adc:	2e 93       	st	-X, r18
    1ade:	12 97       	sbiw	r26, 0x02	; 2
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	8c 93       	st	X, r24
    1ae4:	87 e0       	ldi	r24, 0x07	; 7
    1ae6:	44 0f       	add	r20, r20
    1ae8:	55 1f       	adc	r21, r21
    1aea:	66 1f       	adc	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	8a 95       	dec	r24
    1af0:	d1 f7       	brne	.-12     	; 0x1ae6 <__unpack_f+0xd4>
    1af2:	70 64       	ori	r23, 0x40	; 64
    1af4:	14 96       	adiw	r26, 0x04	; 4
    1af6:	4d 93       	st	X+, r20
    1af8:	5d 93       	st	X+, r21
    1afa:	6d 93       	st	X+, r22
    1afc:	7c 93       	st	X, r23
    1afe:	17 97       	sbiw	r26, 0x07	; 7
    1b00:	08 95       	ret

00001b02 <__fpcmp_parts_f>:
    1b02:	1f 93       	push	r17
    1b04:	dc 01       	movw	r26, r24
    1b06:	fb 01       	movw	r30, r22
    1b08:	9c 91       	ld	r25, X
    1b0a:	92 30       	cpi	r25, 0x02	; 2
    1b0c:	08 f4       	brcc	.+2      	; 0x1b10 <__fpcmp_parts_f+0xe>
    1b0e:	47 c0       	rjmp	.+142    	; 0x1b9e <__fpcmp_parts_f+0x9c>
    1b10:	80 81       	ld	r24, Z
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	08 f4       	brcc	.+2      	; 0x1b18 <__fpcmp_parts_f+0x16>
    1b16:	43 c0       	rjmp	.+134    	; 0x1b9e <__fpcmp_parts_f+0x9c>
    1b18:	94 30       	cpi	r25, 0x04	; 4
    1b1a:	51 f4       	brne	.+20     	; 0x1b30 <__fpcmp_parts_f+0x2e>
    1b1c:	11 96       	adiw	r26, 0x01	; 1
    1b1e:	1c 91       	ld	r17, X
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	99 f5       	brne	.+102    	; 0x1b8a <__fpcmp_parts_f+0x88>
    1b24:	81 81       	ldd	r24, Z+1	; 0x01
    1b26:	68 2f       	mov	r22, r24
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	61 1b       	sub	r22, r17
    1b2c:	71 09       	sbc	r23, r1
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <__fpcmp_parts_f+0xac>
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <__fpcmp_parts_f+0x3a>
    1b34:	92 30       	cpi	r25, 0x02	; 2
    1b36:	31 f4       	brne	.+12     	; 0x1b44 <__fpcmp_parts_f+0x42>
    1b38:	82 30       	cpi	r24, 0x02	; 2
    1b3a:	b9 f1       	breq	.+110    	; 0x1baa <__fpcmp_parts_f+0xa8>
    1b3c:	81 81       	ldd	r24, Z+1	; 0x01
    1b3e:	88 23       	and	r24, r24
    1b40:	89 f1       	breq	.+98     	; 0x1ba4 <__fpcmp_parts_f+0xa2>
    1b42:	2d c0       	rjmp	.+90     	; 0x1b9e <__fpcmp_parts_f+0x9c>
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	1c 91       	ld	r17, X
    1b48:	11 97       	sbiw	r26, 0x01	; 1
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	f1 f0       	breq	.+60     	; 0x1b8a <__fpcmp_parts_f+0x88>
    1b4e:	81 81       	ldd	r24, Z+1	; 0x01
    1b50:	18 17       	cp	r17, r24
    1b52:	d9 f4       	brne	.+54     	; 0x1b8a <__fpcmp_parts_f+0x88>
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	2d 91       	ld	r18, X+
    1b58:	3c 91       	ld	r19, X
    1b5a:	13 97       	sbiw	r26, 0x03	; 3
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	82 17       	cp	r24, r18
    1b62:	93 07       	cpc	r25, r19
    1b64:	94 f0       	brlt	.+36     	; 0x1b8a <__fpcmp_parts_f+0x88>
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	bc f0       	brlt	.+46     	; 0x1b9a <__fpcmp_parts_f+0x98>
    1b6c:	14 96       	adiw	r26, 0x04	; 4
    1b6e:	8d 91       	ld	r24, X+
    1b70:	9d 91       	ld	r25, X+
    1b72:	0d 90       	ld	r0, X+
    1b74:	bc 91       	ld	r27, X
    1b76:	a0 2d       	mov	r26, r0
    1b78:	24 81       	ldd	r18, Z+4	; 0x04
    1b7a:	35 81       	ldd	r19, Z+5	; 0x05
    1b7c:	46 81       	ldd	r20, Z+6	; 0x06
    1b7e:	57 81       	ldd	r21, Z+7	; 0x07
    1b80:	28 17       	cp	r18, r24
    1b82:	39 07       	cpc	r19, r25
    1b84:	4a 07       	cpc	r20, r26
    1b86:	5b 07       	cpc	r21, r27
    1b88:	18 f4       	brcc	.+6      	; 0x1b90 <__fpcmp_parts_f+0x8e>
    1b8a:	11 23       	and	r17, r17
    1b8c:	41 f0       	breq	.+16     	; 0x1b9e <__fpcmp_parts_f+0x9c>
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <__fpcmp_parts_f+0xa2>
    1b90:	82 17       	cp	r24, r18
    1b92:	93 07       	cpc	r25, r19
    1b94:	a4 07       	cpc	r26, r20
    1b96:	b5 07       	cpc	r27, r21
    1b98:	40 f4       	brcc	.+16     	; 0x1baa <__fpcmp_parts_f+0xa8>
    1b9a:	11 23       	and	r17, r17
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <__fpcmp_parts_f+0xa2>
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <__fpcmp_parts_f+0xac>
    1ba4:	6f ef       	ldi	r22, 0xFF	; 255
    1ba6:	7f ef       	ldi	r23, 0xFF	; 255
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <__fpcmp_parts_f+0xac>
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	cb 01       	movw	r24, r22
    1bb0:	1f 91       	pop	r17
    1bb2:	08 95       	ret

00001bb4 <fdevopen>:
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	8c 01       	movw	r16, r24
    1bbe:	eb 01       	movw	r28, r22
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	31 f4       	brne	.+12     	; 0x1bd0 <fdevopen+0x1c>
    1bc4:	61 15       	cp	r22, r1
    1bc6:	71 05       	cpc	r23, r1
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <fdevopen+0x1c>
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	38 c0       	rjmp	.+112    	; 0x1c40 <fdevopen+0x8c>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	6e e0       	ldi	r22, 0x0E	; 14
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <calloc>
    1bdc:	fc 01       	movw	r30, r24
    1bde:	9c 01       	movw	r18, r24
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	71 f1       	breq	.+92     	; 0x1c40 <fdevopen+0x8c>
    1be4:	80 e8       	ldi	r24, 0x80	; 128
    1be6:	83 83       	std	Z+3, r24	; 0x03
    1be8:	20 97       	sbiw	r28, 0x00	; 0
    1bea:	71 f0       	breq	.+28     	; 0x1c08 <fdevopen+0x54>
    1bec:	d3 87       	std	Z+11, r29	; 0x0b
    1bee:	c2 87       	std	Z+10, r28	; 0x0a
    1bf0:	81 e8       	ldi	r24, 0x81	; 129
    1bf2:	83 83       	std	Z+3, r24	; 0x03
    1bf4:	80 91 7a 02 	lds	r24, 0x027A
    1bf8:	90 91 7b 02 	lds	r25, 0x027B
    1bfc:	89 2b       	or	r24, r25
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <fdevopen+0x54>
    1c00:	f0 93 7b 02 	sts	0x027B, r31
    1c04:	e0 93 7a 02 	sts	0x027A, r30
    1c08:	01 15       	cp	r16, r1
    1c0a:	11 05       	cpc	r17, r1
    1c0c:	c9 f0       	breq	.+50     	; 0x1c40 <fdevopen+0x8c>
    1c0e:	11 87       	std	Z+9, r17	; 0x09
    1c10:	00 87       	std	Z+8, r16	; 0x08
    1c12:	83 81       	ldd	r24, Z+3	; 0x03
    1c14:	82 60       	ori	r24, 0x02	; 2
    1c16:	83 83       	std	Z+3, r24	; 0x03
    1c18:	80 91 7c 02 	lds	r24, 0x027C
    1c1c:	90 91 7d 02 	lds	r25, 0x027D
    1c20:	89 2b       	or	r24, r25
    1c22:	71 f4       	brne	.+28     	; 0x1c40 <fdevopen+0x8c>
    1c24:	f0 93 7d 02 	sts	0x027D, r31
    1c28:	e0 93 7c 02 	sts	0x027C, r30
    1c2c:	80 91 7e 02 	lds	r24, 0x027E
    1c30:	90 91 7f 02 	lds	r25, 0x027F
    1c34:	89 2b       	or	r24, r25
    1c36:	21 f4       	brne	.+8      	; 0x1c40 <fdevopen+0x8c>
    1c38:	f0 93 7f 02 	sts	0x027F, r31
    1c3c:	e0 93 7e 02 	sts	0x027E, r30
    1c40:	c9 01       	movw	r24, r18
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	08 95       	ret

00001c4c <printf>:
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ec e2       	ldi	r30, 0x2C	; 44
    1c52:	fe e0       	ldi	r31, 0x0E	; 14
    1c54:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__prologue_saves__+0x20>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	35 96       	adiw	r30, 0x05	; 5
    1c5c:	61 91       	ld	r22, Z+
    1c5e:	71 91       	ld	r23, Z+
    1c60:	80 91 7c 02 	lds	r24, 0x027C
    1c64:	90 91 7d 02 	lds	r25, 0x027D
    1c68:	af 01       	movw	r20, r30
    1c6a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <vfprintf>
    1c6e:	20 96       	adiw	r28, 0x00	; 0
    1c70:	e2 e0       	ldi	r30, 0x02	; 2
    1c72:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__epilogue_restores__+0x20>

00001c76 <putchar>:
    1c76:	60 91 7c 02 	lds	r22, 0x027C
    1c7a:	70 91 7d 02 	lds	r23, 0x027D
    1c7e:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    1c82:	08 95       	ret

00001c84 <puts>:
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	8c 01       	movw	r16, r24
    1c8e:	e0 91 7c 02 	lds	r30, 0x027C
    1c92:	f0 91 7d 02 	lds	r31, 0x027D
    1c96:	83 81       	ldd	r24, Z+3	; 0x03
    1c98:	81 ff       	sbrs	r24, 1
    1c9a:	21 c0       	rjmp	.+66     	; 0x1cde <puts+0x5a>
    1c9c:	c0 e0       	ldi	r28, 0x00	; 0
    1c9e:	d0 e0       	ldi	r29, 0x00	; 0
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <puts+0x38>
    1ca2:	e0 91 7c 02 	lds	r30, 0x027C
    1ca6:	f0 91 7d 02 	lds	r31, 0x027D
    1caa:	20 85       	ldd	r18, Z+8	; 0x08
    1cac:	31 85       	ldd	r19, Z+9	; 0x09
    1cae:	bf 01       	movw	r22, r30
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	09 95       	icall
    1cb4:	89 2b       	or	r24, r25
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <puts+0x38>
    1cb8:	cf ef       	ldi	r28, 0xFF	; 255
    1cba:	df ef       	ldi	r29, 0xFF	; 255
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	81 91       	ld	r24, Z+
    1cc0:	8f 01       	movw	r16, r30
    1cc2:	88 23       	and	r24, r24
    1cc4:	71 f7       	brne	.-36     	; 0x1ca2 <puts+0x1e>
    1cc6:	e0 91 7c 02 	lds	r30, 0x027C
    1cca:	f0 91 7d 02 	lds	r31, 0x027D
    1cce:	20 85       	ldd	r18, Z+8	; 0x08
    1cd0:	31 85       	ldd	r19, Z+9	; 0x09
    1cd2:	8a e0       	ldi	r24, 0x0A	; 10
    1cd4:	bf 01       	movw	r22, r30
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	09 95       	icall
    1cda:	89 2b       	or	r24, r25
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <puts+0x5e>
    1cde:	cf ef       	ldi	r28, 0xFF	; 255
    1ce0:	df ef       	ldi	r29, 0xFF	; 255
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	08 95       	ret

00001cee <vfprintf>:
    1cee:	ab e0       	ldi	r26, 0x0B	; 11
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	ed e7       	ldi	r30, 0x7D	; 125
    1cf4:	fe e0       	ldi	r31, 0x0E	; 14
    1cf6:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__>
    1cfa:	3c 01       	movw	r6, r24
    1cfc:	2b 01       	movw	r4, r22
    1cfe:	5a 01       	movw	r10, r20
    1d00:	fc 01       	movw	r30, r24
    1d02:	17 82       	std	Z+7, r1	; 0x07
    1d04:	16 82       	std	Z+6, r1	; 0x06
    1d06:	83 81       	ldd	r24, Z+3	; 0x03
    1d08:	81 fd       	sbrc	r24, 1
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <vfprintf+0x24>
    1d0c:	6f ef       	ldi	r22, 0xFF	; 255
    1d0e:	7f ef       	ldi	r23, 0xFF	; 255
    1d10:	c6 c1       	rjmp	.+908    	; 0x209e <vfprintf+0x3b0>
    1d12:	9a e0       	ldi	r25, 0x0A	; 10
    1d14:	89 2e       	mov	r8, r25
    1d16:	1e 01       	movw	r2, r28
    1d18:	08 94       	sec
    1d1a:	21 1c       	adc	r2, r1
    1d1c:	31 1c       	adc	r3, r1
    1d1e:	f3 01       	movw	r30, r6
    1d20:	23 81       	ldd	r18, Z+3	; 0x03
    1d22:	f2 01       	movw	r30, r4
    1d24:	23 fd       	sbrc	r18, 3
    1d26:	85 91       	lpm	r24, Z+
    1d28:	23 ff       	sbrs	r18, 3
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	2f 01       	movw	r4, r30
    1d2e:	88 23       	and	r24, r24
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <vfprintf+0x46>
    1d32:	b2 c1       	rjmp	.+868    	; 0x2098 <vfprintf+0x3aa>
    1d34:	85 32       	cpi	r24, 0x25	; 37
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <vfprintf+0x58>
    1d38:	23 fd       	sbrc	r18, 3
    1d3a:	85 91       	lpm	r24, Z+
    1d3c:	23 ff       	sbrs	r18, 3
    1d3e:	81 91       	ld	r24, Z+
    1d40:	2f 01       	movw	r4, r30
    1d42:	85 32       	cpi	r24, 0x25	; 37
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <vfprintf+0x62>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	b3 01       	movw	r22, r6
    1d4a:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    1d4e:	e7 cf       	rjmp	.-50     	; 0x1d1e <vfprintf+0x30>
    1d50:	98 2f       	mov	r25, r24
    1d52:	ff 24       	eor	r15, r15
    1d54:	ee 24       	eor	r14, r14
    1d56:	99 24       	eor	r9, r9
    1d58:	ff e1       	ldi	r31, 0x1F	; 31
    1d5a:	ff 15       	cp	r31, r15
    1d5c:	d0 f0       	brcs	.+52     	; 0x1d92 <vfprintf+0xa4>
    1d5e:	9b 32       	cpi	r25, 0x2B	; 43
    1d60:	69 f0       	breq	.+26     	; 0x1d7c <vfprintf+0x8e>
    1d62:	9c 32       	cpi	r25, 0x2C	; 44
    1d64:	28 f4       	brcc	.+10     	; 0x1d70 <vfprintf+0x82>
    1d66:	90 32       	cpi	r25, 0x20	; 32
    1d68:	59 f0       	breq	.+22     	; 0x1d80 <vfprintf+0x92>
    1d6a:	93 32       	cpi	r25, 0x23	; 35
    1d6c:	91 f4       	brne	.+36     	; 0x1d92 <vfprintf+0xa4>
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <vfprintf+0x9e>
    1d70:	9d 32       	cpi	r25, 0x2D	; 45
    1d72:	49 f0       	breq	.+18     	; 0x1d86 <vfprintf+0x98>
    1d74:	90 33       	cpi	r25, 0x30	; 48
    1d76:	69 f4       	brne	.+26     	; 0x1d92 <vfprintf+0xa4>
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	24 c0       	rjmp	.+72     	; 0x1dc4 <vfprintf+0xd6>
    1d7c:	52 e0       	ldi	r21, 0x02	; 2
    1d7e:	f5 2a       	or	r15, r21
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	f8 2a       	or	r15, r24
    1d84:	28 c0       	rjmp	.+80     	; 0x1dd6 <vfprintf+0xe8>
    1d86:	98 e0       	ldi	r25, 0x08	; 8
    1d88:	f9 2a       	or	r15, r25
    1d8a:	25 c0       	rjmp	.+74     	; 0x1dd6 <vfprintf+0xe8>
    1d8c:	e0 e1       	ldi	r30, 0x10	; 16
    1d8e:	fe 2a       	or	r15, r30
    1d90:	22 c0       	rjmp	.+68     	; 0x1dd6 <vfprintf+0xe8>
    1d92:	f7 fc       	sbrc	r15, 7
    1d94:	29 c0       	rjmp	.+82     	; 0x1de8 <vfprintf+0xfa>
    1d96:	89 2f       	mov	r24, r25
    1d98:	80 53       	subi	r24, 0x30	; 48
    1d9a:	8a 30       	cpi	r24, 0x0A	; 10
    1d9c:	70 f4       	brcc	.+28     	; 0x1dba <vfprintf+0xcc>
    1d9e:	f6 fe       	sbrs	r15, 6
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <vfprintf+0xbe>
    1da2:	98 9c       	mul	r9, r8
    1da4:	90 2c       	mov	r9, r0
    1da6:	11 24       	eor	r1, r1
    1da8:	98 0e       	add	r9, r24
    1daa:	15 c0       	rjmp	.+42     	; 0x1dd6 <vfprintf+0xe8>
    1dac:	e8 9c       	mul	r14, r8
    1dae:	e0 2c       	mov	r14, r0
    1db0:	11 24       	eor	r1, r1
    1db2:	e8 0e       	add	r14, r24
    1db4:	f0 e2       	ldi	r31, 0x20	; 32
    1db6:	ff 2a       	or	r15, r31
    1db8:	0e c0       	rjmp	.+28     	; 0x1dd6 <vfprintf+0xe8>
    1dba:	9e 32       	cpi	r25, 0x2E	; 46
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <vfprintf+0xda>
    1dbe:	f6 fc       	sbrc	r15, 6
    1dc0:	6b c1       	rjmp	.+726    	; 0x2098 <vfprintf+0x3aa>
    1dc2:	40 e4       	ldi	r20, 0x40	; 64
    1dc4:	f4 2a       	or	r15, r20
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <vfprintf+0xe8>
    1dc8:	9c 36       	cpi	r25, 0x6C	; 108
    1dca:	19 f4       	brne	.+6      	; 0x1dd2 <vfprintf+0xe4>
    1dcc:	50 e8       	ldi	r21, 0x80	; 128
    1dce:	f5 2a       	or	r15, r21
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0xe8>
    1dd2:	98 36       	cpi	r25, 0x68	; 104
    1dd4:	49 f4       	brne	.+18     	; 0x1de8 <vfprintf+0xfa>
    1dd6:	f2 01       	movw	r30, r4
    1dd8:	23 fd       	sbrc	r18, 3
    1dda:	95 91       	lpm	r25, Z+
    1ddc:	23 ff       	sbrs	r18, 3
    1dde:	91 91       	ld	r25, Z+
    1de0:	2f 01       	movw	r4, r30
    1de2:	99 23       	and	r25, r25
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <vfprintf+0xfa>
    1de6:	b8 cf       	rjmp	.-144    	; 0x1d58 <vfprintf+0x6a>
    1de8:	89 2f       	mov	r24, r25
    1dea:	85 54       	subi	r24, 0x45	; 69
    1dec:	83 30       	cpi	r24, 0x03	; 3
    1dee:	18 f0       	brcs	.+6      	; 0x1df6 <vfprintf+0x108>
    1df0:	80 52       	subi	r24, 0x20	; 32
    1df2:	83 30       	cpi	r24, 0x03	; 3
    1df4:	38 f4       	brcc	.+14     	; 0x1e04 <vfprintf+0x116>
    1df6:	44 e0       	ldi	r20, 0x04	; 4
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	a4 0e       	add	r10, r20
    1dfc:	b5 1e       	adc	r11, r21
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	59 83       	std	Y+1, r21	; 0x01
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <vfprintf+0x134>
    1e04:	93 36       	cpi	r25, 0x63	; 99
    1e06:	31 f0       	breq	.+12     	; 0x1e14 <vfprintf+0x126>
    1e08:	93 37       	cpi	r25, 0x73	; 115
    1e0a:	79 f0       	breq	.+30     	; 0x1e2a <vfprintf+0x13c>
    1e0c:	93 35       	cpi	r25, 0x53	; 83
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <vfprintf+0x124>
    1e10:	56 c0       	rjmp	.+172    	; 0x1ebe <vfprintf+0x1d0>
    1e12:	20 c0       	rjmp	.+64     	; 0x1e54 <vfprintf+0x166>
    1e14:	f5 01       	movw	r30, r10
    1e16:	80 81       	ld	r24, Z
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	42 e0       	ldi	r20, 0x02	; 2
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	a4 0e       	add	r10, r20
    1e20:	b5 1e       	adc	r11, r21
    1e22:	61 01       	movw	r12, r2
    1e24:	01 e0       	ldi	r16, 0x01	; 1
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	12 c0       	rjmp	.+36     	; 0x1e4e <vfprintf+0x160>
    1e2a:	f5 01       	movw	r30, r10
    1e2c:	c0 80       	ld	r12, Z
    1e2e:	d1 80       	ldd	r13, Z+1	; 0x01
    1e30:	f6 fc       	sbrc	r15, 6
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <vfprintf+0x14c>
    1e34:	6f ef       	ldi	r22, 0xFF	; 255
    1e36:	7f ef       	ldi	r23, 0xFF	; 255
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <vfprintf+0x150>
    1e3a:	69 2d       	mov	r22, r9
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	42 e0       	ldi	r20, 0x02	; 2
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	a4 0e       	add	r10, r20
    1e44:	b5 1e       	adc	r11, r21
    1e46:	c6 01       	movw	r24, r12
    1e48:	0e 94 87 11 	call	0x230e	; 0x230e <strnlen>
    1e4c:	8c 01       	movw	r16, r24
    1e4e:	5f e7       	ldi	r21, 0x7F	; 127
    1e50:	f5 22       	and	r15, r21
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <vfprintf+0x18e>
    1e54:	f5 01       	movw	r30, r10
    1e56:	c0 80       	ld	r12, Z
    1e58:	d1 80       	ldd	r13, Z+1	; 0x01
    1e5a:	f6 fc       	sbrc	r15, 6
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <vfprintf+0x176>
    1e5e:	6f ef       	ldi	r22, 0xFF	; 255
    1e60:	7f ef       	ldi	r23, 0xFF	; 255
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <vfprintf+0x17a>
    1e64:	69 2d       	mov	r22, r9
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	42 e0       	ldi	r20, 0x02	; 2
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	a4 0e       	add	r10, r20
    1e6e:	b5 1e       	adc	r11, r21
    1e70:	c6 01       	movw	r24, r12
    1e72:	0e 94 75 11 	call	0x22ea	; 0x22ea <strnlen_P>
    1e76:	8c 01       	movw	r16, r24
    1e78:	50 e8       	ldi	r21, 0x80	; 128
    1e7a:	f5 2a       	or	r15, r21
    1e7c:	f3 fe       	sbrs	r15, 3
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <vfprintf+0x1a0>
    1e80:	1a c0       	rjmp	.+52     	; 0x1eb6 <vfprintf+0x1c8>
    1e82:	80 e2       	ldi	r24, 0x20	; 32
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	b3 01       	movw	r22, r6
    1e88:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    1e8c:	ea 94       	dec	r14
    1e8e:	8e 2d       	mov	r24, r14
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	08 17       	cp	r16, r24
    1e94:	19 07       	cpc	r17, r25
    1e96:	a8 f3       	brcs	.-22     	; 0x1e82 <vfprintf+0x194>
    1e98:	0e c0       	rjmp	.+28     	; 0x1eb6 <vfprintf+0x1c8>
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	f7 fc       	sbrc	r15, 7
    1e9e:	85 91       	lpm	r24, Z+
    1ea0:	f7 fe       	sbrs	r15, 7
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	6f 01       	movw	r12, r30
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	b3 01       	movw	r22, r6
    1eaa:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    1eae:	e1 10       	cpse	r14, r1
    1eb0:	ea 94       	dec	r14
    1eb2:	01 50       	subi	r16, 0x01	; 1
    1eb4:	10 40       	sbci	r17, 0x00	; 0
    1eb6:	01 15       	cp	r16, r1
    1eb8:	11 05       	cpc	r17, r1
    1eba:	79 f7       	brne	.-34     	; 0x1e9a <vfprintf+0x1ac>
    1ebc:	ea c0       	rjmp	.+468    	; 0x2092 <vfprintf+0x3a4>
    1ebe:	94 36       	cpi	r25, 0x64	; 100
    1ec0:	11 f0       	breq	.+4      	; 0x1ec6 <vfprintf+0x1d8>
    1ec2:	99 36       	cpi	r25, 0x69	; 105
    1ec4:	69 f5       	brne	.+90     	; 0x1f20 <vfprintf+0x232>
    1ec6:	f7 fe       	sbrs	r15, 7
    1ec8:	08 c0       	rjmp	.+16     	; 0x1eda <vfprintf+0x1ec>
    1eca:	f5 01       	movw	r30, r10
    1ecc:	20 81       	ld	r18, Z
    1ece:	31 81       	ldd	r19, Z+1	; 0x01
    1ed0:	42 81       	ldd	r20, Z+2	; 0x02
    1ed2:	53 81       	ldd	r21, Z+3	; 0x03
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0a c0       	rjmp	.+20     	; 0x1eee <vfprintf+0x200>
    1eda:	f5 01       	movw	r30, r10
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	9c 01       	movw	r18, r24
    1ee2:	44 27       	eor	r20, r20
    1ee4:	37 fd       	sbrc	r19, 7
    1ee6:	40 95       	com	r20
    1ee8:	54 2f       	mov	r21, r20
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a8 0e       	add	r10, r24
    1ef0:	b9 1e       	adc	r11, r25
    1ef2:	9f e6       	ldi	r25, 0x6F	; 111
    1ef4:	f9 22       	and	r15, r25
    1ef6:	57 ff       	sbrs	r21, 7
    1ef8:	09 c0       	rjmp	.+18     	; 0x1f0c <vfprintf+0x21e>
    1efa:	50 95       	com	r21
    1efc:	40 95       	com	r20
    1efe:	30 95       	com	r19
    1f00:	21 95       	neg	r18
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	4f 4f       	sbci	r20, 0xFF	; 255
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	e0 e8       	ldi	r30, 0x80	; 128
    1f0a:	fe 2a       	or	r15, r30
    1f0c:	ca 01       	movw	r24, r20
    1f0e:	b9 01       	movw	r22, r18
    1f10:	a1 01       	movw	r20, r2
    1f12:	2a e0       	ldi	r18, 0x0A	; 10
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	0e 94 be 11 	call	0x237c	; 0x237c <__ultoa_invert>
    1f1a:	d8 2e       	mov	r13, r24
    1f1c:	d2 18       	sub	r13, r2
    1f1e:	40 c0       	rjmp	.+128    	; 0x1fa0 <vfprintf+0x2b2>
    1f20:	95 37       	cpi	r25, 0x75	; 117
    1f22:	29 f4       	brne	.+10     	; 0x1f2e <vfprintf+0x240>
    1f24:	1f 2d       	mov	r17, r15
    1f26:	1f 7e       	andi	r17, 0xEF	; 239
    1f28:	2a e0       	ldi	r18, 0x0A	; 10
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	1d c0       	rjmp	.+58     	; 0x1f68 <vfprintf+0x27a>
    1f2e:	1f 2d       	mov	r17, r15
    1f30:	19 7f       	andi	r17, 0xF9	; 249
    1f32:	9f 36       	cpi	r25, 0x6F	; 111
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <vfprintf+0x260>
    1f36:	90 37       	cpi	r25, 0x70	; 112
    1f38:	20 f4       	brcc	.+8      	; 0x1f42 <vfprintf+0x254>
    1f3a:	98 35       	cpi	r25, 0x58	; 88
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <vfprintf+0x252>
    1f3e:	ac c0       	rjmp	.+344    	; 0x2098 <vfprintf+0x3aa>
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <vfprintf+0x272>
    1f42:	90 37       	cpi	r25, 0x70	; 112
    1f44:	39 f0       	breq	.+14     	; 0x1f54 <vfprintf+0x266>
    1f46:	98 37       	cpi	r25, 0x78	; 120
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <vfprintf+0x25e>
    1f4a:	a6 c0       	rjmp	.+332    	; 0x2098 <vfprintf+0x3aa>
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <vfprintf+0x268>
    1f4e:	28 e0       	ldi	r18, 0x08	; 8
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	0a c0       	rjmp	.+20     	; 0x1f68 <vfprintf+0x27a>
    1f54:	10 61       	ori	r17, 0x10	; 16
    1f56:	14 fd       	sbrc	r17, 4
    1f58:	14 60       	ori	r17, 0x04	; 4
    1f5a:	20 e1       	ldi	r18, 0x10	; 16
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <vfprintf+0x27a>
    1f60:	14 fd       	sbrc	r17, 4
    1f62:	16 60       	ori	r17, 0x06	; 6
    1f64:	20 e1       	ldi	r18, 0x10	; 16
    1f66:	32 e0       	ldi	r19, 0x02	; 2
    1f68:	17 ff       	sbrs	r17, 7
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <vfprintf+0x28e>
    1f6c:	f5 01       	movw	r30, r10
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	44 e0       	ldi	r20, 0x04	; 4
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	08 c0       	rjmp	.+16     	; 0x1f8c <vfprintf+0x29e>
    1f7c:	f5 01       	movw	r30, r10
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	bc 01       	movw	r22, r24
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	42 e0       	ldi	r20, 0x02	; 2
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	a4 0e       	add	r10, r20
    1f8e:	b5 1e       	adc	r11, r21
    1f90:	a1 01       	movw	r20, r2
    1f92:	0e 94 be 11 	call	0x237c	; 0x237c <__ultoa_invert>
    1f96:	d8 2e       	mov	r13, r24
    1f98:	d2 18       	sub	r13, r2
    1f9a:	8f e7       	ldi	r24, 0x7F	; 127
    1f9c:	f8 2e       	mov	r15, r24
    1f9e:	f1 22       	and	r15, r17
    1fa0:	f6 fe       	sbrs	r15, 6
    1fa2:	0b c0       	rjmp	.+22     	; 0x1fba <vfprintf+0x2cc>
    1fa4:	5e ef       	ldi	r21, 0xFE	; 254
    1fa6:	f5 22       	and	r15, r21
    1fa8:	d9 14       	cp	r13, r9
    1faa:	38 f4       	brcc	.+14     	; 0x1fba <vfprintf+0x2cc>
    1fac:	f4 fe       	sbrs	r15, 4
    1fae:	07 c0       	rjmp	.+14     	; 0x1fbe <vfprintf+0x2d0>
    1fb0:	f2 fc       	sbrc	r15, 2
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <vfprintf+0x2d0>
    1fb4:	8f ee       	ldi	r24, 0xEF	; 239
    1fb6:	f8 22       	and	r15, r24
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x2d0>
    1fba:	1d 2d       	mov	r17, r13
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <vfprintf+0x2d2>
    1fbe:	19 2d       	mov	r17, r9
    1fc0:	f4 fe       	sbrs	r15, 4
    1fc2:	0d c0       	rjmp	.+26     	; 0x1fde <vfprintf+0x2f0>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 0d       	add	r30, r13
    1fc8:	f1 1d       	adc	r31, r1
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 33       	cpi	r24, 0x30	; 48
    1fce:	19 f4       	brne	.+6      	; 0x1fd6 <vfprintf+0x2e8>
    1fd0:	99 ee       	ldi	r25, 0xE9	; 233
    1fd2:	f9 22       	and	r15, r25
    1fd4:	08 c0       	rjmp	.+16     	; 0x1fe6 <vfprintf+0x2f8>
    1fd6:	1f 5f       	subi	r17, 0xFF	; 255
    1fd8:	f2 fe       	sbrs	r15, 2
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <vfprintf+0x2f8>
    1fdc:	03 c0       	rjmp	.+6      	; 0x1fe4 <vfprintf+0x2f6>
    1fde:	8f 2d       	mov	r24, r15
    1fe0:	86 78       	andi	r24, 0x86	; 134
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <vfprintf+0x2f8>
    1fe4:	1f 5f       	subi	r17, 0xFF	; 255
    1fe6:	0f 2d       	mov	r16, r15
    1fe8:	f3 fc       	sbrc	r15, 3
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <vfprintf+0x326>
    1fec:	f0 fe       	sbrs	r15, 0
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <vfprintf+0x320>
    1ff0:	1e 15       	cp	r17, r14
    1ff2:	10 f0       	brcs	.+4      	; 0x1ff8 <vfprintf+0x30a>
    1ff4:	9d 2c       	mov	r9, r13
    1ff6:	0b c0       	rjmp	.+22     	; 0x200e <vfprintf+0x320>
    1ff8:	9d 2c       	mov	r9, r13
    1ffa:	9e 0c       	add	r9, r14
    1ffc:	91 1a       	sub	r9, r17
    1ffe:	1e 2d       	mov	r17, r14
    2000:	06 c0       	rjmp	.+12     	; 0x200e <vfprintf+0x320>
    2002:	80 e2       	ldi	r24, 0x20	; 32
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	b3 01       	movw	r22, r6
    2008:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    200c:	1f 5f       	subi	r17, 0xFF	; 255
    200e:	1e 15       	cp	r17, r14
    2010:	c0 f3       	brcs	.-16     	; 0x2002 <vfprintf+0x314>
    2012:	04 c0       	rjmp	.+8      	; 0x201c <vfprintf+0x32e>
    2014:	1e 15       	cp	r17, r14
    2016:	10 f4       	brcc	.+4      	; 0x201c <vfprintf+0x32e>
    2018:	e1 1a       	sub	r14, r17
    201a:	01 c0       	rjmp	.+2      	; 0x201e <vfprintf+0x330>
    201c:	ee 24       	eor	r14, r14
    201e:	04 ff       	sbrs	r16, 4
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <vfprintf+0x352>
    2022:	80 e3       	ldi	r24, 0x30	; 48
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	b3 01       	movw	r22, r6
    2028:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    202c:	02 ff       	sbrs	r16, 2
    202e:	1d c0       	rjmp	.+58     	; 0x206a <vfprintf+0x37c>
    2030:	01 fd       	sbrc	r16, 1
    2032:	03 c0       	rjmp	.+6      	; 0x203a <vfprintf+0x34c>
    2034:	88 e7       	ldi	r24, 0x78	; 120
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e c0       	rjmp	.+28     	; 0x2056 <vfprintf+0x368>
    203a:	88 e5       	ldi	r24, 0x58	; 88
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0b c0       	rjmp	.+22     	; 0x2056 <vfprintf+0x368>
    2040:	80 2f       	mov	r24, r16
    2042:	86 78       	andi	r24, 0x86	; 134
    2044:	91 f0       	breq	.+36     	; 0x206a <vfprintf+0x37c>
    2046:	01 ff       	sbrs	r16, 1
    2048:	02 c0       	rjmp	.+4      	; 0x204e <vfprintf+0x360>
    204a:	8b e2       	ldi	r24, 0x2B	; 43
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <vfprintf+0x362>
    204e:	80 e2       	ldi	r24, 0x20	; 32
    2050:	f7 fc       	sbrc	r15, 7
    2052:	8d e2       	ldi	r24, 0x2D	; 45
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	b3 01       	movw	r22, r6
    2058:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    205c:	06 c0       	rjmp	.+12     	; 0x206a <vfprintf+0x37c>
    205e:	80 e3       	ldi	r24, 0x30	; 48
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	b3 01       	movw	r22, r6
    2064:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    2068:	9a 94       	dec	r9
    206a:	d9 14       	cp	r13, r9
    206c:	c0 f3       	brcs	.-16     	; 0x205e <vfprintf+0x370>
    206e:	da 94       	dec	r13
    2070:	f1 01       	movw	r30, r2
    2072:	ed 0d       	add	r30, r13
    2074:	f1 1d       	adc	r31, r1
    2076:	80 81       	ld	r24, Z
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	b3 01       	movw	r22, r6
    207c:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    2080:	dd 20       	and	r13, r13
    2082:	a9 f7       	brne	.-22     	; 0x206e <vfprintf+0x380>
    2084:	06 c0       	rjmp	.+12     	; 0x2092 <vfprintf+0x3a4>
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	b3 01       	movw	r22, r6
    208c:	0e 94 92 11 	call	0x2324	; 0x2324 <fputc>
    2090:	ea 94       	dec	r14
    2092:	ee 20       	and	r14, r14
    2094:	c1 f7       	brne	.-16     	; 0x2086 <vfprintf+0x398>
    2096:	43 ce       	rjmp	.-890    	; 0x1d1e <vfprintf+0x30>
    2098:	f3 01       	movw	r30, r6
    209a:	66 81       	ldd	r22, Z+6	; 0x06
    209c:	77 81       	ldd	r23, Z+7	; 0x07
    209e:	cb 01       	movw	r24, r22
    20a0:	2b 96       	adiw	r28, 0x0b	; 11
    20a2:	e2 e1       	ldi	r30, 0x12	; 18
    20a4:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__>

000020a8 <calloc>:
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	68 9f       	mul	r22, r24
    20b2:	80 01       	movw	r16, r0
    20b4:	69 9f       	mul	r22, r25
    20b6:	10 0d       	add	r17, r0
    20b8:	78 9f       	mul	r23, r24
    20ba:	10 0d       	add	r17, r0
    20bc:	11 24       	eor	r1, r1
    20be:	c8 01       	movw	r24, r16
    20c0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <malloc>
    20c4:	ec 01       	movw	r28, r24
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <calloc+0x2c>
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	a8 01       	movw	r20, r16
    20d0:	0e 94 80 11 	call	0x2300	; 0x2300 <memset>
    20d4:	ce 01       	movw	r24, r28
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	08 95       	ret

000020e0 <malloc>:
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	bc 01       	movw	r22, r24
    20e6:	82 30       	cpi	r24, 0x02	; 2
    20e8:	91 05       	cpc	r25, r1
    20ea:	10 f4       	brcc	.+4      	; 0x20f0 <malloc+0x10>
    20ec:	62 e0       	ldi	r22, 0x02	; 2
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	a0 91 82 02 	lds	r26, 0x0282
    20f4:	b0 91 83 02 	lds	r27, 0x0283
    20f8:	ed 01       	movw	r28, r26
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	21 c0       	rjmp	.+66     	; 0x2146 <malloc+0x66>
    2104:	88 81       	ld	r24, Y
    2106:	99 81       	ldd	r25, Y+1	; 0x01
    2108:	86 17       	cp	r24, r22
    210a:	97 07       	cpc	r25, r23
    210c:	69 f4       	brne	.+26     	; 0x2128 <malloc+0x48>
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	30 97       	sbiw	r30, 0x00	; 0
    2114:	19 f0       	breq	.+6      	; 0x211c <malloc+0x3c>
    2116:	93 83       	std	Z+3, r25	; 0x03
    2118:	82 83       	std	Z+2, r24	; 0x02
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <malloc+0x44>
    211c:	90 93 83 02 	sts	0x0283, r25
    2120:	80 93 82 02 	sts	0x0282, r24
    2124:	fe 01       	movw	r30, r28
    2126:	34 c0       	rjmp	.+104    	; 0x2190 <malloc+0xb0>
    2128:	68 17       	cp	r22, r24
    212a:	79 07       	cpc	r23, r25
    212c:	38 f4       	brcc	.+14     	; 0x213c <malloc+0x5c>
    212e:	41 15       	cp	r20, r1
    2130:	51 05       	cpc	r21, r1
    2132:	19 f0       	breq	.+6      	; 0x213a <malloc+0x5a>
    2134:	84 17       	cp	r24, r20
    2136:	95 07       	cpc	r25, r21
    2138:	08 f4       	brcc	.+2      	; 0x213c <malloc+0x5c>
    213a:	ac 01       	movw	r20, r24
    213c:	fe 01       	movw	r30, r28
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	9c 01       	movw	r18, r24
    2144:	e9 01       	movw	r28, r18
    2146:	20 97       	sbiw	r28, 0x00	; 0
    2148:	e9 f6       	brne	.-70     	; 0x2104 <malloc+0x24>
    214a:	41 15       	cp	r20, r1
    214c:	51 05       	cpc	r21, r1
    214e:	a9 f1       	breq	.+106    	; 0x21ba <malloc+0xda>
    2150:	ca 01       	movw	r24, r20
    2152:	86 1b       	sub	r24, r22
    2154:	97 0b       	sbc	r25, r23
    2156:	04 97       	sbiw	r24, 0x04	; 4
    2158:	08 f4       	brcc	.+2      	; 0x215c <malloc+0x7c>
    215a:	ba 01       	movw	r22, r20
    215c:	e0 e0       	ldi	r30, 0x00	; 0
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	2a c0       	rjmp	.+84     	; 0x21b6 <malloc+0xd6>
    2162:	8d 91       	ld	r24, X+
    2164:	9c 91       	ld	r25, X
    2166:	11 97       	sbiw	r26, 0x01	; 1
    2168:	84 17       	cp	r24, r20
    216a:	95 07       	cpc	r25, r21
    216c:	f9 f4       	brne	.+62     	; 0x21ac <malloc+0xcc>
    216e:	64 17       	cp	r22, r20
    2170:	75 07       	cpc	r23, r21
    2172:	81 f4       	brne	.+32     	; 0x2194 <malloc+0xb4>
    2174:	12 96       	adiw	r26, 0x02	; 2
    2176:	8d 91       	ld	r24, X+
    2178:	9c 91       	ld	r25, X
    217a:	13 97       	sbiw	r26, 0x03	; 3
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	19 f0       	breq	.+6      	; 0x2186 <malloc+0xa6>
    2180:	93 83       	std	Z+3, r25	; 0x03
    2182:	82 83       	std	Z+2, r24	; 0x02
    2184:	04 c0       	rjmp	.+8      	; 0x218e <malloc+0xae>
    2186:	90 93 83 02 	sts	0x0283, r25
    218a:	80 93 82 02 	sts	0x0282, r24
    218e:	fd 01       	movw	r30, r26
    2190:	32 96       	adiw	r30, 0x02	; 2
    2192:	4f c0       	rjmp	.+158    	; 0x2232 <malloc+0x152>
    2194:	ca 01       	movw	r24, r20
    2196:	86 1b       	sub	r24, r22
    2198:	97 0b       	sbc	r25, r23
    219a:	fd 01       	movw	r30, r26
    219c:	e8 0f       	add	r30, r24
    219e:	f9 1f       	adc	r31, r25
    21a0:	61 93       	st	Z+, r22
    21a2:	71 93       	st	Z+, r23
    21a4:	02 97       	sbiw	r24, 0x02	; 2
    21a6:	8d 93       	st	X+, r24
    21a8:	9c 93       	st	X, r25
    21aa:	43 c0       	rjmp	.+134    	; 0x2232 <malloc+0x152>
    21ac:	fd 01       	movw	r30, r26
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	9c 01       	movw	r18, r24
    21b4:	d9 01       	movw	r26, r18
    21b6:	10 97       	sbiw	r26, 0x00	; 0
    21b8:	a1 f6       	brne	.-88     	; 0x2162 <malloc+0x82>
    21ba:	80 91 80 02 	lds	r24, 0x0280
    21be:	90 91 81 02 	lds	r25, 0x0281
    21c2:	89 2b       	or	r24, r25
    21c4:	41 f4       	brne	.+16     	; 0x21d6 <malloc+0xf6>
    21c6:	80 91 76 02 	lds	r24, 0x0276
    21ca:	90 91 77 02 	lds	r25, 0x0277
    21ce:	90 93 81 02 	sts	0x0281, r25
    21d2:	80 93 80 02 	sts	0x0280, r24
    21d6:	40 91 78 02 	lds	r20, 0x0278
    21da:	50 91 79 02 	lds	r21, 0x0279
    21de:	41 15       	cp	r20, r1
    21e0:	51 05       	cpc	r21, r1
    21e2:	41 f4       	brne	.+16     	; 0x21f4 <malloc+0x114>
    21e4:	4d b7       	in	r20, 0x3d	; 61
    21e6:	5e b7       	in	r21, 0x3e	; 62
    21e8:	80 91 74 02 	lds	r24, 0x0274
    21ec:	90 91 75 02 	lds	r25, 0x0275
    21f0:	48 1b       	sub	r20, r24
    21f2:	59 0b       	sbc	r21, r25
    21f4:	20 91 80 02 	lds	r18, 0x0280
    21f8:	30 91 81 02 	lds	r19, 0x0281
    21fc:	24 17       	cp	r18, r20
    21fe:	35 07       	cpc	r19, r21
    2200:	b0 f4       	brcc	.+44     	; 0x222e <malloc+0x14e>
    2202:	ca 01       	movw	r24, r20
    2204:	82 1b       	sub	r24, r18
    2206:	93 0b       	sbc	r25, r19
    2208:	86 17       	cp	r24, r22
    220a:	97 07       	cpc	r25, r23
    220c:	80 f0       	brcs	.+32     	; 0x222e <malloc+0x14e>
    220e:	ab 01       	movw	r20, r22
    2210:	4e 5f       	subi	r20, 0xFE	; 254
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	84 17       	cp	r24, r20
    2216:	95 07       	cpc	r25, r21
    2218:	50 f0       	brcs	.+20     	; 0x222e <malloc+0x14e>
    221a:	42 0f       	add	r20, r18
    221c:	53 1f       	adc	r21, r19
    221e:	50 93 81 02 	sts	0x0281, r21
    2222:	40 93 80 02 	sts	0x0280, r20
    2226:	f9 01       	movw	r30, r18
    2228:	61 93       	st	Z+, r22
    222a:	71 93       	st	Z+, r23
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <malloc+0x152>
    222e:	e0 e0       	ldi	r30, 0x00	; 0
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	cf 01       	movw	r24, r30
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <free>:
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	09 f4       	brne	.+2      	; 0x2244 <free+0xa>
    2242:	50 c0       	rjmp	.+160    	; 0x22e4 <free+0xaa>
    2244:	ec 01       	movw	r28, r24
    2246:	22 97       	sbiw	r28, 0x02	; 2
    2248:	1b 82       	std	Y+3, r1	; 0x03
    224a:	1a 82       	std	Y+2, r1	; 0x02
    224c:	a0 91 82 02 	lds	r26, 0x0282
    2250:	b0 91 83 02 	lds	r27, 0x0283
    2254:	10 97       	sbiw	r26, 0x00	; 0
    2256:	09 f1       	breq	.+66     	; 0x229a <free+0x60>
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	ac 17       	cp	r26, r28
    225e:	bd 07       	cpc	r27, r29
    2260:	08 f1       	brcs	.+66     	; 0x22a4 <free+0x6a>
    2262:	bb 83       	std	Y+3, r27	; 0x03
    2264:	aa 83       	std	Y+2, r26	; 0x02
    2266:	fe 01       	movw	r30, r28
    2268:	21 91       	ld	r18, Z+
    226a:	31 91       	ld	r19, Z+
    226c:	e2 0f       	add	r30, r18
    226e:	f3 1f       	adc	r31, r19
    2270:	ae 17       	cp	r26, r30
    2272:	bf 07       	cpc	r27, r31
    2274:	79 f4       	brne	.+30     	; 0x2294 <free+0x5a>
    2276:	8d 91       	ld	r24, X+
    2278:	9c 91       	ld	r25, X
    227a:	11 97       	sbiw	r26, 0x01	; 1
    227c:	28 0f       	add	r18, r24
    227e:	39 1f       	adc	r19, r25
    2280:	2e 5f       	subi	r18, 0xFE	; 254
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	39 83       	std	Y+1, r19	; 0x01
    2286:	28 83       	st	Y, r18
    2288:	12 96       	adiw	r26, 0x02	; 2
    228a:	8d 91       	ld	r24, X+
    228c:	9c 91       	ld	r25, X
    228e:	13 97       	sbiw	r26, 0x03	; 3
    2290:	9b 83       	std	Y+3, r25	; 0x03
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	41 15       	cp	r20, r1
    2296:	51 05       	cpc	r21, r1
    2298:	71 f4       	brne	.+28     	; 0x22b6 <free+0x7c>
    229a:	d0 93 83 02 	sts	0x0283, r29
    229e:	c0 93 82 02 	sts	0x0282, r28
    22a2:	20 c0       	rjmp	.+64     	; 0x22e4 <free+0xaa>
    22a4:	12 96       	adiw	r26, 0x02	; 2
    22a6:	8d 91       	ld	r24, X+
    22a8:	9c 91       	ld	r25, X
    22aa:	13 97       	sbiw	r26, 0x03	; 3
    22ac:	ad 01       	movw	r20, r26
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	11 f0       	breq	.+4      	; 0x22b6 <free+0x7c>
    22b2:	dc 01       	movw	r26, r24
    22b4:	d3 cf       	rjmp	.-90     	; 0x225c <free+0x22>
    22b6:	fa 01       	movw	r30, r20
    22b8:	d3 83       	std	Z+3, r29	; 0x03
    22ba:	c2 83       	std	Z+2, r28	; 0x02
    22bc:	21 91       	ld	r18, Z+
    22be:	31 91       	ld	r19, Z+
    22c0:	e2 0f       	add	r30, r18
    22c2:	f3 1f       	adc	r31, r19
    22c4:	ce 17       	cp	r28, r30
    22c6:	df 07       	cpc	r29, r31
    22c8:	69 f4       	brne	.+26     	; 0x22e4 <free+0xaa>
    22ca:	88 81       	ld	r24, Y
    22cc:	99 81       	ldd	r25, Y+1	; 0x01
    22ce:	28 0f       	add	r18, r24
    22d0:	39 1f       	adc	r19, r25
    22d2:	2e 5f       	subi	r18, 0xFE	; 254
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	fa 01       	movw	r30, r20
    22d8:	31 83       	std	Z+1, r19	; 0x01
    22da:	20 83       	st	Z, r18
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	9b 81       	ldd	r25, Y+3	; 0x03
    22e0:	93 83       	std	Z+3, r25	; 0x03
    22e2:	82 83       	std	Z+2, r24	; 0x02
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <strnlen_P>:
    22ea:	fc 01       	movw	r30, r24
    22ec:	05 90       	lpm	r0, Z+
    22ee:	61 50       	subi	r22, 0x01	; 1
    22f0:	70 40       	sbci	r23, 0x00	; 0
    22f2:	01 10       	cpse	r0, r1
    22f4:	d8 f7       	brcc	.-10     	; 0x22ec <strnlen_P+0x2>
    22f6:	80 95       	com	r24
    22f8:	90 95       	com	r25
    22fa:	8e 0f       	add	r24, r30
    22fc:	9f 1f       	adc	r25, r31
    22fe:	08 95       	ret

00002300 <memset>:
    2300:	dc 01       	movw	r26, r24
    2302:	01 c0       	rjmp	.+2      	; 0x2306 <memset+0x6>
    2304:	6d 93       	st	X+, r22
    2306:	41 50       	subi	r20, 0x01	; 1
    2308:	50 40       	sbci	r21, 0x00	; 0
    230a:	e0 f7       	brcc	.-8      	; 0x2304 <memset+0x4>
    230c:	08 95       	ret

0000230e <strnlen>:
    230e:	fc 01       	movw	r30, r24
    2310:	61 50       	subi	r22, 0x01	; 1
    2312:	70 40       	sbci	r23, 0x00	; 0
    2314:	01 90       	ld	r0, Z+
    2316:	01 10       	cpse	r0, r1
    2318:	d8 f7       	brcc	.-10     	; 0x2310 <strnlen+0x2>
    231a:	80 95       	com	r24
    231c:	90 95       	com	r25
    231e:	8e 0f       	add	r24, r30
    2320:	9f 1f       	adc	r25, r31
    2322:	08 95       	ret

00002324 <fputc>:
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	8c 01       	movw	r16, r24
    232e:	eb 01       	movw	r28, r22
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	81 ff       	sbrs	r24, 1
    2334:	1b c0       	rjmp	.+54     	; 0x236c <fputc+0x48>
    2336:	82 ff       	sbrs	r24, 2
    2338:	0d c0       	rjmp	.+26     	; 0x2354 <fputc+0x30>
    233a:	2e 81       	ldd	r18, Y+6	; 0x06
    233c:	3f 81       	ldd	r19, Y+7	; 0x07
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	9d 81       	ldd	r25, Y+5	; 0x05
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	64 f4       	brge	.+24     	; 0x2360 <fputc+0x3c>
    2348:	e8 81       	ld	r30, Y
    234a:	f9 81       	ldd	r31, Y+1	; 0x01
    234c:	01 93       	st	Z+, r16
    234e:	f9 83       	std	Y+1, r31	; 0x01
    2350:	e8 83       	st	Y, r30
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <fputc+0x3c>
    2354:	e8 85       	ldd	r30, Y+8	; 0x08
    2356:	f9 85       	ldd	r31, Y+9	; 0x09
    2358:	80 2f       	mov	r24, r16
    235a:	09 95       	icall
    235c:	89 2b       	or	r24, r25
    235e:	31 f4       	brne	.+12     	; 0x236c <fputc+0x48>
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	9f 83       	std	Y+7, r25	; 0x07
    2368:	8e 83       	std	Y+6, r24	; 0x06
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <fputc+0x4c>
    236c:	0f ef       	ldi	r16, 0xFF	; 255
    236e:	1f ef       	ldi	r17, 0xFF	; 255
    2370:	c8 01       	movw	r24, r16
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	08 95       	ret

0000237c <__ultoa_invert>:
    237c:	fa 01       	movw	r30, r20
    237e:	aa 27       	eor	r26, r26
    2380:	28 30       	cpi	r18, 0x08	; 8
    2382:	51 f1       	breq	.+84     	; 0x23d8 <__ultoa_invert+0x5c>
    2384:	20 31       	cpi	r18, 0x10	; 16
    2386:	81 f1       	breq	.+96     	; 0x23e8 <__ultoa_invert+0x6c>
    2388:	e8 94       	clt
    238a:	6f 93       	push	r22
    238c:	6e 7f       	andi	r22, 0xFE	; 254
    238e:	6e 5f       	subi	r22, 0xFE	; 254
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	8f 4f       	sbci	r24, 0xFF	; 255
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	af 4f       	sbci	r26, 0xFF	; 255
    2398:	b1 e0       	ldi	r27, 0x01	; 1
    239a:	3e d0       	rcall	.+124    	; 0x2418 <__ultoa_invert+0x9c>
    239c:	b4 e0       	ldi	r27, 0x04	; 4
    239e:	3c d0       	rcall	.+120    	; 0x2418 <__ultoa_invert+0x9c>
    23a0:	67 0f       	add	r22, r23
    23a2:	78 1f       	adc	r23, r24
    23a4:	89 1f       	adc	r24, r25
    23a6:	9a 1f       	adc	r25, r26
    23a8:	a1 1d       	adc	r26, r1
    23aa:	68 0f       	add	r22, r24
    23ac:	79 1f       	adc	r23, r25
    23ae:	8a 1f       	adc	r24, r26
    23b0:	91 1d       	adc	r25, r1
    23b2:	a1 1d       	adc	r26, r1
    23b4:	6a 0f       	add	r22, r26
    23b6:	71 1d       	adc	r23, r1
    23b8:	81 1d       	adc	r24, r1
    23ba:	91 1d       	adc	r25, r1
    23bc:	a1 1d       	adc	r26, r1
    23be:	20 d0       	rcall	.+64     	; 0x2400 <__ultoa_invert+0x84>
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <__ultoa_invert+0x48>
    23c2:	68 94       	set
    23c4:	3f 91       	pop	r19
    23c6:	2a e0       	ldi	r18, 0x0A	; 10
    23c8:	26 9f       	mul	r18, r22
    23ca:	11 24       	eor	r1, r1
    23cc:	30 19       	sub	r19, r0
    23ce:	30 5d       	subi	r19, 0xD0	; 208
    23d0:	31 93       	st	Z+, r19
    23d2:	de f6       	brtc	.-74     	; 0x238a <__ultoa_invert+0xe>
    23d4:	cf 01       	movw	r24, r30
    23d6:	08 95       	ret
    23d8:	46 2f       	mov	r20, r22
    23da:	47 70       	andi	r20, 0x07	; 7
    23dc:	40 5d       	subi	r20, 0xD0	; 208
    23de:	41 93       	st	Z+, r20
    23e0:	b3 e0       	ldi	r27, 0x03	; 3
    23e2:	0f d0       	rcall	.+30     	; 0x2402 <__ultoa_invert+0x86>
    23e4:	c9 f7       	brne	.-14     	; 0x23d8 <__ultoa_invert+0x5c>
    23e6:	f6 cf       	rjmp	.-20     	; 0x23d4 <__ultoa_invert+0x58>
    23e8:	46 2f       	mov	r20, r22
    23ea:	4f 70       	andi	r20, 0x0F	; 15
    23ec:	40 5d       	subi	r20, 0xD0	; 208
    23ee:	4a 33       	cpi	r20, 0x3A	; 58
    23f0:	18 f0       	brcs	.+6      	; 0x23f8 <__ultoa_invert+0x7c>
    23f2:	49 5d       	subi	r20, 0xD9	; 217
    23f4:	31 fd       	sbrc	r19, 1
    23f6:	40 52       	subi	r20, 0x20	; 32
    23f8:	41 93       	st	Z+, r20
    23fa:	02 d0       	rcall	.+4      	; 0x2400 <__ultoa_invert+0x84>
    23fc:	a9 f7       	brne	.-22     	; 0x23e8 <__ultoa_invert+0x6c>
    23fe:	ea cf       	rjmp	.-44     	; 0x23d4 <__ultoa_invert+0x58>
    2400:	b4 e0       	ldi	r27, 0x04	; 4
    2402:	a6 95       	lsr	r26
    2404:	97 95       	ror	r25
    2406:	87 95       	ror	r24
    2408:	77 95       	ror	r23
    240a:	67 95       	ror	r22
    240c:	ba 95       	dec	r27
    240e:	c9 f7       	brne	.-14     	; 0x2402 <__ultoa_invert+0x86>
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	61 05       	cpc	r22, r1
    2414:	71 05       	cpc	r23, r1
    2416:	08 95       	ret
    2418:	9b 01       	movw	r18, r22
    241a:	ac 01       	movw	r20, r24
    241c:	0a 2e       	mov	r0, r26
    241e:	06 94       	lsr	r0
    2420:	57 95       	ror	r21
    2422:	47 95       	ror	r20
    2424:	37 95       	ror	r19
    2426:	27 95       	ror	r18
    2428:	ba 95       	dec	r27
    242a:	c9 f7       	brne	.-14     	; 0x241e <__ultoa_invert+0xa2>
    242c:	62 0f       	add	r22, r18
    242e:	73 1f       	adc	r23, r19
    2430:	84 1f       	adc	r24, r20
    2432:	95 1f       	adc	r25, r21
    2434:	a0 1d       	adc	r26, r0
    2436:	08 95       	ret

00002438 <__udivmodsi4>:
    2438:	a1 e2       	ldi	r26, 0x21	; 33
    243a:	1a 2e       	mov	r1, r26
    243c:	aa 1b       	sub	r26, r26
    243e:	bb 1b       	sub	r27, r27
    2440:	fd 01       	movw	r30, r26
    2442:	0d c0       	rjmp	.+26     	; 0x245e <__udivmodsi4_ep>

00002444 <__udivmodsi4_loop>:
    2444:	aa 1f       	adc	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	ee 1f       	adc	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	a2 17       	cp	r26, r18
    244e:	b3 07       	cpc	r27, r19
    2450:	e4 07       	cpc	r30, r20
    2452:	f5 07       	cpc	r31, r21
    2454:	20 f0       	brcs	.+8      	; 0x245e <__udivmodsi4_ep>
    2456:	a2 1b       	sub	r26, r18
    2458:	b3 0b       	sbc	r27, r19
    245a:	e4 0b       	sbc	r30, r20
    245c:	f5 0b       	sbc	r31, r21

0000245e <__udivmodsi4_ep>:
    245e:	66 1f       	adc	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	88 1f       	adc	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	1a 94       	dec	r1
    2468:	69 f7       	brne	.-38     	; 0x2444 <__udivmodsi4_loop>
    246a:	60 95       	com	r22
    246c:	70 95       	com	r23
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	9b 01       	movw	r18, r22
    2474:	ac 01       	movw	r20, r24
    2476:	bd 01       	movw	r22, r26
    2478:	cf 01       	movw	r24, r30
    247a:	08 95       	ret

0000247c <__prologue_saves__>:
    247c:	2f 92       	push	r2
    247e:	3f 92       	push	r3
    2480:	4f 92       	push	r4
    2482:	5f 92       	push	r5
    2484:	6f 92       	push	r6
    2486:	7f 92       	push	r7
    2488:	8f 92       	push	r8
    248a:	9f 92       	push	r9
    248c:	af 92       	push	r10
    248e:	bf 92       	push	r11
    2490:	cf 92       	push	r12
    2492:	df 92       	push	r13
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	ca 1b       	sub	r28, r26
    24a6:	db 0b       	sbc	r29, r27
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	09 94       	ijmp

000024b4 <__epilogue_restores__>:
    24b4:	2a 88       	ldd	r2, Y+18	; 0x12
    24b6:	39 88       	ldd	r3, Y+17	; 0x11
    24b8:	48 88       	ldd	r4, Y+16	; 0x10
    24ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    24bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    24be:	7d 84       	ldd	r7, Y+13	; 0x0d
    24c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c6:	b9 84       	ldd	r11, Y+9	; 0x09
    24c8:	c8 84       	ldd	r12, Y+8	; 0x08
    24ca:	df 80       	ldd	r13, Y+7	; 0x07
    24cc:	ee 80       	ldd	r14, Y+6	; 0x06
    24ce:	fd 80       	ldd	r15, Y+5	; 0x05
    24d0:	0c 81       	ldd	r16, Y+4	; 0x04
    24d2:	1b 81       	ldd	r17, Y+3	; 0x03
    24d4:	aa 81       	ldd	r26, Y+2	; 0x02
    24d6:	b9 81       	ldd	r27, Y+1	; 0x01
    24d8:	ce 0f       	add	r28, r30
    24da:	d1 1d       	adc	r29, r1
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	ed 01       	movw	r28, r26
    24e8:	08 95       	ret

000024ea <_exit>:
    24ea:	f8 94       	cli

000024ec <__stop_program>:
    24ec:	ff cf       	rjmp	.-2      	; 0x24ec <__stop_program>
