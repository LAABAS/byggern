
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  00002a9c  00002b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002a2  008002a2  00002cd2  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00002cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000348  00000000  00000000  00002dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e8d  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000792  00000000  00000000  00003fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001283  00000000  00000000  00004739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  000059bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049d  00000000  00000000  00005ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_1>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_2>
       c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_16>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e9       	ldi	r30, 0x9C	; 156
      84:	fa e2       	ldi	r31, 0x2A	; 42
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a2 3a       	cpi	r26, 0xA2	; 162
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a2 ea       	ldi	r26, 0xA2	; 162
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ae 3a       	cpi	r26, 0xAE	; 174
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 26 01 	call	0x24c	; 0x24c <init_UART>
		
	printf("reset\n");
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <puts>

	init_SRAM();
      ca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_SRAM>
	SRAM_test();
      ce:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SRAM_test>

	SPI_MasterInit();
      d2:	0e 94 06 04 	call	0x80c	; 0x80c <SPI_MasterInit>
	
		
	CAN_init();
      d6:	0e 94 28 04 	call	0x850	; 0x850 <CAN_init>

	init_joystick();
      da:	0e 94 70 02 	call	0x4e0	; 0x4e0 <init_joystick>


	printf("Initialization complete\n");
      de:	86 e0       	ldi	r24, 0x06	; 6
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <puts>
	sei();
      e6:	78 94       	sei
/*
	printf("CAN_test: %d", CAN_test());
	*/
	
	CAN_send("print", 0x0);
      e8:	8e e1       	ldi	r24, 0x1E	; 30
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 04 06 	call	0xc08	; 0xc08 <CAN_send>

//	sig_interrupt0();
//	sig_interrupt1();


	butterfly_menu();
      f4:	0e 94 42 07 	call	0xe84	; 0xe84 <butterfly_menu>
	while(1)
		asm("nop");
      f8:	00 00       	nop
      fa:	fe cf       	rjmp	.-4      	; 0xf8 <main+0x4a>

000000fc <__vector_1>:
}




SIGNAL(SIG_INTERRUPT0) {
      fc:	1f 92       	push	r1
      fe:	0f 92       	push	r0
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	0f 92       	push	r0
     104:	11 24       	eor	r1, r1
     106:	2f 93       	push	r18
     108:	3f 93       	push	r19
     10a:	4f 93       	push	r20
     10c:	5f 93       	push	r21
     10e:	6f 93       	push	r22
     110:	7f 93       	push	r23
     112:	8f 93       	push	r24
     114:	9f 93       	push	r25
     116:	af 93       	push	r26
     118:	bf 93       	push	r27
     11a:	ef 93       	push	r30
     11c:	ff 93       	push	r31
     11e:	df 93       	push	r29
     120:	cf 93       	push	r28
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
	sig_interrupt0();
     126:	0e 94 e6 06 	call	0xdcc	; 0xdcc <sig_interrupt0>
}
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	ff 91       	pop	r31
     130:	ef 91       	pop	r30
     132:	bf 91       	pop	r27
     134:	af 91       	pop	r26
     136:	9f 91       	pop	r25
     138:	8f 91       	pop	r24
     13a:	7f 91       	pop	r23
     13c:	6f 91       	pop	r22
     13e:	5f 91       	pop	r21
     140:	4f 91       	pop	r20
     142:	3f 91       	pop	r19
     144:	2f 91       	pop	r18
     146:	0f 90       	pop	r0
     148:	0f be       	out	0x3f, r0	; 63
     14a:	0f 90       	pop	r0
     14c:	1f 90       	pop	r1
     14e:	18 95       	reti

00000150 <__vector_2>:

SIGNAL(SIG_INTERRUPT1) {
     150:	1f 92       	push	r1
     152:	0f 92       	push	r0
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	0f 92       	push	r0
     158:	11 24       	eor	r1, r1
     15a:	2f 93       	push	r18
     15c:	3f 93       	push	r19
     15e:	4f 93       	push	r20
     160:	5f 93       	push	r21
     162:	6f 93       	push	r22
     164:	7f 93       	push	r23
     166:	8f 93       	push	r24
     168:	9f 93       	push	r25
     16a:	af 93       	push	r26
     16c:	bf 93       	push	r27
     16e:	ef 93       	push	r30
     170:	ff 93       	push	r31
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
	sig_interrupt1();
     17a:	0e 94 14 07 	call	0xe28	; 0xe28 <sig_interrupt1>
}
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	ff 91       	pop	r31
     184:	ef 91       	pop	r30
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	0f 90       	pop	r0
     1a0:	1f 90       	pop	r1
     1a2:	18 95       	reti

000001a4 <__vector_16>:

SIGNAL(SIG_OUTPUT_COMPARE0) {
     1a4:	1f 92       	push	r1
     1a6:	0f 92       	push	r0
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	0f 92       	push	r0
     1ac:	11 24       	eor	r1, r1
     1ae:	2f 93       	push	r18
     1b0:	3f 93       	push	r19
     1b2:	4f 93       	push	r20
     1b4:	5f 93       	push	r21
     1b6:	6f 93       	push	r22
     1b8:	7f 93       	push	r23
     1ba:	8f 93       	push	r24
     1bc:	9f 93       	push	r25
     1be:	af 93       	push	r26
     1c0:	bf 93       	push	r27
     1c2:	ef 93       	push	r30
     1c4:	ff 93       	push	r31
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
	sig_output_compare0();
     1ce:	0e 94 41 03 	call	0x682	; 0x682 <sig_output_compare0>
}
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	ff 91       	pop	r31
     1d8:	ef 91       	pop	r30
     1da:	bf 91       	pop	r27
     1dc:	af 91       	pop	r26
     1de:	9f 91       	pop	r25
     1e0:	8f 91       	pop	r24
     1e2:	7f 91       	pop	r23
     1e4:	6f 91       	pop	r22
     1e6:	5f 91       	pop	r21
     1e8:	4f 91       	pop	r20
     1ea:	3f 91       	pop	r19
     1ec:	2f 91       	pop	r18
     1ee:	0f 90       	pop	r0
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	0f 90       	pop	r0
     1f4:	1f 90       	pop	r1
     1f6:	18 95       	reti

000001f8 <__vector_3>:


SIGNAL(SIG_INTERRUPT2) {
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	2f 93       	push	r18
     204:	3f 93       	push	r19
     206:	4f 93       	push	r20
     208:	5f 93       	push	r21
     20a:	6f 93       	push	r22
     20c:	7f 93       	push	r23
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
     212:	af 93       	push	r26
     214:	bf 93       	push	r27
     216:	ef 93       	push	r30
     218:	ff 93       	push	r31
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
	int_joystick_button();
     222:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <int_joystick_button>
}
     226:	cf 91       	pop	r28
     228:	df 91       	pop	r29
     22a:	ff 91       	pop	r31
     22c:	ef 91       	pop	r30
     22e:	bf 91       	pop	r27
     230:	af 91       	pop	r26
     232:	9f 91       	pop	r25
     234:	8f 91       	pop	r24
     236:	7f 91       	pop	r23
     238:	6f 91       	pop	r22
     23a:	5f 91       	pop	r21
     23c:	4f 91       	pop	r20
     23e:	3f 91       	pop	r19
     240:	2f 91       	pop	r18
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <init_UART>:
unsigned char buffer_stop;
unsigned char buffer_used;
*/

// Initialize UART interface
int init_UART(unsigned int baud){
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	27 97       	sbiw	r28, 0x07	; 7
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	9f 83       	std	Y+7, r25	; 0x07
     262:	8e 83       	std	Y+6, r24	; 0x06
	
	//Enable Interrupts. Macro.
	

	unsigned long ubrr0 = baud;
     264:	8e 81       	ldd	r24, Y+6	; 0x06
     266:	9f 81       	ldd	r25, Y+7	; 0x07
     268:	cc 01       	movw	r24, r24
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	8a 83       	std	Y+2, r24	; 0x02
     270:	9b 83       	std	Y+3, r25	; 0x03
     272:	ac 83       	std	Y+4, r26	; 0x04
     274:	bd 83       	std	Y+5, r27	; 0x05
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	9b 81       	ldd	r25, Y+3	; 0x03
     27a:	ac 81       	ldd	r26, Y+4	; 0x04
     27c:	bd 81       	ldd	r27, Y+5	; 0x05
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	aa 1f       	adc	r26, r26
     284:	bb 1f       	adc	r27, r27
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	aa 1f       	adc	r26, r26
     28c:	bb 1f       	adc	r27, r27
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	aa 1f       	adc	r26, r26
     294:	bb 1f       	adc	r27, r27
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	aa 1f       	adc	r26, r26
     29c:	bb 1f       	adc	r27, r27
     29e:	9c 01       	movw	r18, r24
     2a0:	ad 01       	movw	r20, r26
     2a2:	8a ef       	ldi	r24, 0xFA	; 250
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ab e4       	ldi	r26, 0x4B	; 75
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	bc 01       	movw	r22, r24
     2ac:	cd 01       	movw	r24, r26
     2ae:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodsi4>
     2b2:	da 01       	movw	r26, r20
     2b4:	c9 01       	movw	r24, r18
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	a1 09       	sbc	r26, r1
     2ba:	b1 09       	sbc	r27, r1
     2bc:	8a 83       	std	Y+2, r24	; 0x02
     2be:	9b 83       	std	Y+3, r25	; 0x03
     2c0:	ac 83       	std	Y+4, r26	; 0x04
     2c2:	bd 83       	std	Y+5, r27	; 0x05
	
	unsigned char ucsr0c = 0;
     2c4:	19 82       	std	Y+1, r1	; 0x01
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     2c6:	e0 e4       	ldi	r30, 0x40	; 64
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	9b 81       	ldd	r25, Y+3	; 0x03
     2ce:	ac 81       	ldd	r26, Y+4	; 0x04
     2d0:	bd 81       	ldd	r27, Y+5	; 0x05
     2d2:	89 2f       	mov	r24, r25
     2d4:	9a 2f       	mov	r25, r26
     2d6:	ab 2f       	mov	r26, r27
     2d8:	bb 27       	eor	r27, r27
     2da:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr0;
     2dc:	e9 e2       	ldi	r30, 0x29	; 41
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	80 83       	st	Z, r24
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     2e4:	ea e2       	ldi	r30, 0x2A	; 42
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	88 e1       	ldi	r24, 0x18	; 24
     2ea:	80 83       	st	Z, r24
	
	/*USBS0: 0 for 1 stop bit, 1 for 2 stop bit*/
	ucsr0c = ucsr0c | (0<<USBS0);

	/*UCSZ01:0 number of databits in payload: 011 for 8 bits. S. 192 in data sheet */
	ucsr0c = ucsr0c | (1<<UCSZ01) | (1<<UCSZ00);	
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	86 60       	ori	r24, 0x06	; 6
     2f0:	89 83       	std	Y+1, r24	; 0x01
	
	/*UPM01:0 definerer pairty bit. 00 = parity off, 10 = parity even, 11 parity odd*/
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	80 68       	ori	r24, 0x80	; 128
     2fc:	89 83       	std	Y+1, r24	; 0x01
		
	UCSR0C = ucsr0c;
     2fe:	e0 e4       	ldi	r30, 0x40	; 64
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	80 83       	st	Z, r24

	fdevopen(UART_put_char, UART_get_char);
     306:	85 e9       	ldi	r24, 0x95	; 149
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	2c eb       	ldi	r18, 0xBC	; 188
     30c:	31 e0       	ldi	r19, 0x01	; 1
     30e:	b9 01       	movw	r22, r18
     310:	0e 94 91 10 	call	0x2122	; 0x2122 <fdevopen>

	return 0;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0

} 
     318:	27 96       	adiw	r28, 0x07	; 7
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	cf 91       	pop	r28
     326:	df 91       	pop	r29
     328:	08 95       	ret

0000032a <UART_put_char>:

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	00 d0       	rcall	.+0      	; 0x330 <UART_put_char+0x6>
     330:	0f 92       	push	r0
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	89 83       	std	Y+1, r24	; 0x01
     338:	7b 83       	std	Y+3, r23	; 0x03
     33a:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') UART_put_char('\r', dummy);
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	8a 30       	cpi	r24, 0x0A	; 10
     340:	31 f4       	brne	.+12     	; 0x34e <UART_put_char+0x24>
     342:	2a 81       	ldd	r18, Y+2	; 0x02
     344:	3b 81       	ldd	r19, Y+3	; 0x03
     346:	8d e0       	ldi	r24, 0x0D	; 13
     348:	b9 01       	movw	r22, r18
     34a:	0e 94 95 01 	call	0x32a	; 0x32a <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
     34e:	eb e2       	ldi	r30, 0x2B	; 43
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	80 72       	andi	r24, 0x20	; 32
     35a:	90 70       	andi	r25, 0x00	; 0
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	b9 f3       	breq	.-18     	; 0x34e <UART_put_char+0x24>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
     360:	ec e2       	ldi	r30, 0x2C	; 44
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	80 83       	st	Z, r24
	return 0;
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
}
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	cf 91       	pop	r28
     374:	df 91       	pop	r29
     376:	08 95       	ret

00000378 <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	00 d0       	rcall	.+0      	; 0x37e <UART_get_char+0x6>
     37e:	0f 92       	push	r0
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	9b 83       	std	Y+3, r25	; 0x03
     386:	8a 83       	std	Y+2, r24	; 0x02
	loop_until_bit_is_set(UCSR0A, RXC0);
     388:	eb e2       	ldi	r30, 0x2B	; 43
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	88 23       	and	r24, r24
     390:	dc f7       	brge	.-10     	; 0x388 <UART_get_char+0x10>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
     392:	ec e2       	ldi	r30, 0x2C	; 44
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	89 83       	std	Y+1, r24	; 0x01
	if (c == '\r') c = '\n';
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	8d 30       	cpi	r24, 0x0D	; 13
     39e:	11 f4       	brne	.+4      	; 0x3a4 <UART_get_char+0x2c>
     3a0:	8a e0       	ldi	r24, 0x0A	; 10
     3a2:	89 83       	std	Y+1, r24	; 0x01
	return (int) UDR0;
     3a4:	ec e2       	ldi	r30, 0x2C	; 44
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	88 2f       	mov	r24, r24
     3ac:	90 e0       	ldi	r25, 0x00	; 0
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	cf 91       	pop	r28
     3b6:	df 91       	pop	r29
     3b8:	08 95       	ret

000003ba <init_SRAM>:
#include <util/delay.h>
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
     3ba:	df 93       	push	r29
     3bc:	cf 93       	push	r28
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     3c2:	a5 e5       	ldi	r26, 0x55	; 85
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	e5 e5       	ldi	r30, 0x55	; 85
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	80 6c       	ori	r24, 0xC0	; 192
     3ce:	8c 93       	st	X, r24
	EMCUCR =  EMCUCR | (1<<SRW00); 
     3d0:	a6 e5       	ldi	r26, 0x56	; 86
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e6 e5       	ldi	r30, 0x56	; 86
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	84 60       	ori	r24, 0x04	; 4
     3dc:	8c 93       	st	X, r24
	SFIOR =  SFIOR | (1<<XMM2);
     3de:	a0 e5       	ldi	r26, 0x50	; 80
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e0 e5       	ldi	r30, 0x50	; 80
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	8c 93       	st	X, r24
}
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	27 97       	sbiw	r28, 0x07	; 7
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
	unsigned char *ram_address = (unsigned char *) 0x1000;
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e1       	ldi	r25, 0x10	; 16
     40a:	9f 83       	std	Y+7, r25	; 0x07
     40c:	8e 83       	std	Y+6, r24	; 0x06
	printf("Testing ram...");
     40e:	00 d0       	rcall	.+0      	; 0x410 <SRAM_test+0x1e>
     410:	ed b7       	in	r30, 0x3d	; 61
     412:	fe b7       	in	r31, 0x3e	; 62
     414:	31 96       	adiw	r30, 0x01	; 1
     416:	84 e2       	ldi	r24, 0x24	; 36
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	91 83       	std	Z+1, r25	; 0x01
     41c:	80 83       	st	Z, r24
     41e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0

	int i;
	for(i=0;i<0x800;i++)
     426:	1d 82       	std	Y+5, r1	; 0x05
     428:	1c 82       	std	Y+4, r1	; 0x04
     42a:	0e c0       	rjmp	.+28     	; 0x448 <SRAM_test+0x56>
	{
		ram_address[i] = (char)0x83;
     42c:	2c 81       	ldd	r18, Y+4	; 0x04
     42e:	3d 81       	ldd	r19, Y+5	; 0x05
     430:	8e 81       	ldd	r24, Y+6	; 0x06
     432:	9f 81       	ldd	r25, Y+7	; 0x07
     434:	fc 01       	movw	r30, r24
     436:	e2 0f       	add	r30, r18
     438:	f3 1f       	adc	r31, r19
     43a:	83 e8       	ldi	r24, 0x83	; 131
     43c:	80 83       	st	Z, r24
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Testing ram...");

	int i;
	for(i=0;i<0x800;i++)
     43e:	8c 81       	ldd	r24, Y+4	; 0x04
     440:	9d 81       	ldd	r25, Y+5	; 0x05
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	9d 83       	std	Y+5, r25	; 0x05
     446:	8c 83       	std	Y+4, r24	; 0x04
     448:	8c 81       	ldd	r24, Y+4	; 0x04
     44a:	9d 81       	ldd	r25, Y+5	; 0x05
     44c:	28 e0       	ldi	r18, 0x08	; 8
     44e:	80 30       	cpi	r24, 0x00	; 0
     450:	92 07       	cpc	r25, r18
     452:	64 f3       	brlt	.-40     	; 0x42c <SRAM_test+0x3a>
		ram_address[i] = (char)0x83;
	//	_delay_ms(1);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     454:	1d 82       	std	Y+5, r1	; 0x05
     456:	1c 82       	std	Y+4, r1	; 0x04
     458:	30 c0       	rjmp	.+96     	; 0x4ba <SRAM_test+0xc8>
	{
		char c = (char)ram_address[i];
     45a:	2c 81       	ldd	r18, Y+4	; 0x04
     45c:	3d 81       	ldd	r19, Y+5	; 0x05
     45e:	8e 81       	ldd	r24, Y+6	; 0x06
     460:	9f 81       	ldd	r25, Y+7	; 0x07
     462:	fc 01       	movw	r30, r24
     464:	e2 0f       	add	r30, r18
     466:	f3 1f       	adc	r31, r19
     468:	80 81       	ld	r24, Z
     46a:	8b 83       	std	Y+3, r24	; 0x03
		int j = (int)c;
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	89 83       	std	Y+1, r24	; 0x01
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     476:	2c 81       	ldd	r18, Y+4	; 0x04
     478:	3d 81       	ldd	r19, Y+5	; 0x05
     47a:	8e 81       	ldd	r24, Y+6	; 0x06
     47c:	9f 81       	ldd	r25, Y+7	; 0x07
     47e:	fc 01       	movw	r30, r24
     480:	e2 0f       	add	r30, r18
     482:	f3 1f       	adc	r31, r19
     484:	80 81       	ld	r24, Z
     486:	83 38       	cpi	r24, 0x83	; 131
     488:	99 f0       	breq	.+38     	; 0x4b0 <SRAM_test+0xbe>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     48a:	00 d0       	rcall	.+0      	; 0x48c <SRAM_test+0x9a>
     48c:	00 d0       	rcall	.+0      	; 0x48e <SRAM_test+0x9c>
     48e:	ed b7       	in	r30, 0x3d	; 61
     490:	fe b7       	in	r31, 0x3e	; 62
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	83 e3       	ldi	r24, 0x33	; 51
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	91 83       	std	Z+1, r25	; 0x01
     49a:	80 83       	st	Z, r24
     49c:	8c 81       	ldd	r24, Y+4	; 0x04
     49e:	9d 81       	ldd	r25, Y+5	; 0x05
     4a0:	93 83       	std	Z+3, r25	; 0x03
     4a2:	82 83       	std	Z+2, r24	; 0x02
     4a4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
	//	_delay_ms(1);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     4b0:	8c 81       	ldd	r24, Y+4	; 0x04
     4b2:	9d 81       	ldd	r25, Y+5	; 0x05
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	9d 83       	std	Y+5, r25	; 0x05
     4b8:	8c 83       	std	Y+4, r24	; 0x04
     4ba:	8c 81       	ldd	r24, Y+4	; 0x04
     4bc:	9d 81       	ldd	r25, Y+5	; 0x05
     4be:	28 e0       	ldi	r18, 0x08	; 8
     4c0:	80 30       	cpi	r24, 0x00	; 0
     4c2:	92 07       	cpc	r25, r18
     4c4:	54 f2       	brlt	.-108    	; 0x45a <SRAM_test+0x68>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("OK!\n");
     4c6:	8a e4       	ldi	r24, 0x4A	; 74
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <puts>
}
     4ce:	27 96       	adiw	r28, 0x07	; 7
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	08 95       	ret

000004e0 <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     4e0:	df 93       	push	r29
     4e2:	cf 93       	push	r28
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	28 97       	sbiw	r28, 0x08	; 8
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
	// set port B: in
	DDRB &= 0b11111110; //inputs
     4f4:	a7 e3       	ldi	r26, 0x37	; 55
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	e7 e3       	ldi	r30, 0x37	; 55
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	8e 7f       	andi	r24, 0xFE	; 254
     500:	8c 93       	st	X, r24
	PORTB |= 0b00000000; //Pull-ups (not on adc ready)
     502:	a8 e3       	ldi	r26, 0x38	; 56
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	e8 e3       	ldi	r30, 0x38	; 56
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	8c 93       	st	X, r24

	DDRE = DDRE & 0b11111110; //inputs
     50e:	a6 e2       	ldi	r26, 0x26	; 38
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	e6 e2       	ldi	r30, 0x26	; 38
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	8e 7f       	andi	r24, 0xFE	; 254
     51a:	8c 93       	st	X, r24
	PORTE = PORTE | 0b00000001; //Pull-ups
     51c:	a7 e2       	ldi	r26, 0x27	; 39
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e7 e2       	ldi	r30, 0x27	; 39
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	81 60       	ori	r24, 0x01	; 1
     528:	8c 93       	st	X, r24

	EMCUCR &= 0b11111110;// trig on falling edge
     52a:	a6 e5       	ldi	r26, 0x56	; 86
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	e6 e5       	ldi	r30, 0x56	; 86
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	8e 7f       	andi	r24, 0xFE	; 254
     536:	8c 93       	st	X, r24
	GICR |= (1<<INT2); //enable interrupts for this one
     538:	ab e5       	ldi	r26, 0x5B	; 91
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	eb e5       	ldi	r30, 0x5B	; 91
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 62       	ori	r24, 0x20	; 32
     544:	8c 93       	st	X, r24

	//initialize timer for joystick polling
	//CTC mode, no output, 1024 prescaler
	TCCR0 = 0b00001101;
     546:	e3 e5       	ldi	r30, 0x53	; 83
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	80 83       	st	Z, r24

	//Number to count to (here 40 ms, max 40-something)
	long long int count = 10*FOSC/(1000*1024);
     54e:	80 e3       	ldi	r24, 0x30	; 48
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	88 ef       	ldi	r24, 0xF8	; 248
     554:	8a 83       	std	Y+2, r24	; 0x02
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	8c 83       	std	Y+4, r24	; 0x04
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	8d 83       	std	Y+5, r24	; 0x05
     562:	8f ef       	ldi	r24, 0xFF	; 255
     564:	8e 83       	std	Y+6, r24	; 0x06
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	8f 83       	std	Y+7, r24	; 0x07
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	88 87       	std	Y+8, r24	; 0x08

	OCR0 = (uint8_t) count;
     56e:	e1 e5       	ldi	r30, 0x51	; 81
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	80 83       	st	Z, r24
	
	//Enable interrupt on CTC
	TIMSK = TIMSK | (1<<OCIE0); 
     576:	a9 e5       	ldi	r26, 0x59	; 89
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	e9 e5       	ldi	r30, 0x59	; 89
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	81 60       	ori	r24, 0x01	; 1
     582:	8c 93       	st	X, r24

}
     584:	28 96       	adiw	r28, 0x08	; 8
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	cf 91       	pop	r28
     592:	df 91       	pop	r29
     594:	08 95       	ret

00000596 <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	00 d0       	rcall	.+0      	; 0x59c <read_axis+0x6>
     59c:	00 d0       	rcall	.+0      	; 0x59e <read_axis+0x8>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <read_axis+0xa>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	98 e1       	ldi	r25, 0x18	; 24
     5aa:	9a 83       	std	Y+2, r25	; 0x02
     5ac:	89 83       	std	Y+1, r24	; 0x01
	
	switch (axis){
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	28 2f       	mov	r18, r24
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	3e 83       	std	Y+6, r19	; 0x06
     5b6:	2d 83       	std	Y+5, r18	; 0x05
     5b8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ba:	9e 81       	ldd	r25, Y+6	; 0x06
     5bc:	88 37       	cpi	r24, 0x78	; 120
     5be:	91 05       	cpc	r25, r1
     5c0:	31 f0       	breq	.+12     	; 0x5ce <read_axis+0x38>
     5c2:	2d 81       	ldd	r18, Y+5	; 0x05
     5c4:	3e 81       	ldd	r19, Y+6	; 0x06
     5c6:	29 37       	cpi	r18, 0x79	; 121
     5c8:	31 05       	cpc	r19, r1
     5ca:	b9 f0       	breq	.+46     	; 0x5fa <read_axis+0x64>
     5cc:	2e c0       	rjmp	.+92     	; 0x62a <read_axis+0x94>
		case 'x':
			adc_address[0] = 0x04;
     5ce:	e9 81       	ldd	r30, Y+1	; 0x01
     5d0:	fa 81       	ldd	r31, Y+2	; 0x02
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	80 83       	st	Z, r24
			loop_until_bit_is_clear(PINB, 0);
     5d6:	e6 e3       	ldi	r30, 0x36	; 54
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	90 70       	andi	r25, 0x00	; 0
     5e4:	88 23       	and	r24, r24
     5e6:	b9 f7       	brne	.-18     	; 0x5d6 <read_axis+0x40>
			return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     5e8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ea:	fa 81       	ldd	r31, Y+2	; 0x02
     5ec:	80 81       	ld	r24, Z
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 20 03 	call	0x640	; 0x640 <eeprom_read_byte>
     5f6:	8c 83       	std	Y+4, r24	; 0x04
     5f8:	19 c0       	rjmp	.+50     	; 0x62c <read_axis+0x96>
			
		case 'y':
			adc_address[0] = 0x05;
     5fa:	e9 81       	ldd	r30, Y+1	; 0x01
     5fc:	fa 81       	ldd	r31, Y+2	; 0x02
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	80 83       	st	Z, r24
			loop_until_bit_is_clear(PINB, 0);
     602:	e6 e3       	ldi	r30, 0x36	; 54
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	88 2f       	mov	r24, r24
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	81 70       	andi	r24, 0x01	; 1
     60e:	90 70       	andi	r25, 0x00	; 0
     610:	88 23       	and	r24, r24
     612:	b9 f7       	brne	.-18     	; 0x602 <read_axis+0x6c>
			return (int8_t)eeprom_read_byte((uint8_t*)((*adc_address)+256));
     614:	e9 81       	ldd	r30, Y+1	; 0x01
     616:	fa 81       	ldd	r31, Y+2	; 0x02
     618:	80 81       	ld	r24, Z
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	80 50       	subi	r24, 0x00	; 0
     620:	9f 4f       	sbci	r25, 0xFF	; 255
     622:	0e 94 20 03 	call	0x640	; 0x640 <eeprom_read_byte>
     626:	8c 83       	std	Y+4, r24	; 0x04
     628:	01 c0       	rjmp	.+2      	; 0x62c <read_axis+0x96>
		default:
			return 0;
     62a:	1c 82       	std	Y+4, r1	; 0x04
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return -1;
	//evt. korrigering
}
     62e:	26 96       	adiw	r28, 0x06	; 6
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	00 d0       	rcall	.+0      	; 0x646 <eeprom_read_byte+0x6>
     646:	0f 92       	push	r0
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	9b 83       	std	Y+3, r25	; 0x03
     64e:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     650:	ec e3       	ldi	r30, 0x3C	; 60
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	82 70       	andi	r24, 0x02	; 2
     65c:	90 70       	andi	r25, 0x00	; 0
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	b9 f7       	brne	.-18     	; 0x650 <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     662:	ee e3       	ldi	r30, 0x3E	; 62
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	8a 81       	ldd	r24, Y+2	; 0x02
     668:	9b 81       	ldd	r25, Y+3	; 0x03
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     66e:	e0 9a       	sbi	0x1c, 0	; 28
     670:	8d b3       	in	r24, 0x1d	; 29
     672:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     674:	89 81       	ldd	r24, Y+1	; 0x01
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	08 95       	ret

00000682 <sig_output_compare0>:
	//printf("X-akse: %d Y-akse: %d Knapp1: %d knapp2: %d\n", read_axis('x'), read_axis('y'), (read_buttons()&1), ((read_buttons()>>1)&1));
	
		//	read_axis('x');
		//	read_axis('y');	

void sig_output_compare0() {
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	00 d0       	rcall	.+0      	; 0x68c <sig_output_compare0+0xa>
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62

	static int temp;
	temp+=1;
     690:	80 91 a2 02 	lds	r24, 0x02A2
     694:	90 91 a3 02 	lds	r25, 0x02A3
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 a3 02 	sts	0x02A3, r25
     69e:	80 93 a2 02 	sts	0x02A2, r24

	//check joystick
	char *str = "\0\0\0\0\0\0\0"; 
     6a2:	8e e4       	ldi	r24, 0x4E	; 78
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01

	str[0] = (char)15; //group 15
     6aa:	e9 81       	ldd	r30, Y+1	; 0x01
     6ac:	fa 81       	ldd	r31, Y+2	; 0x02
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	80 83       	st	Z, r24

	str[1] = 'x'; //x axis ///////////////////////////
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	fc 01       	movw	r30, r24
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	88 e7       	ldi	r24, 0x78	; 120
     6bc:	80 83       	st	Z, r24

	str[2] = (char)read_axis('x'); //data
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	8c 01       	movw	r16, r24
     6c4:	0e 5f       	subi	r16, 0xFE	; 254
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	88 e7       	ldi	r24, 0x78	; 120
     6ca:	0e 94 cb 02 	call	0x596	; 0x596 <read_axis>
     6ce:	f8 01       	movw	r30, r16
     6d0:	80 83       	st	Z, r24


//	printf("X-Akse: %d",str[2]);

	CAN_send(str, 0x1F);
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	6f e1       	ldi	r22, 0x1F	; 31
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 04 06 	call	0xc08	; 0xc08 <CAN_send>

	
	if (!(temp%20)){
     6de:	80 91 a2 02 	lds	r24, 0x02A2
     6e2:	90 91 a3 02 	lds	r25, 0x02A3
     6e6:	24 e1       	ldi	r18, 0x14	; 20
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	b9 01       	movw	r22, r18
     6ec:	0e 94 cc 14 	call	0x2998	; 0x2998 <__divmodhi4>
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	c1 f4       	brne	.+48     	; 0x724 <sig_output_compare0+0xa2>
		printf("x: %d\n", str[2]);
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	fc 01       	movw	r30, r24
     6fa:	32 96       	adiw	r30, 0x02	; 2
     6fc:	80 81       	ld	r24, Z
     6fe:	28 2f       	mov	r18, r24
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	00 d0       	rcall	.+0      	; 0x704 <sig_output_compare0+0x82>
     704:	00 d0       	rcall	.+0      	; 0x706 <sig_output_compare0+0x84>
     706:	ed b7       	in	r30, 0x3d	; 61
     708:	fe b7       	in	r31, 0x3e	; 62
     70a:	31 96       	adiw	r30, 0x01	; 1
     70c:	86 e5       	ldi	r24, 0x56	; 86
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
     714:	33 83       	std	Z+3, r19	; 0x03
     716:	22 83       	std	Z+2, r18	; 0x02
     718:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
	}

	//y-axis


	str[1] = 'y'; //y axis
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	fc 01       	movw	r30, r24
     72a:	31 96       	adiw	r30, 0x01	; 1
     72c:	89 e7       	ldi	r24, 0x79	; 121
     72e:	80 83       	st	Z, r24

	str[2] = (char)read_axis('y'); //data
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	9a 81       	ldd	r25, Y+2	; 0x02
     734:	8c 01       	movw	r16, r24
     736:	0e 5f       	subi	r16, 0xFE	; 254
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	89 e7       	ldi	r24, 0x79	; 121
     73c:	0e 94 cb 02 	call	0x596	; 0x596 <read_axis>
     740:	f8 01       	movw	r30, r16
     742:	80 83       	st	Z, r24

	CAN_send(str, 0x1F);
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	9a 81       	ldd	r25, Y+2	; 0x02
     748:	6f e1       	ldi	r22, 0x1F	; 31
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	0e 94 04 06 	call	0xc08	; 0xc08 <CAN_send>
	
	
	if (!(temp%20)){
     750:	80 91 a2 02 	lds	r24, 0x02A2
     754:	90 91 a3 02 	lds	r25, 0x02A3
     758:	24 e1       	ldi	r18, 0x14	; 20
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	b9 01       	movw	r22, r18
     75e:	0e 94 cc 14 	call	0x2998	; 0x2998 <__divmodhi4>
     762:	00 97       	sbiw	r24, 0x00	; 0
     764:	51 f5       	brne	.+84     	; 0x7ba <sig_output_compare0+0x138>
		printf("y: %d\n", str[2]);
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	fc 01       	movw	r30, r24
     76c:	32 96       	adiw	r30, 0x02	; 2
     76e:	80 81       	ld	r24, Z
     770:	28 2f       	mov	r18, r24
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	00 d0       	rcall	.+0      	; 0x776 <sig_output_compare0+0xf4>
     776:	00 d0       	rcall	.+0      	; 0x778 <sig_output_compare0+0xf6>
     778:	ed b7       	in	r30, 0x3d	; 61
     77a:	fe b7       	in	r31, 0x3e	; 62
     77c:	31 96       	adiw	r30, 0x01	; 1
     77e:	8d e5       	ldi	r24, 0x5D	; 93
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	33 83       	std	Z+3, r19	; 0x03
     788:	22 83       	std	Z+2, r18	; 0x02
     78a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
	
	
		str[1] = 'a'; //read score
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	fc 01       	movw	r30, r24
     79c:	31 96       	adiw	r30, 0x01	; 1
     79e:	81 e6       	ldi	r24, 0x61	; 97
     7a0:	80 83       	st	Z, r24
		str[2] = 'a'; //dummy data
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	fc 01       	movw	r30, r24
     7a8:	32 96       	adiw	r30, 0x02	; 2
     7aa:	81 e6       	ldi	r24, 0x61	; 97
     7ac:	80 83       	st	Z, r24
		CAN_send(str, 0x1F);
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	6f e1       	ldi	r22, 0x1F	; 31
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	0e 94 04 06 	call	0xc08	; 0xc08 <CAN_send>
	}
	
	

	
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <int_joystick_button>:

void int_joystick_button(){
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <int_joystick_button+0x6>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
	printf("Joystick knapp\n");
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <puts>
	char *str = "\0\0\0\0\0\0\0";
     7da:	8e e4       	ldi	r24, 0x4E	; 78
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	9a 83       	std	Y+2, r25	; 0x02
     7e0:	89 83       	std	Y+1, r24	; 0x01
	str[0] = (char)15; //group 15
     7e2:	e9 81       	ldd	r30, Y+1	; 0x01
     7e4:	fa 81       	ldd	r31, Y+2	; 0x02
     7e6:	8f e0       	ldi	r24, 0x0F	; 15
     7e8:	80 83       	st	Z, r24
	str[1] = 'b'; //button
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	31 96       	adiw	r30, 0x01	; 1
     7f2:	82 e6       	ldi	r24, 0x62	; 98
     7f4:	80 83       	st	Z, r24
	CAN_send(str, 0x1F);
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	6f e1       	ldi	r22, 0x1F	; 31
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 04 06 	call	0xc08	; 0xc08 <CAN_send>
	
}
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	08 95       	ret

0000080c <SPI_MasterInit>:

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     80c:	87 b3       	in	r24, 0x17	; 23
     80e:	87 70       	andi	r24, 0x07	; 7
     810:	88 6b       	ori	r24, 0xB8	; 184
     812:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     814:	81 e5       	ldi	r24, 0x51	; 81
     816:	8d b9       	out	0x0d, r24	; 13
}

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     818:	88 b3       	in	r24, 0x18	; 24
     81a:	88 61       	ori	r24, 0x18	; 24
     81c:	88 bb       	out	0x18, r24	; 24
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	SPI_NoSlave();
}
     81e:	08 95       	ret

00000820 <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     820:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     822:	77 9b       	sbis	0x0e, 7	; 14
     824:	fe cf       	rjmp	.-4      	; 0x822 <SPI_MasterTransmit+0x2>
}
     826:	08 95       	ret

00000828 <SPI_MasterReceive>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     828:	80 e4       	ldi	r24, 0x40	; 64
     82a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     82c:	77 9b       	sbis	0x0e, 7	; 14
     82e:	fe cf       	rjmp	.-4      	; 0x82c <SPI_MasterReceive+0x4>
{
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     830:	77 9b       	sbis	0x0e, 7	; 14
     832:	fe cf       	rjmp	.-4      	; 0x830 <SPI_MasterReceive+0x8>
	
	

	/* Return data register */
	return SPDR;
     834:	8f b1       	in	r24, 0x0f	; 15
}
     836:	08 95       	ret

00000838 <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     838:	82 36       	cpi	r24, 0x62	; 98
     83a:	11 f4       	brne	.+4      	; 0x840 <SPI_SelectSlave+0x8>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     83c:	c3 98       	cbi	0x18, 3	; 24
     83e:	08 95       	ret
	else if (slave == SPI_CAN)
     840:	83 37       	cpi	r24, 0x73	; 115
     842:	09 f4       	brne	.+2      	; 0x846 <SPI_SelectSlave+0xe>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     844:	c4 98       	cbi	0x18, 4	; 24
     846:	08 95       	ret

00000848 <SPI_NoSlave>:
}

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     848:	88 b3       	in	r24, 0x18	; 24
     84a:	88 61       	ori	r24, 0x18	; 24
     84c:	88 bb       	out	0x18, r24	; 24
}
     84e:	08 95       	ret

00000850 <CAN_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>

//Initialize the CAN bus
void CAN_init(void){
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	00 d0       	rcall	.+0      	; 0x856 <CAN_init+0x6>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     85a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <CAN_reset>

	uint8_t data[2];

	//Acceptance mask for RXB0 (all 11 bits counts)
	data[0] = 0b11111111;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     862:	80 ee       	ldi	r24, 0xE0	; 224
     864:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], MASK_RXF0);
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	60 e2       	ldi	r22, 0x20	; 32
     86a:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], MASK_RXF0+1);
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	61 e2       	ldi	r22, 0x21	; 33
     872:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>

	//RXF0
	//Receive filter 0 hits when id = 0x1F (exactly)	
	data[0] = 0b00000011;
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     87a:	80 ee       	ldi	r24, 0xE0	; 224
     87c:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF0);
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], RXF0+1);
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>

	//Acceptance mask for RXB1 - accepts 0 1 2 3 only
	data[0] = 0b11111111;
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     892:	80 ee       	ldi	r24, 0xE0	; 224
     894:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], MASK_RXF1);
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	64 e2       	ldi	r22, 0x24	; 36
     89a:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], MASK_RXF1+1);
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	65 e2       	ldi	r22, 0x25	; 37
     8a2:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>

	//RXF2
	//Receive filter 2 hits when id = 0 (exactly)
	data[0] = 0b00000000;
     8a6:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b00000000;
     8a8:	1a 82       	std	Y+2, r1	; 0x02
	CAN_write(data[0], RXF2);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	68 e0       	ldi	r22, 0x08	; 8
     8ae:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], RXF2+1);
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	69 e0       	ldi	r22, 0x09	; 9
     8b6:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>

	//RXF3
	//Receive filter 3 hits when id = 1 (exactly)
	data[0] = 0b00000000;
     8ba:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b00100000;
     8bc:	80 e2       	ldi	r24, 0x20	; 32
     8be:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF3);
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	60 e1       	ldi	r22, 0x10	; 16
     8c4:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], RXF3+1);
     8c8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ca:	61 e1       	ldi	r22, 0x11	; 17
     8cc:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>

	//RXF4
	//Receive filter 4 hits when id = 2 (exactly)
	data[0] = 0b00000000;
     8d0:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b01000000;
     8d2:	80 e4       	ldi	r24, 0x40	; 64
     8d4:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF4);
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	64 e1       	ldi	r22, 0x14	; 20
     8da:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], RXF4+1);
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	65 e1       	ldi	r22, 0x15	; 21
     8e2:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>

	//RXF5
	//Receive filter 5 hits when id = 3 (exactly)
	data[0] = 0b00000000;
     8e6:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b01100000;
     8e8:	80 e6       	ldi	r24, 0x60	; 96
     8ea:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF5);
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	68 e1       	ldi	r22, 0x18	; 24
     8f0:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_write(data[1], RXF5+1);
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	69 e1       	ldi	r22, 0x19	; 25
     8f8:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>


	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_NORMAL); //set loopback mode
     8fc:	8f e0       	ldi	r24, 0x0F	; 15
     8fe:	60 ee       	ldi	r22, 0xE0	; 224
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	0e 94 17 0b 	call	0x162e	; 0x162e <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     906:	80 e6       	ldi	r24, 0x60	; 96
     908:	60 e6       	ldi	r22, 0x60	; 96
     90a:	40 e2       	ldi	r20, 0x20	; 32
     90c:	0e 94 17 0b 	call	0x162e	; 0x162e <CAN_bit_modify>
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	6f e0       	ldi	r22, 0x0F	; 15
     914:	4f ef       	ldi	r20, 0xFF	; 255
     916:	0e 94 17 0b 	call	0x162e	; 0x162e <CAN_bit_modify>

//	char *buf;
//	CAN_read(buf, CANSTAT, 1);

	CAN_init_interrupt();
     91a:	0e 94 c4 06 	call	0xd88	; 0xd88 <CAN_init_interrupt>
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	69 97       	sbiw	r28, 0x19	; 25
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     93c:	83 e7       	ldi	r24, 0x73	; 115
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <puts>
	int i;
	

	CAN_message message;
	message.id = 0;
     944:	1a 8a       	std	Y+18, r1	; 0x12
     946:	19 8a       	std	Y+17, r1	; 0x11
	message.length = 8;
     948:	88 e0       	ldi	r24, 0x08	; 8
     94a:	8b 8b       	std	Y+19, r24	; 0x13
	message.data = " ";
     94c:	84 e8       	ldi	r24, 0x84	; 132
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	9d 8b       	std	Y+21, r25	; 0x15
     952:	8c 8b       	std	Y+20, r24	; 0x14
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     954:	18 8a       	std	Y+16, r1	; 0x10
     956:	1f 86       	std	Y+15, r1	; 0x0f
     958:	44 c1       	rjmp	.+648    	; 0xbe2 <CAN_test+0x2ba>
		switch (i) {
     95a:	8f 85       	ldd	r24, Y+15	; 0x0f
     95c:	98 89       	ldd	r25, Y+16	; 0x10
     95e:	99 8f       	std	Y+25, r25	; 0x19
     960:	88 8f       	std	Y+24, r24	; 0x18
     962:	88 8d       	ldd	r24, Y+24	; 0x18
     964:	99 8d       	ldd	r25, Y+25	; 0x19
     966:	84 30       	cpi	r24, 0x04	; 4
     968:	91 05       	cpc	r25, r1
     96a:	09 f4       	brne	.+2      	; 0x96e <CAN_test+0x46>
     96c:	6b c0       	rjmp	.+214    	; 0xa44 <CAN_test+0x11c>
     96e:	88 8d       	ldd	r24, Y+24	; 0x18
     970:	99 8d       	ldd	r25, Y+25	; 0x19
     972:	85 30       	cpi	r24, 0x05	; 5
     974:	91 05       	cpc	r25, r1
     976:	ec f4       	brge	.+58     	; 0x9b2 <CAN_test+0x8a>
     978:	88 8d       	ldd	r24, Y+24	; 0x18
     97a:	99 8d       	ldd	r25, Y+25	; 0x19
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	91 05       	cpc	r25, r1
     980:	09 f4       	brne	.+2      	; 0x984 <CAN_test+0x5c>
     982:	45 c0       	rjmp	.+138    	; 0xa0e <CAN_test+0xe6>
     984:	88 8d       	ldd	r24, Y+24	; 0x18
     986:	99 8d       	ldd	r25, Y+25	; 0x19
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	91 05       	cpc	r25, r1
     98c:	2c f4       	brge	.+10     	; 0x998 <CAN_test+0x70>
     98e:	88 8d       	ldd	r24, Y+24	; 0x18
     990:	99 8d       	ldd	r25, Y+25	; 0x19
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	99 f1       	breq	.+102    	; 0x9fc <CAN_test+0xd4>
     996:	8b c0       	rjmp	.+278    	; 0xaae <CAN_test+0x186>
     998:	88 8d       	ldd	r24, Y+24	; 0x18
     99a:	99 8d       	ldd	r25, Y+25	; 0x19
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	91 05       	cpc	r25, r1
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <CAN_test+0x7c>
     9a2:	3e c0       	rjmp	.+124    	; 0xa20 <CAN_test+0xf8>
     9a4:	88 8d       	ldd	r24, Y+24	; 0x18
     9a6:	99 8d       	ldd	r25, Y+25	; 0x19
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	91 05       	cpc	r25, r1
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <CAN_test+0x88>
     9ae:	41 c0       	rjmp	.+130    	; 0xa32 <CAN_test+0x10a>
     9b0:	7e c0       	rjmp	.+252    	; 0xaae <CAN_test+0x186>
     9b2:	88 8d       	ldd	r24, Y+24	; 0x18
     9b4:	99 8d       	ldd	r25, Y+25	; 0x19
     9b6:	87 30       	cpi	r24, 0x07	; 7
     9b8:	91 05       	cpc	r25, r1
     9ba:	09 f4       	brne	.+2      	; 0x9be <CAN_test+0x96>
     9bc:	5e c0       	rjmp	.+188    	; 0xa7a <CAN_test+0x152>
     9be:	88 8d       	ldd	r24, Y+24	; 0x18
     9c0:	99 8d       	ldd	r25, Y+25	; 0x19
     9c2:	88 30       	cpi	r24, 0x08	; 8
     9c4:	91 05       	cpc	r25, r1
     9c6:	6c f4       	brge	.+26     	; 0x9e2 <CAN_test+0xba>
     9c8:	88 8d       	ldd	r24, Y+24	; 0x18
     9ca:	99 8d       	ldd	r25, Y+25	; 0x19
     9cc:	85 30       	cpi	r24, 0x05	; 5
     9ce:	91 05       	cpc	r25, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <CAN_test+0xac>
     9d2:	41 c0       	rjmp	.+130    	; 0xa56 <CAN_test+0x12e>
     9d4:	88 8d       	ldd	r24, Y+24	; 0x18
     9d6:	99 8d       	ldd	r25, Y+25	; 0x19
     9d8:	86 30       	cpi	r24, 0x06	; 6
     9da:	91 05       	cpc	r25, r1
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <CAN_test+0xb8>
     9de:	44 c0       	rjmp	.+136    	; 0xa68 <CAN_test+0x140>
     9e0:	66 c0       	rjmp	.+204    	; 0xaae <CAN_test+0x186>
     9e2:	88 8d       	ldd	r24, Y+24	; 0x18
     9e4:	99 8d       	ldd	r25, Y+25	; 0x19
     9e6:	88 30       	cpi	r24, 0x08	; 8
     9e8:	91 05       	cpc	r25, r1
     9ea:	09 f4       	brne	.+2      	; 0x9ee <CAN_test+0xc6>
     9ec:	4f c0       	rjmp	.+158    	; 0xa8c <CAN_test+0x164>
     9ee:	88 8d       	ldd	r24, Y+24	; 0x18
     9f0:	99 8d       	ldd	r25, Y+25	; 0x19
     9f2:	89 30       	cpi	r24, 0x09	; 9
     9f4:	91 05       	cpc	r25, r1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <CAN_test+0xd2>
     9f8:	52 c0       	rjmp	.+164    	; 0xa9e <CAN_test+0x176>
     9fa:	59 c0       	rjmp	.+178    	; 0xaae <CAN_test+0x186>
			case 0:
				message.data = "0";
     9fc:	86 e8       	ldi	r24, 0x86	; 134
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	9d 8b       	std	Y+21, r25	; 0x15
     a02:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 0x1F;
     a04:	8f e1       	ldi	r24, 0x1F	; 31
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	9a 8b       	std	Y+18, r25	; 0x12
     a0a:	89 8b       	std	Y+17, r24	; 0x11
     a0c:	50 c0       	rjmp	.+160    	; 0xaae <CAN_test+0x186>
				break;
			case 1:
				message.data = "1";
     a0e:	88 e8       	ldi	r24, 0x88	; 136
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	9d 8b       	std	Y+21, r25	; 0x15
     a14:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 0x1E;
     a16:	8e e1       	ldi	r24, 0x1E	; 30
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9a 8b       	std	Y+18, r25	; 0x12
     a1c:	89 8b       	std	Y+17, r24	; 0x11
     a1e:	47 c0       	rjmp	.+142    	; 0xaae <CAN_test+0x186>
				break;
			case 2:
				message.data = "2";
     a20:	8a e8       	ldi	r24, 0x8A	; 138
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	9d 8b       	std	Y+21, r25	; 0x15
     a26:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 2;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9a 8b       	std	Y+18, r25	; 0x12
     a2e:	89 8b       	std	Y+17, r24	; 0x11
     a30:	3e c0       	rjmp	.+124    	; 0xaae <CAN_test+0x186>
				break;
			case 3:
				message.data = "3";
     a32:	8c e8       	ldi	r24, 0x8C	; 140
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	9d 8b       	std	Y+21, r25	; 0x15
     a38:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 3;
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	9a 8b       	std	Y+18, r25	; 0x12
     a40:	89 8b       	std	Y+17, r24	; 0x11
     a42:	35 c0       	rjmp	.+106    	; 0xaae <CAN_test+0x186>
				break;
			case 4:
				message.data = "4";
     a44:	8e e8       	ldi	r24, 0x8E	; 142
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	9d 8b       	std	Y+21, r25	; 0x15
     a4a:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 4;
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	9a 8b       	std	Y+18, r25	; 0x12
     a52:	89 8b       	std	Y+17, r24	; 0x11
     a54:	2c c0       	rjmp	.+88     	; 0xaae <CAN_test+0x186>
				break;
			case 5:
				message.data = "5";
     a56:	80 e9       	ldi	r24, 0x90	; 144
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	9d 8b       	std	Y+21, r25	; 0x15
     a5c:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 5;
     a5e:	85 e0       	ldi	r24, 0x05	; 5
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9a 8b       	std	Y+18, r25	; 0x12
     a64:	89 8b       	std	Y+17, r24	; 0x11
     a66:	23 c0       	rjmp	.+70     	; 0xaae <CAN_test+0x186>
				break;
			case 6:
				message.data = "6";
     a68:	82 e9       	ldi	r24, 0x92	; 146
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	9d 8b       	std	Y+21, r25	; 0x15
     a6e:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 6;
     a70:	86 e0       	ldi	r24, 0x06	; 6
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	9a 8b       	std	Y+18, r25	; 0x12
     a76:	89 8b       	std	Y+17, r24	; 0x11
     a78:	1a c0       	rjmp	.+52     	; 0xaae <CAN_test+0x186>
				break;
			case 7:
				message.data = "7";
     a7a:	84 e9       	ldi	r24, 0x94	; 148
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	9d 8b       	std	Y+21, r25	; 0x15
     a80:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 7;
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	9a 8b       	std	Y+18, r25	; 0x12
     a88:	89 8b       	std	Y+17, r24	; 0x11
     a8a:	11 c0       	rjmp	.+34     	; 0xaae <CAN_test+0x186>
				break;
			case 8:
				message.data = "8";
     a8c:	86 e9       	ldi	r24, 0x96	; 150
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	9d 8b       	std	Y+21, r25	; 0x15
     a92:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 8;
     a94:	88 e0       	ldi	r24, 0x08	; 8
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	9a 8b       	std	Y+18, r25	; 0x12
     a9a:	89 8b       	std	Y+17, r24	; 0x11
     a9c:	08 c0       	rjmp	.+16     	; 0xaae <CAN_test+0x186>
				break;
			case 9:
				message.data = "9";
     a9e:	88 e9       	ldi	r24, 0x98	; 152
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	9d 8b       	std	Y+21, r25	; 0x15
     aa4:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 9;
     aa6:	89 e0       	ldi	r24, 0x09	; 9
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	9a 8b       	std	Y+18, r25	; 0x12
     aac:	89 8b       	std	Y+17, r24	; 0x11
				break;
		}

		// Sending data in CAN bus
		printf("Sending string: %s", message.data);
     aae:	2c 89       	ldd	r18, Y+20	; 0x14
     ab0:	3d 89       	ldd	r19, Y+21	; 0x15
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <CAN_test+0x18c>
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <CAN_test+0x18e>
     ab6:	ed b7       	in	r30, 0x3d	; 61
     ab8:	fe b7       	in	r31, 0x3e	; 62
     aba:	31 96       	adiw	r30, 0x01	; 1
     abc:	8a e9       	ldi	r24, 0x9A	; 154
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	80 83       	st	Z, r24
     ac4:	33 83       	std	Z+3, r19	; 0x03
     ac6:	22 83       	std	Z+2, r18	; 0x02
     ac8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
		if (CAN_send(message.data, message.id) != 0){
     ad4:	4c 89       	ldd	r20, Y+20	; 0x14
     ad6:	5d 89       	ldd	r21, Y+21	; 0x15
     ad8:	89 89       	ldd	r24, Y+17	; 0x11
     ada:	9a 89       	ldd	r25, Y+18	; 0x12
     adc:	9c 01       	movw	r18, r24
     ade:	ca 01       	movw	r24, r20
     ae0:	b9 01       	movw	r22, r18
     ae2:	0e 94 04 06 	call	0xc08	; 0xc08 <CAN_send>
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	29 f0       	breq	.+10     	; 0xaf4 <CAN_test+0x1cc>
			return -1;
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	9f 8b       	std	Y+23, r25	; 0x17
     af0:	8e 8b       	std	Y+22, r24	; 0x16
     af2:	7f c0       	rjmp	.+254    	; 0xbf2 <CAN_test+0x2ca>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	aa ef       	ldi	r26, 0xFA	; 250
     afa:	b3 e4       	ldi	r27, 0x43	; 67
     afc:	8b 87       	std	Y+11, r24	; 0x0b
     afe:	9c 87       	std	Y+12, r25	; 0x0c
     b00:	ad 87       	std	Y+13, r26	; 0x0d
     b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b04:	6b 85       	ldd	r22, Y+11	; 0x0b
     b06:	7c 85       	ldd	r23, Y+12	; 0x0c
     b08:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0c:	2a e9       	ldi	r18, 0x9A	; 154
     b0e:	3b e9       	ldi	r19, 0x9B	; 155
     b10:	49 e9       	ldi	r20, 0x99	; 153
     b12:	54 e4       	ldi	r21, 0x44	; 68
     b14:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	8f 83       	std	Y+7, r24	; 0x07
     b1e:	98 87       	std	Y+8, r25	; 0x08
     b20:	a9 87       	std	Y+9, r26	; 0x09
     b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b24:	6f 81       	ldd	r22, Y+7	; 0x07
     b26:	78 85       	ldd	r23, Y+8	; 0x08
     b28:	89 85       	ldd	r24, Y+9	; 0x09
     b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e8       	ldi	r20, 0x80	; 128
     b32:	5f e3       	ldi	r21, 0x3F	; 63
     b34:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__ltsf2>
     b38:	88 23       	and	r24, r24
     b3a:	2c f4       	brge	.+10     	; 0xb46 <CAN_test+0x21e>
		__ticks = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	9e 83       	std	Y+6, r25	; 0x06
     b42:	8d 83       	std	Y+5, r24	; 0x05
     b44:	3f c0       	rjmp	.+126    	; 0xbc4 <CAN_test+0x29c>
	else if (__tmp > 65535)
     b46:	6f 81       	ldd	r22, Y+7	; 0x07
     b48:	78 85       	ldd	r23, Y+8	; 0x08
     b4a:	89 85       	ldd	r24, Y+9	; 0x09
     b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	4f e7       	ldi	r20, 0x7F	; 127
     b54:	57 e4       	ldi	r21, 0x47	; 71
     b56:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__gtsf2>
     b5a:	18 16       	cp	r1, r24
     b5c:	4c f5       	brge	.+82     	; 0xbb0 <CAN_test+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b60:	7c 85       	ldd	r23, Y+12	; 0x0c
     b62:	8d 85       	ldd	r24, Y+13	; 0x0d
     b64:	9e 85       	ldd	r25, Y+14	; 0x0e
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 e2       	ldi	r20, 0x20	; 32
     b6c:	51 e4       	ldi	r21, 0x41	; 65
     b6e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	9e 83       	std	Y+6, r25	; 0x06
     b84:	8d 83       	std	Y+5, r24	; 0x05
     b86:	0f c0       	rjmp	.+30     	; 0xba6 <CAN_test+0x27e>
     b88:	8a e7       	ldi	r24, 0x7A	; 122
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	9c 83       	std	Y+4, r25	; 0x04
     b8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <CAN_test+0x26c>
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	9e 83       	std	Y+6, r25	; 0x06
     ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	69 f7       	brne	.-38     	; 0xb88 <CAN_test+0x260>
     bae:	14 c0       	rjmp	.+40     	; 0xbd8 <CAN_test+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	9e 83       	std	Y+6, r25	; 0x06
     bc2:	8d 83       	std	Y+5, r24	; 0x05
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
     bc8:	9a 83       	std	Y+2, r25	; 0x02
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <CAN_test+0x2a8>
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	89 83       	std	Y+1, r24	; 0x01
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bda:	98 89       	ldd	r25, Y+16	; 0x10
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	98 8b       	std	Y+16, r25	; 0x10
     be0:	8f 87       	std	Y+15, r24	; 0x0f
     be2:	8f 85       	ldd	r24, Y+15	; 0x0f
     be4:	98 89       	ldd	r25, Y+16	; 0x10
     be6:	8a 30       	cpi	r24, 0x0A	; 10
     be8:	91 05       	cpc	r25, r1
     bea:	0c f4       	brge	.+2      	; 0xbee <CAN_test+0x2c6>
     bec:	b6 ce       	rjmp	.-660    	; 0x95a <CAN_test+0x32>
			return -1;
		}

		_delay_ms(500);
	}
	return 0;
     bee:	1f 8a       	std	Y+23, r1	; 0x17
     bf0:	1e 8a       	std	Y+22, r1	; 0x16
     bf2:	8e 89       	ldd	r24, Y+22	; 0x16
     bf4:	9f 89       	ldd	r25, Y+23	; 0x17
}
     bf6:	69 96       	adiw	r28, 0x19	; 25
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <CAN_send>:

// Send string using CAN bus
int CAN_send(char* str, int id){
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	2e 97       	sbiw	r28, 0x0e	; 14
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	9a 87       	std	Y+10, r25	; 0x0a
     c1e:	89 87       	std	Y+9, r24	; 0x09
     c20:	7c 87       	std	Y+12, r23	; 0x0c
     c22:	6b 87       	std	Y+11, r22	; 0x0b
	
	unsigned int part, i;
	int done = 0;
     c24:	1c 82       	std	Y+4, r1	; 0x04
     c26:	1b 82       	std	Y+3, r1	; 0x03

	char *messg = "\0\0\0\0\0\0\0";
     c28:	8d ea       	ldi	r24, 0xAD	; 173
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < 8; i++){
     c30:	1e 82       	std	Y+6, r1	; 0x06
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	15 c0       	rjmp	.+42     	; 0xc60 <CAN_send+0x58>
		messg[i] = str[i];
     c36:	29 81       	ldd	r18, Y+1	; 0x01
     c38:	3a 81       	ldd	r19, Y+2	; 0x02
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	d9 01       	movw	r26, r18
     c40:	a8 0f       	add	r26, r24
     c42:	b9 1f       	adc	r27, r25
     c44:	29 85       	ldd	r18, Y+9	; 0x09
     c46:	3a 85       	ldd	r19, Y+10	; 0x0a
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	f9 01       	movw	r30, r18
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	80 81       	ld	r24, Z
     c54:	8c 93       	st	X, r24
	
	unsigned int part, i;
	int done = 0;

	char *messg = "\0\0\0\0\0\0\0";
	for(i = 0; i < 8; i++){
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	88 30       	cpi	r24, 0x08	; 8
     c66:	91 05       	cpc	r25, r1
     c68:	30 f3       	brcs	.-52     	; 0xc36 <CAN_send+0x2e>
		}*/
	}

	/////cli(); // disable interrupts, to protect SPI-communication 

	CAN_bit_modify(TXB0SIDH, 0xFF, (id>>3)); //transmit buffer 0 id high
     c6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	95 95       	asr	r25
     c78:	87 95       	ror	r24
     c7a:	98 2f       	mov	r25, r24
     c7c:	81 e3       	ldi	r24, 0x31	; 49
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	49 2f       	mov	r20, r25
     c82:	0e 94 17 0b 	call	0x162e	; 0x162e <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     c86:	8b 85       	ldd	r24, Y+11	; 0x0b
     c88:	98 2f       	mov	r25, r24
     c8a:	92 95       	swap	r25
     c8c:	99 0f       	add	r25, r25
     c8e:	90 7e       	andi	r25, 0xE0	; 224
     c90:	82 e3       	ldi	r24, 0x32	; 50
     c92:	60 ee       	ldi	r22, 0xE0	; 224
     c94:	49 2f       	mov	r20, r25
     c96:	0e 94 17 0b 	call	0x162e	; 0x162e <CAN_bit_modify>
	//CAN_write((char)messg.length, TXB0DLC);	// data length
	CAN_write((char)8, TXB0DLC);	// data length
     c9a:	88 e0       	ldi	r24, 0x08	; 8
     c9c:	65 e3       	ldi	r22, 0x35	; 53
     c9e:	0e 94 6f 0a 	call	0x14de	; 0x14de <CAN_write>
	CAN_load_tx(messg, 0); //load transmit buffer from channel 0
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CAN_load_tx>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CAN_rts>

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){  //Henger her totalt plutselig..? 16.11.09
     cb2:	1e 82       	std	Y+6, r1	; 0x06
     cb4:	1d 82       	std	Y+5, r1	; 0x05
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <CAN_send+0xca>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     cb8:	0e 94 ed 0a 	call	0x15da	; 0x15da <CAN_read_status>
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	84 70       	andi	r24, 0x04	; 4
     cc2:	90 70       	andi	r25, 0x00	; 0
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	59 f0       	breq	.+22     	; 0xcde <CAN_send+0xd6>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){  //Henger her totalt plutselig..? 16.11.09
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	9e 83       	std	Y+6, r25	; 0x06
     cd0:	8d 83       	std	Y+5, r24	; 0x05
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	8f 3f       	cpi	r24, 0xFF	; 255
     cda:	92 07       	cpc	r25, r18
     cdc:	69 f7       	brne	.-38     	; 0xcb8 <CAN_send+0xb0>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	////////sei(); // enable interrupts again
	if(i == 0xffff) return -1;
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	9e 81       	ldd	r25, Y+6	; 0x06
     ce2:	2f ef       	ldi	r18, 0xFF	; 255
     ce4:	8f 3f       	cpi	r24, 0xFF	; 255
     ce6:	92 07       	cpc	r25, r18
     ce8:	29 f4       	brne	.+10     	; 0xcf4 <CAN_send+0xec>
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	9e 87       	std	Y+14, r25	; 0x0e
     cf0:	8d 87       	std	Y+13, r24	; 0x0d
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <CAN_send+0xf0>
			if(i == 0xffff) return -1;
		}

		if(str[i] == '\0') break;
*/
	return 0;
     cf4:	1e 86       	std	Y+14, r1	; 0x0e
     cf6:	1d 86       	std	Y+13, r1	; 0x0d
     cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     cfc:	2e 96       	adiw	r28, 0x0e	; 14
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <CAN_receive+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <CAN_receive+0x8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <CAN_receive+0xa>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	7c 83       	std	Y+4, r23	; 0x04
     d22:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF+2*rx) == 0); // loop until data received
     d24:	0e 94 ed 0a 	call	0x15da	; 0x15da <CAN_read_status>
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	82 23       	and	r24, r18
     d38:	93 23       	and	r25, r19
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	99 f3       	breq	.-26     	; 0xd24 <CAN_receive+0x16>

	if (rx == 1 && (CAN_rx_status() & 0b01000000))
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	91 05       	cpc	r25, r1
     d46:	69 f4       	brne	.+26     	; 0xd62 <CAN_receive+0x54>
     d48:	0e 94 02 0b 	call	0x1604	; 0x1604 <CAN_rx_status>
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	80 74       	andi	r24, 0x40	; 64
     d52:	90 70       	andi	r25, 0x00	; 0
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	29 f0       	breq	.+10     	; 0xd62 <CAN_receive+0x54>
		return -1;
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	08 c0       	rjmp	.+16     	; 0xd72 <CAN_receive+0x64>

	CAN_read_rx(msg, rx);
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	62 2f       	mov	r22, r18
     d6a:	0e 94 24 0a 	call	0x1448	; 0x1448 <CAN_read_rx>
	return 0;
     d6e:	1e 82       	std	Y+6, r1	; 0x06
     d70:	1d 82       	std	Y+5, r1	; 0x05
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06

}
     d76:	26 96       	adiw	r28, 0x06	; 6
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <CAN_init_interrupt>:

void CAN_init_interrupt(){
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
//interrupt init
	DDRD = DDRD & 	0b11110011;
     d90:	a1 e3       	ldi	r26, 0x31	; 49
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e1 e3       	ldi	r30, 0x31	; 49
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	83 7f       	andi	r24, 0xF3	; 243
     d9c:	8c 93       	st	X, r24
	PORTD = PORTD | 0b00001100;
     d9e:	a2 e3       	ldi	r26, 0x32	; 50
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e2 e3       	ldi	r30, 0x32	; 50
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8c 60       	ori	r24, 0x0C	; 12
     daa:	8c 93       	st	X, r24
	MCUCR = MCUCR | (0<<ISC01) | (0<<ISC00) | (0<<ISC11) | (0<<ISC10);
     dac:	a5 e5       	ldi	r26, 0x55	; 85
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e5 e5       	ldi	r30, 0x55	; 85
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8c 93       	st	X, r24
	GICR = GICR | (1<<INT0) | (1<<INT1);
     db8:	ab e5       	ldi	r26, 0x5B	; 91
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e5       	ldi	r30, 0x5B	; 91
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 6c       	ori	r24, 0xC0	; 192
     dc4:	8c 93       	st	X, r24
}
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <sig_interrupt0>:

void sig_interrupt0() {
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <sig_interrupt0+0x6>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <sig_interrupt0+0x8>
     dd4:	0f 92       	push	r0
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     dda:	85 eb       	ldi	r24, 0xB5	; 181
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	9d 83       	std	Y+5, r25	; 0x05
     de0:	8c 83       	std	Y+4, r24	; 0x04

    if(CAN_receive(&received, 0) == 0)
     de2:	ce 01       	movw	r24, r28
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	0e 94 87 06 	call	0xd0e	; 0xd0e <CAN_receive>
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	99 f4       	brne	.+38     	; 0xe18 <sig_interrupt0+0x4c>
		printf("CAN0: %s\n", received.data);
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <sig_interrupt0+0x2c>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <sig_interrupt0+0x2e>
     dfa:	ed b7       	in	r30, 0x3d	; 61
     dfc:	fe b7       	in	r31, 0x3e	; 62
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	8e eb       	ldi	r24, 0xBE	; 190
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	33 83       	std	Z+3, r19	; 0x03
     e0a:	22 83       	std	Z+2, r18	; 0x02
     e0c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0

}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <sig_interrupt1>:

void sig_interrupt1() {
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <sig_interrupt1+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <sig_interrupt1+0x8>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
//	static int i = 0;
//	i++;
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     e36:	85 eb       	ldi	r24, 0xB5	; 181
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	9d 83       	std	Y+5, r25	; 0x05
     e3c:	8c 83       	std	Y+4, r24	; 0x04
	
    if(CAN_receive(&received, 1) == 0)// && i > 100){
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	0e 94 87 06 	call	0xd0e	; 0xd0e <CAN_receive>
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	99 f4       	brne	.+38     	; 0xe74 <sig_interrupt1+0x4c>
		printf("CAN1: %s\n", received.data);
     e4e:	2c 81       	ldd	r18, Y+4	; 0x04
     e50:	3d 81       	ldd	r19, Y+5	; 0x05
     e52:	00 d0       	rcall	.+0      	; 0xe54 <sig_interrupt1+0x2c>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <sig_interrupt1+0x2e>
     e56:	ed b7       	in	r30, 0x3d	; 61
     e58:	fe b7       	in	r31, 0x3e	; 62
     e5a:	31 96       	adiw	r30, 0x01	; 1
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
     e64:	33 83       	std	Z+3, r19	; 0x03
     e66:	22 83       	std	Z+2, r18	; 0x02
     e68:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
	//	i = 0;
	//}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	27 97       	sbiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
	enum menu_state_enum menu_state = OVER_THE_TOP;
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	char button = '0',last_button;
     e9c:	80 e3       	ldi	r24, 0x30	; 48
     e9e:	8a 83       	std	Y+2, r24	; 0x02

	butterfly_print("Velkommen");
     ea0:	82 ed       	ldi	r24, 0xD2	; 210
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>

	while(1){
		last_button = button;
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     eac:	0e 94 87 08 	call	0x110e	; 0x110e <butterfly_poll_joystick>
     eb0:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	98 17       	cp	r25, r24
     eb8:	b9 f3       	breq	.-18     	; 0xea8 <butterfly_menu+0x24>
//			printf("menustate for: %d\n", menu_state);
			switch(button) {
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3f 83       	std	Y+7, r19	; 0x07
     ec2:	2e 83       	std	Y+6, r18	; 0x06
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	9f 81       	ldd	r25, Y+7	; 0x07
     ec8:	85 36       	cpi	r24, 0x65	; 101
     eca:	91 05       	cpc	r25, r1
     ecc:	41 f1       	breq	.+80     	; 0xf1e <butterfly_menu+0x9a>
     ece:	2e 81       	ldd	r18, Y+6	; 0x06
     ed0:	3f 81       	ldd	r19, Y+7	; 0x07
     ed2:	26 36       	cpi	r18, 0x66	; 102
     ed4:	31 05       	cpc	r19, r1
     ed6:	5c f4       	brge	.+22     	; 0xeee <butterfly_menu+0x6a>
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	80 33       	cpi	r24, 0x30	; 48
     ede:	91 05       	cpc	r25, r1
     ee0:	19 f3       	breq	.-58     	; 0xea8 <butterfly_menu+0x24>
     ee2:	2e 81       	ldd	r18, Y+6	; 0x06
     ee4:	3f 81       	ldd	r19, Y+7	; 0x07
     ee6:	24 36       	cpi	r18, 0x64	; 100
     ee8:	31 05       	cpc	r19, r1
     eea:	a9 f0       	breq	.+42     	; 0xf16 <butterfly_menu+0x92>
     eec:	1f c0       	rjmp	.+62     	; 0xf2c <butterfly_menu+0xa8>
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	82 37       	cpi	r24, 0x72	; 114
     ef4:	91 05       	cpc	r25, r1
     ef6:	c1 f2       	breq	.-80     	; 0xea8 <butterfly_menu+0x24>
     ef8:	2e 81       	ldd	r18, Y+6	; 0x06
     efa:	3f 81       	ldd	r19, Y+7	; 0x07
     efc:	25 37       	cpi	r18, 0x75	; 117
     efe:	31 05       	cpc	r19, r1
     f00:	31 f0       	breq	.+12     	; 0xf0e <butterfly_menu+0x8a>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	8c 36       	cpi	r24, 0x6C	; 108
     f08:	91 05       	cpc	r25, r1
     f0a:	71 f2       	breq	.-100    	; 0xea8 <butterfly_menu+0x24>
     f0c:	0f c0       	rjmp	.+30     	; 0xf2c <butterfly_menu+0xa8>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	81 50       	subi	r24, 0x01	; 1
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <butterfly_menu+0xb0>
				case 'd': menu_state++;				break;
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <butterfly_menu+0xb0>
				case 'e': start_game(menu_state);	break;
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	99 27       	eor	r25, r25
     f22:	87 fd       	sbrc	r24, 7
     f24:	90 95       	com	r25
     f26:	0e 94 1a 09 	call	0x1234	; 0x1234 <start_game>
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <butterfly_menu+0xb0>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     f2c:	8c ed       	ldi	r24, 0xDC	; 220
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
			}
			printf("menustate: %d\n", menu_state);
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	28 2f       	mov	r18, r24
     f38:	33 27       	eor	r19, r19
     f3a:	27 fd       	sbrc	r18, 7
     f3c:	30 95       	com	r19
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <butterfly_menu+0xbc>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <butterfly_menu+0xbe>
     f42:	ed b7       	in	r30, 0x3d	; 61
     f44:	fe b7       	in	r31, 0x3e	; 62
     f46:	31 96       	adiw	r30, 0x01	; 1
     f48:	82 ee       	ldi	r24, 0xE2	; 226
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	33 83       	std	Z+3, r19	; 0x03
     f52:	22 83       	std	Z+2, r18	; 0x02
     f54:	0e 94 dd 10 	call	0x21ba	; 0x21ba <printf>
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	88 23       	and	r24, r24
     f64:	14 f4       	brge	.+4      	; 0xf6a <butterfly_menu+0xe6>
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	8b 83       	std	Y+3, r24	; 0x03
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	84 30       	cpi	r24, 0x04	; 4
     f6e:	0c f0       	brlt	.+2      	; 0xf72 <butterfly_menu+0xee>
     f70:	1b 82       	std	Y+3, r1	; 0x03
			switch(menu_state) {
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	33 27       	eor	r19, r19
     f78:	27 fd       	sbrc	r18, 7
     f7a:	30 95       	com	r19
     f7c:	3d 83       	std	Y+5, r19	; 0x05
     f7e:	2c 83       	std	Y+4, r18	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	d1 f0       	breq	.+52     	; 0xfbe <butterfly_menu+0x13a>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	2c f4       	brge	.+10     	; 0xf9e <butterfly_menu+0x11a>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <butterfly_menu+0x130>
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <butterfly_menu+0x158>
     f9e:	2c 81       	ldd	r18, Y+4	; 0x04
     fa0:	3d 81       	ldd	r19, Y+5	; 0x05
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <butterfly_menu+0x144>
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	91 05       	cpc	r25, r1
     fb0:	81 f0       	breq	.+32     	; 0xfd2 <butterfly_menu+0x14e>
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <butterfly_menu+0x158>
				case START_SP_POINTS: 	butterfly_print("1 Enspiller poeng");		break;
     fb4:	81 ef       	ldi	r24, 0xF1	; 241
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
     fbc:	75 cf       	rjmp	.-278    	; 0xea8 <butterfly_menu+0x24>
				case START_SP_ETERNAL: 	butterfly_print("2 Enspiller evig");		break;
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
     fc6:	70 cf       	rjmp	.-288    	; 0xea8 <butterfly_menu+0x24>
				case START_MP_POINTS: 	butterfly_print("3 Flerspiller poeng");		break;
     fc8:	84 e1       	ldi	r24, 0x14	; 20
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
     fd0:	6b cf       	rjmp	.-298    	; 0xea8 <butterfly_menu+0x24>
				case START_MP_ETERNAL: 	butterfly_print("4 Flerspiller evig");		break;
     fd2:	88 e2       	ldi	r24, 0x28	; 40
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
     fda:	66 cf       	rjmp	.-308    	; 0xea8 <butterfly_menu+0x24>
				default:			menu_state = OVER_THE_TOP+1;
     fdc:	1b 82       	std	Y+3, r1	; 0x03
     fde:	64 cf       	rjmp	.-312    	; 0xea8 <butterfly_menu+0x24>

00000fe0 <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <butterfly_joystick_test+0x6>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <butterfly_joystick_test+0x8>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62

	char button = '0',last_button;
     fec:	80 e3       	ldi	r24, 0x30	; 48
     fee:	8a 83       	std	Y+2, r24	; 0x02

	while(1){
		last_button = button;
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
		
		button = butterfly_poll_joystick();
     ff4:	0e 94 87 08 	call	0x110e	; 0x110e <butterfly_poll_joystick>
     ff8:	8a 83       	std	Y+2, r24	; 0x02

		if(button != last_button){
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	98 17       	cp	r25, r24
    1000:	b9 f3       	breq	.-18     	; 0xff0 <butterfly_joystick_test+0x10>
			switch(button) {
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	3c 83       	std	Y+4, r19	; 0x04
    100a:	2b 83       	std	Y+3, r18	; 0x03
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	85 36       	cpi	r24, 0x65	; 101
    1012:	91 05       	cpc	r25, r1
    1014:	99 f1       	breq	.+102    	; 0x107c <butterfly_joystick_test+0x9c>
    1016:	2b 81       	ldd	r18, Y+3	; 0x03
    1018:	3c 81       	ldd	r19, Y+4	; 0x04
    101a:	26 36       	cpi	r18, 0x66	; 102
    101c:	31 05       	cpc	r19, r1
    101e:	5c f4       	brge	.+22     	; 0x1036 <butterfly_joystick_test+0x56>
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	80 33       	cpi	r24, 0x30	; 48
    1026:	91 05       	cpc	r25, r1
    1028:	71 f1       	breq	.+92     	; 0x1086 <butterfly_joystick_test+0xa6>
    102a:	2b 81       	ldd	r18, Y+3	; 0x03
    102c:	3c 81       	ldd	r19, Y+4	; 0x04
    102e:	24 36       	cpi	r18, 0x64	; 100
    1030:	31 05       	cpc	r19, r1
    1032:	f9 f0       	breq	.+62     	; 0x1072 <butterfly_joystick_test+0x92>
    1034:	2d c0       	rjmp	.+90     	; 0x1090 <butterfly_joystick_test+0xb0>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	82 37       	cpi	r24, 0x72	; 114
    103c:	91 05       	cpc	r25, r1
    103e:	79 f0       	breq	.+30     	; 0x105e <butterfly_joystick_test+0x7e>
    1040:	2b 81       	ldd	r18, Y+3	; 0x03
    1042:	3c 81       	ldd	r19, Y+4	; 0x04
    1044:	25 37       	cpi	r18, 0x75	; 117
    1046:	31 05       	cpc	r19, r1
    1048:	79 f0       	breq	.+30     	; 0x1068 <butterfly_joystick_test+0x88>
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	8c 36       	cpi	r24, 0x6C	; 108
    1050:	91 05       	cpc	r25, r1
    1052:	f1 f4       	brne	.+60     	; 0x1090 <butterfly_joystick_test+0xb0>
				case 'l': butterfly_print("left");		break;
    1054:	8b e3       	ldi	r24, 0x3B	; 59
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    105c:	c9 cf       	rjmp	.-110    	; 0xff0 <butterfly_joystick_test+0x10>
				case 'r': butterfly_print("right");		break;
    105e:	80 e4       	ldi	r24, 0x40	; 64
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    1066:	c4 cf       	rjmp	.-120    	; 0xff0 <butterfly_joystick_test+0x10>
				case 'u': butterfly_print("up");		break;
    1068:	86 e4       	ldi	r24, 0x46	; 70
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    1070:	bf cf       	rjmp	.-130    	; 0xff0 <butterfly_joystick_test+0x10>
				case 'd': butterfly_print("down");		break;
    1072:	89 e4       	ldi	r24, 0x49	; 73
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    107a:	ba cf       	rjmp	.-140    	; 0xff0 <butterfly_joystick_test+0x10>
				case 'e': butterfly_print("enter");		break;
    107c:	8e e4       	ldi	r24, 0x4E	; 78
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    1084:	b5 cf       	rjmp	.-150    	; 0xff0 <butterfly_joystick_test+0x10>
				case '0': butterfly_print("center");	break;
    1086:	84 e5       	ldi	r24, 0x54	; 84
    1088:	92 e0       	ldi	r25, 0x02	; 2
    108a:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    108e:	b0 cf       	rjmp	.-160    	; 0xff0 <butterfly_joystick_test+0x10>
				default:  butterfly_print("error");		break;
    1090:	8c ed       	ldi	r24, 0xDC	; 220
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    1098:	ab cf       	rjmp	.-170    	; 0xff0 <butterfly_joystick_test+0x10>

0000109a <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <butterfly_print+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <butterfly_print+0x8>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9c 83       	std	Y+4, r25	; 0x04
    10a8:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	cli(); //disable interrupts to protect SPI-communication
    10aa:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
    10ac:	82 e6       	ldi	r24, 0x62	; 98
    10ae:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
    10b2:	1a 82       	std	Y+2, r1	; 0x02
    10b4:	19 82       	std	Y+1, r1	; 0x01
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <butterfly_print+0x50>
		if (str[i] == '\0') break;
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	3a 81       	ldd	r19, Y+2	; 0x02
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	a1 f0       	breq	.+40     	; 0x10f4 <butterfly_print+0x5a>
		SPI_MasterTransmit(str[i]);
    10cc:	29 81       	ldd	r18, Y+1	; 0x01
    10ce:	3a 81       	ldd	r19, Y+2	; 0x02
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	fc 01       	movw	r30, r24
    10d6:	e2 0f       	add	r30, r18
    10d8:	f3 1f       	adc	r31, r19
    10da:	80 81       	ld	r24, Z
    10dc:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>

void butterfly_print(char * str){
	int i;
	cli(); //disable interrupts to protect SPI-communication
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	88 31       	cpi	r24, 0x18	; 24
    10f0:	91 05       	cpc	r25, r1
    10f2:	14 f3       	brlt	.-60     	; 0x10b8 <butterfly_print+0x1e>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_NoSlave();
    10fa:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
	

	sei(); //enable interrupts again
    10fe:	78 94       	sei
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <butterfly_poll_joystick>:

char butterfly_poll_joystick(){
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2f 97       	sbiw	r28, 0x0f	; 15
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
	char button;	

	cli(); //disable interrupts to protect SPI-communication
    1122:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
    1124:	82 e6       	ldi	r24, 0x62	; 98
    1126:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>
	SPI_MasterTransmit('.');
    112a:	8e e2       	ldi	r24, 0x2E	; 46
    112c:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e2       	ldi	r26, 0x20	; 32
    1136:	b1 e4       	ldi	r27, 0x41	; 65
    1138:	8b 87       	std	Y+11, r24	; 0x0b
    113a:	9c 87       	std	Y+12, r25	; 0x0c
    113c:	ad 87       	std	Y+13, r26	; 0x0d
    113e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	6b 85       	ldd	r22, Y+11	; 0x0b
    1142:	7c 85       	ldd	r23, Y+12	; 0x0c
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	2a e9       	ldi	r18, 0x9A	; 154
    114a:	3b e9       	ldi	r19, 0x9B	; 155
    114c:	49 e9       	ldi	r20, 0x99	; 153
    114e:	54 e4       	ldi	r21, 0x44	; 68
    1150:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	98 87       	std	Y+8, r25	; 0x08
    115c:	a9 87       	std	Y+9, r26	; 0x09
    115e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1160:	6f 81       	ldd	r22, Y+7	; 0x07
    1162:	78 85       	ldd	r23, Y+8	; 0x08
    1164:	89 85       	ldd	r24, Y+9	; 0x09
    1166:	9a 85       	ldd	r25, Y+10	; 0x0a
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <butterfly_poll_joystick+0x74>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <butterfly_poll_joystick+0xf2>
	else if (__tmp > 65535)
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	4c f5       	brge	.+82     	; 0x11ec <butterfly_poll_joystick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	6b 85       	ldd	r22, Y+11	; 0x0b
    119c:	7c 85       	ldd	r23, Y+12	; 0x0c
    119e:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <butterfly_poll_joystick+0xd4>
    11c4:	8a e7       	ldi	r24, 0x7A	; 122
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <butterfly_poll_joystick+0xc2>
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <butterfly_poll_joystick+0xb6>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <butterfly_poll_joystick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <butterfly_poll_joystick+0xfe>
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	button = SPI_MasterReceive();
    1214:	0e 94 14 04 	call	0x828	; 0x828 <SPI_MasterReceive>
    1218:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_NoSlave();
    121a:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>

	sei(); //enable interrupts again
    121e:	78 94       	sei
	return button;
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1222:	2f 96       	adiw	r28, 0x0f	; 15
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <start_game>:

void start_game(enum menu_state_enum menu_state){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	61 97       	sbiw	r28, 0x11	; 17
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	8f 87       	std	Y+15, r24	; 0x0f
	switch(menu_state) {
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	28 2f       	mov	r18, r24
    124e:	33 27       	eor	r19, r19
    1250:	27 fd       	sbrc	r18, 7
    1252:	30 95       	com	r19
    1254:	39 8b       	std	Y+17, r19	; 0x11
    1256:	28 8b       	std	Y+16, r18	; 0x10
    1258:	88 89       	ldd	r24, Y+16	; 0x10
    125a:	99 89       	ldd	r25, Y+17	; 0x11
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	d1 f0       	breq	.+52     	; 0x1296 <start_game+0x62>
    1262:	28 89       	ldd	r18, Y+16	; 0x10
    1264:	39 89       	ldd	r19, Y+17	; 0x11
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <start_game+0x42>
    126c:	88 89       	ldd	r24, Y+16	; 0x10
    126e:	99 89       	ldd	r25, Y+17	; 0x11
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <start_game+0x58>
    1274:	90 c0       	rjmp	.+288    	; 0x1396 <start_game+0x162>
    1276:	28 89       	ldd	r18, Y+16	; 0x10
    1278:	39 89       	ldd	r19, Y+17	; 0x11
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <start_game+0x6c>
    1280:	88 89       	ldd	r24, Y+16	; 0x10
    1282:	99 89       	ldd	r25, Y+17	; 0x11
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <start_game+0x76>
    128a:	85 c0       	rjmp	.+266    	; 0x1396 <start_game+0x162>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
    128c:	8b e5       	ldi	r24, 0x5B	; 91
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <start_game+0x7e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
    1296:	8b e6       	ldi	r24, 0x6B	; 107
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <start_game+0x7e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
    12a0:	8a e7       	ldi	r24, 0x7A	; 122
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <start_game+0x7e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
    12aa:	87 e8       	ldi	r24, 0x87	; 135
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	0e 94 4d 08 	call	0x109a	; 0x109a <butterfly_print>
			break;
		default:			
			return;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	aa ef       	ldi	r26, 0xFA	; 250
    12b8:	b4 e4       	ldi	r27, 0x44	; 68
    12ba:	8b 87       	std	Y+11, r24	; 0x0b
    12bc:	9c 87       	std	Y+12, r25	; 0x0c
    12be:	ad 87       	std	Y+13, r26	; 0x0d
    12c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	2a e9       	ldi	r18, 0x9A	; 154
    12cc:	3b e9       	ldi	r19, 0x9B	; 155
    12ce:	49 e9       	ldi	r20, 0x99	; 153
    12d0:	54 e4       	ldi	r21, 0x44	; 68
    12d2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	8f 83       	std	Y+7, r24	; 0x07
    12dc:	98 87       	std	Y+8, r25	; 0x08
    12de:	a9 87       	std	Y+9, r26	; 0x09
    12e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <start_game+0xd0>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <start_game+0x14e>
	else if (__tmp > 65535)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <start_game+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <start_game+0x130>
    1346:	8a e7       	ldi	r24, 0x7A	; 122
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <start_game+0x11e>
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	69 f7       	brne	.-38     	; 0x1346 <start_game+0x112>
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <start_game+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <start_game+0x15a>
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
    1396:	61 96       	adiw	r28, 0x11	; 17
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <CAN_reset>:
#include "mcp2515.h"
#include "spi.h"

// Reset the CAN chip
void CAN_reset(void){
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
    13b0:	83 e7       	ldi	r24, 0x73	; 115
    13b2:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
    13b6:	80 ec       	ldi	r24, 0xC0	; 192
    13b8:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_NoSlave();
    13bc:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	27 97       	sbiw	r28, 0x07	; 7
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	6d 83       	std	Y+5, r22	; 0x05
    13e4:	5f 83       	std	Y+7, r21	; 0x07
    13e6:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
    13e8:	83 e7       	ldi	r24, 0x73	; 115
    13ea:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
    1400:	29 81       	ldd	r18, Y+1	; 0x01
    1402:	3a 81       	ldd	r19, Y+2	; 0x02
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	8c 01       	movw	r16, r24
    140a:	02 0f       	add	r16, r18
    140c:	13 1f       	adc	r17, r19
    140e:	0e 94 14 04 	call	0x828	; 0x828 <SPI_MasterReceive>
    1412:	f8 01       	movw	r30, r16
    1414:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	29 81       	ldd	r18, Y+1	; 0x01
    1422:	3a 81       	ldd	r19, Y+2	; 0x02
    1424:	8e 81       	ldd	r24, Y+6	; 0x06
    1426:	9f 81       	ldd	r25, Y+7	; 0x07
    1428:	28 17       	cp	r18, r24
    142a:	39 07       	cpc	r19, r25
    142c:	4c f3       	brlt	.-46     	; 0x1400 <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
    142e:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>

}
    1432:	27 96       	adiw	r28, 0x07	; 7
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	08 95       	ret

00001448 <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <CAN_read_rx+0xa>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <CAN_read_rx+0xc>
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	90 f5       	brcc	.+100    	; 0x14ca <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	88 23       	and	r24, r24
    146a:	19 f4       	brne	.+6      	; 0x1472 <CAN_read_rx+0x2a>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	05 c0       	rjmp	.+10     	; 0x147c <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	11 f4       	brne	.+4      	; 0x147c <CAN_read_rx+0x34>
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
    147c:	83 e7       	ldi	r24, 0x73	; 115
    147e:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	80 69       	ori	r24, 0x90	; 144
    148e:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
    1492:	1a 82       	std	Y+2, r1	; 0x02
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	12 c0       	rjmp	.+36     	; 0x14bc <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
    1498:	eb 81       	ldd	r30, Y+3	; 0x03
    149a:	fc 81       	ldd	r31, Y+4	; 0x04
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	34 81       	ldd	r19, Z+4	; 0x04
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	89 01       	movw	r16, r18
    14a6:	08 0f       	add	r16, r24
    14a8:	19 1f       	adc	r17, r25
    14aa:	0e 94 14 04 	call	0x828	; 0x828 <SPI_MasterReceive>
    14ae:	f8 01       	movw	r30, r16
    14b0:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	88 30       	cpi	r24, 0x08	; 8
    14c2:	91 05       	cpc	r25, r1
    14c4:	4c f3       	brlt	.-46     	; 0x1498 <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
    14c6:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <CAN_write>:

void CAN_write(char data, uint8_t address){
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <CAN_write+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <CAN_write+0x8>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	SPI_SelectSlave(SPI_CAN);	
    14ee:	83 e7       	ldi	r24, 0x73	; 115
    14f0:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
		SPI_MasterTransmit(data);
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>

	SPI_NoSlave();
    1506:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>

}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* msg, uint8_t tx){
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <CAN_load_tx+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <CAN_load_tx+0x8>
    1520:	0f 92       	push	r0
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2)
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	40 f5       	brcc	.+80     	; 0x1582 <CAN_load_tx+0x6a>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
    1542:	83 e7       	ldi	r24, 0x73	; 115
    1544:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	80 64       	ori	r24, 0x40	; 64
    154c:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	for(i = 0; i < 8; i++){
    1550:	1a 82       	std	Y+2, r1	; 0x02
    1552:	19 82       	std	Y+1, r1	; 0x01
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <CAN_load_tx+0x5c>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
    1556:	29 81       	ldd	r18, Y+1	; 0x01
    1558:	3a 81       	ldd	r19, Y+2	; 0x02
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	fc 01       	movw	r30, r24
    1560:	e2 0f       	add	r30, r18
    1562:	f3 1f       	adc	r31, r19
    1564:	80 81       	ld	r24, Z
    1566:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < 8; i++){
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	88 30       	cpi	r24, 0x08	; 8
    157a:	91 05       	cpc	r25, r1
    157c:	64 f3       	brlt	.-40     	; 0x1556 <CAN_load_tx+0x3e>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
	}

	SPI_NoSlave();
    157e:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <CAN_rts>:

void CAN_rts(uint8_t tx){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	88 23       	and	r24, r24
    15a2:	19 f4       	brne	.+6      	; 0x15aa <CAN_rts+0x18>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <CAN_rts+0x24>
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	59 f4       	brne	.+22     	; 0x15d2 <CAN_rts+0x40>
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
    15c0:	83 e7       	ldi	r24, 0x73	; 115
    15c2:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>

	SPI_NoSlave();
    15ce:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
}
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <CAN_read_status>:

uint8_t CAN_read_status(void){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
    15e4:	83 e7       	ldi	r24, 0x73	; 115
    15e6:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
    15ea:	80 ea       	ldi	r24, 0xA0	; 160
    15ec:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
    15f0:	0e 94 14 04 	call	0x828	; 0x828 <SPI_MasterReceive>
    15f4:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
    15f6:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
	
	return (uint8_t) status;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <CAN_rx_status>:

uint8_t CAN_rx_status(void){
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	0f 92       	push	r0
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62

	char status;
	SPI_SelectSlave(SPI_CAN);
    160e:	83 e7       	ldi	r24, 0x73	; 115
    1610:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_RX_STATUS);
    1614:	80 eb       	ldi	r24, 0xB0	; 176
    1616:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	status = SPI_MasterReceive();
    161a:	0e 94 14 04 	call	0x828	; 0x828 <SPI_MasterReceive>
    161e:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
    1620:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
	
	return (uint8_t) status;
    1624:	89 81       	ldd	r24, Y+1	; 0x01

}
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <CAN_bit_modify>:

void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <CAN_bit_modify+0x6>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
    163e:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
    1640:	83 e7       	ldi	r24, 0x73	; 115
    1642:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	0e 94 10 04 	call	0x820	; 0x820 <SPI_MasterTransmit>

	SPI_NoSlave();
    165e:	0e 94 24 04 	call	0x848	; 0x848 <SPI_NoSlave>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <__fixunssfsi>:
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	7b 01       	movw	r14, r22
    1678:	8c 01       	movw	r16, r24
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	5f e4       	ldi	r21, 0x4F	; 79
    1682:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__gesf2>
    1686:	88 23       	and	r24, r24
    1688:	8c f0       	brlt	.+34     	; 0x16ac <__fixunssfsi+0x3e>
    168a:	c8 01       	movw	r24, r16
    168c:	b7 01       	movw	r22, r14
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	5f e4       	ldi	r21, 0x4F	; 79
    1696:	0e 94 af 0c 	call	0x195e	; 0x195e <__subsf3>
    169a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixsfsi>
    169e:	9b 01       	movw	r18, r22
    16a0:	ac 01       	movw	r20, r24
    16a2:	20 50       	subi	r18, 0x00	; 0
    16a4:	30 40       	sbci	r19, 0x00	; 0
    16a6:	40 40       	sbci	r20, 0x00	; 0
    16a8:	50 48       	sbci	r21, 0x80	; 128
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <__fixunssfsi+0x4a>
    16ac:	c8 01       	movw	r24, r16
    16ae:	b7 01       	movw	r22, r14
    16b0:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixsfsi>
    16b4:	9b 01       	movw	r18, r22
    16b6:	ac 01       	movw	r20, r24
    16b8:	b9 01       	movw	r22, r18
    16ba:	ca 01       	movw	r24, r20
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	08 95       	ret

000016c6 <_fpadd_parts>:
    16c6:	a0 e0       	ldi	r26, 0x00	; 0
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e9 e6       	ldi	r30, 0x69	; 105
    16cc:	fb e0       	ldi	r31, 0x0B	; 11
    16ce:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__prologue_saves__>
    16d2:	dc 01       	movw	r26, r24
    16d4:	2b 01       	movw	r4, r22
    16d6:	fa 01       	movw	r30, r20
    16d8:	9c 91       	ld	r25, X
    16da:	92 30       	cpi	r25, 0x02	; 2
    16dc:	08 f4       	brcc	.+2      	; 0x16e0 <_fpadd_parts+0x1a>
    16de:	39 c1       	rjmp	.+626    	; 0x1952 <_fpadd_parts+0x28c>
    16e0:	eb 01       	movw	r28, r22
    16e2:	88 81       	ld	r24, Y
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	08 f4       	brcc	.+2      	; 0x16ea <_fpadd_parts+0x24>
    16e8:	33 c1       	rjmp	.+614    	; 0x1950 <_fpadd_parts+0x28a>
    16ea:	94 30       	cpi	r25, 0x04	; 4
    16ec:	69 f4       	brne	.+26     	; 0x1708 <_fpadd_parts+0x42>
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <_fpadd_parts+0x2e>
    16f2:	2f c1       	rjmp	.+606    	; 0x1952 <_fpadd_parts+0x28c>
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	9c 91       	ld	r25, X
    16f8:	11 97       	sbiw	r26, 0x01	; 1
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	98 17       	cp	r25, r24
    16fe:	09 f4       	brne	.+2      	; 0x1702 <_fpadd_parts+0x3c>
    1700:	28 c1       	rjmp	.+592    	; 0x1952 <_fpadd_parts+0x28c>
    1702:	a3 e9       	ldi	r26, 0x93	; 147
    1704:	b2 e0       	ldi	r27, 0x02	; 2
    1706:	25 c1       	rjmp	.+586    	; 0x1952 <_fpadd_parts+0x28c>
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	09 f4       	brne	.+2      	; 0x170e <_fpadd_parts+0x48>
    170c:	21 c1       	rjmp	.+578    	; 0x1950 <_fpadd_parts+0x28a>
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	a9 f4       	brne	.+42     	; 0x173c <_fpadd_parts+0x76>
    1712:	92 30       	cpi	r25, 0x02	; 2
    1714:	09 f0       	breq	.+2      	; 0x1718 <_fpadd_parts+0x52>
    1716:	1d c1       	rjmp	.+570    	; 0x1952 <_fpadd_parts+0x28c>
    1718:	9a 01       	movw	r18, r20
    171a:	ad 01       	movw	r20, r26
    171c:	88 e0       	ldi	r24, 0x08	; 8
    171e:	ea 01       	movw	r28, r20
    1720:	09 90       	ld	r0, Y+
    1722:	ae 01       	movw	r20, r28
    1724:	e9 01       	movw	r28, r18
    1726:	09 92       	st	Y+, r0
    1728:	9e 01       	movw	r18, r28
    172a:	81 50       	subi	r24, 0x01	; 1
    172c:	c1 f7       	brne	.-16     	; 0x171e <_fpadd_parts+0x58>
    172e:	e2 01       	movw	r28, r4
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	9c 91       	ld	r25, X
    1736:	89 23       	and	r24, r25
    1738:	81 83       	std	Z+1, r24	; 0x01
    173a:	08 c1       	rjmp	.+528    	; 0x194c <_fpadd_parts+0x286>
    173c:	92 30       	cpi	r25, 0x02	; 2
    173e:	09 f4       	brne	.+2      	; 0x1742 <_fpadd_parts+0x7c>
    1740:	07 c1       	rjmp	.+526    	; 0x1950 <_fpadd_parts+0x28a>
    1742:	12 96       	adiw	r26, 0x02	; 2
    1744:	2d 90       	ld	r2, X+
    1746:	3c 90       	ld	r3, X
    1748:	13 97       	sbiw	r26, 0x03	; 3
    174a:	eb 01       	movw	r28, r22
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	9b 81       	ldd	r25, Y+3	; 0x03
    1750:	14 96       	adiw	r26, 0x04	; 4
    1752:	ad 90       	ld	r10, X+
    1754:	bd 90       	ld	r11, X+
    1756:	cd 90       	ld	r12, X+
    1758:	dc 90       	ld	r13, X
    175a:	17 97       	sbiw	r26, 0x07	; 7
    175c:	ec 80       	ldd	r14, Y+4	; 0x04
    175e:	fd 80       	ldd	r15, Y+5	; 0x05
    1760:	0e 81       	ldd	r16, Y+6	; 0x06
    1762:	1f 81       	ldd	r17, Y+7	; 0x07
    1764:	91 01       	movw	r18, r2
    1766:	28 1b       	sub	r18, r24
    1768:	39 0b       	sbc	r19, r25
    176a:	b9 01       	movw	r22, r18
    176c:	37 ff       	sbrs	r19, 7
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <_fpadd_parts+0xb2>
    1770:	66 27       	eor	r22, r22
    1772:	77 27       	eor	r23, r23
    1774:	62 1b       	sub	r22, r18
    1776:	73 0b       	sbc	r23, r19
    1778:	60 32       	cpi	r22, 0x20	; 32
    177a:	71 05       	cpc	r23, r1
    177c:	0c f0       	brlt	.+2      	; 0x1780 <_fpadd_parts+0xba>
    177e:	61 c0       	rjmp	.+194    	; 0x1842 <_fpadd_parts+0x17c>
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	6c f5       	brge	.+90     	; 0x17e0 <_fpadd_parts+0x11a>
    1786:	37 01       	movw	r6, r14
    1788:	48 01       	movw	r8, r16
    178a:	06 2e       	mov	r0, r22
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <_fpadd_parts+0xd0>
    178e:	96 94       	lsr	r9
    1790:	87 94       	ror	r8
    1792:	77 94       	ror	r7
    1794:	67 94       	ror	r6
    1796:	0a 94       	dec	r0
    1798:	d2 f7       	brpl	.-12     	; 0x178e <_fpadd_parts+0xc8>
    179a:	21 e0       	ldi	r18, 0x01	; 1
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <_fpadd_parts+0xe6>
    17a4:	22 0f       	add	r18, r18
    17a6:	33 1f       	adc	r19, r19
    17a8:	44 1f       	adc	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	6a 95       	dec	r22
    17ae:	d2 f7       	brpl	.-12     	; 0x17a4 <_fpadd_parts+0xde>
    17b0:	21 50       	subi	r18, 0x01	; 1
    17b2:	30 40       	sbci	r19, 0x00	; 0
    17b4:	40 40       	sbci	r20, 0x00	; 0
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	2e 21       	and	r18, r14
    17ba:	3f 21       	and	r19, r15
    17bc:	40 23       	and	r20, r16
    17be:	51 23       	and	r21, r17
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	41 05       	cpc	r20, r1
    17c6:	51 05       	cpc	r21, r1
    17c8:	21 f0       	breq	.+8      	; 0x17d2 <_fpadd_parts+0x10c>
    17ca:	21 e0       	ldi	r18, 0x01	; 1
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	79 01       	movw	r14, r18
    17d4:	8a 01       	movw	r16, r20
    17d6:	e6 28       	or	r14, r6
    17d8:	f7 28       	or	r15, r7
    17da:	08 29       	or	r16, r8
    17dc:	19 29       	or	r17, r9
    17de:	3c c0       	rjmp	.+120    	; 0x1858 <_fpadd_parts+0x192>
    17e0:	23 2b       	or	r18, r19
    17e2:	d1 f1       	breq	.+116    	; 0x1858 <_fpadd_parts+0x192>
    17e4:	26 0e       	add	r2, r22
    17e6:	37 1e       	adc	r3, r23
    17e8:	35 01       	movw	r6, r10
    17ea:	46 01       	movw	r8, r12
    17ec:	06 2e       	mov	r0, r22
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <_fpadd_parts+0x132>
    17f0:	96 94       	lsr	r9
    17f2:	87 94       	ror	r8
    17f4:	77 94       	ror	r7
    17f6:	67 94       	ror	r6
    17f8:	0a 94       	dec	r0
    17fa:	d2 f7       	brpl	.-12     	; 0x17f0 <_fpadd_parts+0x12a>
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	04 c0       	rjmp	.+8      	; 0x180e <_fpadd_parts+0x148>
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	44 1f       	adc	r20, r20
    180c:	55 1f       	adc	r21, r21
    180e:	6a 95       	dec	r22
    1810:	d2 f7       	brpl	.-12     	; 0x1806 <_fpadd_parts+0x140>
    1812:	21 50       	subi	r18, 0x01	; 1
    1814:	30 40       	sbci	r19, 0x00	; 0
    1816:	40 40       	sbci	r20, 0x00	; 0
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	2a 21       	and	r18, r10
    181c:	3b 21       	and	r19, r11
    181e:	4c 21       	and	r20, r12
    1820:	5d 21       	and	r21, r13
    1822:	21 15       	cp	r18, r1
    1824:	31 05       	cpc	r19, r1
    1826:	41 05       	cpc	r20, r1
    1828:	51 05       	cpc	r21, r1
    182a:	21 f0       	breq	.+8      	; 0x1834 <_fpadd_parts+0x16e>
    182c:	21 e0       	ldi	r18, 0x01	; 1
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	59 01       	movw	r10, r18
    1836:	6a 01       	movw	r12, r20
    1838:	a6 28       	or	r10, r6
    183a:	b7 28       	or	r11, r7
    183c:	c8 28       	or	r12, r8
    183e:	d9 28       	or	r13, r9
    1840:	0b c0       	rjmp	.+22     	; 0x1858 <_fpadd_parts+0x192>
    1842:	82 15       	cp	r24, r2
    1844:	93 05       	cpc	r25, r3
    1846:	2c f0       	brlt	.+10     	; 0x1852 <_fpadd_parts+0x18c>
    1848:	1c 01       	movw	r2, r24
    184a:	aa 24       	eor	r10, r10
    184c:	bb 24       	eor	r11, r11
    184e:	65 01       	movw	r12, r10
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <_fpadd_parts+0x192>
    1852:	ee 24       	eor	r14, r14
    1854:	ff 24       	eor	r15, r15
    1856:	87 01       	movw	r16, r14
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 91       	ld	r25, X
    185c:	d2 01       	movw	r26, r4
    185e:	11 96       	adiw	r26, 0x01	; 1
    1860:	8c 91       	ld	r24, X
    1862:	98 17       	cp	r25, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <_fpadd_parts+0x1a2>
    1866:	45 c0       	rjmp	.+138    	; 0x18f2 <_fpadd_parts+0x22c>
    1868:	99 23       	and	r25, r25
    186a:	39 f0       	breq	.+14     	; 0x187a <_fpadd_parts+0x1b4>
    186c:	a8 01       	movw	r20, r16
    186e:	97 01       	movw	r18, r14
    1870:	2a 19       	sub	r18, r10
    1872:	3b 09       	sbc	r19, r11
    1874:	4c 09       	sbc	r20, r12
    1876:	5d 09       	sbc	r21, r13
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <_fpadd_parts+0x1c0>
    187a:	a6 01       	movw	r20, r12
    187c:	95 01       	movw	r18, r10
    187e:	2e 19       	sub	r18, r14
    1880:	3f 09       	sbc	r19, r15
    1882:	40 0b       	sbc	r20, r16
    1884:	51 0b       	sbc	r21, r17
    1886:	57 fd       	sbrc	r21, 7
    1888:	08 c0       	rjmp	.+16     	; 0x189a <_fpadd_parts+0x1d4>
    188a:	11 82       	std	Z+1, r1	; 0x01
    188c:	33 82       	std	Z+3, r3	; 0x03
    188e:	22 82       	std	Z+2, r2	; 0x02
    1890:	24 83       	std	Z+4, r18	; 0x04
    1892:	35 83       	std	Z+5, r19	; 0x05
    1894:	46 83       	std	Z+6, r20	; 0x06
    1896:	57 83       	std	Z+7, r21	; 0x07
    1898:	1d c0       	rjmp	.+58     	; 0x18d4 <_fpadd_parts+0x20e>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	81 83       	std	Z+1, r24	; 0x01
    189e:	33 82       	std	Z+3, r3	; 0x03
    18a0:	22 82       	std	Z+2, r2	; 0x02
    18a2:	88 27       	eor	r24, r24
    18a4:	99 27       	eor	r25, r25
    18a6:	dc 01       	movw	r26, r24
    18a8:	82 1b       	sub	r24, r18
    18aa:	93 0b       	sbc	r25, r19
    18ac:	a4 0b       	sbc	r26, r20
    18ae:	b5 0b       	sbc	r27, r21
    18b0:	84 83       	std	Z+4, r24	; 0x04
    18b2:	95 83       	std	Z+5, r25	; 0x05
    18b4:	a6 83       	std	Z+6, r26	; 0x06
    18b6:	b7 83       	std	Z+7, r27	; 0x07
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <_fpadd_parts+0x20e>
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	44 1f       	adc	r20, r20
    18c0:	55 1f       	adc	r21, r21
    18c2:	24 83       	std	Z+4, r18	; 0x04
    18c4:	35 83       	std	Z+5, r19	; 0x05
    18c6:	46 83       	std	Z+6, r20	; 0x06
    18c8:	57 83       	std	Z+7, r21	; 0x07
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	93 83       	std	Z+3, r25	; 0x03
    18d2:	82 83       	std	Z+2, r24	; 0x02
    18d4:	24 81       	ldd	r18, Z+4	; 0x04
    18d6:	35 81       	ldd	r19, Z+5	; 0x05
    18d8:	46 81       	ldd	r20, Z+6	; 0x06
    18da:	57 81       	ldd	r21, Z+7	; 0x07
    18dc:	da 01       	movw	r26, r20
    18de:	c9 01       	movw	r24, r18
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	a1 09       	sbc	r26, r1
    18e4:	b1 09       	sbc	r27, r1
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	af 4f       	sbci	r26, 0xFF	; 255
    18ec:	bf 43       	sbci	r27, 0x3F	; 63
    18ee:	28 f3       	brcs	.-54     	; 0x18ba <_fpadd_parts+0x1f4>
    18f0:	0b c0       	rjmp	.+22     	; 0x1908 <_fpadd_parts+0x242>
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	33 82       	std	Z+3, r3	; 0x03
    18f6:	22 82       	std	Z+2, r2	; 0x02
    18f8:	ea 0c       	add	r14, r10
    18fa:	fb 1c       	adc	r15, r11
    18fc:	0c 1d       	adc	r16, r12
    18fe:	1d 1d       	adc	r17, r13
    1900:	e4 82       	std	Z+4, r14	; 0x04
    1902:	f5 82       	std	Z+5, r15	; 0x05
    1904:	06 83       	std	Z+6, r16	; 0x06
    1906:	17 83       	std	Z+7, r17	; 0x07
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	80 83       	st	Z, r24
    190c:	24 81       	ldd	r18, Z+4	; 0x04
    190e:	35 81       	ldd	r19, Z+5	; 0x05
    1910:	46 81       	ldd	r20, Z+6	; 0x06
    1912:	57 81       	ldd	r21, Z+7	; 0x07
    1914:	57 ff       	sbrs	r21, 7
    1916:	1a c0       	rjmp	.+52     	; 0x194c <_fpadd_parts+0x286>
    1918:	c9 01       	movw	r24, r18
    191a:	aa 27       	eor	r26, r26
    191c:	97 fd       	sbrc	r25, 7
    191e:	a0 95       	com	r26
    1920:	ba 2f       	mov	r27, r26
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	a0 70       	andi	r26, 0x00	; 0
    1928:	b0 70       	andi	r27, 0x00	; 0
    192a:	56 95       	lsr	r21
    192c:	47 95       	ror	r20
    192e:	37 95       	ror	r19
    1930:	27 95       	ror	r18
    1932:	82 2b       	or	r24, r18
    1934:	93 2b       	or	r25, r19
    1936:	a4 2b       	or	r26, r20
    1938:	b5 2b       	or	r27, r21
    193a:	84 83       	std	Z+4, r24	; 0x04
    193c:	95 83       	std	Z+5, r25	; 0x05
    193e:	a6 83       	std	Z+6, r26	; 0x06
    1940:	b7 83       	std	Z+7, r27	; 0x07
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	93 83       	std	Z+3, r25	; 0x03
    194a:	82 83       	std	Z+2, r24	; 0x02
    194c:	df 01       	movw	r26, r30
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <_fpadd_parts+0x28c>
    1950:	d2 01       	movw	r26, r4
    1952:	cd 01       	movw	r24, r26
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	e2 e1       	ldi	r30, 0x12	; 18
    195a:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__epilogue_restores__>

0000195e <__subsf3>:
    195e:	a0 e2       	ldi	r26, 0x20	; 32
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 eb       	ldi	r30, 0xB5	; 181
    1964:	fc e0       	ldi	r31, 0x0C	; 12
    1966:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__prologue_saves__+0x18>
    196a:	69 83       	std	Y+1, r22	; 0x01
    196c:	7a 83       	std	Y+2, r23	; 0x02
    196e:	8b 83       	std	Y+3, r24	; 0x03
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	2d 83       	std	Y+5, r18	; 0x05
    1974:	3e 83       	std	Y+6, r19	; 0x06
    1976:	4f 83       	std	Y+7, r20	; 0x07
    1978:	58 87       	std	Y+8, r21	; 0x08
    197a:	e9 e0       	ldi	r30, 0x09	; 9
    197c:	ee 2e       	mov	r14, r30
    197e:	f1 2c       	mov	r15, r1
    1980:	ec 0e       	add	r14, r28
    1982:	fd 1e       	adc	r15, r29
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	b7 01       	movw	r22, r14
    198a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    198e:	8e 01       	movw	r16, r28
    1990:	0f 5e       	subi	r16, 0xEF	; 239
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	ce 01       	movw	r24, r28
    1996:	05 96       	adiw	r24, 0x05	; 5
    1998:	b8 01       	movw	r22, r16
    199a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    199e:	8a 89       	ldd	r24, Y+18	; 0x12
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	89 27       	eor	r24, r25
    19a4:	8a 8b       	std	Y+18, r24	; 0x12
    19a6:	c7 01       	movw	r24, r14
    19a8:	b8 01       	movw	r22, r16
    19aa:	ae 01       	movw	r20, r28
    19ac:	47 5e       	subi	r20, 0xE7	; 231
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_fpadd_parts>
    19b4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__pack_f>
    19b8:	a0 96       	adiw	r28, 0x20	; 32
    19ba:	e6 e0       	ldi	r30, 0x06	; 6
    19bc:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__epilogue_restores__+0x18>

000019c0 <__addsf3>:
    19c0:	a0 e2       	ldi	r26, 0x20	; 32
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e6 ee       	ldi	r30, 0xE6	; 230
    19c6:	fc e0       	ldi	r31, 0x0C	; 12
    19c8:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__prologue_saves__+0x18>
    19cc:	69 83       	std	Y+1, r22	; 0x01
    19ce:	7a 83       	std	Y+2, r23	; 0x02
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	2d 83       	std	Y+5, r18	; 0x05
    19d6:	3e 83       	std	Y+6, r19	; 0x06
    19d8:	4f 83       	std	Y+7, r20	; 0x07
    19da:	58 87       	std	Y+8, r21	; 0x08
    19dc:	f9 e0       	ldi	r31, 0x09	; 9
    19de:	ef 2e       	mov	r14, r31
    19e0:	f1 2c       	mov	r15, r1
    19e2:	ec 0e       	add	r14, r28
    19e4:	fd 1e       	adc	r15, r29
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	b7 01       	movw	r22, r14
    19ec:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    19f0:	8e 01       	movw	r16, r28
    19f2:	0f 5e       	subi	r16, 0xEF	; 239
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	ce 01       	movw	r24, r28
    19f8:	05 96       	adiw	r24, 0x05	; 5
    19fa:	b8 01       	movw	r22, r16
    19fc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1a00:	c7 01       	movw	r24, r14
    1a02:	b8 01       	movw	r22, r16
    1a04:	ae 01       	movw	r20, r28
    1a06:	47 5e       	subi	r20, 0xE7	; 231
    1a08:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_fpadd_parts>
    1a0e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__pack_f>
    1a12:	a0 96       	adiw	r28, 0x20	; 32
    1a14:	e6 e0       	ldi	r30, 0x06	; 6
    1a16:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__epilogue_restores__+0x18>

00001a1a <__mulsf3>:
    1a1a:	a0 e2       	ldi	r26, 0x20	; 32
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e3 e1       	ldi	r30, 0x13	; 19
    1a20:	fd e0       	ldi	r31, 0x0D	; 13
    1a22:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__prologue_saves__>
    1a26:	69 83       	std	Y+1, r22	; 0x01
    1a28:	7a 83       	std	Y+2, r23	; 0x02
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	2d 83       	std	Y+5, r18	; 0x05
    1a30:	3e 83       	std	Y+6, r19	; 0x06
    1a32:	4f 83       	std	Y+7, r20	; 0x07
    1a34:	58 87       	std	Y+8, r21	; 0x08
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	be 01       	movw	r22, r28
    1a3c:	67 5f       	subi	r22, 0xF7	; 247
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1a44:	ce 01       	movw	r24, r28
    1a46:	05 96       	adiw	r24, 0x05	; 5
    1a48:	be 01       	movw	r22, r28
    1a4a:	6f 5e       	subi	r22, 0xEF	; 239
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1a52:	99 85       	ldd	r25, Y+9	; 0x09
    1a54:	92 30       	cpi	r25, 0x02	; 2
    1a56:	88 f0       	brcs	.+34     	; 0x1a7a <__mulsf3+0x60>
    1a58:	89 89       	ldd	r24, Y+17	; 0x11
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	c8 f0       	brcs	.+50     	; 0x1a90 <__mulsf3+0x76>
    1a5e:	94 30       	cpi	r25, 0x04	; 4
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <__mulsf3+0x4e>
    1a62:	82 30       	cpi	r24, 0x02	; 2
    1a64:	51 f4       	brne	.+20     	; 0x1a7a <__mulsf3+0x60>
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <__mulsf3+0x56>
    1a68:	84 30       	cpi	r24, 0x04	; 4
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <__mulsf3+0x5c>
    1a6c:	92 30       	cpi	r25, 0x02	; 2
    1a6e:	81 f4       	brne	.+32     	; 0x1a90 <__mulsf3+0x76>
    1a70:	83 e9       	ldi	r24, 0x93	; 147
    1a72:	92 e0       	ldi	r25, 0x02	; 2
    1a74:	c6 c0       	rjmp	.+396    	; 0x1c02 <__mulsf3+0x1e8>
    1a76:	92 30       	cpi	r25, 0x02	; 2
    1a78:	49 f4       	brne	.+18     	; 0x1a8c <__mulsf3+0x72>
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a80:	98 13       	cpse	r25, r24
    1a82:	21 e0       	ldi	r18, 0x01	; 1
    1a84:	2a 87       	std	Y+10, r18	; 0x0a
    1a86:	ce 01       	movw	r24, r28
    1a88:	09 96       	adiw	r24, 0x09	; 9
    1a8a:	bb c0       	rjmp	.+374    	; 0x1c02 <__mulsf3+0x1e8>
    1a8c:	82 30       	cpi	r24, 0x02	; 2
    1a8e:	49 f4       	brne	.+18     	; 0x1aa2 <__mulsf3+0x88>
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	8a 89       	ldd	r24, Y+18	; 0x12
    1a96:	98 13       	cpse	r25, r24
    1a98:	21 e0       	ldi	r18, 0x01	; 1
    1a9a:	2a 8b       	std	Y+18, r18	; 0x12
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	41 96       	adiw	r24, 0x11	; 17
    1aa0:	b0 c0       	rjmp	.+352    	; 0x1c02 <__mulsf3+0x1e8>
    1aa2:	2d 84       	ldd	r2, Y+13	; 0x0d
    1aa4:	3e 84       	ldd	r3, Y+14	; 0x0e
    1aa6:	4f 84       	ldd	r4, Y+15	; 0x0f
    1aa8:	58 88       	ldd	r5, Y+16	; 0x10
    1aaa:	6d 88       	ldd	r6, Y+21	; 0x15
    1aac:	7e 88       	ldd	r7, Y+22	; 0x16
    1aae:	8f 88       	ldd	r8, Y+23	; 0x17
    1ab0:	98 8c       	ldd	r9, Y+24	; 0x18
    1ab2:	ee 24       	eor	r14, r14
    1ab4:	ff 24       	eor	r15, r15
    1ab6:	87 01       	movw	r16, r14
    1ab8:	aa 24       	eor	r10, r10
    1aba:	bb 24       	eor	r11, r11
    1abc:	65 01       	movw	r12, r10
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	e0 e0       	ldi	r30, 0x00	; 0
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	c1 01       	movw	r24, r2
    1acc:	81 70       	andi	r24, 0x01	; 1
    1ace:	90 70       	andi	r25, 0x00	; 0
    1ad0:	89 2b       	or	r24, r25
    1ad2:	e9 f0       	breq	.+58     	; 0x1b0e <__mulsf3+0xf4>
    1ad4:	e6 0c       	add	r14, r6
    1ad6:	f7 1c       	adc	r15, r7
    1ad8:	08 1d       	adc	r16, r8
    1ada:	19 1d       	adc	r17, r9
    1adc:	9a 01       	movw	r18, r20
    1ade:	ab 01       	movw	r20, r22
    1ae0:	2a 0d       	add	r18, r10
    1ae2:	3b 1d       	adc	r19, r11
    1ae4:	4c 1d       	adc	r20, r12
    1ae6:	5d 1d       	adc	r21, r13
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e6 14       	cp	r14, r6
    1af2:	f7 04       	cpc	r15, r7
    1af4:	08 05       	cpc	r16, r8
    1af6:	19 05       	cpc	r17, r9
    1af8:	20 f4       	brcc	.+8      	; 0x1b02 <__mulsf3+0xe8>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a0 e0       	ldi	r26, 0x00	; 0
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ba 01       	movw	r22, r20
    1b04:	a9 01       	movw	r20, r18
    1b06:	48 0f       	add	r20, r24
    1b08:	59 1f       	adc	r21, r25
    1b0a:	6a 1f       	adc	r22, r26
    1b0c:	7b 1f       	adc	r23, r27
    1b0e:	aa 0c       	add	r10, r10
    1b10:	bb 1c       	adc	r11, r11
    1b12:	cc 1c       	adc	r12, r12
    1b14:	dd 1c       	adc	r13, r13
    1b16:	97 fe       	sbrs	r9, 7
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <__mulsf3+0x110>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	a8 2a       	or	r10, r24
    1b24:	b9 2a       	or	r11, r25
    1b26:	ca 2a       	or	r12, r26
    1b28:	db 2a       	or	r13, r27
    1b2a:	31 96       	adiw	r30, 0x01	; 1
    1b2c:	e0 32       	cpi	r30, 0x20	; 32
    1b2e:	f1 05       	cpc	r31, r1
    1b30:	49 f0       	breq	.+18     	; 0x1b44 <__mulsf3+0x12a>
    1b32:	66 0c       	add	r6, r6
    1b34:	77 1c       	adc	r7, r7
    1b36:	88 1c       	adc	r8, r8
    1b38:	99 1c       	adc	r9, r9
    1b3a:	56 94       	lsr	r5
    1b3c:	47 94       	ror	r4
    1b3e:	37 94       	ror	r3
    1b40:	27 94       	ror	r2
    1b42:	c3 cf       	rjmp	.-122    	; 0x1aca <__mulsf3+0xb0>
    1b44:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b46:	ea 89       	ldd	r30, Y+18	; 0x12
    1b48:	2b 89       	ldd	r18, Y+19	; 0x13
    1b4a:	3c 89       	ldd	r19, Y+20	; 0x14
    1b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b50:	28 0f       	add	r18, r24
    1b52:	39 1f       	adc	r19, r25
    1b54:	2e 5f       	subi	r18, 0xFE	; 254
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	17 c0       	rjmp	.+46     	; 0x1b88 <__mulsf3+0x16e>
    1b5a:	ca 01       	movw	r24, r20
    1b5c:	81 70       	andi	r24, 0x01	; 1
    1b5e:	90 70       	andi	r25, 0x00	; 0
    1b60:	89 2b       	or	r24, r25
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <__mulsf3+0x162>
    1b64:	16 95       	lsr	r17
    1b66:	07 95       	ror	r16
    1b68:	f7 94       	ror	r15
    1b6a:	e7 94       	ror	r14
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e8       	ldi	r27, 0x80	; 128
    1b74:	e8 2a       	or	r14, r24
    1b76:	f9 2a       	or	r15, r25
    1b78:	0a 2b       	or	r16, r26
    1b7a:	1b 2b       	or	r17, r27
    1b7c:	76 95       	lsr	r23
    1b7e:	67 95       	ror	r22
    1b80:	57 95       	ror	r21
    1b82:	47 95       	ror	r20
    1b84:	2f 5f       	subi	r18, 0xFF	; 255
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	77 fd       	sbrc	r23, 7
    1b8a:	e7 cf       	rjmp	.-50     	; 0x1b5a <__mulsf3+0x140>
    1b8c:	0c c0       	rjmp	.+24     	; 0x1ba6 <__mulsf3+0x18c>
    1b8e:	44 0f       	add	r20, r20
    1b90:	55 1f       	adc	r21, r21
    1b92:	66 1f       	adc	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	17 fd       	sbrc	r17, 7
    1b98:	41 60       	ori	r20, 0x01	; 1
    1b9a:	ee 0c       	add	r14, r14
    1b9c:	ff 1c       	adc	r15, r15
    1b9e:	00 1f       	adc	r16, r16
    1ba0:	11 1f       	adc	r17, r17
    1ba2:	21 50       	subi	r18, 0x01	; 1
    1ba4:	30 40       	sbci	r19, 0x00	; 0
    1ba6:	40 30       	cpi	r20, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	59 07       	cpc	r21, r25
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	69 07       	cpc	r22, r25
    1bb0:	90 e4       	ldi	r25, 0x40	; 64
    1bb2:	79 07       	cpc	r23, r25
    1bb4:	60 f3       	brcs	.-40     	; 0x1b8e <__mulsf3+0x174>
    1bb6:	2b 8f       	std	Y+27, r18	; 0x1b
    1bb8:	3c 8f       	std	Y+28, r19	; 0x1c
    1bba:	db 01       	movw	r26, r22
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	8f 77       	andi	r24, 0x7F	; 127
    1bc0:	90 70       	andi	r25, 0x00	; 0
    1bc2:	a0 70       	andi	r26, 0x00	; 0
    1bc4:	b0 70       	andi	r27, 0x00	; 0
    1bc6:	80 34       	cpi	r24, 0x40	; 64
    1bc8:	91 05       	cpc	r25, r1
    1bca:	a1 05       	cpc	r26, r1
    1bcc:	b1 05       	cpc	r27, r1
    1bce:	61 f4       	brne	.+24     	; 0x1be8 <__mulsf3+0x1ce>
    1bd0:	47 fd       	sbrc	r20, 7
    1bd2:	0a c0       	rjmp	.+20     	; 0x1be8 <__mulsf3+0x1ce>
    1bd4:	e1 14       	cp	r14, r1
    1bd6:	f1 04       	cpc	r15, r1
    1bd8:	01 05       	cpc	r16, r1
    1bda:	11 05       	cpc	r17, r1
    1bdc:	29 f0       	breq	.+10     	; 0x1be8 <__mulsf3+0x1ce>
    1bde:	40 5c       	subi	r20, 0xC0	; 192
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	6f 4f       	sbci	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	40 78       	andi	r20, 0x80	; 128
    1be8:	1a 8e       	std	Y+26, r1	; 0x1a
    1bea:	fe 17       	cp	r31, r30
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <__mulsf3+0x1d8>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	8a 8f       	std	Y+26, r24	; 0x1a
    1bf2:	4d 8f       	std	Y+29, r20	; 0x1d
    1bf4:	5e 8f       	std	Y+30, r21	; 0x1e
    1bf6:	6f 8f       	std	Y+31, r22	; 0x1f
    1bf8:	78 a3       	std	Y+32, r23	; 0x20
    1bfa:	83 e0       	ldi	r24, 0x03	; 3
    1bfc:	89 8f       	std	Y+25, r24	; 0x19
    1bfe:	ce 01       	movw	r24, r28
    1c00:	49 96       	adiw	r24, 0x19	; 25
    1c02:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__pack_f>
    1c06:	a0 96       	adiw	r28, 0x20	; 32
    1c08:	e2 e1       	ldi	r30, 0x12	; 18
    1c0a:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__epilogue_restores__>

00001c0e <__gtsf2>:
    1c0e:	a8 e1       	ldi	r26, 0x18	; 24
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ed e0       	ldi	r30, 0x0D	; 13
    1c14:	fe e0       	ldi	r31, 0x0E	; 14
    1c16:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__prologue_saves__+0x18>
    1c1a:	69 83       	std	Y+1, r22	; 0x01
    1c1c:	7a 83       	std	Y+2, r23	; 0x02
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	2d 83       	std	Y+5, r18	; 0x05
    1c24:	3e 83       	std	Y+6, r19	; 0x06
    1c26:	4f 83       	std	Y+7, r20	; 0x07
    1c28:	58 87       	std	Y+8, r21	; 0x08
    1c2a:	89 e0       	ldi	r24, 0x09	; 9
    1c2c:	e8 2e       	mov	r14, r24
    1c2e:	f1 2c       	mov	r15, r1
    1c30:	ec 0e       	add	r14, r28
    1c32:	fd 1e       	adc	r15, r29
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	b7 01       	movw	r22, r14
    1c3a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1c3e:	8e 01       	movw	r16, r28
    1c40:	0f 5e       	subi	r16, 0xEF	; 239
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	ce 01       	movw	r24, r28
    1c46:	05 96       	adiw	r24, 0x05	; 5
    1c48:	b8 01       	movw	r22, r16
    1c4a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	82 30       	cpi	r24, 0x02	; 2
    1c52:	40 f0       	brcs	.+16     	; 0x1c64 <__gtsf2+0x56>
    1c54:	89 89       	ldd	r24, Y+17	; 0x11
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	28 f0       	brcs	.+10     	; 0x1c64 <__gtsf2+0x56>
    1c5a:	c7 01       	movw	r24, r14
    1c5c:	b8 01       	movw	r22, r16
    1c5e:	0e 94 38 10 	call	0x2070	; 0x2070 <__fpcmp_parts_f>
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <__gtsf2+0x58>
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	68 96       	adiw	r28, 0x18	; 24
    1c68:	e6 e0       	ldi	r30, 0x06	; 6
    1c6a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__epilogue_restores__+0x18>

00001c6e <__gesf2>:
    1c6e:	a8 e1       	ldi	r26, 0x18	; 24
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	ed e3       	ldi	r30, 0x3D	; 61
    1c74:	fe e0       	ldi	r31, 0x0E	; 14
    1c76:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__prologue_saves__+0x18>
    1c7a:	69 83       	std	Y+1, r22	; 0x01
    1c7c:	7a 83       	std	Y+2, r23	; 0x02
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	2d 83       	std	Y+5, r18	; 0x05
    1c84:	3e 83       	std	Y+6, r19	; 0x06
    1c86:	4f 83       	std	Y+7, r20	; 0x07
    1c88:	58 87       	std	Y+8, r21	; 0x08
    1c8a:	89 e0       	ldi	r24, 0x09	; 9
    1c8c:	e8 2e       	mov	r14, r24
    1c8e:	f1 2c       	mov	r15, r1
    1c90:	ec 0e       	add	r14, r28
    1c92:	fd 1e       	adc	r15, r29
    1c94:	ce 01       	movw	r24, r28
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	b7 01       	movw	r22, r14
    1c9a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1c9e:	8e 01       	movw	r16, r28
    1ca0:	0f 5e       	subi	r16, 0xEF	; 239
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	05 96       	adiw	r24, 0x05	; 5
    1ca8:	b8 01       	movw	r22, r16
    1caa:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	40 f0       	brcs	.+16     	; 0x1cc4 <__gesf2+0x56>
    1cb4:	89 89       	ldd	r24, Y+17	; 0x11
    1cb6:	82 30       	cpi	r24, 0x02	; 2
    1cb8:	28 f0       	brcs	.+10     	; 0x1cc4 <__gesf2+0x56>
    1cba:	c7 01       	movw	r24, r14
    1cbc:	b8 01       	movw	r22, r16
    1cbe:	0e 94 38 10 	call	0x2070	; 0x2070 <__fpcmp_parts_f>
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <__gesf2+0x58>
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	68 96       	adiw	r28, 0x18	; 24
    1cc8:	e6 e0       	ldi	r30, 0x06	; 6
    1cca:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__epilogue_restores__+0x18>

00001cce <__ltsf2>:
    1cce:	a8 e1       	ldi	r26, 0x18	; 24
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__prologue_saves__+0x18>
    1cda:	69 83       	std	Y+1, r22	; 0x01
    1cdc:	7a 83       	std	Y+2, r23	; 0x02
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	2d 83       	std	Y+5, r18	; 0x05
    1ce4:	3e 83       	std	Y+6, r19	; 0x06
    1ce6:	4f 83       	std	Y+7, r20	; 0x07
    1ce8:	58 87       	std	Y+8, r21	; 0x08
    1cea:	89 e0       	ldi	r24, 0x09	; 9
    1cec:	e8 2e       	mov	r14, r24
    1cee:	f1 2c       	mov	r15, r1
    1cf0:	ec 0e       	add	r14, r28
    1cf2:	fd 1e       	adc	r15, r29
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	b7 01       	movw	r22, r14
    1cfa:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0f 5e       	subi	r16, 0xEF	; 239
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	ce 01       	movw	r24, r28
    1d06:	05 96       	adiw	r24, 0x05	; 5
    1d08:	b8 01       	movw	r22, r16
    1d0a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	82 30       	cpi	r24, 0x02	; 2
    1d12:	40 f0       	brcs	.+16     	; 0x1d24 <__ltsf2+0x56>
    1d14:	89 89       	ldd	r24, Y+17	; 0x11
    1d16:	82 30       	cpi	r24, 0x02	; 2
    1d18:	28 f0       	brcs	.+10     	; 0x1d24 <__ltsf2+0x56>
    1d1a:	c7 01       	movw	r24, r14
    1d1c:	b8 01       	movw	r22, r16
    1d1e:	0e 94 38 10 	call	0x2070	; 0x2070 <__fpcmp_parts_f>
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <__ltsf2+0x58>
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	68 96       	adiw	r28, 0x18	; 24
    1d28:	e6 e0       	ldi	r30, 0x06	; 6
    1d2a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__epilogue_restores__+0x18>

00001d2e <__fixsfsi>:
    1d2e:	ac e0       	ldi	r26, 0x0C	; 12
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <__prologue_saves__+0x20>
    1d3a:	69 83       	std	Y+1, r22	; 0x01
    1d3c:	7a 83       	std	Y+2, r23	; 0x02
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	be 01       	movw	r22, r28
    1d48:	6b 5f       	subi	r22, 0xFB	; 251
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__unpack_f>
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	61 f1       	breq	.+88     	; 0x1dae <__fixsfsi+0x80>
    1d56:	82 30       	cpi	r24, 0x02	; 2
    1d58:	50 f1       	brcs	.+84     	; 0x1dae <__fixsfsi+0x80>
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	21 f4       	brne	.+8      	; 0x1d66 <__fixsfsi+0x38>
    1d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d60:	88 23       	and	r24, r24
    1d62:	51 f1       	breq	.+84     	; 0x1db8 <__fixsfsi+0x8a>
    1d64:	2e c0       	rjmp	.+92     	; 0x1dc2 <__fixsfsi+0x94>
    1d66:	2f 81       	ldd	r18, Y+7	; 0x07
    1d68:	38 85       	ldd	r19, Y+8	; 0x08
    1d6a:	37 fd       	sbrc	r19, 7
    1d6c:	20 c0       	rjmp	.+64     	; 0x1dae <__fixsfsi+0x80>
    1d6e:	6e 81       	ldd	r22, Y+6	; 0x06
    1d70:	2f 31       	cpi	r18, 0x1F	; 31
    1d72:	31 05       	cpc	r19, r1
    1d74:	1c f0       	brlt	.+6      	; 0x1d7c <__fixsfsi+0x4e>
    1d76:	66 23       	and	r22, r22
    1d78:	f9 f0       	breq	.+62     	; 0x1db8 <__fixsfsi+0x8a>
    1d7a:	23 c0       	rjmp	.+70     	; 0x1dc2 <__fixsfsi+0x94>
    1d7c:	8e e1       	ldi	r24, 0x1E	; 30
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	82 1b       	sub	r24, r18
    1d82:	93 0b       	sbc	r25, r19
    1d84:	29 85       	ldd	r18, Y+9	; 0x09
    1d86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d88:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d8a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <__fixsfsi+0x68>
    1d8e:	56 95       	lsr	r21
    1d90:	47 95       	ror	r20
    1d92:	37 95       	ror	r19
    1d94:	27 95       	ror	r18
    1d96:	8a 95       	dec	r24
    1d98:	d2 f7       	brpl	.-12     	; 0x1d8e <__fixsfsi+0x60>
    1d9a:	66 23       	and	r22, r22
    1d9c:	b1 f0       	breq	.+44     	; 0x1dca <__fixsfsi+0x9c>
    1d9e:	50 95       	com	r21
    1da0:	40 95       	com	r20
    1da2:	30 95       	com	r19
    1da4:	21 95       	neg	r18
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	4f 4f       	sbci	r20, 0xFF	; 255
    1daa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dac:	0e c0       	rjmp	.+28     	; 0x1dca <__fixsfsi+0x9c>
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <__fixsfsi+0x9c>
    1db8:	2f ef       	ldi	r18, 0xFF	; 255
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	4f ef       	ldi	r20, 0xFF	; 255
    1dbe:	5f e7       	ldi	r21, 0x7F	; 127
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <__fixsfsi+0x9c>
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e8       	ldi	r21, 0x80	; 128
    1dca:	b9 01       	movw	r22, r18
    1dcc:	ca 01       	movw	r24, r20
    1dce:	2c 96       	adiw	r28, 0x0c	; 12
    1dd0:	e2 e0       	ldi	r30, 0x02	; 2
    1dd2:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__epilogue_restores__+0x20>

00001dd6 <__pack_f>:
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	fc 01       	movw	r30, r24
    1de2:	e4 80       	ldd	r14, Z+4	; 0x04
    1de4:	f5 80       	ldd	r15, Z+5	; 0x05
    1de6:	06 81       	ldd	r16, Z+6	; 0x06
    1de8:	17 81       	ldd	r17, Z+7	; 0x07
    1dea:	d1 80       	ldd	r13, Z+1	; 0x01
    1dec:	80 81       	ld	r24, Z
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	48 f4       	brcc	.+18     	; 0x1e04 <__pack_f+0x2e>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e1       	ldi	r26, 0x10	; 16
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e8 2a       	or	r14, r24
    1dfc:	f9 2a       	or	r15, r25
    1dfe:	0a 2b       	or	r16, r26
    1e00:	1b 2b       	or	r17, r27
    1e02:	a5 c0       	rjmp	.+330    	; 0x1f4e <__pack_f+0x178>
    1e04:	84 30       	cpi	r24, 0x04	; 4
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <__pack_f+0x34>
    1e08:	9f c0       	rjmp	.+318    	; 0x1f48 <__pack_f+0x172>
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <__pack_f+0x40>
    1e0e:	ee 24       	eor	r14, r14
    1e10:	ff 24       	eor	r15, r15
    1e12:	87 01       	movw	r16, r14
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <__pack_f+0x4a>
    1e16:	e1 14       	cp	r14, r1
    1e18:	f1 04       	cpc	r15, r1
    1e1a:	01 05       	cpc	r16, r1
    1e1c:	11 05       	cpc	r17, r1
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <__pack_f+0x50>
    1e20:	e0 e0       	ldi	r30, 0x00	; 0
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	96 c0       	rjmp	.+300    	; 0x1f52 <__pack_f+0x17c>
    1e26:	62 81       	ldd	r22, Z+2	; 0x02
    1e28:	73 81       	ldd	r23, Z+3	; 0x03
    1e2a:	9f ef       	ldi	r25, 0xFF	; 255
    1e2c:	62 38       	cpi	r22, 0x82	; 130
    1e2e:	79 07       	cpc	r23, r25
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <__pack_f+0x5e>
    1e32:	5b c0       	rjmp	.+182    	; 0x1eea <__pack_f+0x114>
    1e34:	22 e8       	ldi	r18, 0x82	; 130
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	26 1b       	sub	r18, r22
    1e3a:	37 0b       	sbc	r19, r23
    1e3c:	2a 31       	cpi	r18, 0x1A	; 26
    1e3e:	31 05       	cpc	r19, r1
    1e40:	2c f0       	brlt	.+10     	; 0x1e4c <__pack_f+0x76>
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	50 e0       	ldi	r21, 0x00	; 0
    1e4a:	2a c0       	rjmp	.+84     	; 0x1ea0 <__pack_f+0xca>
    1e4c:	b8 01       	movw	r22, r16
    1e4e:	a7 01       	movw	r20, r14
    1e50:	02 2e       	mov	r0, r18
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <__pack_f+0x86>
    1e54:	76 95       	lsr	r23
    1e56:	67 95       	ror	r22
    1e58:	57 95       	ror	r21
    1e5a:	47 95       	ror	r20
    1e5c:	0a 94       	dec	r0
    1e5e:	d2 f7       	brpl	.-12     	; 0x1e54 <__pack_f+0x7e>
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <__pack_f+0x9c>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	aa 1f       	adc	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	2a 95       	dec	r18
    1e74:	d2 f7       	brpl	.-12     	; 0x1e6a <__pack_f+0x94>
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	a1 09       	sbc	r26, r1
    1e7a:	b1 09       	sbc	r27, r1
    1e7c:	8e 21       	and	r24, r14
    1e7e:	9f 21       	and	r25, r15
    1e80:	a0 23       	and	r26, r16
    1e82:	b1 23       	and	r27, r17
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	a1 05       	cpc	r26, r1
    1e88:	b1 05       	cpc	r27, r1
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <__pack_f+0xbe>
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	9a 01       	movw	r18, r20
    1e96:	ab 01       	movw	r20, r22
    1e98:	28 2b       	or	r18, r24
    1e9a:	39 2b       	or	r19, r25
    1e9c:	4a 2b       	or	r20, r26
    1e9e:	5b 2b       	or	r21, r27
    1ea0:	da 01       	movw	r26, r20
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	8f 77       	andi	r24, 0x7F	; 127
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	a0 70       	andi	r26, 0x00	; 0
    1eaa:	b0 70       	andi	r27, 0x00	; 0
    1eac:	80 34       	cpi	r24, 0x40	; 64
    1eae:	91 05       	cpc	r25, r1
    1eb0:	a1 05       	cpc	r26, r1
    1eb2:	b1 05       	cpc	r27, r1
    1eb4:	39 f4       	brne	.+14     	; 0x1ec4 <__pack_f+0xee>
    1eb6:	27 ff       	sbrs	r18, 7
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <__pack_f+0xf6>
    1eba:	20 5c       	subi	r18, 0xC0	; 192
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	4f 4f       	sbci	r20, 0xFF	; 255
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <__pack_f+0xf6>
    1ec4:	21 5c       	subi	r18, 0xC1	; 193
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	e0 e0       	ldi	r30, 0x00	; 0
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	20 30       	cpi	r18, 0x00	; 0
    1ed2:	a0 e0       	ldi	r26, 0x00	; 0
    1ed4:	3a 07       	cpc	r19, r26
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	4a 07       	cpc	r20, r26
    1eda:	a0 e4       	ldi	r26, 0x40	; 64
    1edc:	5a 07       	cpc	r21, r26
    1ede:	10 f0       	brcs	.+4      	; 0x1ee4 <__pack_f+0x10e>
    1ee0:	e1 e0       	ldi	r30, 0x01	; 1
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	79 01       	movw	r14, r18
    1ee6:	8a 01       	movw	r16, r20
    1ee8:	27 c0       	rjmp	.+78     	; 0x1f38 <__pack_f+0x162>
    1eea:	60 38       	cpi	r22, 0x80	; 128
    1eec:	71 05       	cpc	r23, r1
    1eee:	64 f5       	brge	.+88     	; 0x1f48 <__pack_f+0x172>
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	e1 58       	subi	r30, 0x81	; 129
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	d8 01       	movw	r26, r16
    1ef8:	c7 01       	movw	r24, r14
    1efa:	8f 77       	andi	r24, 0x7F	; 127
    1efc:	90 70       	andi	r25, 0x00	; 0
    1efe:	a0 70       	andi	r26, 0x00	; 0
    1f00:	b0 70       	andi	r27, 0x00	; 0
    1f02:	80 34       	cpi	r24, 0x40	; 64
    1f04:	91 05       	cpc	r25, r1
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	39 f4       	brne	.+14     	; 0x1f1a <__pack_f+0x144>
    1f0c:	e7 fe       	sbrs	r14, 7
    1f0e:	0d c0       	rjmp	.+26     	; 0x1f2a <__pack_f+0x154>
    1f10:	80 e4       	ldi	r24, 0x40	; 64
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <__pack_f+0x14c>
    1f1a:	8f e3       	ldi	r24, 0x3F	; 63
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e0       	ldi	r26, 0x00	; 0
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e8 0e       	add	r14, r24
    1f24:	f9 1e       	adc	r15, r25
    1f26:	0a 1f       	adc	r16, r26
    1f28:	1b 1f       	adc	r17, r27
    1f2a:	17 ff       	sbrs	r17, 7
    1f2c:	05 c0       	rjmp	.+10     	; 0x1f38 <__pack_f+0x162>
    1f2e:	16 95       	lsr	r17
    1f30:	07 95       	ror	r16
    1f32:	f7 94       	ror	r15
    1f34:	e7 94       	ror	r14
    1f36:	31 96       	adiw	r30, 0x01	; 1
    1f38:	87 e0       	ldi	r24, 0x07	; 7
    1f3a:	16 95       	lsr	r17
    1f3c:	07 95       	ror	r16
    1f3e:	f7 94       	ror	r15
    1f40:	e7 94       	ror	r14
    1f42:	8a 95       	dec	r24
    1f44:	d1 f7       	brne	.-12     	; 0x1f3a <__pack_f+0x164>
    1f46:	05 c0       	rjmp	.+10     	; 0x1f52 <__pack_f+0x17c>
    1f48:	ee 24       	eor	r14, r14
    1f4a:	ff 24       	eor	r15, r15
    1f4c:	87 01       	movw	r16, r14
    1f4e:	ef ef       	ldi	r30, 0xFF	; 255
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	6e 2f       	mov	r22, r30
    1f54:	67 95       	ror	r22
    1f56:	66 27       	eor	r22, r22
    1f58:	67 95       	ror	r22
    1f5a:	90 2f       	mov	r25, r16
    1f5c:	9f 77       	andi	r25, 0x7F	; 127
    1f5e:	d7 94       	ror	r13
    1f60:	dd 24       	eor	r13, r13
    1f62:	d7 94       	ror	r13
    1f64:	8e 2f       	mov	r24, r30
    1f66:	86 95       	lsr	r24
    1f68:	49 2f       	mov	r20, r25
    1f6a:	46 2b       	or	r20, r22
    1f6c:	58 2f       	mov	r21, r24
    1f6e:	5d 29       	or	r21, r13
    1f70:	b7 01       	movw	r22, r14
    1f72:	ca 01       	movw	r24, r20
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	08 95       	ret

00001f80 <__unpack_f>:
    1f80:	fc 01       	movw	r30, r24
    1f82:	db 01       	movw	r26, r22
    1f84:	40 81       	ld	r20, Z
    1f86:	51 81       	ldd	r21, Z+1	; 0x01
    1f88:	22 81       	ldd	r18, Z+2	; 0x02
    1f8a:	62 2f       	mov	r22, r18
    1f8c:	6f 77       	andi	r22, 0x7F	; 127
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	22 1f       	adc	r18, r18
    1f92:	22 27       	eor	r18, r18
    1f94:	22 1f       	adc	r18, r18
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	89 2f       	mov	r24, r25
    1f9a:	88 0f       	add	r24, r24
    1f9c:	82 2b       	or	r24, r18
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	99 27       	eor	r25, r25
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	11 96       	adiw	r26, 0x01	; 1
    1faa:	9c 93       	st	X, r25
    1fac:	11 97       	sbiw	r26, 0x01	; 1
    1fae:	21 15       	cp	r18, r1
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	a9 f5       	brne	.+106    	; 0x201e <__unpack_f+0x9e>
    1fb4:	41 15       	cp	r20, r1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	61 05       	cpc	r22, r1
    1fba:	71 05       	cpc	r23, r1
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <__unpack_f+0x42>
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	37 c0       	rjmp	.+110    	; 0x2030 <__unpack_f+0xb0>
    1fc2:	82 e8       	ldi	r24, 0x82	; 130
    1fc4:	9f ef       	ldi	r25, 0xFF	; 255
    1fc6:	13 96       	adiw	r26, 0x03	; 3
    1fc8:	9c 93       	st	X, r25
    1fca:	8e 93       	st	-X, r24
    1fcc:	12 97       	sbiw	r26, 0x02	; 2
    1fce:	9a 01       	movw	r18, r20
    1fd0:	ab 01       	movw	r20, r22
    1fd2:	67 e0       	ldi	r22, 0x07	; 7
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	44 1f       	adc	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	6a 95       	dec	r22
    1fde:	d1 f7       	brne	.-12     	; 0x1fd4 <__unpack_f+0x54>
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	8c 93       	st	X, r24
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <__unpack_f+0x80>
    1fe6:	22 0f       	add	r18, r18
    1fe8:	33 1f       	adc	r19, r19
    1fea:	44 1f       	adc	r20, r20
    1fec:	55 1f       	adc	r21, r21
    1fee:	12 96       	adiw	r26, 0x02	; 2
    1ff0:	8d 91       	ld	r24, X+
    1ff2:	9c 91       	ld	r25, X
    1ff4:	13 97       	sbiw	r26, 0x03	; 3
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	13 96       	adiw	r26, 0x03	; 3
    1ffa:	9c 93       	st	X, r25
    1ffc:	8e 93       	st	-X, r24
    1ffe:	12 97       	sbiw	r26, 0x02	; 2
    2000:	20 30       	cpi	r18, 0x00	; 0
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	38 07       	cpc	r19, r24
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	48 07       	cpc	r20, r24
    200a:	80 e4       	ldi	r24, 0x40	; 64
    200c:	58 07       	cpc	r21, r24
    200e:	58 f3       	brcs	.-42     	; 0x1fe6 <__unpack_f+0x66>
    2010:	14 96       	adiw	r26, 0x04	; 4
    2012:	2d 93       	st	X+, r18
    2014:	3d 93       	st	X+, r19
    2016:	4d 93       	st	X+, r20
    2018:	5c 93       	st	X, r21
    201a:	17 97       	sbiw	r26, 0x07	; 7
    201c:	08 95       	ret
    201e:	2f 3f       	cpi	r18, 0xFF	; 255
    2020:	31 05       	cpc	r19, r1
    2022:	79 f4       	brne	.+30     	; 0x2042 <__unpack_f+0xc2>
    2024:	41 15       	cp	r20, r1
    2026:	51 05       	cpc	r21, r1
    2028:	61 05       	cpc	r22, r1
    202a:	71 05       	cpc	r23, r1
    202c:	19 f4       	brne	.+6      	; 0x2034 <__unpack_f+0xb4>
    202e:	84 e0       	ldi	r24, 0x04	; 4
    2030:	8c 93       	st	X, r24
    2032:	08 95       	ret
    2034:	64 ff       	sbrs	r22, 4
    2036:	03 c0       	rjmp	.+6      	; 0x203e <__unpack_f+0xbe>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	8c 93       	st	X, r24
    203c:	12 c0       	rjmp	.+36     	; 0x2062 <__unpack_f+0xe2>
    203e:	1c 92       	st	X, r1
    2040:	10 c0       	rjmp	.+32     	; 0x2062 <__unpack_f+0xe2>
    2042:	2f 57       	subi	r18, 0x7F	; 127
    2044:	30 40       	sbci	r19, 0x00	; 0
    2046:	13 96       	adiw	r26, 0x03	; 3
    2048:	3c 93       	st	X, r19
    204a:	2e 93       	st	-X, r18
    204c:	12 97       	sbiw	r26, 0x02	; 2
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	8c 93       	st	X, r24
    2052:	87 e0       	ldi	r24, 0x07	; 7
    2054:	44 0f       	add	r20, r20
    2056:	55 1f       	adc	r21, r21
    2058:	66 1f       	adc	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	8a 95       	dec	r24
    205e:	d1 f7       	brne	.-12     	; 0x2054 <__unpack_f+0xd4>
    2060:	70 64       	ori	r23, 0x40	; 64
    2062:	14 96       	adiw	r26, 0x04	; 4
    2064:	4d 93       	st	X+, r20
    2066:	5d 93       	st	X+, r21
    2068:	6d 93       	st	X+, r22
    206a:	7c 93       	st	X, r23
    206c:	17 97       	sbiw	r26, 0x07	; 7
    206e:	08 95       	ret

00002070 <__fpcmp_parts_f>:
    2070:	1f 93       	push	r17
    2072:	dc 01       	movw	r26, r24
    2074:	fb 01       	movw	r30, r22
    2076:	9c 91       	ld	r25, X
    2078:	92 30       	cpi	r25, 0x02	; 2
    207a:	08 f4       	brcc	.+2      	; 0x207e <__fpcmp_parts_f+0xe>
    207c:	47 c0       	rjmp	.+142    	; 0x210c <__fpcmp_parts_f+0x9c>
    207e:	80 81       	ld	r24, Z
    2080:	82 30       	cpi	r24, 0x02	; 2
    2082:	08 f4       	brcc	.+2      	; 0x2086 <__fpcmp_parts_f+0x16>
    2084:	43 c0       	rjmp	.+134    	; 0x210c <__fpcmp_parts_f+0x9c>
    2086:	94 30       	cpi	r25, 0x04	; 4
    2088:	51 f4       	brne	.+20     	; 0x209e <__fpcmp_parts_f+0x2e>
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	1c 91       	ld	r17, X
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	99 f5       	brne	.+102    	; 0x20f8 <__fpcmp_parts_f+0x88>
    2092:	81 81       	ldd	r24, Z+1	; 0x01
    2094:	68 2f       	mov	r22, r24
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	61 1b       	sub	r22, r17
    209a:	71 09       	sbc	r23, r1
    209c:	3f c0       	rjmp	.+126    	; 0x211c <__fpcmp_parts_f+0xac>
    209e:	84 30       	cpi	r24, 0x04	; 4
    20a0:	21 f0       	breq	.+8      	; 0x20aa <__fpcmp_parts_f+0x3a>
    20a2:	92 30       	cpi	r25, 0x02	; 2
    20a4:	31 f4       	brne	.+12     	; 0x20b2 <__fpcmp_parts_f+0x42>
    20a6:	82 30       	cpi	r24, 0x02	; 2
    20a8:	b9 f1       	breq	.+110    	; 0x2118 <__fpcmp_parts_f+0xa8>
    20aa:	81 81       	ldd	r24, Z+1	; 0x01
    20ac:	88 23       	and	r24, r24
    20ae:	89 f1       	breq	.+98     	; 0x2112 <__fpcmp_parts_f+0xa2>
    20b0:	2d c0       	rjmp	.+90     	; 0x210c <__fpcmp_parts_f+0x9c>
    20b2:	11 96       	adiw	r26, 0x01	; 1
    20b4:	1c 91       	ld	r17, X
    20b6:	11 97       	sbiw	r26, 0x01	; 1
    20b8:	82 30       	cpi	r24, 0x02	; 2
    20ba:	f1 f0       	breq	.+60     	; 0x20f8 <__fpcmp_parts_f+0x88>
    20bc:	81 81       	ldd	r24, Z+1	; 0x01
    20be:	18 17       	cp	r17, r24
    20c0:	d9 f4       	brne	.+54     	; 0x20f8 <__fpcmp_parts_f+0x88>
    20c2:	12 96       	adiw	r26, 0x02	; 2
    20c4:	2d 91       	ld	r18, X+
    20c6:	3c 91       	ld	r19, X
    20c8:	13 97       	sbiw	r26, 0x03	; 3
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	82 17       	cp	r24, r18
    20d0:	93 07       	cpc	r25, r19
    20d2:	94 f0       	brlt	.+36     	; 0x20f8 <__fpcmp_parts_f+0x88>
    20d4:	28 17       	cp	r18, r24
    20d6:	39 07       	cpc	r19, r25
    20d8:	bc f0       	brlt	.+46     	; 0x2108 <__fpcmp_parts_f+0x98>
    20da:	14 96       	adiw	r26, 0x04	; 4
    20dc:	8d 91       	ld	r24, X+
    20de:	9d 91       	ld	r25, X+
    20e0:	0d 90       	ld	r0, X+
    20e2:	bc 91       	ld	r27, X
    20e4:	a0 2d       	mov	r26, r0
    20e6:	24 81       	ldd	r18, Z+4	; 0x04
    20e8:	35 81       	ldd	r19, Z+5	; 0x05
    20ea:	46 81       	ldd	r20, Z+6	; 0x06
    20ec:	57 81       	ldd	r21, Z+7	; 0x07
    20ee:	28 17       	cp	r18, r24
    20f0:	39 07       	cpc	r19, r25
    20f2:	4a 07       	cpc	r20, r26
    20f4:	5b 07       	cpc	r21, r27
    20f6:	18 f4       	brcc	.+6      	; 0x20fe <__fpcmp_parts_f+0x8e>
    20f8:	11 23       	and	r17, r17
    20fa:	41 f0       	breq	.+16     	; 0x210c <__fpcmp_parts_f+0x9c>
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <__fpcmp_parts_f+0xa2>
    20fe:	82 17       	cp	r24, r18
    2100:	93 07       	cpc	r25, r19
    2102:	a4 07       	cpc	r26, r20
    2104:	b5 07       	cpc	r27, r21
    2106:	40 f4       	brcc	.+16     	; 0x2118 <__fpcmp_parts_f+0xa8>
    2108:	11 23       	and	r17, r17
    210a:	19 f0       	breq	.+6      	; 0x2112 <__fpcmp_parts_f+0xa2>
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	05 c0       	rjmp	.+10     	; 0x211c <__fpcmp_parts_f+0xac>
    2112:	6f ef       	ldi	r22, 0xFF	; 255
    2114:	7f ef       	ldi	r23, 0xFF	; 255
    2116:	02 c0       	rjmp	.+4      	; 0x211c <__fpcmp_parts_f+0xac>
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	cb 01       	movw	r24, r22
    211e:	1f 91       	pop	r17
    2120:	08 95       	ret

00002122 <fdevopen>:
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	8c 01       	movw	r16, r24
    212c:	eb 01       	movw	r28, r22
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	31 f4       	brne	.+12     	; 0x213e <fdevopen+0x1c>
    2132:	61 15       	cp	r22, r1
    2134:	71 05       	cpc	r23, r1
    2136:	19 f4       	brne	.+6      	; 0x213e <fdevopen+0x1c>
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	38 c0       	rjmp	.+112    	; 0x21ae <fdevopen+0x8c>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	6e e0       	ldi	r22, 0x0E	; 14
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	0e 94 04 13 	call	0x2608	; 0x2608 <calloc>
    214a:	fc 01       	movw	r30, r24
    214c:	9c 01       	movw	r18, r24
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	71 f1       	breq	.+92     	; 0x21ae <fdevopen+0x8c>
    2152:	80 e8       	ldi	r24, 0x80	; 128
    2154:	83 83       	std	Z+3, r24	; 0x03
    2156:	20 97       	sbiw	r28, 0x00	; 0
    2158:	71 f0       	breq	.+28     	; 0x2176 <fdevopen+0x54>
    215a:	d3 87       	std	Z+11, r29	; 0x0b
    215c:	c2 87       	std	Z+10, r28	; 0x0a
    215e:	81 e8       	ldi	r24, 0x81	; 129
    2160:	83 83       	std	Z+3, r24	; 0x03
    2162:	80 91 a4 02 	lds	r24, 0x02A4
    2166:	90 91 a5 02 	lds	r25, 0x02A5
    216a:	89 2b       	or	r24, r25
    216c:	21 f4       	brne	.+8      	; 0x2176 <fdevopen+0x54>
    216e:	f0 93 a5 02 	sts	0x02A5, r31
    2172:	e0 93 a4 02 	sts	0x02A4, r30
    2176:	01 15       	cp	r16, r1
    2178:	11 05       	cpc	r17, r1
    217a:	c9 f0       	breq	.+50     	; 0x21ae <fdevopen+0x8c>
    217c:	11 87       	std	Z+9, r17	; 0x09
    217e:	00 87       	std	Z+8, r16	; 0x08
    2180:	83 81       	ldd	r24, Z+3	; 0x03
    2182:	82 60       	ori	r24, 0x02	; 2
    2184:	83 83       	std	Z+3, r24	; 0x03
    2186:	80 91 a6 02 	lds	r24, 0x02A6
    218a:	90 91 a7 02 	lds	r25, 0x02A7
    218e:	89 2b       	or	r24, r25
    2190:	71 f4       	brne	.+28     	; 0x21ae <fdevopen+0x8c>
    2192:	f0 93 a7 02 	sts	0x02A7, r31
    2196:	e0 93 a6 02 	sts	0x02A6, r30
    219a:	80 91 a8 02 	lds	r24, 0x02A8
    219e:	90 91 a9 02 	lds	r25, 0x02A9
    21a2:	89 2b       	or	r24, r25
    21a4:	21 f4       	brne	.+8      	; 0x21ae <fdevopen+0x8c>
    21a6:	f0 93 a9 02 	sts	0x02A9, r31
    21aa:	e0 93 a8 02 	sts	0x02A8, r30
    21ae:	c9 01       	movw	r24, r18
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	08 95       	ret

000021ba <printf>:
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <__prologue_saves__+0x20>
    21c6:	fe 01       	movw	r30, r28
    21c8:	35 96       	adiw	r30, 0x05	; 5
    21ca:	61 91       	ld	r22, Z+
    21cc:	71 91       	ld	r23, Z+
    21ce:	80 91 a6 02 	lds	r24, 0x02A6
    21d2:	90 91 a7 02 	lds	r25, 0x02A7
    21d6:	af 01       	movw	r20, r30
    21d8:	0e 94 27 11 	call	0x224e	; 0x224e <vfprintf>
    21dc:	20 96       	adiw	r28, 0x00	; 0
    21de:	e2 e0       	ldi	r30, 0x02	; 2
    21e0:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__epilogue_restores__+0x20>

000021e4 <puts>:
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	8c 01       	movw	r16, r24
    21ee:	e0 91 a6 02 	lds	r30, 0x02A6
    21f2:	f0 91 a7 02 	lds	r31, 0x02A7
    21f6:	83 81       	ldd	r24, Z+3	; 0x03
    21f8:	81 ff       	sbrs	r24, 1
    21fa:	21 c0       	rjmp	.+66     	; 0x223e <puts+0x5a>
    21fc:	c0 e0       	ldi	r28, 0x00	; 0
    21fe:	d0 e0       	ldi	r29, 0x00	; 0
    2200:	0d c0       	rjmp	.+26     	; 0x221c <puts+0x38>
    2202:	e0 91 a6 02 	lds	r30, 0x02A6
    2206:	f0 91 a7 02 	lds	r31, 0x02A7
    220a:	20 85       	ldd	r18, Z+8	; 0x08
    220c:	31 85       	ldd	r19, Z+9	; 0x09
    220e:	bf 01       	movw	r22, r30
    2210:	f9 01       	movw	r30, r18
    2212:	09 95       	icall
    2214:	89 2b       	or	r24, r25
    2216:	11 f0       	breq	.+4      	; 0x221c <puts+0x38>
    2218:	cf ef       	ldi	r28, 0xFF	; 255
    221a:	df ef       	ldi	r29, 0xFF	; 255
    221c:	f8 01       	movw	r30, r16
    221e:	81 91       	ld	r24, Z+
    2220:	8f 01       	movw	r16, r30
    2222:	88 23       	and	r24, r24
    2224:	71 f7       	brne	.-36     	; 0x2202 <puts+0x1e>
    2226:	e0 91 a6 02 	lds	r30, 0x02A6
    222a:	f0 91 a7 02 	lds	r31, 0x02A7
    222e:	20 85       	ldd	r18, Z+8	; 0x08
    2230:	31 85       	ldd	r19, Z+9	; 0x09
    2232:	8a e0       	ldi	r24, 0x0A	; 10
    2234:	bf 01       	movw	r22, r30
    2236:	f9 01       	movw	r30, r18
    2238:	09 95       	icall
    223a:	89 2b       	or	r24, r25
    223c:	11 f0       	breq	.+4      	; 0x2242 <puts+0x5e>
    223e:	cf ef       	ldi	r28, 0xFF	; 255
    2240:	df ef       	ldi	r29, 0xFF	; 255
    2242:	ce 01       	movw	r24, r28
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <vfprintf>:
    224e:	ab e0       	ldi	r26, 0x0B	; 11
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ed e2       	ldi	r30, 0x2D	; 45
    2254:	f1 e1       	ldi	r31, 0x11	; 17
    2256:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__prologue_saves__>
    225a:	3c 01       	movw	r6, r24
    225c:	2b 01       	movw	r4, r22
    225e:	5a 01       	movw	r10, r20
    2260:	fc 01       	movw	r30, r24
    2262:	17 82       	std	Z+7, r1	; 0x07
    2264:	16 82       	std	Z+6, r1	; 0x06
    2266:	83 81       	ldd	r24, Z+3	; 0x03
    2268:	81 fd       	sbrc	r24, 1
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <vfprintf+0x24>
    226c:	6f ef       	ldi	r22, 0xFF	; 255
    226e:	7f ef       	ldi	r23, 0xFF	; 255
    2270:	c6 c1       	rjmp	.+908    	; 0x25fe <vfprintf+0x3b0>
    2272:	9a e0       	ldi	r25, 0x0A	; 10
    2274:	89 2e       	mov	r8, r25
    2276:	1e 01       	movw	r2, r28
    2278:	08 94       	sec
    227a:	21 1c       	adc	r2, r1
    227c:	31 1c       	adc	r3, r1
    227e:	f3 01       	movw	r30, r6
    2280:	23 81       	ldd	r18, Z+3	; 0x03
    2282:	f2 01       	movw	r30, r4
    2284:	23 fd       	sbrc	r18, 3
    2286:	85 91       	lpm	r24, Z+
    2288:	23 ff       	sbrs	r18, 3
    228a:	81 91       	ld	r24, Z+
    228c:	2f 01       	movw	r4, r30
    228e:	88 23       	and	r24, r24
    2290:	09 f4       	brne	.+2      	; 0x2294 <vfprintf+0x46>
    2292:	b2 c1       	rjmp	.+868    	; 0x25f8 <vfprintf+0x3aa>
    2294:	85 32       	cpi	r24, 0x25	; 37
    2296:	39 f4       	brne	.+14     	; 0x22a6 <vfprintf+0x58>
    2298:	23 fd       	sbrc	r18, 3
    229a:	85 91       	lpm	r24, Z+
    229c:	23 ff       	sbrs	r18, 3
    229e:	81 91       	ld	r24, Z+
    22a0:	2f 01       	movw	r4, r30
    22a2:	85 32       	cpi	r24, 0x25	; 37
    22a4:	29 f4       	brne	.+10     	; 0x22b0 <vfprintf+0x62>
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	b3 01       	movw	r22, r6
    22aa:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    22ae:	e7 cf       	rjmp	.-50     	; 0x227e <vfprintf+0x30>
    22b0:	98 2f       	mov	r25, r24
    22b2:	ff 24       	eor	r15, r15
    22b4:	ee 24       	eor	r14, r14
    22b6:	99 24       	eor	r9, r9
    22b8:	ff e1       	ldi	r31, 0x1F	; 31
    22ba:	ff 15       	cp	r31, r15
    22bc:	d0 f0       	brcs	.+52     	; 0x22f2 <vfprintf+0xa4>
    22be:	9b 32       	cpi	r25, 0x2B	; 43
    22c0:	69 f0       	breq	.+26     	; 0x22dc <vfprintf+0x8e>
    22c2:	9c 32       	cpi	r25, 0x2C	; 44
    22c4:	28 f4       	brcc	.+10     	; 0x22d0 <vfprintf+0x82>
    22c6:	90 32       	cpi	r25, 0x20	; 32
    22c8:	59 f0       	breq	.+22     	; 0x22e0 <vfprintf+0x92>
    22ca:	93 32       	cpi	r25, 0x23	; 35
    22cc:	91 f4       	brne	.+36     	; 0x22f2 <vfprintf+0xa4>
    22ce:	0e c0       	rjmp	.+28     	; 0x22ec <vfprintf+0x9e>
    22d0:	9d 32       	cpi	r25, 0x2D	; 45
    22d2:	49 f0       	breq	.+18     	; 0x22e6 <vfprintf+0x98>
    22d4:	90 33       	cpi	r25, 0x30	; 48
    22d6:	69 f4       	brne	.+26     	; 0x22f2 <vfprintf+0xa4>
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	24 c0       	rjmp	.+72     	; 0x2324 <vfprintf+0xd6>
    22dc:	52 e0       	ldi	r21, 0x02	; 2
    22de:	f5 2a       	or	r15, r21
    22e0:	84 e0       	ldi	r24, 0x04	; 4
    22e2:	f8 2a       	or	r15, r24
    22e4:	28 c0       	rjmp	.+80     	; 0x2336 <vfprintf+0xe8>
    22e6:	98 e0       	ldi	r25, 0x08	; 8
    22e8:	f9 2a       	or	r15, r25
    22ea:	25 c0       	rjmp	.+74     	; 0x2336 <vfprintf+0xe8>
    22ec:	e0 e1       	ldi	r30, 0x10	; 16
    22ee:	fe 2a       	or	r15, r30
    22f0:	22 c0       	rjmp	.+68     	; 0x2336 <vfprintf+0xe8>
    22f2:	f7 fc       	sbrc	r15, 7
    22f4:	29 c0       	rjmp	.+82     	; 0x2348 <vfprintf+0xfa>
    22f6:	89 2f       	mov	r24, r25
    22f8:	80 53       	subi	r24, 0x30	; 48
    22fa:	8a 30       	cpi	r24, 0x0A	; 10
    22fc:	70 f4       	brcc	.+28     	; 0x231a <vfprintf+0xcc>
    22fe:	f6 fe       	sbrs	r15, 6
    2300:	05 c0       	rjmp	.+10     	; 0x230c <vfprintf+0xbe>
    2302:	98 9c       	mul	r9, r8
    2304:	90 2c       	mov	r9, r0
    2306:	11 24       	eor	r1, r1
    2308:	98 0e       	add	r9, r24
    230a:	15 c0       	rjmp	.+42     	; 0x2336 <vfprintf+0xe8>
    230c:	e8 9c       	mul	r14, r8
    230e:	e0 2c       	mov	r14, r0
    2310:	11 24       	eor	r1, r1
    2312:	e8 0e       	add	r14, r24
    2314:	f0 e2       	ldi	r31, 0x20	; 32
    2316:	ff 2a       	or	r15, r31
    2318:	0e c0       	rjmp	.+28     	; 0x2336 <vfprintf+0xe8>
    231a:	9e 32       	cpi	r25, 0x2E	; 46
    231c:	29 f4       	brne	.+10     	; 0x2328 <vfprintf+0xda>
    231e:	f6 fc       	sbrc	r15, 6
    2320:	6b c1       	rjmp	.+726    	; 0x25f8 <vfprintf+0x3aa>
    2322:	40 e4       	ldi	r20, 0x40	; 64
    2324:	f4 2a       	or	r15, r20
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <vfprintf+0xe8>
    2328:	9c 36       	cpi	r25, 0x6C	; 108
    232a:	19 f4       	brne	.+6      	; 0x2332 <vfprintf+0xe4>
    232c:	50 e8       	ldi	r21, 0x80	; 128
    232e:	f5 2a       	or	r15, r21
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <vfprintf+0xe8>
    2332:	98 36       	cpi	r25, 0x68	; 104
    2334:	49 f4       	brne	.+18     	; 0x2348 <vfprintf+0xfa>
    2336:	f2 01       	movw	r30, r4
    2338:	23 fd       	sbrc	r18, 3
    233a:	95 91       	lpm	r25, Z+
    233c:	23 ff       	sbrs	r18, 3
    233e:	91 91       	ld	r25, Z+
    2340:	2f 01       	movw	r4, r30
    2342:	99 23       	and	r25, r25
    2344:	09 f0       	breq	.+2      	; 0x2348 <vfprintf+0xfa>
    2346:	b8 cf       	rjmp	.-144    	; 0x22b8 <vfprintf+0x6a>
    2348:	89 2f       	mov	r24, r25
    234a:	85 54       	subi	r24, 0x45	; 69
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	18 f0       	brcs	.+6      	; 0x2356 <vfprintf+0x108>
    2350:	80 52       	subi	r24, 0x20	; 32
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	38 f4       	brcc	.+14     	; 0x2364 <vfprintf+0x116>
    2356:	44 e0       	ldi	r20, 0x04	; 4
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	a4 0e       	add	r10, r20
    235c:	b5 1e       	adc	r11, r21
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	59 83       	std	Y+1, r21	; 0x01
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <vfprintf+0x134>
    2364:	93 36       	cpi	r25, 0x63	; 99
    2366:	31 f0       	breq	.+12     	; 0x2374 <vfprintf+0x126>
    2368:	93 37       	cpi	r25, 0x73	; 115
    236a:	79 f0       	breq	.+30     	; 0x238a <vfprintf+0x13c>
    236c:	93 35       	cpi	r25, 0x53	; 83
    236e:	09 f0       	breq	.+2      	; 0x2372 <vfprintf+0x124>
    2370:	56 c0       	rjmp	.+172    	; 0x241e <vfprintf+0x1d0>
    2372:	20 c0       	rjmp	.+64     	; 0x23b4 <vfprintf+0x166>
    2374:	f5 01       	movw	r30, r10
    2376:	80 81       	ld	r24, Z
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	42 e0       	ldi	r20, 0x02	; 2
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	a4 0e       	add	r10, r20
    2380:	b5 1e       	adc	r11, r21
    2382:	61 01       	movw	r12, r2
    2384:	01 e0       	ldi	r16, 0x01	; 1
    2386:	10 e0       	ldi	r17, 0x00	; 0
    2388:	12 c0       	rjmp	.+36     	; 0x23ae <vfprintf+0x160>
    238a:	f5 01       	movw	r30, r10
    238c:	c0 80       	ld	r12, Z
    238e:	d1 80       	ldd	r13, Z+1	; 0x01
    2390:	f6 fc       	sbrc	r15, 6
    2392:	03 c0       	rjmp	.+6      	; 0x239a <vfprintf+0x14c>
    2394:	6f ef       	ldi	r22, 0xFF	; 255
    2396:	7f ef       	ldi	r23, 0xFF	; 255
    2398:	02 c0       	rjmp	.+4      	; 0x239e <vfprintf+0x150>
    239a:	69 2d       	mov	r22, r9
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	42 e0       	ldi	r20, 0x02	; 2
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	a4 0e       	add	r10, r20
    23a4:	b5 1e       	adc	r11, r21
    23a6:	c6 01       	movw	r24, r12
    23a8:	0e 94 37 14 	call	0x286e	; 0x286e <strnlen>
    23ac:	8c 01       	movw	r16, r24
    23ae:	5f e7       	ldi	r21, 0x7F	; 127
    23b0:	f5 22       	and	r15, r21
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <vfprintf+0x18e>
    23b4:	f5 01       	movw	r30, r10
    23b6:	c0 80       	ld	r12, Z
    23b8:	d1 80       	ldd	r13, Z+1	; 0x01
    23ba:	f6 fc       	sbrc	r15, 6
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x176>
    23be:	6f ef       	ldi	r22, 0xFF	; 255
    23c0:	7f ef       	ldi	r23, 0xFF	; 255
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <vfprintf+0x17a>
    23c4:	69 2d       	mov	r22, r9
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	42 e0       	ldi	r20, 0x02	; 2
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	a4 0e       	add	r10, r20
    23ce:	b5 1e       	adc	r11, r21
    23d0:	c6 01       	movw	r24, r12
    23d2:	0e 94 25 14 	call	0x284a	; 0x284a <strnlen_P>
    23d6:	8c 01       	movw	r16, r24
    23d8:	50 e8       	ldi	r21, 0x80	; 128
    23da:	f5 2a       	or	r15, r21
    23dc:	f3 fe       	sbrs	r15, 3
    23de:	07 c0       	rjmp	.+14     	; 0x23ee <vfprintf+0x1a0>
    23e0:	1a c0       	rjmp	.+52     	; 0x2416 <vfprintf+0x1c8>
    23e2:	80 e2       	ldi	r24, 0x20	; 32
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	b3 01       	movw	r22, r6
    23e8:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    23ec:	ea 94       	dec	r14
    23ee:	8e 2d       	mov	r24, r14
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	08 17       	cp	r16, r24
    23f4:	19 07       	cpc	r17, r25
    23f6:	a8 f3       	brcs	.-22     	; 0x23e2 <vfprintf+0x194>
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <vfprintf+0x1c8>
    23fa:	f6 01       	movw	r30, r12
    23fc:	f7 fc       	sbrc	r15, 7
    23fe:	85 91       	lpm	r24, Z+
    2400:	f7 fe       	sbrs	r15, 7
    2402:	81 91       	ld	r24, Z+
    2404:	6f 01       	movw	r12, r30
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	b3 01       	movw	r22, r6
    240a:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    240e:	e1 10       	cpse	r14, r1
    2410:	ea 94       	dec	r14
    2412:	01 50       	subi	r16, 0x01	; 1
    2414:	10 40       	sbci	r17, 0x00	; 0
    2416:	01 15       	cp	r16, r1
    2418:	11 05       	cpc	r17, r1
    241a:	79 f7       	brne	.-34     	; 0x23fa <vfprintf+0x1ac>
    241c:	ea c0       	rjmp	.+468    	; 0x25f2 <vfprintf+0x3a4>
    241e:	94 36       	cpi	r25, 0x64	; 100
    2420:	11 f0       	breq	.+4      	; 0x2426 <vfprintf+0x1d8>
    2422:	99 36       	cpi	r25, 0x69	; 105
    2424:	69 f5       	brne	.+90     	; 0x2480 <vfprintf+0x232>
    2426:	f7 fe       	sbrs	r15, 7
    2428:	08 c0       	rjmp	.+16     	; 0x243a <vfprintf+0x1ec>
    242a:	f5 01       	movw	r30, r10
    242c:	20 81       	ld	r18, Z
    242e:	31 81       	ldd	r19, Z+1	; 0x01
    2430:	42 81       	ldd	r20, Z+2	; 0x02
    2432:	53 81       	ldd	r21, Z+3	; 0x03
    2434:	84 e0       	ldi	r24, 0x04	; 4
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	0a c0       	rjmp	.+20     	; 0x244e <vfprintf+0x200>
    243a:	f5 01       	movw	r30, r10
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	9c 01       	movw	r18, r24
    2442:	44 27       	eor	r20, r20
    2444:	37 fd       	sbrc	r19, 7
    2446:	40 95       	com	r20
    2448:	54 2f       	mov	r21, r20
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a8 0e       	add	r10, r24
    2450:	b9 1e       	adc	r11, r25
    2452:	9f e6       	ldi	r25, 0x6F	; 111
    2454:	f9 22       	and	r15, r25
    2456:	57 ff       	sbrs	r21, 7
    2458:	09 c0       	rjmp	.+18     	; 0x246c <vfprintf+0x21e>
    245a:	50 95       	com	r21
    245c:	40 95       	com	r20
    245e:	30 95       	com	r19
    2460:	21 95       	neg	r18
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	4f 4f       	sbci	r20, 0xFF	; 255
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	e0 e8       	ldi	r30, 0x80	; 128
    246a:	fe 2a       	or	r15, r30
    246c:	ca 01       	movw	r24, r20
    246e:	b9 01       	movw	r22, r18
    2470:	a1 01       	movw	r20, r2
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__ultoa_invert>
    247a:	d8 2e       	mov	r13, r24
    247c:	d2 18       	sub	r13, r2
    247e:	40 c0       	rjmp	.+128    	; 0x2500 <vfprintf+0x2b2>
    2480:	95 37       	cpi	r25, 0x75	; 117
    2482:	29 f4       	brne	.+10     	; 0x248e <vfprintf+0x240>
    2484:	1f 2d       	mov	r17, r15
    2486:	1f 7e       	andi	r17, 0xEF	; 239
    2488:	2a e0       	ldi	r18, 0x0A	; 10
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	1d c0       	rjmp	.+58     	; 0x24c8 <vfprintf+0x27a>
    248e:	1f 2d       	mov	r17, r15
    2490:	19 7f       	andi	r17, 0xF9	; 249
    2492:	9f 36       	cpi	r25, 0x6F	; 111
    2494:	61 f0       	breq	.+24     	; 0x24ae <vfprintf+0x260>
    2496:	90 37       	cpi	r25, 0x70	; 112
    2498:	20 f4       	brcc	.+8      	; 0x24a2 <vfprintf+0x254>
    249a:	98 35       	cpi	r25, 0x58	; 88
    249c:	09 f0       	breq	.+2      	; 0x24a0 <vfprintf+0x252>
    249e:	ac c0       	rjmp	.+344    	; 0x25f8 <vfprintf+0x3aa>
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <vfprintf+0x272>
    24a2:	90 37       	cpi	r25, 0x70	; 112
    24a4:	39 f0       	breq	.+14     	; 0x24b4 <vfprintf+0x266>
    24a6:	98 37       	cpi	r25, 0x78	; 120
    24a8:	09 f0       	breq	.+2      	; 0x24ac <vfprintf+0x25e>
    24aa:	a6 c0       	rjmp	.+332    	; 0x25f8 <vfprintf+0x3aa>
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <vfprintf+0x268>
    24ae:	28 e0       	ldi	r18, 0x08	; 8
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	0a c0       	rjmp	.+20     	; 0x24c8 <vfprintf+0x27a>
    24b4:	10 61       	ori	r17, 0x10	; 16
    24b6:	14 fd       	sbrc	r17, 4
    24b8:	14 60       	ori	r17, 0x04	; 4
    24ba:	20 e1       	ldi	r18, 0x10	; 16
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <vfprintf+0x27a>
    24c0:	14 fd       	sbrc	r17, 4
    24c2:	16 60       	ori	r17, 0x06	; 6
    24c4:	20 e1       	ldi	r18, 0x10	; 16
    24c6:	32 e0       	ldi	r19, 0x02	; 2
    24c8:	17 ff       	sbrs	r17, 7
    24ca:	08 c0       	rjmp	.+16     	; 0x24dc <vfprintf+0x28e>
    24cc:	f5 01       	movw	r30, r10
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	44 e0       	ldi	r20, 0x04	; 4
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	08 c0       	rjmp	.+16     	; 0x24ec <vfprintf+0x29e>
    24dc:	f5 01       	movw	r30, r10
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	bc 01       	movw	r22, r24
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	42 e0       	ldi	r20, 0x02	; 2
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	a4 0e       	add	r10, r20
    24ee:	b5 1e       	adc	r11, r21
    24f0:	a1 01       	movw	r20, r2
    24f2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__ultoa_invert>
    24f6:	d8 2e       	mov	r13, r24
    24f8:	d2 18       	sub	r13, r2
    24fa:	8f e7       	ldi	r24, 0x7F	; 127
    24fc:	f8 2e       	mov	r15, r24
    24fe:	f1 22       	and	r15, r17
    2500:	f6 fe       	sbrs	r15, 6
    2502:	0b c0       	rjmp	.+22     	; 0x251a <vfprintf+0x2cc>
    2504:	5e ef       	ldi	r21, 0xFE	; 254
    2506:	f5 22       	and	r15, r21
    2508:	d9 14       	cp	r13, r9
    250a:	38 f4       	brcc	.+14     	; 0x251a <vfprintf+0x2cc>
    250c:	f4 fe       	sbrs	r15, 4
    250e:	07 c0       	rjmp	.+14     	; 0x251e <vfprintf+0x2d0>
    2510:	f2 fc       	sbrc	r15, 2
    2512:	05 c0       	rjmp	.+10     	; 0x251e <vfprintf+0x2d0>
    2514:	8f ee       	ldi	r24, 0xEF	; 239
    2516:	f8 22       	and	r15, r24
    2518:	02 c0       	rjmp	.+4      	; 0x251e <vfprintf+0x2d0>
    251a:	1d 2d       	mov	r17, r13
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <vfprintf+0x2d2>
    251e:	19 2d       	mov	r17, r9
    2520:	f4 fe       	sbrs	r15, 4
    2522:	0d c0       	rjmp	.+26     	; 0x253e <vfprintf+0x2f0>
    2524:	fe 01       	movw	r30, r28
    2526:	ed 0d       	add	r30, r13
    2528:	f1 1d       	adc	r31, r1
    252a:	80 81       	ld	r24, Z
    252c:	80 33       	cpi	r24, 0x30	; 48
    252e:	19 f4       	brne	.+6      	; 0x2536 <vfprintf+0x2e8>
    2530:	99 ee       	ldi	r25, 0xE9	; 233
    2532:	f9 22       	and	r15, r25
    2534:	08 c0       	rjmp	.+16     	; 0x2546 <vfprintf+0x2f8>
    2536:	1f 5f       	subi	r17, 0xFF	; 255
    2538:	f2 fe       	sbrs	r15, 2
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <vfprintf+0x2f8>
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <vfprintf+0x2f6>
    253e:	8f 2d       	mov	r24, r15
    2540:	86 78       	andi	r24, 0x86	; 134
    2542:	09 f0       	breq	.+2      	; 0x2546 <vfprintf+0x2f8>
    2544:	1f 5f       	subi	r17, 0xFF	; 255
    2546:	0f 2d       	mov	r16, r15
    2548:	f3 fc       	sbrc	r15, 3
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <vfprintf+0x326>
    254c:	f0 fe       	sbrs	r15, 0
    254e:	0f c0       	rjmp	.+30     	; 0x256e <vfprintf+0x320>
    2550:	1e 15       	cp	r17, r14
    2552:	10 f0       	brcs	.+4      	; 0x2558 <vfprintf+0x30a>
    2554:	9d 2c       	mov	r9, r13
    2556:	0b c0       	rjmp	.+22     	; 0x256e <vfprintf+0x320>
    2558:	9d 2c       	mov	r9, r13
    255a:	9e 0c       	add	r9, r14
    255c:	91 1a       	sub	r9, r17
    255e:	1e 2d       	mov	r17, r14
    2560:	06 c0       	rjmp	.+12     	; 0x256e <vfprintf+0x320>
    2562:	80 e2       	ldi	r24, 0x20	; 32
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	b3 01       	movw	r22, r6
    2568:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    256c:	1f 5f       	subi	r17, 0xFF	; 255
    256e:	1e 15       	cp	r17, r14
    2570:	c0 f3       	brcs	.-16     	; 0x2562 <vfprintf+0x314>
    2572:	04 c0       	rjmp	.+8      	; 0x257c <vfprintf+0x32e>
    2574:	1e 15       	cp	r17, r14
    2576:	10 f4       	brcc	.+4      	; 0x257c <vfprintf+0x32e>
    2578:	e1 1a       	sub	r14, r17
    257a:	01 c0       	rjmp	.+2      	; 0x257e <vfprintf+0x330>
    257c:	ee 24       	eor	r14, r14
    257e:	04 ff       	sbrs	r16, 4
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <vfprintf+0x352>
    2582:	80 e3       	ldi	r24, 0x30	; 48
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	b3 01       	movw	r22, r6
    2588:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    258c:	02 ff       	sbrs	r16, 2
    258e:	1d c0       	rjmp	.+58     	; 0x25ca <vfprintf+0x37c>
    2590:	01 fd       	sbrc	r16, 1
    2592:	03 c0       	rjmp	.+6      	; 0x259a <vfprintf+0x34c>
    2594:	88 e7       	ldi	r24, 0x78	; 120
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e c0       	rjmp	.+28     	; 0x25b6 <vfprintf+0x368>
    259a:	88 e5       	ldi	r24, 0x58	; 88
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0b c0       	rjmp	.+22     	; 0x25b6 <vfprintf+0x368>
    25a0:	80 2f       	mov	r24, r16
    25a2:	86 78       	andi	r24, 0x86	; 134
    25a4:	91 f0       	breq	.+36     	; 0x25ca <vfprintf+0x37c>
    25a6:	01 ff       	sbrs	r16, 1
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <vfprintf+0x360>
    25aa:	8b e2       	ldi	r24, 0x2B	; 43
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <vfprintf+0x362>
    25ae:	80 e2       	ldi	r24, 0x20	; 32
    25b0:	f7 fc       	sbrc	r15, 7
    25b2:	8d e2       	ldi	r24, 0x2D	; 45
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	b3 01       	movw	r22, r6
    25b8:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <vfprintf+0x37c>
    25be:	80 e3       	ldi	r24, 0x30	; 48
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	b3 01       	movw	r22, r6
    25c4:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    25c8:	9a 94       	dec	r9
    25ca:	d9 14       	cp	r13, r9
    25cc:	c0 f3       	brcs	.-16     	; 0x25be <vfprintf+0x370>
    25ce:	da 94       	dec	r13
    25d0:	f1 01       	movw	r30, r2
    25d2:	ed 0d       	add	r30, r13
    25d4:	f1 1d       	adc	r31, r1
    25d6:	80 81       	ld	r24, Z
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	b3 01       	movw	r22, r6
    25dc:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    25e0:	dd 20       	and	r13, r13
    25e2:	a9 f7       	brne	.-22     	; 0x25ce <vfprintf+0x380>
    25e4:	06 c0       	rjmp	.+12     	; 0x25f2 <vfprintf+0x3a4>
    25e6:	80 e2       	ldi	r24, 0x20	; 32
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	b3 01       	movw	r22, r6
    25ec:	0e 94 42 14 	call	0x2884	; 0x2884 <fputc>
    25f0:	ea 94       	dec	r14
    25f2:	ee 20       	and	r14, r14
    25f4:	c1 f7       	brne	.-16     	; 0x25e6 <vfprintf+0x398>
    25f6:	43 ce       	rjmp	.-890    	; 0x227e <vfprintf+0x30>
    25f8:	f3 01       	movw	r30, r6
    25fa:	66 81       	ldd	r22, Z+6	; 0x06
    25fc:	77 81       	ldd	r23, Z+7	; 0x07
    25fe:	cb 01       	movw	r24, r22
    2600:	2b 96       	adiw	r28, 0x0b	; 11
    2602:	e2 e1       	ldi	r30, 0x12	; 18
    2604:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__epilogue_restores__>

00002608 <calloc>:
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	68 9f       	mul	r22, r24
    2612:	80 01       	movw	r16, r0
    2614:	69 9f       	mul	r22, r25
    2616:	10 0d       	add	r17, r0
    2618:	78 9f       	mul	r23, r24
    261a:	10 0d       	add	r17, r0
    261c:	11 24       	eor	r1, r1
    261e:	c8 01       	movw	r24, r16
    2620:	0e 94 20 13 	call	0x2640	; 0x2640 <malloc>
    2624:	ec 01       	movw	r28, r24
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	29 f0       	breq	.+10     	; 0x2634 <calloc+0x2c>
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	a8 01       	movw	r20, r16
    2630:	0e 94 30 14 	call	0x2860	; 0x2860 <memset>
    2634:	ce 01       	movw	r24, r28
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	08 95       	ret

00002640 <malloc>:
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	bc 01       	movw	r22, r24
    2646:	82 30       	cpi	r24, 0x02	; 2
    2648:	91 05       	cpc	r25, r1
    264a:	10 f4       	brcc	.+4      	; 0x2650 <malloc+0x10>
    264c:	62 e0       	ldi	r22, 0x02	; 2
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	a0 91 ac 02 	lds	r26, 0x02AC
    2654:	b0 91 ad 02 	lds	r27, 0x02AD
    2658:	ed 01       	movw	r28, r26
    265a:	e0 e0       	ldi	r30, 0x00	; 0
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	21 c0       	rjmp	.+66     	; 0x26a6 <malloc+0x66>
    2664:	88 81       	ld	r24, Y
    2666:	99 81       	ldd	r25, Y+1	; 0x01
    2668:	86 17       	cp	r24, r22
    266a:	97 07       	cpc	r25, r23
    266c:	69 f4       	brne	.+26     	; 0x2688 <malloc+0x48>
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	9b 81       	ldd	r25, Y+3	; 0x03
    2672:	30 97       	sbiw	r30, 0x00	; 0
    2674:	19 f0       	breq	.+6      	; 0x267c <malloc+0x3c>
    2676:	93 83       	std	Z+3, r25	; 0x03
    2678:	82 83       	std	Z+2, r24	; 0x02
    267a:	04 c0       	rjmp	.+8      	; 0x2684 <malloc+0x44>
    267c:	90 93 ad 02 	sts	0x02AD, r25
    2680:	80 93 ac 02 	sts	0x02AC, r24
    2684:	fe 01       	movw	r30, r28
    2686:	34 c0       	rjmp	.+104    	; 0x26f0 <malloc+0xb0>
    2688:	68 17       	cp	r22, r24
    268a:	79 07       	cpc	r23, r25
    268c:	38 f4       	brcc	.+14     	; 0x269c <malloc+0x5c>
    268e:	41 15       	cp	r20, r1
    2690:	51 05       	cpc	r21, r1
    2692:	19 f0       	breq	.+6      	; 0x269a <malloc+0x5a>
    2694:	84 17       	cp	r24, r20
    2696:	95 07       	cpc	r25, r21
    2698:	08 f4       	brcc	.+2      	; 0x269c <malloc+0x5c>
    269a:	ac 01       	movw	r20, r24
    269c:	fe 01       	movw	r30, r28
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	9c 01       	movw	r18, r24
    26a4:	e9 01       	movw	r28, r18
    26a6:	20 97       	sbiw	r28, 0x00	; 0
    26a8:	e9 f6       	brne	.-70     	; 0x2664 <malloc+0x24>
    26aa:	41 15       	cp	r20, r1
    26ac:	51 05       	cpc	r21, r1
    26ae:	a9 f1       	breq	.+106    	; 0x271a <malloc+0xda>
    26b0:	ca 01       	movw	r24, r20
    26b2:	86 1b       	sub	r24, r22
    26b4:	97 0b       	sbc	r25, r23
    26b6:	04 97       	sbiw	r24, 0x04	; 4
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <malloc+0x7c>
    26ba:	ba 01       	movw	r22, r20
    26bc:	e0 e0       	ldi	r30, 0x00	; 0
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	2a c0       	rjmp	.+84     	; 0x2716 <malloc+0xd6>
    26c2:	8d 91       	ld	r24, X+
    26c4:	9c 91       	ld	r25, X
    26c6:	11 97       	sbiw	r26, 0x01	; 1
    26c8:	84 17       	cp	r24, r20
    26ca:	95 07       	cpc	r25, r21
    26cc:	f9 f4       	brne	.+62     	; 0x270c <malloc+0xcc>
    26ce:	64 17       	cp	r22, r20
    26d0:	75 07       	cpc	r23, r21
    26d2:	81 f4       	brne	.+32     	; 0x26f4 <malloc+0xb4>
    26d4:	12 96       	adiw	r26, 0x02	; 2
    26d6:	8d 91       	ld	r24, X+
    26d8:	9c 91       	ld	r25, X
    26da:	13 97       	sbiw	r26, 0x03	; 3
    26dc:	30 97       	sbiw	r30, 0x00	; 0
    26de:	19 f0       	breq	.+6      	; 0x26e6 <malloc+0xa6>
    26e0:	93 83       	std	Z+3, r25	; 0x03
    26e2:	82 83       	std	Z+2, r24	; 0x02
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <malloc+0xae>
    26e6:	90 93 ad 02 	sts	0x02AD, r25
    26ea:	80 93 ac 02 	sts	0x02AC, r24
    26ee:	fd 01       	movw	r30, r26
    26f0:	32 96       	adiw	r30, 0x02	; 2
    26f2:	4f c0       	rjmp	.+158    	; 0x2792 <malloc+0x152>
    26f4:	ca 01       	movw	r24, r20
    26f6:	86 1b       	sub	r24, r22
    26f8:	97 0b       	sbc	r25, r23
    26fa:	fd 01       	movw	r30, r26
    26fc:	e8 0f       	add	r30, r24
    26fe:	f9 1f       	adc	r31, r25
    2700:	61 93       	st	Z+, r22
    2702:	71 93       	st	Z+, r23
    2704:	02 97       	sbiw	r24, 0x02	; 2
    2706:	8d 93       	st	X+, r24
    2708:	9c 93       	st	X, r25
    270a:	43 c0       	rjmp	.+134    	; 0x2792 <malloc+0x152>
    270c:	fd 01       	movw	r30, r26
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	9c 01       	movw	r18, r24
    2714:	d9 01       	movw	r26, r18
    2716:	10 97       	sbiw	r26, 0x00	; 0
    2718:	a1 f6       	brne	.-88     	; 0x26c2 <malloc+0x82>
    271a:	80 91 aa 02 	lds	r24, 0x02AA
    271e:	90 91 ab 02 	lds	r25, 0x02AB
    2722:	89 2b       	or	r24, r25
    2724:	41 f4       	brne	.+16     	; 0x2736 <malloc+0xf6>
    2726:	80 91 9d 02 	lds	r24, 0x029D
    272a:	90 91 9e 02 	lds	r25, 0x029E
    272e:	90 93 ab 02 	sts	0x02AB, r25
    2732:	80 93 aa 02 	sts	0x02AA, r24
    2736:	40 91 9f 02 	lds	r20, 0x029F
    273a:	50 91 a0 02 	lds	r21, 0x02A0
    273e:	41 15       	cp	r20, r1
    2740:	51 05       	cpc	r21, r1
    2742:	41 f4       	brne	.+16     	; 0x2754 <malloc+0x114>
    2744:	4d b7       	in	r20, 0x3d	; 61
    2746:	5e b7       	in	r21, 0x3e	; 62
    2748:	80 91 9b 02 	lds	r24, 0x029B
    274c:	90 91 9c 02 	lds	r25, 0x029C
    2750:	48 1b       	sub	r20, r24
    2752:	59 0b       	sbc	r21, r25
    2754:	20 91 aa 02 	lds	r18, 0x02AA
    2758:	30 91 ab 02 	lds	r19, 0x02AB
    275c:	24 17       	cp	r18, r20
    275e:	35 07       	cpc	r19, r21
    2760:	b0 f4       	brcc	.+44     	; 0x278e <malloc+0x14e>
    2762:	ca 01       	movw	r24, r20
    2764:	82 1b       	sub	r24, r18
    2766:	93 0b       	sbc	r25, r19
    2768:	86 17       	cp	r24, r22
    276a:	97 07       	cpc	r25, r23
    276c:	80 f0       	brcs	.+32     	; 0x278e <malloc+0x14e>
    276e:	ab 01       	movw	r20, r22
    2770:	4e 5f       	subi	r20, 0xFE	; 254
    2772:	5f 4f       	sbci	r21, 0xFF	; 255
    2774:	84 17       	cp	r24, r20
    2776:	95 07       	cpc	r25, r21
    2778:	50 f0       	brcs	.+20     	; 0x278e <malloc+0x14e>
    277a:	42 0f       	add	r20, r18
    277c:	53 1f       	adc	r21, r19
    277e:	50 93 ab 02 	sts	0x02AB, r21
    2782:	40 93 aa 02 	sts	0x02AA, r20
    2786:	f9 01       	movw	r30, r18
    2788:	61 93       	st	Z+, r22
    278a:	71 93       	st	Z+, r23
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <malloc+0x152>
    278e:	e0 e0       	ldi	r30, 0x00	; 0
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	cf 01       	movw	r24, r30
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <free>:
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <free+0xa>
    27a2:	50 c0       	rjmp	.+160    	; 0x2844 <free+0xaa>
    27a4:	ec 01       	movw	r28, r24
    27a6:	22 97       	sbiw	r28, 0x02	; 2
    27a8:	1b 82       	std	Y+3, r1	; 0x03
    27aa:	1a 82       	std	Y+2, r1	; 0x02
    27ac:	a0 91 ac 02 	lds	r26, 0x02AC
    27b0:	b0 91 ad 02 	lds	r27, 0x02AD
    27b4:	10 97       	sbiw	r26, 0x00	; 0
    27b6:	09 f1       	breq	.+66     	; 0x27fa <free+0x60>
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	ac 17       	cp	r26, r28
    27be:	bd 07       	cpc	r27, r29
    27c0:	08 f1       	brcs	.+66     	; 0x2804 <free+0x6a>
    27c2:	bb 83       	std	Y+3, r27	; 0x03
    27c4:	aa 83       	std	Y+2, r26	; 0x02
    27c6:	fe 01       	movw	r30, r28
    27c8:	21 91       	ld	r18, Z+
    27ca:	31 91       	ld	r19, Z+
    27cc:	e2 0f       	add	r30, r18
    27ce:	f3 1f       	adc	r31, r19
    27d0:	ae 17       	cp	r26, r30
    27d2:	bf 07       	cpc	r27, r31
    27d4:	79 f4       	brne	.+30     	; 0x27f4 <free+0x5a>
    27d6:	8d 91       	ld	r24, X+
    27d8:	9c 91       	ld	r25, X
    27da:	11 97       	sbiw	r26, 0x01	; 1
    27dc:	28 0f       	add	r18, r24
    27de:	39 1f       	adc	r19, r25
    27e0:	2e 5f       	subi	r18, 0xFE	; 254
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	39 83       	std	Y+1, r19	; 0x01
    27e6:	28 83       	st	Y, r18
    27e8:	12 96       	adiw	r26, 0x02	; 2
    27ea:	8d 91       	ld	r24, X+
    27ec:	9c 91       	ld	r25, X
    27ee:	13 97       	sbiw	r26, 0x03	; 3
    27f0:	9b 83       	std	Y+3, r25	; 0x03
    27f2:	8a 83       	std	Y+2, r24	; 0x02
    27f4:	41 15       	cp	r20, r1
    27f6:	51 05       	cpc	r21, r1
    27f8:	71 f4       	brne	.+28     	; 0x2816 <free+0x7c>
    27fa:	d0 93 ad 02 	sts	0x02AD, r29
    27fe:	c0 93 ac 02 	sts	0x02AC, r28
    2802:	20 c0       	rjmp	.+64     	; 0x2844 <free+0xaa>
    2804:	12 96       	adiw	r26, 0x02	; 2
    2806:	8d 91       	ld	r24, X+
    2808:	9c 91       	ld	r25, X
    280a:	13 97       	sbiw	r26, 0x03	; 3
    280c:	ad 01       	movw	r20, r26
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	11 f0       	breq	.+4      	; 0x2816 <free+0x7c>
    2812:	dc 01       	movw	r26, r24
    2814:	d3 cf       	rjmp	.-90     	; 0x27bc <free+0x22>
    2816:	fa 01       	movw	r30, r20
    2818:	d3 83       	std	Z+3, r29	; 0x03
    281a:	c2 83       	std	Z+2, r28	; 0x02
    281c:	21 91       	ld	r18, Z+
    281e:	31 91       	ld	r19, Z+
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	ce 17       	cp	r28, r30
    2826:	df 07       	cpc	r29, r31
    2828:	69 f4       	brne	.+26     	; 0x2844 <free+0xaa>
    282a:	88 81       	ld	r24, Y
    282c:	99 81       	ldd	r25, Y+1	; 0x01
    282e:	28 0f       	add	r18, r24
    2830:	39 1f       	adc	r19, r25
    2832:	2e 5f       	subi	r18, 0xFE	; 254
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	fa 01       	movw	r30, r20
    2838:	31 83       	std	Z+1, r19	; 0x01
    283a:	20 83       	st	Z, r18
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	93 83       	std	Z+3, r25	; 0x03
    2842:	82 83       	std	Z+2, r24	; 0x02
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <strnlen_P>:
    284a:	fc 01       	movw	r30, r24
    284c:	05 90       	lpm	r0, Z+
    284e:	61 50       	subi	r22, 0x01	; 1
    2850:	70 40       	sbci	r23, 0x00	; 0
    2852:	01 10       	cpse	r0, r1
    2854:	d8 f7       	brcc	.-10     	; 0x284c <strnlen_P+0x2>
    2856:	80 95       	com	r24
    2858:	90 95       	com	r25
    285a:	8e 0f       	add	r24, r30
    285c:	9f 1f       	adc	r25, r31
    285e:	08 95       	ret

00002860 <memset>:
    2860:	dc 01       	movw	r26, r24
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <memset+0x6>
    2864:	6d 93       	st	X+, r22
    2866:	41 50       	subi	r20, 0x01	; 1
    2868:	50 40       	sbci	r21, 0x00	; 0
    286a:	e0 f7       	brcc	.-8      	; 0x2864 <memset+0x4>
    286c:	08 95       	ret

0000286e <strnlen>:
    286e:	fc 01       	movw	r30, r24
    2870:	61 50       	subi	r22, 0x01	; 1
    2872:	70 40       	sbci	r23, 0x00	; 0
    2874:	01 90       	ld	r0, Z+
    2876:	01 10       	cpse	r0, r1
    2878:	d8 f7       	brcc	.-10     	; 0x2870 <strnlen+0x2>
    287a:	80 95       	com	r24
    287c:	90 95       	com	r25
    287e:	8e 0f       	add	r24, r30
    2880:	9f 1f       	adc	r25, r31
    2882:	08 95       	ret

00002884 <fputc>:
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	8c 01       	movw	r16, r24
    288e:	eb 01       	movw	r28, r22
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	81 ff       	sbrs	r24, 1
    2894:	1b c0       	rjmp	.+54     	; 0x28cc <fputc+0x48>
    2896:	82 ff       	sbrs	r24, 2
    2898:	0d c0       	rjmp	.+26     	; 0x28b4 <fputc+0x30>
    289a:	2e 81       	ldd	r18, Y+6	; 0x06
    289c:	3f 81       	ldd	r19, Y+7	; 0x07
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	28 17       	cp	r18, r24
    28a4:	39 07       	cpc	r19, r25
    28a6:	64 f4       	brge	.+24     	; 0x28c0 <fputc+0x3c>
    28a8:	e8 81       	ld	r30, Y
    28aa:	f9 81       	ldd	r31, Y+1	; 0x01
    28ac:	01 93       	st	Z+, r16
    28ae:	f9 83       	std	Y+1, r31	; 0x01
    28b0:	e8 83       	st	Y, r30
    28b2:	06 c0       	rjmp	.+12     	; 0x28c0 <fputc+0x3c>
    28b4:	e8 85       	ldd	r30, Y+8	; 0x08
    28b6:	f9 85       	ldd	r31, Y+9	; 0x09
    28b8:	80 2f       	mov	r24, r16
    28ba:	09 95       	icall
    28bc:	89 2b       	or	r24, r25
    28be:	31 f4       	brne	.+12     	; 0x28cc <fputc+0x48>
    28c0:	8e 81       	ldd	r24, Y+6	; 0x06
    28c2:	9f 81       	ldd	r25, Y+7	; 0x07
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	9f 83       	std	Y+7, r25	; 0x07
    28c8:	8e 83       	std	Y+6, r24	; 0x06
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <fputc+0x4c>
    28cc:	0f ef       	ldi	r16, 0xFF	; 255
    28ce:	1f ef       	ldi	r17, 0xFF	; 255
    28d0:	c8 01       	movw	r24, r16
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	1f 91       	pop	r17
    28d8:	0f 91       	pop	r16
    28da:	08 95       	ret

000028dc <__ultoa_invert>:
    28dc:	fa 01       	movw	r30, r20
    28de:	aa 27       	eor	r26, r26
    28e0:	28 30       	cpi	r18, 0x08	; 8
    28e2:	51 f1       	breq	.+84     	; 0x2938 <__ultoa_invert+0x5c>
    28e4:	20 31       	cpi	r18, 0x10	; 16
    28e6:	81 f1       	breq	.+96     	; 0x2948 <__ultoa_invert+0x6c>
    28e8:	e8 94       	clt
    28ea:	6f 93       	push	r22
    28ec:	6e 7f       	andi	r22, 0xFE	; 254
    28ee:	6e 5f       	subi	r22, 0xFE	; 254
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	8f 4f       	sbci	r24, 0xFF	; 255
    28f4:	9f 4f       	sbci	r25, 0xFF	; 255
    28f6:	af 4f       	sbci	r26, 0xFF	; 255
    28f8:	b1 e0       	ldi	r27, 0x01	; 1
    28fa:	3e d0       	rcall	.+124    	; 0x2978 <__ultoa_invert+0x9c>
    28fc:	b4 e0       	ldi	r27, 0x04	; 4
    28fe:	3c d0       	rcall	.+120    	; 0x2978 <__ultoa_invert+0x9c>
    2900:	67 0f       	add	r22, r23
    2902:	78 1f       	adc	r23, r24
    2904:	89 1f       	adc	r24, r25
    2906:	9a 1f       	adc	r25, r26
    2908:	a1 1d       	adc	r26, r1
    290a:	68 0f       	add	r22, r24
    290c:	79 1f       	adc	r23, r25
    290e:	8a 1f       	adc	r24, r26
    2910:	91 1d       	adc	r25, r1
    2912:	a1 1d       	adc	r26, r1
    2914:	6a 0f       	add	r22, r26
    2916:	71 1d       	adc	r23, r1
    2918:	81 1d       	adc	r24, r1
    291a:	91 1d       	adc	r25, r1
    291c:	a1 1d       	adc	r26, r1
    291e:	20 d0       	rcall	.+64     	; 0x2960 <__ultoa_invert+0x84>
    2920:	09 f4       	brne	.+2      	; 0x2924 <__ultoa_invert+0x48>
    2922:	68 94       	set
    2924:	3f 91       	pop	r19
    2926:	2a e0       	ldi	r18, 0x0A	; 10
    2928:	26 9f       	mul	r18, r22
    292a:	11 24       	eor	r1, r1
    292c:	30 19       	sub	r19, r0
    292e:	30 5d       	subi	r19, 0xD0	; 208
    2930:	31 93       	st	Z+, r19
    2932:	de f6       	brtc	.-74     	; 0x28ea <__ultoa_invert+0xe>
    2934:	cf 01       	movw	r24, r30
    2936:	08 95       	ret
    2938:	46 2f       	mov	r20, r22
    293a:	47 70       	andi	r20, 0x07	; 7
    293c:	40 5d       	subi	r20, 0xD0	; 208
    293e:	41 93       	st	Z+, r20
    2940:	b3 e0       	ldi	r27, 0x03	; 3
    2942:	0f d0       	rcall	.+30     	; 0x2962 <__ultoa_invert+0x86>
    2944:	c9 f7       	brne	.-14     	; 0x2938 <__ultoa_invert+0x5c>
    2946:	f6 cf       	rjmp	.-20     	; 0x2934 <__ultoa_invert+0x58>
    2948:	46 2f       	mov	r20, r22
    294a:	4f 70       	andi	r20, 0x0F	; 15
    294c:	40 5d       	subi	r20, 0xD0	; 208
    294e:	4a 33       	cpi	r20, 0x3A	; 58
    2950:	18 f0       	brcs	.+6      	; 0x2958 <__ultoa_invert+0x7c>
    2952:	49 5d       	subi	r20, 0xD9	; 217
    2954:	31 fd       	sbrc	r19, 1
    2956:	40 52       	subi	r20, 0x20	; 32
    2958:	41 93       	st	Z+, r20
    295a:	02 d0       	rcall	.+4      	; 0x2960 <__ultoa_invert+0x84>
    295c:	a9 f7       	brne	.-22     	; 0x2948 <__ultoa_invert+0x6c>
    295e:	ea cf       	rjmp	.-44     	; 0x2934 <__ultoa_invert+0x58>
    2960:	b4 e0       	ldi	r27, 0x04	; 4
    2962:	a6 95       	lsr	r26
    2964:	97 95       	ror	r25
    2966:	87 95       	ror	r24
    2968:	77 95       	ror	r23
    296a:	67 95       	ror	r22
    296c:	ba 95       	dec	r27
    296e:	c9 f7       	brne	.-14     	; 0x2962 <__ultoa_invert+0x86>
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	61 05       	cpc	r22, r1
    2974:	71 05       	cpc	r23, r1
    2976:	08 95       	ret
    2978:	9b 01       	movw	r18, r22
    297a:	ac 01       	movw	r20, r24
    297c:	0a 2e       	mov	r0, r26
    297e:	06 94       	lsr	r0
    2980:	57 95       	ror	r21
    2982:	47 95       	ror	r20
    2984:	37 95       	ror	r19
    2986:	27 95       	ror	r18
    2988:	ba 95       	dec	r27
    298a:	c9 f7       	brne	.-14     	; 0x297e <__ultoa_invert+0xa2>
    298c:	62 0f       	add	r22, r18
    298e:	73 1f       	adc	r23, r19
    2990:	84 1f       	adc	r24, r20
    2992:	95 1f       	adc	r25, r21
    2994:	a0 1d       	adc	r26, r0
    2996:	08 95       	ret

00002998 <__divmodhi4>:
    2998:	97 fb       	bst	r25, 7
    299a:	09 2e       	mov	r0, r25
    299c:	07 26       	eor	r0, r23
    299e:	0a d0       	rcall	.+20     	; 0x29b4 <__divmodhi4_neg1>
    29a0:	77 fd       	sbrc	r23, 7
    29a2:	04 d0       	rcall	.+8      	; 0x29ac <__divmodhi4_neg2>
    29a4:	2e d0       	rcall	.+92     	; 0x2a02 <__udivmodhi4>
    29a6:	06 d0       	rcall	.+12     	; 0x29b4 <__divmodhi4_neg1>
    29a8:	00 20       	and	r0, r0
    29aa:	1a f4       	brpl	.+6      	; 0x29b2 <__divmodhi4_exit>

000029ac <__divmodhi4_neg2>:
    29ac:	70 95       	com	r23
    29ae:	61 95       	neg	r22
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255

000029b2 <__divmodhi4_exit>:
    29b2:	08 95       	ret

000029b4 <__divmodhi4_neg1>:
    29b4:	f6 f7       	brtc	.-4      	; 0x29b2 <__divmodhi4_exit>
    29b6:	90 95       	com	r25
    29b8:	81 95       	neg	r24
    29ba:	9f 4f       	sbci	r25, 0xFF	; 255
    29bc:	08 95       	ret

000029be <__udivmodsi4>:
    29be:	a1 e2       	ldi	r26, 0x21	; 33
    29c0:	1a 2e       	mov	r1, r26
    29c2:	aa 1b       	sub	r26, r26
    29c4:	bb 1b       	sub	r27, r27
    29c6:	fd 01       	movw	r30, r26
    29c8:	0d c0       	rjmp	.+26     	; 0x29e4 <__udivmodsi4_ep>

000029ca <__udivmodsi4_loop>:
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	ee 1f       	adc	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	a2 17       	cp	r26, r18
    29d4:	b3 07       	cpc	r27, r19
    29d6:	e4 07       	cpc	r30, r20
    29d8:	f5 07       	cpc	r31, r21
    29da:	20 f0       	brcs	.+8      	; 0x29e4 <__udivmodsi4_ep>
    29dc:	a2 1b       	sub	r26, r18
    29de:	b3 0b       	sbc	r27, r19
    29e0:	e4 0b       	sbc	r30, r20
    29e2:	f5 0b       	sbc	r31, r21

000029e4 <__udivmodsi4_ep>:
    29e4:	66 1f       	adc	r22, r22
    29e6:	77 1f       	adc	r23, r23
    29e8:	88 1f       	adc	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	1a 94       	dec	r1
    29ee:	69 f7       	brne	.-38     	; 0x29ca <__udivmodsi4_loop>
    29f0:	60 95       	com	r22
    29f2:	70 95       	com	r23
    29f4:	80 95       	com	r24
    29f6:	90 95       	com	r25
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	bd 01       	movw	r22, r26
    29fe:	cf 01       	movw	r24, r30
    2a00:	08 95       	ret

00002a02 <__udivmodhi4>:
    2a02:	aa 1b       	sub	r26, r26
    2a04:	bb 1b       	sub	r27, r27
    2a06:	51 e1       	ldi	r21, 0x11	; 17
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <__udivmodhi4_ep>

00002a0a <__udivmodhi4_loop>:
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	a6 17       	cp	r26, r22
    2a10:	b7 07       	cpc	r27, r23
    2a12:	10 f0       	brcs	.+4      	; 0x2a18 <__udivmodhi4_ep>
    2a14:	a6 1b       	sub	r26, r22
    2a16:	b7 0b       	sbc	r27, r23

00002a18 <__udivmodhi4_ep>:
    2a18:	88 1f       	adc	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	5a 95       	dec	r21
    2a1e:	a9 f7       	brne	.-22     	; 0x2a0a <__udivmodhi4_loop>
    2a20:	80 95       	com	r24
    2a22:	90 95       	com	r25
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	08 95       	ret

00002a2a <__prologue_saves__>:
    2a2a:	2f 92       	push	r2
    2a2c:	3f 92       	push	r3
    2a2e:	4f 92       	push	r4
    2a30:	5f 92       	push	r5
    2a32:	6f 92       	push	r6
    2a34:	7f 92       	push	r7
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	ca 1b       	sub	r28, r26
    2a54:	db 0b       	sbc	r29, r27
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	09 94       	ijmp

00002a62 <__epilogue_restores__>:
    2a62:	2a 88       	ldd	r2, Y+18	; 0x12
    2a64:	39 88       	ldd	r3, Y+17	; 0x11
    2a66:	48 88       	ldd	r4, Y+16	; 0x10
    2a68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a74:	b9 84       	ldd	r11, Y+9	; 0x09
    2a76:	c8 84       	ldd	r12, Y+8	; 0x08
    2a78:	df 80       	ldd	r13, Y+7	; 0x07
    2a7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a80:	1b 81       	ldd	r17, Y+3	; 0x03
    2a82:	aa 81       	ldd	r26, Y+2	; 0x02
    2a84:	b9 81       	ldd	r27, Y+1	; 0x01
    2a86:	ce 0f       	add	r28, r30
    2a88:	d1 1d       	adc	r29, r1
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	ed 01       	movw	r28, r26
    2a96:	08 95       	ret

00002a98 <_exit>:
    2a98:	f8 94       	cli

00002a9a <__stop_program>:
    2a9a:	ff cf       	rjmp	.-2      	; 0x2a9a <__stop_program>
