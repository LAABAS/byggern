
bygger_gruppe_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  0000233c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000233c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080029a  0080029a  0000256a  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ef  00000000  00000000  0000266a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e94  00000000  00000000  00002959  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  000037ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000110b  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00005100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  0000582b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00005ae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_1>
       8:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e3       	ldi	r30, 0x3C	; 60
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	aa 39       	cpi	r26, 0x9A	; 154
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	aa e9       	ldi	r26, 0x9A	; 154
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a4 3a       	cpi	r26, 0xA4	; 164
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include "sram.h"
#include "joystick.h"
#include "butterfly_interface.h"

int main(void) {
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	SPI_NoSlave();
      b6:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
	init_UART(BAUD);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 82 00 	call	0x104	; 0x104 <init_UART>
	init_SRAM();
      c2:	0e 94 aa 00 	call	0x154	; 0x154 <init_SRAM>
	SPI_MasterInit();	
      c6:	0e 94 ab 01 	call	0x356	; 0x356 <SPI_MasterInit>
	//CAN_init();

	init_joystick();
      ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init_joystick>

	*/
	
	

	butterfly_menu();
      ce:	0e 94 bc 05 	call	0xb78	; 0xb78 <butterfly_menu>

	return 0;	
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	90 e0       	ldi	r25, 0x00	; 0
	
}
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <UART_put_char>:
	return 0;

} 

// Send char using UART (can be optimised using interrupt)
int UART_put_char(char c, FILE* dummy){
      dc:	1f 93       	push	r17
      de:	18 2f       	mov	r17, r24
	if (c == '\n') UART_put_char('\r', dummy);
      e0:	8a 30       	cpi	r24, 0x0A	; 10
      e2:	19 f4       	brne	.+6      	; 0xea <UART_put_char+0xe>
      e4:	8d e0       	ldi	r24, 0x0D	; 13
      e6:	0e 94 6e 00 	call	0xdc	; 0xdc <UART_put_char>
	loop_until_bit_is_set(UCSR0A, UDRE0); 
      ea:	5d 9b       	sbis	0x0b, 5	; 11
      ec:	fe cf       	rjmp	.-4      	; 0xea <UART_put_char+0xe>
	//while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = (unsigned char)c;
      ee:	1c b9       	out	0x0c, r17	; 12
	return 0;
}
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	1f 91       	pop	r17
      f6:	08 95       	ret

000000f8 <UART_get_char>:

// Receive char using UART (can be optimised using interrupt)
int UART_get_char(FILE* dummy){
	loop_until_bit_is_set(UCSR0A, RXC0);
      f8:	5f 9b       	sbis	0x0b, 7	; 11
      fa:	fe cf       	rjmp	.-4      	; 0xf8 <UART_get_char>
	//while ( !(UCSR0A & (1<<RXC0)) );
	char c = UDR0;
      fc:	8c b1       	in	r24, 0x0c	; 12
	if (c == '\r') c = '\n';
	return (int) UDR0;
      fe:	8c b1       	in	r24, 0x0c	; 12
}
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	08 95       	ret

00000104 <init_UART>:
	
	//Enable Interrupts. Macro.
	//sei();

	unsigned long ubrr0 = baud;
	ubrr0 = (FOSC/(16*ubrr0)) - 1;
     104:	9c 01       	movw	r18, r24
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	64 e0       	ldi	r22, 0x04	; 4
     10c:	22 0f       	add	r18, r18
     10e:	33 1f       	adc	r19, r19
     110:	44 1f       	adc	r20, r20
     112:	55 1f       	adc	r21, r21
     114:	6a 95       	dec	r22
     116:	d1 f7       	brne	.-12     	; 0x10c <init_UART+0x8>
     118:	6a ef       	ldi	r22, 0xFA	; 250
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	8b e4       	ldi	r24, 0x4B	; 75
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 43 11 	call	0x2286	; 0x2286 <__udivmodsi4>
     124:	c9 01       	movw	r24, r18
     126:	da 01       	movw	r26, r20
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	a1 09       	sbc	r26, r1
     12c:	b1 09       	sbc	r27, r1
	buffer_start = 0;
	buffer_stop = 0;
	buffer_used = 0;*/

	/* Sette baud rate */
	UBRR0H = (unsigned char)(ubrr0>>8);
     12e:	29 2f       	mov	r18, r25
     130:	3a 2f       	mov	r19, r26
     132:	4b 2f       	mov	r20, r27
     134:	55 27       	eor	r21, r21
     136:	20 bd       	out	0x20, r18	; 32
	UBRR0L = (unsigned char)ubrr0;
     138:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver og transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     13a:	88 e1       	ldi	r24, 0x18	; 24
     13c:	8a b9       	out	0x0a, r24	; 10
	ucsr0c = ucsr0c | (1<<UPM01) | (0<<UPM00);

	/*URSEL0 must be set to 1 according to data sheet*/
	ucsr0c = ucsr0c | (1<<URSEL0);
		
	UCSR0C = ucsr0c;
     13e:	86 ea       	ldi	r24, 0xA6	; 166
     140:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_put_char, UART_get_char);
     142:	8e e6       	ldi	r24, 0x6E	; 110
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	6c e7       	ldi	r22, 0x7C	; 124
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <fdevopen>

	return 0;

} 
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret

00000154 <init_SRAM>:
#include "sram.h"

//Initialize the extended RAM
void init_SRAM(void)
{
	MCUCR =  MCUCR | (1<<SRW10) | (1<<SRE);// | (1<<SRW10));(1<<SRE)
     154:	85 b7       	in	r24, 0x35	; 53
     156:	80 6c       	ori	r24, 0xC0	; 192
     158:	85 bf       	out	0x35, r24	; 53
	EMCUCR =  EMCUCR | (1<<SRW00); 
     15a:	86 b7       	in	r24, 0x36	; 54
     15c:	84 60       	ori	r24, 0x04	; 4
     15e:	86 bf       	out	0x36, r24	; 54
	SFIOR =  SFIOR | (1<<XMM2);
     160:	80 b7       	in	r24, 0x30	; 48
     162:	80 62       	ori	r24, 0x20	; 32
     164:	80 bf       	out	0x30, r24	; 48
}
     166:	08 95       	ret

00000168 <SRAM_test>:

//Function to test the extended RAM. Will print out Error!!! in the terminal
//if the content of the RAM is different from what it should be.
void SRAM_test(void)
{
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <puts>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	f0 e1       	ldi	r31, 0x10	; 16

	int i;
	for(i=0;i<0x800;i++)
	{
		ram_address[i] = (char)0x83;
     17c:	43 e8       	ldi	r20, 0x83	; 131
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17e:	29 e9       	ldi	r18, 0x99	; 153
     180:	39 e0       	ldi	r19, 0x09	; 9
     182:	41 93       	st	Z+, r20
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <SRAM_test+0x1e>
{
	unsigned char *ram_address = (unsigned char *) 0x1000;
	printf("Starting...\n");

	int i;
	for(i=0;i<0x800;i++)
     18a:	88 e1       	ldi	r24, 0x18	; 24
     18c:	e0 30       	cpi	r30, 0x00	; 0
     18e:	f8 07       	cpc	r31, r24
     190:	c1 f7       	brne	.-16     	; 0x182 <SRAM_test+0x1a>
     192:	c0 e0       	ldi	r28, 0x00	; 0
     194:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
		{
			printf("Error!!! RAM no. 0x%x ",i);
     196:	0c e0       	ldi	r16, 0x0C	; 12
     198:	11 e0       	ldi	r17, 0x01	; 1
		int j = (int)c;
		
		//printf("Adresse: 0x%x ", i);
		//printf("Lest: 0x%x \n", j);
		
		if(ram_address[i] != (char)0x83)
     19a:	c0 50       	subi	r28, 0x00	; 0
     19c:	d0 4f       	sbci	r29, 0xF0	; 240
     19e:	88 81       	ld	r24, Y
     1a0:	c0 50       	subi	r28, 0x00	; 0
     1a2:	d0 41       	sbci	r29, 0x10	; 16
     1a4:	83 38       	cpi	r24, 0x83	; 131
     1a6:	71 f0       	breq	.+28     	; 0x1c4 <SRAM_test+0x5c>
		{
			printf("Error!!! RAM no. 0x%x ",i);
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <SRAM_test+0x42>
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <SRAM_test+0x44>
     1ac:	ed b7       	in	r30, 0x3d	; 61
     1ae:	fe b7       	in	r31, 0x3e	; 62
     1b0:	12 83       	std	Z+2, r17	; 0x02
     1b2:	01 83       	std	Z+1, r16	; 0x01
     1b4:	d4 83       	std	Z+4, r29	; 0x04
     1b6:	c3 83       	std	Z+3, r28	; 0x03
     1b8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <printf>
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
		ram_address[i] = (char)0x83;
		_delay_ms(2);
	//	printf("skriver RAM no. 0x%x \n", i);
	}

	for(i=0;i<0x800;i++)
     1c4:	21 96       	adiw	r28, 0x01	; 1
     1c6:	f8 e0       	ldi	r31, 0x08	; 8
     1c8:	c0 30       	cpi	r28, 0x00	; 0
     1ca:	df 07       	cpc	r29, r31
     1cc:	31 f7       	brne	.-52     	; 0x19a <SRAM_test+0x32>
			//printf("Written OK\n");
		}
		//_delay_ms(2);
	}

	printf("Finished!!!\n");
     1ce:	83 e2       	ldi	r24, 0x23	; 35
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <puts>
     1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <SRAM_test+0x6e>

000001d8 <init_joystick>:

#include <util/delay.h>


// Initialize the joystick
void init_joystick(){
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	28 97       	sbiw	r28, 0x08	; 8
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	f8 94       	cli
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	cd bf       	out	0x3d, r28	; 61
//	DDRB = 0x00; //inputs /////////////////////////////fixxxxx
//	PORTB = 0xFF; //Pull-ups

	//initialize timer for joystick polling
	//CTC mode, no output, 1024 prescaler
	TCCR0 = 0b00001101;
     1ec:	e3 e5       	ldi	r30, 0x53	; 83
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	8d e0       	ldi	r24, 0x0D	; 13
     1f2:	80 83       	st	Z, r24

	//Number to count to (here 40 ms, max 40-something)
	long long int count = 40*FOSC/(1000*1024);
     1f4:	80 ec       	ldi	r24, 0xC0	; 192
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	80 ee       	ldi	r24, 0xE0	; 224
     1fa:	8a 83       	std	Y+2, r24	; 0x02
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	8b 83       	std	Y+3, r24	; 0x03
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	8c 83       	std	Y+4, r24	; 0x04
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	8d 83       	std	Y+5, r24	; 0x05
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	8e 83       	std	Y+6, r24	; 0x06
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	8f 83       	std	Y+7, r24	; 0x07
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	88 87       	std	Y+8, r24	; 0x08

	OCR0 = 200;//(uint8_t) count;
     214:	e1 e5       	ldi	r30, 0x51	; 81
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	88 ec       	ldi	r24, 0xC8	; 200
     21a:	80 83       	st	Z, r24
	
	//Enable interrupt on CTC
	TIMSK = TIMSK | (1<<OCIE0);
     21c:	a9 e5       	ldi	r26, 0x59	; 89
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e9 e5       	ldi	r30, 0x59	; 89
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	81 60       	ori	r24, 0x01	; 1
     228:	8c 93       	st	X, r24

}
     22a:	28 96       	adiw	r28, 0x08	; 8
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <read_axis>:

// Read joystick position, returns int8
int8_t read_axis(char axis) {
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <read_axis+0x6>
     242:	00 d0       	rcall	.+0      	; 0x244 <read_axis+0x8>
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t *adc_address = (uint8_t *) 0x1800;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	98 e1       	ldi	r25, 0x18	; 24
     24e:	9a 83       	std	Y+2, r25	; 0x02
     250:	89 83       	std	Y+1, r24	; 0x01
	
	if(axis == 'x'){
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	88 37       	cpi	r24, 0x78	; 120
     256:	b1 f4       	brne	.+44     	; 0x284 <read_axis+0x48>
		adc_address[0] = 0x04;
     258:	e9 81       	ldd	r30, Y+1	; 0x01
     25a:	fa 81       	ldd	r31, Y+2	; 0x02
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     260:	e6 e3       	ldi	r30, 0x36	; 54
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	88 2f       	mov	r24, r24
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	81 70       	andi	r24, 0x01	; 1
     26c:	90 70       	andi	r25, 0x00	; 0
     26e:	88 23       	and	r24, r24
     270:	b9 f7       	brne	.-18     	; 0x260 <read_axis+0x24>
		return (int8_t)eeprom_read_byte((uint8_t*)*adc_address);
     272:	e9 81       	ldd	r30, Y+1	; 0x01
     274:	fa 81       	ldd	r31, Y+2	; 0x02
     276:	80 81       	ld	r24, Z
     278:	88 2f       	mov	r24, r24
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 67 01 	call	0x2ce	; 0x2ce <eeprom_read_byte>
     280:	8c 83       	std	Y+4, r24	; 0x04
     282:	1d c0       	rjmp	.+58     	; 0x2be <read_axis+0x82>
	}
	else if(axis == 'y'){
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	89 37       	cpi	r24, 0x79	; 121
     288:	c1 f4       	brne	.+48     	; 0x2ba <read_axis+0x7e>
		adc_address[0] = 0x06;
     28a:	e9 81       	ldd	r30, Y+1	; 0x01
     28c:	fa 81       	ldd	r31, Y+2	; 0x02
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	80 83       	st	Z, r24
		loop_until_bit_is_clear(PINB, 0);
     292:	e6 e3       	ldi	r30, 0x36	; 54
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	90 70       	andi	r25, 0x00	; 0
     2a0:	88 23       	and	r24, r24
     2a2:	b9 f7       	brne	.-18     	; 0x292 <read_axis+0x56>
		return (int8_t)eeprom_read_byte((uint8_t*)(*adc_address+256));
     2a4:	e9 81       	ldd	r30, Y+1	; 0x01
     2a6:	fa 81       	ldd	r31, Y+2	; 0x02
     2a8:	80 81       	ld	r24, Z
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	80 50       	subi	r24, 0x00	; 0
     2b0:	9f 4f       	sbci	r25, 0xFF	; 255
     2b2:	0e 94 67 01 	call	0x2ce	; 0x2ce <eeprom_read_byte>
     2b6:	8c 83       	std	Y+4, r24	; 0x04
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <read_axis+0x82>
	}
	return -1;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	8c 83       	std	Y+4, r24	; 0x04
     2be:	8c 81       	ldd	r24, Y+4	; 0x04
	//evt. korrigering
}
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <eeprom_read_byte+0x6>
     2d4:	0f 92       	push	r0
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	9b 83       	std	Y+3, r25	; 0x03
     2dc:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
     2de:	ec e3       	ldi	r30, 0x3C	; 60
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	88 2f       	mov	r24, r24
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 70       	andi	r24, 0x02	; 2
     2ea:	90 70       	andi	r25, 0x00	; 0
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	b9 f7       	brne	.-18     	; 0x2de <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     2f0:	ee e3       	ldi	r30, 0x3E	; 62
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	9b 81       	ldd	r25, Y+3	; 0x03
     2f8:	91 83       	std	Z+1, r25	; 0x01
     2fa:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     2fc:	e0 9a       	sbi	0x1c, 0	; 28
     2fe:	8d b3       	in	r24, 0x1d	; 29
     300:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
     302:	89 81       	ldd	r24, Y+1	; 0x01
}
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	cf 91       	pop	r28
     30c:	df 91       	pop	r29
     30e:	08 95       	ret

00000310 <read_buttons>:


// Read joystick buttons (Can be optimised with interrupt)
inline uint8_t read_buttons(){
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
	return (PINB & 0x6) >> 1;
     318:	e6 e3       	ldi	r30, 0x36	; 54
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	88 2f       	mov	r24, r24
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	86 70       	andi	r24, 0x06	; 6
     324:	90 70       	andi	r25, 0x00	; 0
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
}
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <SIGNAL>:
	//printf("X-akse: %d Y-akse: %d Knapp1: %d knapp2: %d\n", read_axis('x'), read_axis('y'), (read_buttons()&1), ((read_buttons()>>1)&1));
	
		//	read_axis('x');
		//	read_axis('y');	

SIGNAL(SIG_OUTPUT_COMPARE0) {
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <SIGNAL+0x6>
     336:	00 d0       	rcall	.+0      	; 0x338 <SIGNAL+0x8>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	9a 83       	std	Y+2, r25	; 0x02
     33e:	89 83       	std	Y+1, r24	; 0x01
	//check joystick

	printf("X");// axis: %d\n", read_axis('x'));
     340:	88 e5       	ldi	r24, 0x58	; 88
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <putchar>
}
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	08 95       	ret

00000356 <SPI_MasterInit>:

// Initialize the SPI Master interface
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
     356:	87 b3       	in	r24, 0x17	; 23
     358:	87 70       	andi	r24, 0x07	; 7
     35a:	88 6b       	ori	r24, 0xB8	; 184
     35c:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     35e:	81 e5       	ldi	r24, 0x51	; 81
     360:	8d b9       	out	0x0d, r24	; 13
}

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     362:	88 b3       	in	r24, 0x18	; 24
     364:	88 61       	ori	r24, 0x18	; 24
     366:	88 bb       	out	0x18, r24	; 24
	/* Set MOSI and SCK output, all others input */
	DDRB = (DDRB & 0x0F) | ((1<<DDB5) | (1<<DDB7) | (1<<DDB3)| (1<<DDB4));
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	SPI_NoSlave();
}
     368:	08 95       	ret

0000036a <SPI_MasterTransmit>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     36a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     36c:	77 9b       	sbis	0x0e, 7	; 14
     36e:	fe cf       	rjmp	.-4      	; 0x36c <SPI_MasterTransmit+0x2>
}
     370:	08 95       	ret

00000372 <SPI_MasterReceive>:

// Transmit char over SPI
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     372:	80 e4       	ldi	r24, 0x40	; 64
     374:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     376:	77 9b       	sbis	0x0e, 7	; 14
     378:	fe cf       	rjmp	.-4      	; 0x376 <SPI_MasterReceive+0x4>
{
	//send dummy char, to shift the SPDR
	SPI_MasterTransmit('@');
	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
     37a:	77 9b       	sbis	0x0e, 7	; 14
     37c:	fe cf       	rjmp	.-4      	; 0x37a <SPI_MasterReceive+0x8>
	
	

	/* Return data register */
	return SPDR;
     37e:	8f b1       	in	r24, 0x0f	; 15
}
     380:	08 95       	ret

00000382 <SPI_SelectSlave>:

// Select SPI slave to send data to
void SPI_SelectSlave(char slave){
	/* Slave select */
	if (slave == SPI_BUTTERFLY)
     382:	82 36       	cpi	r24, 0x62	; 98
     384:	11 f4       	brne	.+4      	; 0x38a <SPI_SelectSlave+0x8>
		PORTB = PORTB & ~(1<<DDB3) ; // set SS for butterfly low
     386:	c3 98       	cbi	0x18, 3	; 24
     388:	08 95       	ret
	else if (slave == SPI_CAN)
     38a:	83 37       	cpi	r24, 0x73	; 115
     38c:	09 f4       	brne	.+2      	; 0x390 <SPI_SelectSlave+0xe>
		PORTB = PORTB & ~(1<<DDB4) ; // set SS for CAN low 
     38e:	c4 98       	cbi	0x18, 4	; 24
     390:	08 95       	ret

00000392 <SPI_NoSlave>:
}

// Disable chipselect on all SPI slaves (select no slave)
void SPI_NoSlave(void){
	/* Set SS high */	
	PORTB = PORTB | (1<<DDB4) | (1<<DDB3);
     392:	88 b3       	in	r24, 0x18	; 24
     394:	88 61       	ori	r24, 0x18	; 24
     396:	88 bb       	out	0x18, r24	; 24
}
     398:	08 95       	ret

0000039a <CAN_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>

//Initialize the CAN bus
void CAN_init(void){
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <CAN_init+0x6>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62

	CAN_reset();
     3a4:	0e 94 40 06 	call	0xc80	; 0xc80 <CAN_reset>

	uint8_t data[2];

	//Acceptance mask for RXB0 (all 11 bits counts)
	//dette filteret blokkerer alt?!?
	data[0] = 0b11111111;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     3ac:	80 ee       	ldi	r24, 0xE0	; 224
     3ae:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], MASK_RXF0);
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	60 e2       	ldi	r22, 0x20	; 32
     3b4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], MASK_RXF0+1);
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	61 e2       	ldi	r22, 0x21	; 33
     3bc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>


	//RXF0
	//Receive filter 0 hits when id = 0x1F (exactly)	
	data[0] = 0b00000011;
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     3c4:	80 ee       	ldi	r24, 0xE0	; 224
     3c6:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF0);
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], RXF0+1);
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], RXF1+1);*/



	//Acceptance mask for RXB1 - accepts 1 2 3 8 9 only
	data[0] = 0b11111111;
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	89 83       	std	Y+1, r24	; 0x01
	data[1] = 0b11100000;
     3dc:	80 ee       	ldi	r24, 0xE0	; 224
     3de:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], MASK_RXF1);
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	64 e2       	ldi	r22, 0x24	; 36
     3e4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], MASK_RXF1+1);
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	65 e2       	ldi	r22, 0x25	; 37
     3ec:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>



	//RXF2
	//Receive filter 2 hits when id = 0 (exactly)
	data[0] = 0b00000000;
     3f0:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b00000000;
     3f2:	1a 82       	std	Y+2, r1	; 0x02
	CAN_write(data[0], RXF2);
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	68 e0       	ldi	r22, 0x08	; 8
     3f8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], RXF2+1);
     3fc:	8a 81       	ldd	r24, Y+2	; 0x02
     3fe:	69 e0       	ldi	r22, 0x09	; 9
     400:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>

	//RXF3
	//Receive filter 3 hits when id = 1 (exactly)
	data[0] = 0b00000000;
     404:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b00100000;
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF3);
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	60 e1       	ldi	r22, 0x10	; 16
     40e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], RXF3+1);
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	61 e1       	ldi	r22, 0x11	; 17
     416:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>

	//RXF4
	//Receive filter 4 hits when id = 2 (exactly)
	data[0] = 0b00000000;
     41a:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b01000000;
     41c:	80 e4       	ldi	r24, 0x40	; 64
     41e:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF4);
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	64 e1       	ldi	r22, 0x14	; 20
     424:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], RXF4+1);
     428:	8a 81       	ldd	r24, Y+2	; 0x02
     42a:	65 e1       	ldi	r22, 0x15	; 21
     42c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>

	//RXF5
	//Receive filter 5 hits when id = 3 (exactly)
	data[0] = 0b00000000;
     430:	19 82       	std	Y+1, r1	; 0x01
	data[1] = 0b01100000;
     432:	80 e6       	ldi	r24, 0x60	; 96
     434:	8a 83       	std	Y+2, r24	; 0x02
	CAN_write(data[0], RXF5);
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	68 e1       	ldi	r22, 0x18	; 24
     43a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_write(data[1], RXF5+1);
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	69 e1       	ldi	r22, 0x19	; 25
     442:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>


	CAN_bit_modify(CANCTRL, MASK_MODE, MODE_NORMAL); //set loopback mode
     446:	8f e0       	ldi	r24, 0x0F	; 15
     448:	60 ee       	ldi	r22, 0xE0	; 224
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	0e 94 87 07 	call	0xf0e	; 0xf0e <CAN_bit_modify>
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD); // set no filter, set to 01 to accept only standard, 00 to accept accordig to filters
     450:	80 e6       	ldi	r24, 0x60	; 96
     452:	60 e6       	ldi	r22, 0x60	; 96
     454:	40 e2       	ldi	r20, 0x20	; 32
     456:	0e 94 87 07 	call	0xf0e	; 0xf0e <CAN_bit_modify>
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
     45a:	8c e0       	ldi	r24, 0x0C	; 12
     45c:	6f e0       	ldi	r22, 0x0F	; 15
     45e:	4f ef       	ldi	r20, 0xFF	; 255
     460:	0e 94 87 07 	call	0xf0e	; 0xf0e <CAN_bit_modify>
	CAN_init_interrupt();
     464:	0e 94 71 04 	call	0x8e2	; 0x8e2 <CAN_init_interrupt>
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <CAN_test>:

// Test send and recieve in loopback mode, verify result from UART
int CAN_test(void){
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	69 97       	sbiw	r28, 0x19	; 25
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
	printf("CAN_test started\n");
     486:	8f e2       	ldi	r24, 0x2F	; 47
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <puts>
	int i;
	

	CAN_message message;
	message.id = 0;
     48e:	1a 8a       	std	Y+18, r1	; 0x12
     490:	19 8a       	std	Y+17, r1	; 0x11
	message.length = 8;
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	8b 8b       	std	Y+19, r24	; 0x13
	message.data = " ";
     496:	80 e4       	ldi	r24, 0x40	; 64
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	9d 8b       	std	Y+21, r25	; 0x15
     49c:	8c 8b       	std	Y+20, r24	; 0x14
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     49e:	18 8a       	std	Y+16, r1	; 0x10
     4a0:	1f 86       	std	Y+15, r1	; 0x0f
     4a2:	44 c1       	rjmp	.+648    	; 0x72c <__stack+0x22d>
		switch (i) {
     4a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4a6:	98 89       	ldd	r25, Y+16	; 0x10
     4a8:	99 8f       	std	Y+25, r25	; 0x19
     4aa:	88 8f       	std	Y+24, r24	; 0x18
     4ac:	88 8d       	ldd	r24, Y+24	; 0x18
     4ae:	99 8d       	ldd	r25, Y+25	; 0x19
     4b0:	84 30       	cpi	r24, 0x04	; 4
     4b2:	91 05       	cpc	r25, r1
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <CAN_test+0x46>
     4b6:	6b c0       	rjmp	.+214    	; 0x58e <__stack+0x8f>
     4b8:	88 8d       	ldd	r24, Y+24	; 0x18
     4ba:	99 8d       	ldd	r25, Y+25	; 0x19
     4bc:	85 30       	cpi	r24, 0x05	; 5
     4be:	91 05       	cpc	r25, r1
     4c0:	ec f4       	brge	.+58     	; 0x4fc <CAN_test+0x8a>
     4c2:	88 8d       	ldd	r24, Y+24	; 0x18
     4c4:	99 8d       	ldd	r25, Y+25	; 0x19
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	91 05       	cpc	r25, r1
     4ca:	09 f4       	brne	.+2      	; 0x4ce <CAN_test+0x5c>
     4cc:	45 c0       	rjmp	.+138    	; 0x558 <__stack+0x59>
     4ce:	88 8d       	ldd	r24, Y+24	; 0x18
     4d0:	99 8d       	ldd	r25, Y+25	; 0x19
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	91 05       	cpc	r25, r1
     4d6:	2c f4       	brge	.+10     	; 0x4e2 <CAN_test+0x70>
     4d8:	88 8d       	ldd	r24, Y+24	; 0x18
     4da:	99 8d       	ldd	r25, Y+25	; 0x19
     4dc:	00 97       	sbiw	r24, 0x00	; 0
     4de:	99 f1       	breq	.+102    	; 0x546 <__stack+0x47>
     4e0:	8b c0       	rjmp	.+278    	; 0x5f8 <__stack+0xf9>
     4e2:	88 8d       	ldd	r24, Y+24	; 0x18
     4e4:	99 8d       	ldd	r25, Y+25	; 0x19
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	91 05       	cpc	r25, r1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <CAN_test+0x7c>
     4ec:	3e c0       	rjmp	.+124    	; 0x56a <__stack+0x6b>
     4ee:	88 8d       	ldd	r24, Y+24	; 0x18
     4f0:	99 8d       	ldd	r25, Y+25	; 0x19
     4f2:	83 30       	cpi	r24, 0x03	; 3
     4f4:	91 05       	cpc	r25, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <CAN_test+0x88>
     4f8:	41 c0       	rjmp	.+130    	; 0x57c <__stack+0x7d>
     4fa:	7e c0       	rjmp	.+252    	; 0x5f8 <__stack+0xf9>
     4fc:	88 8d       	ldd	r24, Y+24	; 0x18
     4fe:	99 8d       	ldd	r25, Y+25	; 0x19
     500:	87 30       	cpi	r24, 0x07	; 7
     502:	91 05       	cpc	r25, r1
     504:	09 f4       	brne	.+2      	; 0x508 <__stack+0x9>
     506:	5e c0       	rjmp	.+188    	; 0x5c4 <__stack+0xc5>
     508:	88 8d       	ldd	r24, Y+24	; 0x18
     50a:	99 8d       	ldd	r25, Y+25	; 0x19
     50c:	88 30       	cpi	r24, 0x08	; 8
     50e:	91 05       	cpc	r25, r1
     510:	6c f4       	brge	.+26     	; 0x52c <__stack+0x2d>
     512:	88 8d       	ldd	r24, Y+24	; 0x18
     514:	99 8d       	ldd	r25, Y+25	; 0x19
     516:	85 30       	cpi	r24, 0x05	; 5
     518:	91 05       	cpc	r25, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <__stack+0x1f>
     51c:	41 c0       	rjmp	.+130    	; 0x5a0 <__stack+0xa1>
     51e:	88 8d       	ldd	r24, Y+24	; 0x18
     520:	99 8d       	ldd	r25, Y+25	; 0x19
     522:	86 30       	cpi	r24, 0x06	; 6
     524:	91 05       	cpc	r25, r1
     526:	09 f4       	brne	.+2      	; 0x52a <__stack+0x2b>
     528:	44 c0       	rjmp	.+136    	; 0x5b2 <__stack+0xb3>
     52a:	66 c0       	rjmp	.+204    	; 0x5f8 <__stack+0xf9>
     52c:	88 8d       	ldd	r24, Y+24	; 0x18
     52e:	99 8d       	ldd	r25, Y+25	; 0x19
     530:	88 30       	cpi	r24, 0x08	; 8
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <__stack+0x39>
     536:	4f c0       	rjmp	.+158    	; 0x5d6 <__stack+0xd7>
     538:	88 8d       	ldd	r24, Y+24	; 0x18
     53a:	99 8d       	ldd	r25, Y+25	; 0x19
     53c:	89 30       	cpi	r24, 0x09	; 9
     53e:	91 05       	cpc	r25, r1
     540:	09 f4       	brne	.+2      	; 0x544 <__stack+0x45>
     542:	52 c0       	rjmp	.+164    	; 0x5e8 <__stack+0xe9>
     544:	59 c0       	rjmp	.+178    	; 0x5f8 <__stack+0xf9>
			case 0:
				message.data = "0";
     546:	82 e4       	ldi	r24, 0x42	; 66
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	9d 8b       	std	Y+21, r25	; 0x15
     54c:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 0x1F;
     54e:	8f e1       	ldi	r24, 0x1F	; 31
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9a 8b       	std	Y+18, r25	; 0x12
     554:	89 8b       	std	Y+17, r24	; 0x11
     556:	50 c0       	rjmp	.+160    	; 0x5f8 <__stack+0xf9>
				break;
			case 1:
				message.data = "1";
     558:	84 e4       	ldi	r24, 0x44	; 68
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9d 8b       	std	Y+21, r25	; 0x15
     55e:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 0x1E;
     560:	8e e1       	ldi	r24, 0x1E	; 30
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9a 8b       	std	Y+18, r25	; 0x12
     566:	89 8b       	std	Y+17, r24	; 0x11
     568:	47 c0       	rjmp	.+142    	; 0x5f8 <__stack+0xf9>
				break;
			case 2:
				message.data = "2";
     56a:	86 e4       	ldi	r24, 0x46	; 70
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9d 8b       	std	Y+21, r25	; 0x15
     570:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 2;
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9a 8b       	std	Y+18, r25	; 0x12
     578:	89 8b       	std	Y+17, r24	; 0x11
     57a:	3e c0       	rjmp	.+124    	; 0x5f8 <__stack+0xf9>
				break;
			case 3:
				message.data = "3";
     57c:	88 e4       	ldi	r24, 0x48	; 72
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	9d 8b       	std	Y+21, r25	; 0x15
     582:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 3;
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	9a 8b       	std	Y+18, r25	; 0x12
     58a:	89 8b       	std	Y+17, r24	; 0x11
     58c:	35 c0       	rjmp	.+106    	; 0x5f8 <__stack+0xf9>
				break;
			case 4:
				message.data = "4";
     58e:	8a e4       	ldi	r24, 0x4A	; 74
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9d 8b       	std	Y+21, r25	; 0x15
     594:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 4;
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9a 8b       	std	Y+18, r25	; 0x12
     59c:	89 8b       	std	Y+17, r24	; 0x11
     59e:	2c c0       	rjmp	.+88     	; 0x5f8 <__stack+0xf9>
				break;
			case 5:
				message.data = "5";
     5a0:	8c e4       	ldi	r24, 0x4C	; 76
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	9d 8b       	std	Y+21, r25	; 0x15
     5a6:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 5;
     5a8:	85 e0       	ldi	r24, 0x05	; 5
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	9a 8b       	std	Y+18, r25	; 0x12
     5ae:	89 8b       	std	Y+17, r24	; 0x11
     5b0:	23 c0       	rjmp	.+70     	; 0x5f8 <__stack+0xf9>
				break;
			case 6:
				message.data = "6";
     5b2:	8e e4       	ldi	r24, 0x4E	; 78
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9d 8b       	std	Y+21, r25	; 0x15
     5b8:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 6;
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9a 8b       	std	Y+18, r25	; 0x12
     5c0:	89 8b       	std	Y+17, r24	; 0x11
     5c2:	1a c0       	rjmp	.+52     	; 0x5f8 <__stack+0xf9>
				break;
			case 7:
				message.data = "7";
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	9d 8b       	std	Y+21, r25	; 0x15
     5ca:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 7;
     5cc:	87 e0       	ldi	r24, 0x07	; 7
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	9a 8b       	std	Y+18, r25	; 0x12
     5d2:	89 8b       	std	Y+17, r24	; 0x11
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <__stack+0xf9>
				break;
			case 8:
				message.data = "8";
     5d6:	82 e5       	ldi	r24, 0x52	; 82
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	9d 8b       	std	Y+21, r25	; 0x15
     5dc:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 8;
     5de:	88 e0       	ldi	r24, 0x08	; 8
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	9a 8b       	std	Y+18, r25	; 0x12
     5e4:	89 8b       	std	Y+17, r24	; 0x11
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <__stack+0xf9>
				break;
			case 9:
				message.data = "9";
     5e8:	84 e5       	ldi	r24, 0x54	; 84
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	9d 8b       	std	Y+21, r25	; 0x15
     5ee:	8c 8b       	std	Y+20, r24	; 0x14
				message.id = 9;
     5f0:	89 e0       	ldi	r24, 0x09	; 9
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9a 8b       	std	Y+18, r25	; 0x12
     5f6:	89 8b       	std	Y+17, r24	; 0x11
				break;
		}

		// Sending data in CAN bus
		printf("Sending string: %s", message.data);
     5f8:	2c 89       	ldd	r18, Y+20	; 0x14
     5fa:	3d 89       	ldd	r19, Y+21	; 0x15
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <__stack+0xff>
     5fe:	00 d0       	rcall	.+0      	; 0x600 <__stack+0x101>
     600:	ed b7       	in	r30, 0x3d	; 61
     602:	fe b7       	in	r31, 0x3e	; 62
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	86 e5       	ldi	r24, 0x56	; 86
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	80 83       	st	Z, r24
     60e:	33 83       	std	Z+3, r19	; 0x03
     610:	22 83       	std	Z+2, r18	; 0x02
     612:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <printf>
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
		if (CAN_send(message.data, message.id) != 0){
     61e:	4c 89       	ldd	r20, Y+20	; 0x14
     620:	5d 89       	ldd	r21, Y+21	; 0x15
     622:	89 89       	ldd	r24, Y+17	; 0x11
     624:	9a 89       	ldd	r25, Y+18	; 0x12
     626:	9c 01       	movw	r18, r24
     628:	ca 01       	movw	r24, r20
     62a:	b9 01       	movw	r22, r18
     62c:	0e 94 a9 03 	call	0x752	; 0x752 <CAN_send>
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	29 f0       	breq	.+10     	; 0x63e <__stack+0x13f>
			return -1;
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	9f 8b       	std	Y+23, r25	; 0x17
     63a:	8e 8b       	std	Y+22, r24	; 0x16
     63c:	7f c0       	rjmp	.+254    	; 0x73c <__stack+0x23d>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	aa ef       	ldi	r26, 0xFA	; 250
     644:	b3 e4       	ldi	r27, 0x43	; 67
     646:	8b 87       	std	Y+11, r24	; 0x0b
     648:	9c 87       	std	Y+12, r25	; 0x0c
     64a:	ad 87       	std	Y+13, r26	; 0x0d
     64c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     64e:	6b 85       	ldd	r22, Y+11	; 0x0b
     650:	7c 85       	ldd	r23, Y+12	; 0x0c
     652:	8d 85       	ldd	r24, Y+13	; 0x0d
     654:	9e 85       	ldd	r25, Y+14	; 0x0e
     656:	2a e9       	ldi	r18, 0x9A	; 154
     658:	3b e9       	ldi	r19, 0x9B	; 155
     65a:	49 e9       	ldi	r20, 0x99	; 153
     65c:	54 e4       	ldi	r21, 0x44	; 68
     65e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	8f 83       	std	Y+7, r24	; 0x07
     668:	98 87       	std	Y+8, r25	; 0x08
     66a:	a9 87       	std	Y+9, r26	; 0x09
     66c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     66e:	6f 81       	ldd	r22, Y+7	; 0x07
     670:	78 85       	ldd	r23, Y+8	; 0x08
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	9a 85       	ldd	r25, Y+10	; 0x0a
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e8       	ldi	r20, 0x80	; 128
     67c:	5f e3       	ldi	r21, 0x3F	; 63
     67e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__ltsf2>
     682:	88 23       	and	r24, r24
     684:	2c f4       	brge	.+10     	; 0x690 <__stack+0x191>
		__ticks = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	9e 83       	std	Y+6, r25	; 0x06
     68c:	8d 83       	std	Y+5, r24	; 0x05
     68e:	3f c0       	rjmp	.+126    	; 0x70e <__stack+0x20f>
	else if (__tmp > 65535)
     690:	6f 81       	ldd	r22, Y+7	; 0x07
     692:	78 85       	ldd	r23, Y+8	; 0x08
     694:	89 85       	ldd	r24, Y+9	; 0x09
     696:	9a 85       	ldd	r25, Y+10	; 0x0a
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	3f ef       	ldi	r19, 0xFF	; 255
     69c:	4f e7       	ldi	r20, 0x7F	; 127
     69e:	57 e4       	ldi	r21, 0x47	; 71
     6a0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__gtsf2>
     6a4:	18 16       	cp	r1, r24
     6a6:	4c f5       	brge	.+82     	; 0x6fa <__stack+0x1fb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a8:	6b 85       	ldd	r22, Y+11	; 0x0b
     6aa:	7c 85       	ldd	r23, Y+12	; 0x0c
     6ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e2       	ldi	r20, 0x20	; 32
     6b6:	51 e4       	ldi	r21, 0x41	; 65
     6b8:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	9e 83       	std	Y+6, r25	; 0x06
     6ce:	8d 83       	std	Y+5, r24	; 0x05
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <__stack+0x1f1>
     6d2:	8a e7       	ldi	r24, 0x7A	; 122
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9c 83       	std	Y+4, r25	; 0x04
     6d8:	8b 83       	std	Y+3, r24	; 0x03
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <__stack+0x1df>
     6e2:	9c 83       	std	Y+4, r25	; 0x04
     6e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e6:	8d 81       	ldd	r24, Y+5	; 0x05
     6e8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	9e 83       	std	Y+6, r25	; 0x06
     6ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f0:	8d 81       	ldd	r24, Y+5	; 0x05
     6f2:	9e 81       	ldd	r25, Y+6	; 0x06
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	69 f7       	brne	.-38     	; 0x6d2 <__stack+0x1d3>
     6f8:	14 c0       	rjmp	.+40     	; 0x722 <__stack+0x223>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6fa:	6f 81       	ldd	r22, Y+7	; 0x07
     6fc:	78 85       	ldd	r23, Y+8	; 0x08
     6fe:	89 85       	ldd	r24, Y+9	; 0x09
     700:	9a 85       	ldd	r25, Y+10	; 0x0a
     702:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	9e 83       	std	Y+6, r25	; 0x06
     70c:	8d 83       	std	Y+5, r24	; 0x05
     70e:	8d 81       	ldd	r24, Y+5	; 0x05
     710:	9e 81       	ldd	r25, Y+6	; 0x06
     712:	9a 83       	std	Y+2, r25	; 0x02
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <__stack+0x21b>
     71e:	9a 83       	std	Y+2, r25	; 0x02
     720:	89 83       	std	Y+1, r24	; 0x01
	CAN_bit_modify(RXB0CTRL, MASK_RECEIVE_ID_TYPE, ID_TYPE_STANDARD);
	CAN_bit_modify(BFPCTRL, 0x0f, 0xff);
*/


	for(i = 0; i < 10; i++){
     722:	8f 85       	ldd	r24, Y+15	; 0x0f
     724:	98 89       	ldd	r25, Y+16	; 0x10
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	98 8b       	std	Y+16, r25	; 0x10
     72a:	8f 87       	std	Y+15, r24	; 0x0f
     72c:	8f 85       	ldd	r24, Y+15	; 0x0f
     72e:	98 89       	ldd	r25, Y+16	; 0x10
     730:	8a 30       	cpi	r24, 0x0A	; 10
     732:	91 05       	cpc	r25, r1
     734:	0c f4       	brge	.+2      	; 0x738 <__stack+0x239>
     736:	b6 ce       	rjmp	.-660    	; 0x4a4 <CAN_test+0x32>
			return -1;
		}

		_delay_ms(500);
	}
	return 0;
     738:	1f 8a       	std	Y+23, r1	; 0x17
     73a:	1e 8a       	std	Y+22, r1	; 0x16
     73c:	8e 89       	ldd	r24, Y+22	; 0x16
     73e:	9f 89       	ldd	r25, Y+23	; 0x17
}
     740:	69 96       	adiw	r28, 0x19	; 25
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	08 95       	ret

00000752 <CAN_send>:

// Send string using CAN bus
int CAN_send(char* str, int id){
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	2e 97       	sbiw	r28, 0x0e	; 14
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	9a 87       	std	Y+10, r25	; 0x0a
     768:	89 87       	std	Y+9, r24	; 0x09
     76a:	7c 87       	std	Y+12, r23	; 0x0c
     76c:	6b 87       	std	Y+11, r22	; 0x0b
	
	unsigned int part, i;
	int done = 0;
     76e:	1c 82       	std	Y+4, r1	; 0x04
     770:	1b 82       	std	Y+3, r1	; 0x03

	char *messg = "\0\0\0\0\0\0\0";
     772:	89 e6       	ldi	r24, 0x69	; 105
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	9a 83       	std	Y+2, r25	; 0x02
     778:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < 8; i++){
     77a:	1e 82       	std	Y+6, r1	; 0x06
     77c:	1d 82       	std	Y+5, r1	; 0x05
     77e:	1f c0       	rjmp	.+62     	; 0x7be <CAN_send+0x6c>
		messg[i] = str[i];
     780:	29 81       	ldd	r18, Y+1	; 0x01
     782:	3a 81       	ldd	r19, Y+2	; 0x02
     784:	8d 81       	ldd	r24, Y+5	; 0x05
     786:	9e 81       	ldd	r25, Y+6	; 0x06
     788:	d9 01       	movw	r26, r18
     78a:	a8 0f       	add	r26, r24
     78c:	b9 1f       	adc	r27, r25
     78e:	29 85       	ldd	r18, Y+9	; 0x09
     790:	3a 85       	ldd	r19, Y+10	; 0x0a
     792:	8d 81       	ldd	r24, Y+5	; 0x05
     794:	9e 81       	ldd	r25, Y+6	; 0x06
     796:	f9 01       	movw	r30, r18
     798:	e8 0f       	add	r30, r24
     79a:	f9 1f       	adc	r31, r25
     79c:	80 81       	ld	r24, Z
     79e:	8c 93       	st	X, r24
		if (messg[i] == '\0') {
     7a0:	29 81       	ldd	r18, Y+1	; 0x01
     7a2:	3a 81       	ldd	r19, Y+2	; 0x02
     7a4:	8d 81       	ldd	r24, Y+5	; 0x05
     7a6:	9e 81       	ldd	r25, Y+6	; 0x06
     7a8:	f9 01       	movw	r30, r18
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	80 81       	ld	r24, Z
     7b0:	88 23       	and	r24, r24
     7b2:	51 f0       	breq	.+20     	; 0x7c8 <CAN_send+0x76>
	
	unsigned int part, i;
	int done = 0;

	char *messg = "\0\0\0\0\0\0\0";
	for(i = 0; i < 8; i++){
     7b4:	8d 81       	ldd	r24, Y+5	; 0x05
     7b6:	9e 81       	ldd	r25, Y+6	; 0x06
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	9e 83       	std	Y+6, r25	; 0x06
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	9e 81       	ldd	r25, Y+6	; 0x06
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	91 05       	cpc	r25, r1
     7c6:	e0 f2       	brcs	.-72     	; 0x780 <CAN_send+0x2e>
		if (messg[i] == '\0') {
			break;
		}
	}

	cli(); // disable interrupts, to protect SPI-communication 
     7c8:	f8 94       	cli

	CAN_bit_modify(TXB0SIDH, 0xFF, (id>>3)); //transmit buffer 0 id high
     7ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     7cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ce:	95 95       	asr	r25
     7d0:	87 95       	ror	r24
     7d2:	95 95       	asr	r25
     7d4:	87 95       	ror	r24
     7d6:	95 95       	asr	r25
     7d8:	87 95       	ror	r24
     7da:	98 2f       	mov	r25, r24
     7dc:	81 e3       	ldi	r24, 0x31	; 49
     7de:	6f ef       	ldi	r22, 0xFF	; 255
     7e0:	49 2f       	mov	r20, r25
     7e2:	0e 94 87 07 	call	0xf0e	; 0xf0e <CAN_bit_modify>
	CAN_bit_modify(TXB0SIDL, MASK_SIDL, (id<<5));//transmit buffer 0 id low
     7e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e8:	98 2f       	mov	r25, r24
     7ea:	92 95       	swap	r25
     7ec:	99 0f       	add	r25, r25
     7ee:	90 7e       	andi	r25, 0xE0	; 224
     7f0:	82 e3       	ldi	r24, 0x32	; 50
     7f2:	60 ee       	ldi	r22, 0xE0	; 224
     7f4:	49 2f       	mov	r20, r25
     7f6:	0e 94 87 07 	call	0xf0e	; 0xf0e <CAN_bit_modify>
	//CAN_write((char)messg.length, TXB0DLC);	// data length
	CAN_write((char)8, TXB0DLC);	// data length
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	65 e3       	ldi	r22, 0x35	; 53
     7fe:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CAN_write>
	CAN_load_tx(messg, 0); //load transmit buffer from channel 0
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <CAN_load_tx>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 39 07 	call	0xe72	; 0xe72 <CAN_rts>

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     812:	1e 82       	std	Y+6, r1	; 0x06
     814:	1d 82       	std	Y+5, r1	; 0x05
     816:	0d c0       	rjmp	.+26     	; 0x832 <CAN_send+0xe0>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
     818:	0e 94 5d 07 	call	0xeba	; 0xeba <CAN_read_status>
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	84 70       	andi	r24, 0x04	; 4
     822:	90 70       	andi	r25, 0x00	; 0
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	59 f0       	breq	.+22     	; 0x83e <CAN_send+0xec>
	//printf("\n\n%s\n\n", messg.data);
	//_delay_ms(1);
	CAN_rts(0); //request to send

	//wait for send OK ()
	for(i = 0; i < 0xffff; i++){
     828:	8d 81       	ldd	r24, Y+5	; 0x05
     82a:	9e 81       	ldd	r25, Y+6	; 0x06
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	9e 83       	std	Y+6, r25	; 0x06
     830:	8d 83       	std	Y+5, r24	; 0x05
     832:	8d 81       	ldd	r24, Y+5	; 0x05
     834:	9e 81       	ldd	r25, Y+6	; 0x06
     836:	2f ef       	ldi	r18, 0xFF	; 255
     838:	8f 3f       	cpi	r24, 0xFF	; 255
     83a:	92 07       	cpc	r25, r18
     83c:	69 f7       	brne	.-38     	; 0x818 <CAN_send+0xc6>
		if((CAN_read_status() & MASK_TXREQ0) == 0) break;
	}
	sei(); // enable interrupts again
     83e:	78 94       	sei
	if(i == 0xffff) return -1;
     840:	8d 81       	ldd	r24, Y+5	; 0x05
     842:	9e 81       	ldd	r25, Y+6	; 0x06
     844:	2f ef       	ldi	r18, 0xFF	; 255
     846:	8f 3f       	cpi	r24, 0xFF	; 255
     848:	92 07       	cpc	r25, r18
     84a:	29 f4       	brne	.+10     	; 0x856 <CAN_send+0x104>
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	9e 87       	std	Y+14, r25	; 0x0e
     852:	8d 87       	std	Y+13, r24	; 0x0d
     854:	02 c0       	rjmp	.+4      	; 0x85a <CAN_send+0x108>
			if(i == 0xffff) return -1;
		}

		if(str[i] == '\0') break;
*/
	return 0;
     856:	1e 86       	std	Y+14, r1	; 0x0e
     858:	1d 86       	std	Y+13, r1	; 0x0d
     85a:	8d 85       	ldd	r24, Y+13	; 0x0d
     85c:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     85e:	2e 96       	adiw	r28, 0x0e	; 14
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <CAN_receive>:

// Recieve string from CAN recieve buffer
int CAN_receive(CAN_message* msg, int rx){
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	00 d0       	rcall	.+0      	; 0x876 <CAN_receive+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <CAN_receive+0x8>
     878:	00 d0       	rcall	.+0      	; 0x87a <CAN_receive+0xa>
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	7c 83       	std	Y+4, r23	; 0x04
     884:	6b 83       	std	Y+3, r22	; 0x03
	//FILHIT to check message type
	
	while((CAN_read_status() & MASK_CANINTF_RX0IF+2*rx) == 0); // loop until data received
     886:	0e 94 5d 07 	call	0xeba	; 0xeba <CAN_read_status>
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	82 23       	and	r24, r18
     89a:	93 23       	and	r25, r19
     89c:	00 97       	sbiw	r24, 0x00	; 0
     89e:	99 f3       	breq	.-26     	; 0x886 <CAN_receive+0x16>

	if (rx == 1 && ((uint8_t)CAN_rx_status & (uint8_t)0b10000000))
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	91 05       	cpc	r25, r1
     8a8:	49 f4       	brne	.+18     	; 0x8bc <CAN_receive+0x4c>
     8aa:	82 e7       	ldi	r24, 0x72	; 114
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	88 23       	and	r24, r24
     8b0:	2c f4       	brge	.+10     	; 0x8bc <CAN_receive+0x4c>
		return -1;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
     8b6:	9e 83       	std	Y+6, r25	; 0x06
     8b8:	8d 83       	std	Y+5, r24	; 0x05
     8ba:	08 c0       	rjmp	.+16     	; 0x8cc <CAN_receive+0x5c>

	CAN_read_rx(msg, rx);
     8bc:	2b 81       	ldd	r18, Y+3	; 0x03
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	62 2f       	mov	r22, r18
     8c4:	0e 94 90 06 	call	0xd20	; 0xd20 <CAN_read_rx>
	return 0;
     8c8:	1e 82       	std	Y+6, r1	; 0x06
     8ca:	1d 82       	std	Y+5, r1	; 0x05
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	9e 81       	ldd	r25, Y+6	; 0x06

}
     8d0:	26 96       	adiw	r28, 0x06	; 6
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <CAN_init_interrupt>:
	GICR = GICR | (1<<INT0);
	sei();
}*/


void CAN_init_interrupt(){
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
//interrupt init
	PORTD = PORTD | 0b00001100;
     8ea:	a2 e3       	ldi	r26, 0x32	; 50
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e2 e3       	ldi	r30, 0x32	; 50
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	8c 60       	ori	r24, 0x0C	; 12
     8f6:	8c 93       	st	X, r24
	DDRD = DDRD & 	0b11110011;
     8f8:	a1 e3       	ldi	r26, 0x31	; 49
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e1 e3       	ldi	r30, 0x31	; 49
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	83 7f       	andi	r24, 0xF3	; 243
     904:	8c 93       	st	X, r24
	MCUCR = MCUCR | (0<<ISC01) | (0<<ISC00) | (0<<ISC11) | (0<<ISC10);
     906:	a5 e5       	ldi	r26, 0x55	; 85
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e5 e5       	ldi	r30, 0x55	; 85
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8c 93       	st	X, r24
	GICR = GICR | (1<<INT0) | (1<<INT1);
     912:	ab e5       	ldi	r26, 0x5B	; 91
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	eb e5       	ldi	r30, 0x5B	; 91
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	80 6c       	ori	r24, 0xC0	; 192
     91e:	8c 93       	st	X, r24
	sei();
     920:	78 94       	sei
}
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <__vector_1>:


SIGNAL(SIG_INTERRUPT0) {
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	4f 93       	push	r20
     938:	5f 93       	push	r21
     93a:	6f 93       	push	r22
     93c:	7f 93       	push	r23
     93e:	8f 93       	push	r24
     940:	9f 93       	push	r25
     942:	af 93       	push	r26
     944:	bf 93       	push	r27
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <__vector_1+0x28>
     950:	00 d0       	rcall	.+0      	; 0x952 <__vector_1+0x2a>
     952:	0f 92       	push	r0
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     958:	81 e7       	ldi	r24, 0x71	; 113
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	9d 83       	std	Y+5, r25	; 0x05
     95e:	8c 83       	std	Y+4, r24	; 0x04

    if(CAN_receive(&received, 0) == 0)
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	0e 94 38 04 	call	0x870	; 0x870 <CAN_receive>
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	99 f4       	brne	.+38     	; 0x996 <__vector_1+0x6e>
		printf("Received interrupt0: %s\n", received.data);
     970:	2c 81       	ldd	r18, Y+4	; 0x04
     972:	3d 81       	ldd	r19, Y+5	; 0x05
     974:	00 d0       	rcall	.+0      	; 0x976 <__vector_1+0x4e>
     976:	00 d0       	rcall	.+0      	; 0x978 <__vector_1+0x50>
     978:	ed b7       	in	r30, 0x3d	; 61
     97a:	fe b7       	in	r31, 0x3e	; 62
     97c:	31 96       	adiw	r30, 0x01	; 1
     97e:	8a e7       	ldi	r24, 0x7A	; 122
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	80 83       	st	Z, r24
     986:	33 83       	std	Z+3, r19	; 0x03
     988:	22 83       	std	Z+2, r18	; 0x02
     98a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <printf>
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0

}
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_2>:

SIGNAL(SIG_INTERRUPT1) {
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <__vector_2+0x28>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <__vector_2+0x2a>
     9f0:	0f 92       	push	r0
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
		
	CAN_message received;
	received.data = "\0\0\0\0\0\0\0\0";
     9f6:	81 e7       	ldi	r24, 0x71	; 113
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	9d 83       	std	Y+5, r25	; 0x05
     9fc:	8c 83       	std	Y+4, r24	; 0x04

    if(CAN_receive(&received, 1) == 0)
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	0e 94 38 04 	call	0x870	; 0x870 <CAN_receive>
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	99 f4       	brne	.+38     	; 0xa34 <__vector_2+0x6e>
		printf("Received interrupt1: %s\n", received.data);;
     a0e:	2c 81       	ldd	r18, Y+4	; 0x04
     a10:	3d 81       	ldd	r19, Y+5	; 0x05
     a12:	00 d0       	rcall	.+0      	; 0xa14 <__vector_2+0x4e>
     a14:	00 d0       	rcall	.+0      	; 0xa16 <__vector_2+0x50>
     a16:	ed b7       	in	r30, 0x3d	; 61
     a18:	fe b7       	in	r31, 0x3e	; 62
     a1a:	31 96       	adiw	r30, 0x01	; 1
     a1c:	83 e9       	ldi	r24, 0x93	; 147
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	80 83       	st	Z, r24
     a24:	33 83       	std	Z+3, r19	; 0x03
     a26:	22 83       	std	Z+2, r18	; 0x02
     a28:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <printf>
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <butterfly_poll_joystick>:
	

	sei(); //enable interrupts again
}

char butterfly_poll_joystick(){
     a64:	1f 93       	push	r17
	char button;	

	cli(); //disable interrupts to protect SPI-communication
     a66:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     a68:	82 e6       	ldi	r24, 0x62	; 98
     a6a:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>
	SPI_MasterTransmit('.');
     a6e:	8e e2       	ldi	r24, 0x2E	; 46
     a70:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e3       	ldi	r25, 0x30	; 48
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <butterfly_poll_joystick+0x14>
	_delay_ms(10);
	button = SPI_MasterReceive();
     a7c:	0e 94 b9 01 	call	0x372	; 0x372 <SPI_MasterReceive>
     a80:	18 2f       	mov	r17, r24
	SPI_NoSlave();
     a82:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>

	sei(); //enable interrupts again
     a86:	78 94       	sei
	return button;
}
     a88:	81 2f       	mov	r24, r17
     a8a:	1f 91       	pop	r17
     a8c:	08 95       	ret

00000a8e <butterfly_print>:
			}
		}
	}
}

void butterfly_print(char * str){
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	8c 01       	movw	r16, r24
	int i;
	cli(); //disable interrupts to protect SPI-communication
     a98:	f8 94       	cli
	SPI_SelectSlave(SPI_BUTTERFLY);
     a9a:	82 e6       	ldi	r24, 0x62	; 98
     a9c:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
		if (str[i] == '\0') break;
     aa4:	f8 01       	movw	r30, r16
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	80 81       	ld	r24, Z
     aac:	88 23       	and	r24, r24
     aae:	31 f0       	breq	.+12     	; 0xabc <butterfly_print+0x2e>
		SPI_MasterTransmit(str[i]);
     ab0:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>

void butterfly_print(char * str){
	int i;
	cli(); //disable interrupts to protect SPI-communication
	SPI_SelectSlave(SPI_BUTTERFLY);
	for (i = 0; i < TEXTBUFFER_SIZE-1; i++){ 
     ab4:	21 96       	adiw	r28, 0x01	; 1
     ab6:	c8 31       	cpi	r28, 0x18	; 24
     ab8:	d1 05       	cpc	r29, r1
     aba:	a1 f7       	brne	.-24     	; 0xaa4 <butterfly_print+0x16>
		if (str[i] == '\0') break;
		SPI_MasterTransmit(str[i]);
	}
	SPI_MasterTransmit('\0');
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_NoSlave();
     ac2:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
	

	sei(); //enable interrupts again
     ac6:	78 94       	sei
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <start_game>:
	sei(); //enable interrupts again
	return button;
}

void start_game(enum menu_state_enum menu_state){
	switch(menu_state) {
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	69 f0       	breq	.+26     	; 0xaf0 <start_game+0x1e>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	1c f4       	brge	.+6      	; 0xae0 <start_game+0xe>
     ada:	88 23       	and	r24, r24
     adc:	31 f0       	breq	.+12     	; 0xaea <start_game+0x18>
     ade:	08 95       	ret
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	49 f0       	breq	.+18     	; 0xaf6 <start_game+0x24>
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	b9 f4       	brne	.+46     	; 0xb16 <start_game+0x44>
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <start_game+0x2a>
		case START_SP_POINTS: 
			butterfly_print("enspiller poeng");
     aea:	8c ea       	ldi	r24, 0xAC	; 172
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <start_game+0x2e>
			break;
		case START_SP_ETERNAL: 
			butterfly_print("enspiller evig");
     af0:	8c eb       	ldi	r24, 0xBC	; 188
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <start_game+0x2e>
			break;
		case START_MP_POINTS: 	
			butterfly_print("versus poeng");
     af6:	8b ec       	ldi	r24, 0xCB	; 203
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <start_game+0x2e>
			break;
		case START_MP_ETERNAL: 	
			butterfly_print("versus evig");	
     afc:	88 ed       	ldi	r24, 0xD8	; 216
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
     b04:	80 e2       	ldi	r24, 0x20	; 32
     b06:	9e e4       	ldi	r25, 0x4E	; 78
     b08:	2a e7       	ldi	r18, 0x7A	; 122
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	f9 01       	movw	r30, r18
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <start_game+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b14:	d9 f7       	brne	.-10     	; 0xb0c <start_game+0x3a>
     b16:	08 95       	ret

00000b18 <butterfly_joystick_test>:
			}
		}
	}	
}

void butterfly_joystick_test(){
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	00 e3       	ldi	r16, 0x30	; 48
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <butterfly_joystick_test+0xa>
     b20:	01 2f       	mov	r16, r17
	char button = '0',last_button;

	while(1){
		last_button = button;
		
		button = butterfly_poll_joystick();
     b22:	0e 94 32 05 	call	0xa64	; 0xa64 <butterfly_poll_joystick>
     b26:	18 2f       	mov	r17, r24

		if(button != last_button){
     b28:	80 17       	cp	r24, r16
     b2a:	d1 f3       	breq	.-12     	; 0xb20 <butterfly_joystick_test+0x8>
			switch(button) {
     b2c:	85 36       	cpi	r24, 0x65	; 101
     b2e:	c9 f0       	breq	.+50     	; 0xb62 <butterfly_joystick_test+0x4a>
     b30:	86 36       	cpi	r24, 0x66	; 102
     b32:	28 f4       	brcc	.+10     	; 0xb3e <butterfly_joystick_test+0x26>
     b34:	80 33       	cpi	r24, 0x30	; 48
     b36:	c1 f0       	breq	.+48     	; 0xb68 <butterfly_joystick_test+0x50>
     b38:	84 36       	cpi	r24, 0x64	; 100
     b3a:	c9 f4       	brne	.+50     	; 0xb6e <butterfly_joystick_test+0x56>
     b3c:	0f c0       	rjmp	.+30     	; 0xb5c <butterfly_joystick_test+0x44>
     b3e:	82 37       	cpi	r24, 0x72	; 114
     b40:	39 f0       	breq	.+14     	; 0xb50 <butterfly_joystick_test+0x38>
     b42:	85 37       	cpi	r24, 0x75	; 117
     b44:	41 f0       	breq	.+16     	; 0xb56 <butterfly_joystick_test+0x3e>
     b46:	8c 36       	cpi	r24, 0x6C	; 108
     b48:	91 f4       	brne	.+36     	; 0xb6e <butterfly_joystick_test+0x56>
				case 'l': butterfly_print("left");		break;
     b4a:	84 ee       	ldi	r24, 0xE4	; 228
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	11 c0       	rjmp	.+34     	; 0xb72 <butterfly_joystick_test+0x5a>
				case 'r': butterfly_print("right");		break;
     b50:	89 ee       	ldi	r24, 0xE9	; 233
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e c0       	rjmp	.+28     	; 0xb72 <butterfly_joystick_test+0x5a>
				case 'u': butterfly_print("up");		break;
     b56:	8f ee       	ldi	r24, 0xEF	; 239
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0b c0       	rjmp	.+22     	; 0xb72 <butterfly_joystick_test+0x5a>
				case 'd': butterfly_print("down");		break;
     b5c:	82 ef       	ldi	r24, 0xF2	; 242
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <butterfly_joystick_test+0x5a>
				case 'e': butterfly_print("enter");		break;
     b62:	87 ef       	ldi	r24, 0xF7	; 247
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <butterfly_joystick_test+0x5a>
				case '0': butterfly_print("center");	break;
     b68:	8d ef       	ldi	r24, 0xFD	; 253
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <butterfly_joystick_test+0x5a>
				default:  butterfly_print("error");		break;
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
     b76:	d4 cf       	rjmp	.-88     	; 0xb20 <butterfly_joystick_test+0x8>

00000b78 <butterfly_menu>:

char butterfly_poll_joystick(void);

enum menu_state_enum {OVER_THE_TOP = -1, START_SP_POINTS, START_SP_ETERNAL, START_MP_POINTS, START_MP_ETERNAL, BELOW_THE_BOTTOM};

void butterfly_menu(){
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
	enum menu_state_enum menu_state = OVER_THE_TOP;
	char button = '0',last_button;

	butterfly_print("Velkommen");
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
     b92:	1f ef       	ldi	r17, 0xFF	; 255
     b94:	20 e3       	ldi	r18, 0x30	; 48
     b96:	f2 2e       	mov	r15, r18
		last_button = button;
		
		button = butterfly_poll_joystick();

		if(button != last_button){
			printf("state for: %d\n", menu_state);
     b98:	94 e1       	ldi	r25, 0x14	; 20
     b9a:	a9 2e       	mov	r10, r25
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	b9 2e       	mov	r11, r25
				case 'd': menu_state++;				break;
				case 'e': start_game(menu_state);	break;
				case '0': 							continue;
				default:  butterfly_print("error");	break;
			}
			printf("state etter: %d\n", menu_state);
     ba0:	83 e2       	ldi	r24, 0x23	; 35
     ba2:	c8 2e       	mov	r12, r24
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	d8 2e       	mov	r13, r24
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <butterfly_menu+0x36>

void butterfly_menu(){
	enum menu_state_enum menu_state = OVER_THE_TOP;
	char button = '0',last_button;

	butterfly_print("Velkommen");
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	f0 2e       	mov	r15, r16

	while(1){
		last_button = button;
		
		button = butterfly_poll_joystick();
     bae:	0e 94 32 05 	call	0xa64	; 0xa64 <butterfly_poll_joystick>
     bb2:	08 2f       	mov	r16, r24

		if(button != last_button){
     bb4:	8f 15       	cp	r24, r15
     bb6:	d1 f3       	breq	.-12     	; 0xbac <butterfly_menu+0x34>
			printf("state for: %d\n", menu_state);
     bb8:	c1 2f       	mov	r28, r17
     bba:	dd 27       	eor	r29, r29
     bbc:	c7 fd       	sbrc	r28, 7
     bbe:	d0 95       	com	r29
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <butterfly_menu+0x4a>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <butterfly_menu+0x4c>
     bc4:	ed b7       	in	r30, 0x3d	; 61
     bc6:	fe b7       	in	r31, 0x3e	; 62
     bc8:	b2 82       	std	Z+2, r11	; 0x02
     bca:	a1 82       	std	Z+1, r10	; 0x01
     bcc:	d4 83       	std	Z+4, r29	; 0x04
     bce:	c3 83       	std	Z+3, r28	; 0x03
     bd0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <printf>
			switch(button) {
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	05 36       	cpi	r16, 0x65	; 101
     bde:	91 f0       	breq	.+36     	; 0xc04 <butterfly_menu+0x8c>
     be0:	06 36       	cpi	r16, 0x66	; 102
     be2:	28 f4       	brcc	.+10     	; 0xbee <butterfly_menu+0x76>
     be4:	00 33       	cpi	r16, 0x30	; 48
     be6:	11 f3       	breq	.-60     	; 0xbac <butterfly_menu+0x34>
     be8:	04 36       	cpi	r16, 0x64	; 100
     bea:	81 f4       	brne	.+32     	; 0xc0c <butterfly_menu+0x94>
     bec:	09 c0       	rjmp	.+18     	; 0xc00 <butterfly_menu+0x88>
     bee:	02 37       	cpi	r16, 0x72	; 114
     bf0:	e9 f2       	breq	.-70     	; 0xbac <butterfly_menu+0x34>
     bf2:	05 37       	cpi	r16, 0x75	; 117
     bf4:	19 f0       	breq	.+6      	; 0xbfc <butterfly_menu+0x84>
     bf6:	0c 36       	cpi	r16, 0x6C	; 108
     bf8:	49 f4       	brne	.+18     	; 0xc0c <butterfly_menu+0x94>
     bfa:	d8 cf       	rjmp	.-80     	; 0xbac <butterfly_menu+0x34>
				case 'l': 					
				case 'r': 							continue;
				case 'u': menu_state--;				break;
     bfc:	11 50       	subi	r17, 0x01	; 1
     bfe:	0a c0       	rjmp	.+20     	; 0xc14 <butterfly_menu+0x9c>
				case 'd': menu_state++;				break;
     c00:	1f 5f       	subi	r17, 0xFF	; 255
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <butterfly_menu+0x9c>
				case 'e': start_game(menu_state);	break;
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 69 05 	call	0xad2	; 0xad2 <start_game>
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <butterfly_menu+0x9c>
				case '0': 							continue;
				default:  butterfly_print("error");	break;
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
			}
			printf("state etter: %d\n", menu_state);
     c14:	00 d0       	rcall	.+0      	; 0xc16 <butterfly_menu+0x9e>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <butterfly_menu+0xa0>
     c18:	ed b7       	in	r30, 0x3d	; 61
     c1a:	fe b7       	in	r31, 0x3e	; 62
     c1c:	d2 82       	std	Z+2, r13	; 0x02
     c1e:	c1 82       	std	Z+1, r12	; 0x01
     c20:	81 2f       	mov	r24, r17
     c22:	99 27       	eor	r25, r25
     c24:	87 fd       	sbrc	r24, 7
     c26:	90 95       	com	r25
     c28:	94 83       	std	Z+4, r25	; 0x04
     c2a:	83 83       	std	Z+3, r24	; 0x03
     c2c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <printf>
			if (menu_state <= OVER_THE_TOP) menu_state = BELOW_THE_BOTTOM-1;
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	17 fd       	sbrc	r17, 7
     c3a:	1c c0       	rjmp	.+56     	; 0xc74 <butterfly_menu+0xfc>
			if (menu_state >= BELOW_THE_BOTTOM) menu_state = OVER_THE_TOP+1;
     c3c:	14 30       	cpi	r17, 0x04	; 4
     c3e:	6c f4       	brge	.+26     	; 0xc5a <butterfly_menu+0xe2>
			switch(menu_state) {
     c40:	11 30       	cpi	r17, 0x01	; 1
     c42:	81 f0       	breq	.+32     	; 0xc64 <butterfly_menu+0xec>
     c44:	12 30       	cpi	r17, 0x02	; 2
     c46:	1c f4       	brge	.+6      	; 0xc4e <butterfly_menu+0xd6>
     c48:	11 23       	and	r17, r17
     c4a:	39 f0       	breq	.+14     	; 0xc5a <butterfly_menu+0xe2>
     c4c:	ae cf       	rjmp	.-164    	; 0xbaa <butterfly_menu+0x32>
     c4e:	12 30       	cpi	r17, 0x02	; 2
     c50:	61 f0       	breq	.+24     	; 0xc6a <butterfly_menu+0xf2>
     c52:	13 30       	cpi	r17, 0x03	; 3
     c54:	09 f0       	breq	.+2      	; 0xc58 <butterfly_menu+0xe0>
     c56:	a9 cf       	rjmp	.-174    	; 0xbaa <butterfly_menu+0x32>
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <butterfly_menu+0xfc>
				case START_SP_POINTS: 	butterfly_print("1 Start enspiller poeng");		break;
     c5a:	84 e3       	ldi	r24, 0x34	; 52
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
     c62:	a3 cf       	rjmp	.-186    	; 0xbaa <butterfly_menu+0x32>
				case START_SP_ETERNAL: 	butterfly_print("2 Start enspiller evig");		break;
     c64:	8c e4       	ldi	r24, 0x4C	; 76
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <butterfly_menu+0xf6>
				case START_MP_POINTS: 	butterfly_print("3 Start flersp poeng");		break;
     c6a:	83 e6       	ldi	r24, 0x63	; 99
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
     c72:	9c cf       	rjmp	.-200    	; 0xbac <butterfly_menu+0x34>
				case START_MP_ETERNAL: 	butterfly_print("4 Start flersp evig");		break;
     c74:	88 e7       	ldi	r24, 0x78	; 120
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	0e 94 47 05 	call	0xa8e	; 0xa8e <butterfly_print>
     c7c:	13 e0       	ldi	r17, 0x03	; 3
     c7e:	96 cf       	rjmp	.-212    	; 0xbac <butterfly_menu+0x34>

00000c80 <CAN_reset>:
#include "mcp2515.h"
#include "spi.h"

// Reset the CAN chip
void CAN_reset(void){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
	SPI_SelectSlave(SPI_CAN);
     c88:	83 e7       	ldi	r24, 0x73	; 115
     c8a:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>
	SPI_MasterTransmit(INS_RESET);
     c8e:	80 ec       	ldi	r24, 0xC0	; 192
     c90:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_NoSlave();
     c94:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <CAN_read>:

// Read
void CAN_read(char* data, uint8_t address , int data_count){
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	27 97       	sbiw	r28, 0x07	; 7
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	9c 83       	std	Y+4, r25	; 0x04
     cb8:	8b 83       	std	Y+3, r24	; 0x03
     cba:	6d 83       	std	Y+5, r22	; 0x05
     cbc:	5f 83       	std	Y+7, r21	; 0x07
     cbe:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	SPI_SelectSlave(SPI_CAN);	
     cc0:	83 e7       	ldi	r24, 0x73	; 115
     cc2:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ);
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	for(i = 0; i < data_count; i++){
     cd2:	1a 82       	std	Y+2, r1	; 0x02
     cd4:	19 82       	std	Y+1, r1	; 0x01
     cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <CAN_read+0x5a>
		data[i] = SPI_MasterReceive();
     cd8:	29 81       	ldd	r18, Y+1	; 0x01
     cda:	3a 81       	ldd	r19, Y+2	; 0x02
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	8c 01       	movw	r16, r24
     ce2:	02 0f       	add	r16, r18
     ce4:	13 1f       	adc	r17, r19
     ce6:	0e 94 b9 01 	call	0x372	; 0x372 <SPI_MasterReceive>
     cea:	f8 01       	movw	r30, r16
     cec:	80 83       	st	Z, r24
	int i;
	SPI_SelectSlave(SPI_CAN);	

	SPI_MasterTransmit(INS_READ);
	SPI_MasterTransmit((char)address);
	for(i = 0; i < data_count; i++){
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	29 81       	ldd	r18, Y+1	; 0x01
     cfa:	3a 81       	ldd	r19, Y+2	; 0x02
     cfc:	8e 81       	ldd	r24, Y+6	; 0x06
     cfe:	9f 81       	ldd	r25, Y+7	; 0x07
     d00:	28 17       	cp	r18, r24
     d02:	39 07       	cpc	r19, r25
     d04:	4c f3       	brlt	.-46     	; 0xcd8 <CAN_read+0x3a>
		data[i] = SPI_MasterReceive();
	}

	SPI_NoSlave();
     d06:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>

}
     d0a:	27 96       	adiw	r28, 0x07	; 7
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <CAN_read_rx>:

void CAN_read_rx(CAN_message* msg, uint8_t rx){
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <CAN_read_rx+0xa>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <CAN_read_rx+0xc>
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9c 83       	std	Y+4, r25	; 0x04
     d34:	8b 83       	std	Y+3, r24	; 0x03
     d36:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (rx>1)
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	90 f5       	brcc	.+100    	; 0xda2 <CAN_read_rx+0x82>
		return;
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	88 23       	and	r24, r24
     d42:	19 f4       	brne	.+6      	; 0xd4a <CAN_read_rx+0x2a>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <CAN_read_rx+0x34>
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	11 f4       	brne	.+4      	; 0xd54 <CAN_read_rx+0x34>
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI_SelectSlave(SPI_CAN);	
     d54:	83 e7       	ldi	r24, 0x73	; 115
     d56:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	80 69       	ori	r24, 0x90	; 144
     d66:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	for (i = 0; i < 8; i++){
     d6a:	1a 82       	std	Y+2, r1	; 0x02
     d6c:	19 82       	std	Y+1, r1	; 0x01
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <CAN_read_rx+0x74>
		msg->data[i] = SPI_MasterReceive();
     d70:	eb 81       	ldd	r30, Y+3	; 0x03
     d72:	fc 81       	ldd	r31, Y+4	; 0x04
     d74:	23 81       	ldd	r18, Z+3	; 0x03
     d76:	34 81       	ldd	r19, Z+4	; 0x04
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	89 01       	movw	r16, r18
     d7e:	08 0f       	add	r16, r24
     d80:	19 1f       	adc	r17, r25
     d82:	0e 94 b9 01 	call	0x372	; 0x372 <SPI_MasterReceive>
     d86:	f8 01       	movw	r30, r16
     d88:	80 83       	st	Z, r24
	if(rx == 0) rx = 1; //decode rx0 to word for "read from rxb0", standard frame
	else if(rx == 1) rx = 3; //decode rx1 to intruction for "read from rxb1", standard frame
	
	SPI_SelectSlave(SPI_CAN);	
	SPI_MasterTransmit(INS_READ_RX | (rx<<1));
	for (i = 0; i < 8; i++){
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	88 30       	cpi	r24, 0x08	; 8
     d9a:	91 05       	cpc	r25, r1
     d9c:	4c f3       	brlt	.-46     	; 0xd70 <CAN_read_rx+0x50>
		msg->data[i] = SPI_MasterReceive();
	}
	
	SPI_NoSlave();
     d9e:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <CAN_write>:

void CAN_write(char data, uint8_t address){
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <CAN_write+0x6>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <CAN_write+0x8>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	SPI_SelectSlave(SPI_CAN);	
     dc6:	83 e7       	ldi	r24, 0x73	; 115
     dc8:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_WRITE);
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
		SPI_MasterTransmit(data);
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>

	SPI_NoSlave();
     dde:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>

}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <CAN_load_tx>:
//tx = "modul" (3 output "kanaler")
void CAN_load_tx(char* msg, uint8_t tx){
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <CAN_load_tx+0x6>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <CAN_load_tx+0x8>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	if (tx>2)
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	60 f5       	brcc	.+88     	; 0xe62 <CAN_load_tx+0x72>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	8d 83       	std	Y+5, r24	; 0x05
	SPI_SelectSlave(SPI_CAN);
     e1a:	83 e7       	ldi	r24, 0x73	; 115
     e1c:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	80 64       	ori	r24, 0x40	; 64
     e24:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	for(i = 0; i < 8; i++){
     e28:	1a 82       	std	Y+2, r1	; 0x02
     e2a:	19 82       	std	Y+1, r1	; 0x01
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <CAN_load_tx+0x5c>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
     e2e:	29 81       	ldd	r18, Y+1	; 0x01
     e30:	3a 81       	ldd	r19, Y+2	; 0x02
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	fc 01       	movw	r30, r24
     e38:	e2 0f       	add	r30, r18
     e3a:	f3 1f       	adc	r31, r19
     e3c:	80 81       	ld	r24, Z
     e3e:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
		return;
	tx = (tx+1)*2 - 1; //convert to abc-format as explained in table 12-5
	SPI_SelectSlave(SPI_CAN);
	
	SPI_MasterTransmit(INS_LOAD_TX | tx);
	for(i = 0; i < 8; i++){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	91 05       	cpc	r25, r1
     e54:	64 f3       	brlt	.-40     	; 0xe2e <CAN_load_tx+0x3e>
		//printf("%c", data[i]);
		SPI_MasterTransmit(msg[i]);
	}

	SPI_NoSlave();
     e56:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
	printf("\n");
     e5a:	8a e0       	ldi	r24, 0x0A	; 10
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <putchar>
}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <CAN_rts>:

void CAN_rts(uint8_t tx){
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	89 83       	std	Y+1, r24	; 0x01
	if (tx == 0) tx = 1;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	88 23       	and	r24, r24
     e82:	19 f4       	brne	.+6      	; 0xe8a <CAN_rts+0x18>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	0b c0       	rjmp	.+22     	; 0xea0 <CAN_rts+0x2e>
	else if (tx == 1) tx = 2;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	19 f4       	brne	.+6      	; 0xe96 <CAN_rts+0x24>
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <CAN_rts+0x2e>
	else if (tx == 2) tx = 4;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	59 f4       	brne	.+22     	; 0xeb2 <CAN_rts+0x40>
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	89 83       	std	Y+1, r24	; 0x01
	else return;
	
	SPI_SelectSlave(SPI_CAN);
     ea0:	83 e7       	ldi	r24, 0x73	; 115
     ea2:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>
	//printf("Rts: 0x%x\n", (INS_RTS | tx));
	SPI_MasterTransmit(INS_RTS | tx);
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>

	SPI_NoSlave();
     eae:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
}
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <CAN_read_status>:

uint8_t CAN_read_status(void){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	char status;
	SPI_SelectSlave(SPI_CAN);
     ec4:	83 e7       	ldi	r24, 0x73	; 115
     ec6:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_READ_STATUS);
     eca:	80 ea       	ldi	r24, 0xA0	; 160
     ecc:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     ed0:	0e 94 b9 01 	call	0x372	; 0x372 <SPI_MasterReceive>
     ed4:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     ed6:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
	
	return (uint8_t) status;
     eda:	89 81       	ldd	r24, Y+1	; 0x01

}
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <CAN_rx_status>:

uint8_t CAN_rx_status(void){
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62

	char status;
	SPI_SelectSlave(SPI_CAN);
     eee:	83 e7       	ldi	r24, 0x73	; 115
     ef0:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>

	SPI_MasterTransmit(INS_RX_STATUS);
     ef4:	80 eb       	ldi	r24, 0xB0	; 176
     ef6:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	status = SPI_MasterReceive();
     efa:	0e 94 b9 01 	call	0x372	; 0x372 <SPI_MasterReceive>
     efe:	89 83       	std	Y+1, r24	; 0x01

	SPI_NoSlave();
     f00:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
	
	return (uint8_t) status;
     f04:	89 81       	ldd	r24, Y+1	; 0x01

}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <CAN_bit_modify>:

void CAN_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <CAN_bit_modify+0x6>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	6a 83       	std	Y+2, r22	; 0x02
     f1e:	4b 83       	std	Y+3, r20	; 0x03
	SPI_SelectSlave(SPI_CAN);
     f20:	83 e7       	ldi	r24, 0x73	; 115
     f22:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_SelectSlave>


	SPI_MasterTransmit((char)INS_BIT_MODIFY);	
     f26:	85 e0       	ldi	r24, 0x05	; 5
     f28:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_MasterTransmit((char)address);
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_MasterTransmit((char)mask);
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>
	SPI_MasterTransmit((char)data);
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_MasterTransmit>

	SPI_NoSlave();
     f3e:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_NoSlave>
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__fixunssfsi>:
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	7b 01       	movw	r14, r22
     f58:	8c 01       	movw	r16, r24
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	5f e4       	ldi	r21, 0x4F	; 79
     f62:	0e 94 a7 0a 	call	0x154e	; 0x154e <__gesf2>
     f66:	88 23       	and	r24, r24
     f68:	8c f0       	brlt	.+34     	; 0xf8c <__fixunssfsi+0x3e>
     f6a:	c8 01       	movw	r24, r16
     f6c:	b7 01       	movw	r22, r14
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	5f e4       	ldi	r21, 0x4F	; 79
     f76:	0e 94 1f 09 	call	0x123e	; 0x123e <__subsf3>
     f7a:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixsfsi>
     f7e:	9b 01       	movw	r18, r22
     f80:	ac 01       	movw	r20, r24
     f82:	20 50       	subi	r18, 0x00	; 0
     f84:	30 40       	sbci	r19, 0x00	; 0
     f86:	40 40       	sbci	r20, 0x00	; 0
     f88:	50 48       	sbci	r21, 0x80	; 128
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <__fixunssfsi+0x4a>
     f8c:	c8 01       	movw	r24, r16
     f8e:	b7 01       	movw	r22, r14
     f90:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixsfsi>
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	b9 01       	movw	r22, r18
     f9a:	ca 01       	movw	r24, r20
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	08 95       	ret

00000fa6 <_fpadd_parts>:
     fa6:	a0 e0       	ldi	r26, 0x00	; 0
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e9 ed       	ldi	r30, 0xD9	; 217
     fac:	f7 e0       	ldi	r31, 0x07	; 7
     fae:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
     fb2:	dc 01       	movw	r26, r24
     fb4:	2b 01       	movw	r4, r22
     fb6:	fa 01       	movw	r30, r20
     fb8:	9c 91       	ld	r25, X
     fba:	92 30       	cpi	r25, 0x02	; 2
     fbc:	08 f4       	brcc	.+2      	; 0xfc0 <_fpadd_parts+0x1a>
     fbe:	39 c1       	rjmp	.+626    	; 0x1232 <_fpadd_parts+0x28c>
     fc0:	eb 01       	movw	r28, r22
     fc2:	88 81       	ld	r24, Y
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	08 f4       	brcc	.+2      	; 0xfca <_fpadd_parts+0x24>
     fc8:	33 c1       	rjmp	.+614    	; 0x1230 <_fpadd_parts+0x28a>
     fca:	94 30       	cpi	r25, 0x04	; 4
     fcc:	69 f4       	brne	.+26     	; 0xfe8 <_fpadd_parts+0x42>
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <_fpadd_parts+0x2e>
     fd2:	2f c1       	rjmp	.+606    	; 0x1232 <_fpadd_parts+0x28c>
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	9c 91       	ld	r25, X
     fd8:	11 97       	sbiw	r26, 0x01	; 1
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	98 17       	cp	r25, r24
     fde:	09 f4       	brne	.+2      	; 0xfe2 <_fpadd_parts+0x3c>
     fe0:	28 c1       	rjmp	.+592    	; 0x1232 <_fpadd_parts+0x28c>
     fe2:	ac e8       	ldi	r26, 0x8C	; 140
     fe4:	b2 e0       	ldi	r27, 0x02	; 2
     fe6:	25 c1       	rjmp	.+586    	; 0x1232 <_fpadd_parts+0x28c>
     fe8:	84 30       	cpi	r24, 0x04	; 4
     fea:	09 f4       	brne	.+2      	; 0xfee <_fpadd_parts+0x48>
     fec:	21 c1       	rjmp	.+578    	; 0x1230 <_fpadd_parts+0x28a>
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	a9 f4       	brne	.+42     	; 0x101c <_fpadd_parts+0x76>
     ff2:	92 30       	cpi	r25, 0x02	; 2
     ff4:	09 f0       	breq	.+2      	; 0xff8 <_fpadd_parts+0x52>
     ff6:	1d c1       	rjmp	.+570    	; 0x1232 <_fpadd_parts+0x28c>
     ff8:	9a 01       	movw	r18, r20
     ffa:	ad 01       	movw	r20, r26
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	ea 01       	movw	r28, r20
    1000:	09 90       	ld	r0, Y+
    1002:	ae 01       	movw	r20, r28
    1004:	e9 01       	movw	r28, r18
    1006:	09 92       	st	Y+, r0
    1008:	9e 01       	movw	r18, r28
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	c1 f7       	brne	.-16     	; 0xffe <_fpadd_parts+0x58>
    100e:	e2 01       	movw	r28, r4
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	9c 91       	ld	r25, X
    1016:	89 23       	and	r24, r25
    1018:	81 83       	std	Z+1, r24	; 0x01
    101a:	08 c1       	rjmp	.+528    	; 0x122c <_fpadd_parts+0x286>
    101c:	92 30       	cpi	r25, 0x02	; 2
    101e:	09 f4       	brne	.+2      	; 0x1022 <_fpadd_parts+0x7c>
    1020:	07 c1       	rjmp	.+526    	; 0x1230 <_fpadd_parts+0x28a>
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	2d 90       	ld	r2, X+
    1026:	3c 90       	ld	r3, X
    1028:	13 97       	sbiw	r26, 0x03	; 3
    102a:	eb 01       	movw	r28, r22
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	14 96       	adiw	r26, 0x04	; 4
    1032:	ad 90       	ld	r10, X+
    1034:	bd 90       	ld	r11, X+
    1036:	cd 90       	ld	r12, X+
    1038:	dc 90       	ld	r13, X
    103a:	17 97       	sbiw	r26, 0x07	; 7
    103c:	ec 80       	ldd	r14, Y+4	; 0x04
    103e:	fd 80       	ldd	r15, Y+5	; 0x05
    1040:	0e 81       	ldd	r16, Y+6	; 0x06
    1042:	1f 81       	ldd	r17, Y+7	; 0x07
    1044:	91 01       	movw	r18, r2
    1046:	28 1b       	sub	r18, r24
    1048:	39 0b       	sbc	r19, r25
    104a:	b9 01       	movw	r22, r18
    104c:	37 ff       	sbrs	r19, 7
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <_fpadd_parts+0xb2>
    1050:	66 27       	eor	r22, r22
    1052:	77 27       	eor	r23, r23
    1054:	62 1b       	sub	r22, r18
    1056:	73 0b       	sbc	r23, r19
    1058:	60 32       	cpi	r22, 0x20	; 32
    105a:	71 05       	cpc	r23, r1
    105c:	0c f0       	brlt	.+2      	; 0x1060 <_fpadd_parts+0xba>
    105e:	61 c0       	rjmp	.+194    	; 0x1122 <_fpadd_parts+0x17c>
    1060:	12 16       	cp	r1, r18
    1062:	13 06       	cpc	r1, r19
    1064:	6c f5       	brge	.+90     	; 0x10c0 <_fpadd_parts+0x11a>
    1066:	37 01       	movw	r6, r14
    1068:	48 01       	movw	r8, r16
    106a:	06 2e       	mov	r0, r22
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <_fpadd_parts+0xd0>
    106e:	96 94       	lsr	r9
    1070:	87 94       	ror	r8
    1072:	77 94       	ror	r7
    1074:	67 94       	ror	r6
    1076:	0a 94       	dec	r0
    1078:	d2 f7       	brpl	.-12     	; 0x106e <_fpadd_parts+0xc8>
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <_fpadd_parts+0xe6>
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	44 1f       	adc	r20, r20
    108a:	55 1f       	adc	r21, r21
    108c:	6a 95       	dec	r22
    108e:	d2 f7       	brpl	.-12     	; 0x1084 <_fpadd_parts+0xde>
    1090:	21 50       	subi	r18, 0x01	; 1
    1092:	30 40       	sbci	r19, 0x00	; 0
    1094:	40 40       	sbci	r20, 0x00	; 0
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	2e 21       	and	r18, r14
    109a:	3f 21       	and	r19, r15
    109c:	40 23       	and	r20, r16
    109e:	51 23       	and	r21, r17
    10a0:	21 15       	cp	r18, r1
    10a2:	31 05       	cpc	r19, r1
    10a4:	41 05       	cpc	r20, r1
    10a6:	51 05       	cpc	r21, r1
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <_fpadd_parts+0x10c>
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	79 01       	movw	r14, r18
    10b4:	8a 01       	movw	r16, r20
    10b6:	e6 28       	or	r14, r6
    10b8:	f7 28       	or	r15, r7
    10ba:	08 29       	or	r16, r8
    10bc:	19 29       	or	r17, r9
    10be:	3c c0       	rjmp	.+120    	; 0x1138 <_fpadd_parts+0x192>
    10c0:	23 2b       	or	r18, r19
    10c2:	d1 f1       	breq	.+116    	; 0x1138 <_fpadd_parts+0x192>
    10c4:	26 0e       	add	r2, r22
    10c6:	37 1e       	adc	r3, r23
    10c8:	35 01       	movw	r6, r10
    10ca:	46 01       	movw	r8, r12
    10cc:	06 2e       	mov	r0, r22
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <_fpadd_parts+0x132>
    10d0:	96 94       	lsr	r9
    10d2:	87 94       	ror	r8
    10d4:	77 94       	ror	r7
    10d6:	67 94       	ror	r6
    10d8:	0a 94       	dec	r0
    10da:	d2 f7       	brpl	.-12     	; 0x10d0 <_fpadd_parts+0x12a>
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <_fpadd_parts+0x148>
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	44 1f       	adc	r20, r20
    10ec:	55 1f       	adc	r21, r21
    10ee:	6a 95       	dec	r22
    10f0:	d2 f7       	brpl	.-12     	; 0x10e6 <_fpadd_parts+0x140>
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	30 40       	sbci	r19, 0x00	; 0
    10f6:	40 40       	sbci	r20, 0x00	; 0
    10f8:	50 40       	sbci	r21, 0x00	; 0
    10fa:	2a 21       	and	r18, r10
    10fc:	3b 21       	and	r19, r11
    10fe:	4c 21       	and	r20, r12
    1100:	5d 21       	and	r21, r13
    1102:	21 15       	cp	r18, r1
    1104:	31 05       	cpc	r19, r1
    1106:	41 05       	cpc	r20, r1
    1108:	51 05       	cpc	r21, r1
    110a:	21 f0       	breq	.+8      	; 0x1114 <_fpadd_parts+0x16e>
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	59 01       	movw	r10, r18
    1116:	6a 01       	movw	r12, r20
    1118:	a6 28       	or	r10, r6
    111a:	b7 28       	or	r11, r7
    111c:	c8 28       	or	r12, r8
    111e:	d9 28       	or	r13, r9
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <_fpadd_parts+0x192>
    1122:	82 15       	cp	r24, r2
    1124:	93 05       	cpc	r25, r3
    1126:	2c f0       	brlt	.+10     	; 0x1132 <_fpadd_parts+0x18c>
    1128:	1c 01       	movw	r2, r24
    112a:	aa 24       	eor	r10, r10
    112c:	bb 24       	eor	r11, r11
    112e:	65 01       	movw	r12, r10
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <_fpadd_parts+0x192>
    1132:	ee 24       	eor	r14, r14
    1134:	ff 24       	eor	r15, r15
    1136:	87 01       	movw	r16, r14
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	9c 91       	ld	r25, X
    113c:	d2 01       	movw	r26, r4
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	8c 91       	ld	r24, X
    1142:	98 17       	cp	r25, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <_fpadd_parts+0x1a2>
    1146:	45 c0       	rjmp	.+138    	; 0x11d2 <_fpadd_parts+0x22c>
    1148:	99 23       	and	r25, r25
    114a:	39 f0       	breq	.+14     	; 0x115a <_fpadd_parts+0x1b4>
    114c:	a8 01       	movw	r20, r16
    114e:	97 01       	movw	r18, r14
    1150:	2a 19       	sub	r18, r10
    1152:	3b 09       	sbc	r19, r11
    1154:	4c 09       	sbc	r20, r12
    1156:	5d 09       	sbc	r21, r13
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <_fpadd_parts+0x1c0>
    115a:	a6 01       	movw	r20, r12
    115c:	95 01       	movw	r18, r10
    115e:	2e 19       	sub	r18, r14
    1160:	3f 09       	sbc	r19, r15
    1162:	40 0b       	sbc	r20, r16
    1164:	51 0b       	sbc	r21, r17
    1166:	57 fd       	sbrc	r21, 7
    1168:	08 c0       	rjmp	.+16     	; 0x117a <_fpadd_parts+0x1d4>
    116a:	11 82       	std	Z+1, r1	; 0x01
    116c:	33 82       	std	Z+3, r3	; 0x03
    116e:	22 82       	std	Z+2, r2	; 0x02
    1170:	24 83       	std	Z+4, r18	; 0x04
    1172:	35 83       	std	Z+5, r19	; 0x05
    1174:	46 83       	std	Z+6, r20	; 0x06
    1176:	57 83       	std	Z+7, r21	; 0x07
    1178:	1d c0       	rjmp	.+58     	; 0x11b4 <_fpadd_parts+0x20e>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	81 83       	std	Z+1, r24	; 0x01
    117e:	33 82       	std	Z+3, r3	; 0x03
    1180:	22 82       	std	Z+2, r2	; 0x02
    1182:	88 27       	eor	r24, r24
    1184:	99 27       	eor	r25, r25
    1186:	dc 01       	movw	r26, r24
    1188:	82 1b       	sub	r24, r18
    118a:	93 0b       	sbc	r25, r19
    118c:	a4 0b       	sbc	r26, r20
    118e:	b5 0b       	sbc	r27, r21
    1190:	84 83       	std	Z+4, r24	; 0x04
    1192:	95 83       	std	Z+5, r25	; 0x05
    1194:	a6 83       	std	Z+6, r26	; 0x06
    1196:	b7 83       	std	Z+7, r27	; 0x07
    1198:	0d c0       	rjmp	.+26     	; 0x11b4 <_fpadd_parts+0x20e>
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	44 1f       	adc	r20, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	24 83       	std	Z+4, r18	; 0x04
    11a4:	35 83       	std	Z+5, r19	; 0x05
    11a6:	46 83       	std	Z+6, r20	; 0x06
    11a8:	57 83       	std	Z+7, r21	; 0x07
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	93 83       	std	Z+3, r25	; 0x03
    11b2:	82 83       	std	Z+2, r24	; 0x02
    11b4:	24 81       	ldd	r18, Z+4	; 0x04
    11b6:	35 81       	ldd	r19, Z+5	; 0x05
    11b8:	46 81       	ldd	r20, Z+6	; 0x06
    11ba:	57 81       	ldd	r21, Z+7	; 0x07
    11bc:	da 01       	movw	r26, r20
    11be:	c9 01       	movw	r24, r18
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	a1 09       	sbc	r26, r1
    11c4:	b1 09       	sbc	r27, r1
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	af 4f       	sbci	r26, 0xFF	; 255
    11cc:	bf 43       	sbci	r27, 0x3F	; 63
    11ce:	28 f3       	brcs	.-54     	; 0x119a <_fpadd_parts+0x1f4>
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <_fpadd_parts+0x242>
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	33 82       	std	Z+3, r3	; 0x03
    11d6:	22 82       	std	Z+2, r2	; 0x02
    11d8:	ea 0c       	add	r14, r10
    11da:	fb 1c       	adc	r15, r11
    11dc:	0c 1d       	adc	r16, r12
    11de:	1d 1d       	adc	r17, r13
    11e0:	e4 82       	std	Z+4, r14	; 0x04
    11e2:	f5 82       	std	Z+5, r15	; 0x05
    11e4:	06 83       	std	Z+6, r16	; 0x06
    11e6:	17 83       	std	Z+7, r17	; 0x07
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	80 83       	st	Z, r24
    11ec:	24 81       	ldd	r18, Z+4	; 0x04
    11ee:	35 81       	ldd	r19, Z+5	; 0x05
    11f0:	46 81       	ldd	r20, Z+6	; 0x06
    11f2:	57 81       	ldd	r21, Z+7	; 0x07
    11f4:	57 ff       	sbrs	r21, 7
    11f6:	1a c0       	rjmp	.+52     	; 0x122c <_fpadd_parts+0x286>
    11f8:	c9 01       	movw	r24, r18
    11fa:	aa 27       	eor	r26, r26
    11fc:	97 fd       	sbrc	r25, 7
    11fe:	a0 95       	com	r26
    1200:	ba 2f       	mov	r27, r26
    1202:	81 70       	andi	r24, 0x01	; 1
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	a0 70       	andi	r26, 0x00	; 0
    1208:	b0 70       	andi	r27, 0x00	; 0
    120a:	56 95       	lsr	r21
    120c:	47 95       	ror	r20
    120e:	37 95       	ror	r19
    1210:	27 95       	ror	r18
    1212:	82 2b       	or	r24, r18
    1214:	93 2b       	or	r25, r19
    1216:	a4 2b       	or	r26, r20
    1218:	b5 2b       	or	r27, r21
    121a:	84 83       	std	Z+4, r24	; 0x04
    121c:	95 83       	std	Z+5, r25	; 0x05
    121e:	a6 83       	std	Z+6, r26	; 0x06
    1220:	b7 83       	std	Z+7, r27	; 0x07
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	93 83       	std	Z+3, r25	; 0x03
    122a:	82 83       	std	Z+2, r24	; 0x02
    122c:	df 01       	movw	r26, r30
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <_fpadd_parts+0x28c>
    1230:	d2 01       	movw	r26, r4
    1232:	cd 01       	movw	r24, r26
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	e2 e1       	ldi	r30, 0x12	; 18
    123a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

0000123e <__subsf3>:
    123e:	a0 e2       	ldi	r26, 0x20	; 32
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e2       	ldi	r30, 0x25	; 37
    1244:	f9 e0       	ldi	r31, 0x09	; 9
    1246:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
    124a:	69 83       	std	Y+1, r22	; 0x01
    124c:	7a 83       	std	Y+2, r23	; 0x02
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	2d 83       	std	Y+5, r18	; 0x05
    1254:	3e 83       	std	Y+6, r19	; 0x06
    1256:	4f 83       	std	Y+7, r20	; 0x07
    1258:	58 87       	std	Y+8, r21	; 0x08
    125a:	e9 e0       	ldi	r30, 0x09	; 9
    125c:	ee 2e       	mov	r14, r30
    125e:	f1 2c       	mov	r15, r1
    1260:	ec 0e       	add	r14, r28
    1262:	fd 1e       	adc	r15, r29
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	b7 01       	movw	r22, r14
    126a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    126e:	8e 01       	movw	r16, r28
    1270:	0f 5e       	subi	r16, 0xEF	; 239
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	ce 01       	movw	r24, r28
    1276:	05 96       	adiw	r24, 0x05	; 5
    1278:	b8 01       	movw	r22, r16
    127a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    127e:	8a 89       	ldd	r24, Y+18	; 0x12
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	89 27       	eor	r24, r25
    1284:	8a 8b       	std	Y+18, r24	; 0x12
    1286:	c7 01       	movw	r24, r14
    1288:	b8 01       	movw	r22, r16
    128a:	ae 01       	movw	r20, r28
    128c:	47 5e       	subi	r20, 0xE7	; 231
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_fpadd_parts>
    1294:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__pack_f>
    1298:	a0 96       	adiw	r28, 0x20	; 32
    129a:	e6 e0       	ldi	r30, 0x06	; 6
    129c:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000012a0 <__addsf3>:
    12a0:	a0 e2       	ldi	r26, 0x20	; 32
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e6 e5       	ldi	r30, 0x56	; 86
    12a6:	f9 e0       	ldi	r31, 0x09	; 9
    12a8:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
    12ac:	69 83       	std	Y+1, r22	; 0x01
    12ae:	7a 83       	std	Y+2, r23	; 0x02
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	2d 83       	std	Y+5, r18	; 0x05
    12b6:	3e 83       	std	Y+6, r19	; 0x06
    12b8:	4f 83       	std	Y+7, r20	; 0x07
    12ba:	58 87       	std	Y+8, r21	; 0x08
    12bc:	f9 e0       	ldi	r31, 0x09	; 9
    12be:	ef 2e       	mov	r14, r31
    12c0:	f1 2c       	mov	r15, r1
    12c2:	ec 0e       	add	r14, r28
    12c4:	fd 1e       	adc	r15, r29
    12c6:	ce 01       	movw	r24, r28
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	b7 01       	movw	r22, r14
    12cc:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    12d0:	8e 01       	movw	r16, r28
    12d2:	0f 5e       	subi	r16, 0xEF	; 239
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	ce 01       	movw	r24, r28
    12d8:	05 96       	adiw	r24, 0x05	; 5
    12da:	b8 01       	movw	r22, r16
    12dc:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    12e0:	c7 01       	movw	r24, r14
    12e2:	b8 01       	movw	r22, r16
    12e4:	ae 01       	movw	r20, r28
    12e6:	47 5e       	subi	r20, 0xE7	; 231
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_fpadd_parts>
    12ee:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__pack_f>
    12f2:	a0 96       	adiw	r28, 0x20	; 32
    12f4:	e6 e0       	ldi	r30, 0x06	; 6
    12f6:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000012fa <__mulsf3>:
    12fa:	a0 e2       	ldi	r26, 0x20	; 32
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e3 e8       	ldi	r30, 0x83	; 131
    1300:	f9 e0       	ldi	r31, 0x09	; 9
    1302:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
    1306:	69 83       	std	Y+1, r22	; 0x01
    1308:	7a 83       	std	Y+2, r23	; 0x02
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	2d 83       	std	Y+5, r18	; 0x05
    1310:	3e 83       	std	Y+6, r19	; 0x06
    1312:	4f 83       	std	Y+7, r20	; 0x07
    1314:	58 87       	std	Y+8, r21	; 0x08
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	be 01       	movw	r22, r28
    131c:	67 5f       	subi	r22, 0xF7	; 247
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    1324:	ce 01       	movw	r24, r28
    1326:	05 96       	adiw	r24, 0x05	; 5
    1328:	be 01       	movw	r22, r28
    132a:	6f 5e       	subi	r22, 0xEF	; 239
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    1332:	99 85       	ldd	r25, Y+9	; 0x09
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	88 f0       	brcs	.+34     	; 0x135a <__mulsf3+0x60>
    1338:	89 89       	ldd	r24, Y+17	; 0x11
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	c8 f0       	brcs	.+50     	; 0x1370 <__mulsf3+0x76>
    133e:	94 30       	cpi	r25, 0x04	; 4
    1340:	19 f4       	brne	.+6      	; 0x1348 <__mulsf3+0x4e>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	51 f4       	brne	.+20     	; 0x135a <__mulsf3+0x60>
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <__mulsf3+0x56>
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	29 f4       	brne	.+10     	; 0x1356 <__mulsf3+0x5c>
    134c:	92 30       	cpi	r25, 0x02	; 2
    134e:	81 f4       	brne	.+32     	; 0x1370 <__mulsf3+0x76>
    1350:	8c e8       	ldi	r24, 0x8C	; 140
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	c6 c0       	rjmp	.+396    	; 0x14e2 <__mulsf3+0x1e8>
    1356:	92 30       	cpi	r25, 0x02	; 2
    1358:	49 f4       	brne	.+18     	; 0x136c <__mulsf3+0x72>
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	8a 89       	ldd	r24, Y+18	; 0x12
    1360:	98 13       	cpse	r25, r24
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	2a 87       	std	Y+10, r18	; 0x0a
    1366:	ce 01       	movw	r24, r28
    1368:	09 96       	adiw	r24, 0x09	; 9
    136a:	bb c0       	rjmp	.+374    	; 0x14e2 <__mulsf3+0x1e8>
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	49 f4       	brne	.+18     	; 0x1382 <__mulsf3+0x88>
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	9a 85       	ldd	r25, Y+10	; 0x0a
    1374:	8a 89       	ldd	r24, Y+18	; 0x12
    1376:	98 13       	cpse	r25, r24
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	2a 8b       	std	Y+18, r18	; 0x12
    137c:	ce 01       	movw	r24, r28
    137e:	41 96       	adiw	r24, 0x11	; 17
    1380:	b0 c0       	rjmp	.+352    	; 0x14e2 <__mulsf3+0x1e8>
    1382:	2d 84       	ldd	r2, Y+13	; 0x0d
    1384:	3e 84       	ldd	r3, Y+14	; 0x0e
    1386:	4f 84       	ldd	r4, Y+15	; 0x0f
    1388:	58 88       	ldd	r5, Y+16	; 0x10
    138a:	6d 88       	ldd	r6, Y+21	; 0x15
    138c:	7e 88       	ldd	r7, Y+22	; 0x16
    138e:	8f 88       	ldd	r8, Y+23	; 0x17
    1390:	98 8c       	ldd	r9, Y+24	; 0x18
    1392:	ee 24       	eor	r14, r14
    1394:	ff 24       	eor	r15, r15
    1396:	87 01       	movw	r16, r14
    1398:	aa 24       	eor	r10, r10
    139a:	bb 24       	eor	r11, r11
    139c:	65 01       	movw	r12, r10
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	e0 e0       	ldi	r30, 0x00	; 0
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	c1 01       	movw	r24, r2
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	90 70       	andi	r25, 0x00	; 0
    13b0:	89 2b       	or	r24, r25
    13b2:	e9 f0       	breq	.+58     	; 0x13ee <__mulsf3+0xf4>
    13b4:	e6 0c       	add	r14, r6
    13b6:	f7 1c       	adc	r15, r7
    13b8:	08 1d       	adc	r16, r8
    13ba:	19 1d       	adc	r17, r9
    13bc:	9a 01       	movw	r18, r20
    13be:	ab 01       	movw	r20, r22
    13c0:	2a 0d       	add	r18, r10
    13c2:	3b 1d       	adc	r19, r11
    13c4:	4c 1d       	adc	r20, r12
    13c6:	5d 1d       	adc	r21, r13
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e6 14       	cp	r14, r6
    13d2:	f7 04       	cpc	r15, r7
    13d4:	08 05       	cpc	r16, r8
    13d6:	19 05       	cpc	r17, r9
    13d8:	20 f4       	brcc	.+8      	; 0x13e2 <__mulsf3+0xe8>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a0 e0       	ldi	r26, 0x00	; 0
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ba 01       	movw	r22, r20
    13e4:	a9 01       	movw	r20, r18
    13e6:	48 0f       	add	r20, r24
    13e8:	59 1f       	adc	r21, r25
    13ea:	6a 1f       	adc	r22, r26
    13ec:	7b 1f       	adc	r23, r27
    13ee:	aa 0c       	add	r10, r10
    13f0:	bb 1c       	adc	r11, r11
    13f2:	cc 1c       	adc	r12, r12
    13f4:	dd 1c       	adc	r13, r13
    13f6:	97 fe       	sbrs	r9, 7
    13f8:	08 c0       	rjmp	.+16     	; 0x140a <__mulsf3+0x110>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	a8 2a       	or	r10, r24
    1404:	b9 2a       	or	r11, r25
    1406:	ca 2a       	or	r12, r26
    1408:	db 2a       	or	r13, r27
    140a:	31 96       	adiw	r30, 0x01	; 1
    140c:	e0 32       	cpi	r30, 0x20	; 32
    140e:	f1 05       	cpc	r31, r1
    1410:	49 f0       	breq	.+18     	; 0x1424 <__mulsf3+0x12a>
    1412:	66 0c       	add	r6, r6
    1414:	77 1c       	adc	r7, r7
    1416:	88 1c       	adc	r8, r8
    1418:	99 1c       	adc	r9, r9
    141a:	56 94       	lsr	r5
    141c:	47 94       	ror	r4
    141e:	37 94       	ror	r3
    1420:	27 94       	ror	r2
    1422:	c3 cf       	rjmp	.-122    	; 0x13aa <__mulsf3+0xb0>
    1424:	fa 85       	ldd	r31, Y+10	; 0x0a
    1426:	ea 89       	ldd	r30, Y+18	; 0x12
    1428:	2b 89       	ldd	r18, Y+19	; 0x13
    142a:	3c 89       	ldd	r19, Y+20	; 0x14
    142c:	8b 85       	ldd	r24, Y+11	; 0x0b
    142e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1430:	28 0f       	add	r18, r24
    1432:	39 1f       	adc	r19, r25
    1434:	2e 5f       	subi	r18, 0xFE	; 254
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	17 c0       	rjmp	.+46     	; 0x1468 <__mulsf3+0x16e>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	89 2b       	or	r24, r25
    1442:	61 f0       	breq	.+24     	; 0x145c <__mulsf3+0x162>
    1444:	16 95       	lsr	r17
    1446:	07 95       	ror	r16
    1448:	f7 94       	ror	r15
    144a:	e7 94       	ror	r14
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e8       	ldi	r27, 0x80	; 128
    1454:	e8 2a       	or	r14, r24
    1456:	f9 2a       	or	r15, r25
    1458:	0a 2b       	or	r16, r26
    145a:	1b 2b       	or	r17, r27
    145c:	76 95       	lsr	r23
    145e:	67 95       	ror	r22
    1460:	57 95       	ror	r21
    1462:	47 95       	ror	r20
    1464:	2f 5f       	subi	r18, 0xFF	; 255
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	77 fd       	sbrc	r23, 7
    146a:	e7 cf       	rjmp	.-50     	; 0x143a <__mulsf3+0x140>
    146c:	0c c0       	rjmp	.+24     	; 0x1486 <__mulsf3+0x18c>
    146e:	44 0f       	add	r20, r20
    1470:	55 1f       	adc	r21, r21
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	17 fd       	sbrc	r17, 7
    1478:	41 60       	ori	r20, 0x01	; 1
    147a:	ee 0c       	add	r14, r14
    147c:	ff 1c       	adc	r15, r15
    147e:	00 1f       	adc	r16, r16
    1480:	11 1f       	adc	r17, r17
    1482:	21 50       	subi	r18, 0x01	; 1
    1484:	30 40       	sbci	r19, 0x00	; 0
    1486:	40 30       	cpi	r20, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	59 07       	cpc	r21, r25
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	69 07       	cpc	r22, r25
    1490:	90 e4       	ldi	r25, 0x40	; 64
    1492:	79 07       	cpc	r23, r25
    1494:	60 f3       	brcs	.-40     	; 0x146e <__mulsf3+0x174>
    1496:	2b 8f       	std	Y+27, r18	; 0x1b
    1498:	3c 8f       	std	Y+28, r19	; 0x1c
    149a:	db 01       	movw	r26, r22
    149c:	ca 01       	movw	r24, r20
    149e:	8f 77       	andi	r24, 0x7F	; 127
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	a0 70       	andi	r26, 0x00	; 0
    14a4:	b0 70       	andi	r27, 0x00	; 0
    14a6:	80 34       	cpi	r24, 0x40	; 64
    14a8:	91 05       	cpc	r25, r1
    14aa:	a1 05       	cpc	r26, r1
    14ac:	b1 05       	cpc	r27, r1
    14ae:	61 f4       	brne	.+24     	; 0x14c8 <__mulsf3+0x1ce>
    14b0:	47 fd       	sbrc	r20, 7
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <__mulsf3+0x1ce>
    14b4:	e1 14       	cp	r14, r1
    14b6:	f1 04       	cpc	r15, r1
    14b8:	01 05       	cpc	r16, r1
    14ba:	11 05       	cpc	r17, r1
    14bc:	29 f0       	breq	.+10     	; 0x14c8 <__mulsf3+0x1ce>
    14be:	40 5c       	subi	r20, 0xC0	; 192
    14c0:	5f 4f       	sbci	r21, 0xFF	; 255
    14c2:	6f 4f       	sbci	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	40 78       	andi	r20, 0x80	; 128
    14c8:	1a 8e       	std	Y+26, r1	; 0x1a
    14ca:	fe 17       	cp	r31, r30
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <__mulsf3+0x1d8>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	8a 8f       	std	Y+26, r24	; 0x1a
    14d2:	4d 8f       	std	Y+29, r20	; 0x1d
    14d4:	5e 8f       	std	Y+30, r21	; 0x1e
    14d6:	6f 8f       	std	Y+31, r22	; 0x1f
    14d8:	78 a3       	std	Y+32, r23	; 0x20
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	89 8f       	std	Y+25, r24	; 0x19
    14de:	ce 01       	movw	r24, r28
    14e0:	49 96       	adiw	r24, 0x19	; 25
    14e2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__pack_f>
    14e6:	a0 96       	adiw	r28, 0x20	; 32
    14e8:	e2 e1       	ldi	r30, 0x12	; 18
    14ea:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

000014ee <__gtsf2>:
    14ee:	a8 e1       	ldi	r26, 0x18	; 24
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ed e7       	ldi	r30, 0x7D	; 125
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
    14fa:	69 83       	std	Y+1, r22	; 0x01
    14fc:	7a 83       	std	Y+2, r23	; 0x02
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	2d 83       	std	Y+5, r18	; 0x05
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	4f 83       	std	Y+7, r20	; 0x07
    1508:	58 87       	std	Y+8, r21	; 0x08
    150a:	89 e0       	ldi	r24, 0x09	; 9
    150c:	e8 2e       	mov	r14, r24
    150e:	f1 2c       	mov	r15, r1
    1510:	ec 0e       	add	r14, r28
    1512:	fd 1e       	adc	r15, r29
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	b7 01       	movw	r22, r14
    151a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    151e:	8e 01       	movw	r16, r28
    1520:	0f 5e       	subi	r16, 0xEF	; 239
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	ce 01       	movw	r24, r28
    1526:	05 96       	adiw	r24, 0x05	; 5
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	40 f0       	brcs	.+16     	; 0x1544 <__gtsf2+0x56>
    1534:	89 89       	ldd	r24, Y+17	; 0x11
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	28 f0       	brcs	.+10     	; 0x1544 <__gtsf2+0x56>
    153a:	c7 01       	movw	r24, r14
    153c:	b8 01       	movw	r22, r16
    153e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fpcmp_parts_f>
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <__gtsf2+0x58>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	68 96       	adiw	r28, 0x18	; 24
    1548:	e6 e0       	ldi	r30, 0x06	; 6
    154a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000154e <__gesf2>:
    154e:	a8 e1       	ldi	r26, 0x18	; 24
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ed ea       	ldi	r30, 0xAD	; 173
    1554:	fa e0       	ldi	r31, 0x0A	; 10
    1556:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
    155a:	69 83       	std	Y+1, r22	; 0x01
    155c:	7a 83       	std	Y+2, r23	; 0x02
    155e:	8b 83       	std	Y+3, r24	; 0x03
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	2d 83       	std	Y+5, r18	; 0x05
    1564:	3e 83       	std	Y+6, r19	; 0x06
    1566:	4f 83       	std	Y+7, r20	; 0x07
    1568:	58 87       	std	Y+8, r21	; 0x08
    156a:	89 e0       	ldi	r24, 0x09	; 9
    156c:	e8 2e       	mov	r14, r24
    156e:	f1 2c       	mov	r15, r1
    1570:	ec 0e       	add	r14, r28
    1572:	fd 1e       	adc	r15, r29
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	b7 01       	movw	r22, r14
    157a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    157e:	8e 01       	movw	r16, r28
    1580:	0f 5e       	subi	r16, 0xEF	; 239
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	ce 01       	movw	r24, r28
    1586:	05 96       	adiw	r24, 0x05	; 5
    1588:	b8 01       	movw	r22, r16
    158a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	40 f0       	brcs	.+16     	; 0x15a4 <__gesf2+0x56>
    1594:	89 89       	ldd	r24, Y+17	; 0x11
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	28 f0       	brcs	.+10     	; 0x15a4 <__gesf2+0x56>
    159a:	c7 01       	movw	r24, r14
    159c:	b8 01       	movw	r22, r16
    159e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fpcmp_parts_f>
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <__gesf2+0x58>
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	68 96       	adiw	r28, 0x18	; 24
    15a8:	e6 e0       	ldi	r30, 0x06	; 6
    15aa:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000015ae <__ltsf2>:
    15ae:	a8 e1       	ldi	r26, 0x18	; 24
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ed ed       	ldi	r30, 0xDD	; 221
    15b4:	fa e0       	ldi	r31, 0x0A	; 10
    15b6:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
    15ba:	69 83       	std	Y+1, r22	; 0x01
    15bc:	7a 83       	std	Y+2, r23	; 0x02
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	89 e0       	ldi	r24, 0x09	; 9
    15cc:	e8 2e       	mov	r14, r24
    15ce:	f1 2c       	mov	r15, r1
    15d0:	ec 0e       	add	r14, r28
    15d2:	fd 1e       	adc	r15, r29
    15d4:	ce 01       	movw	r24, r28
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	b7 01       	movw	r22, r14
    15da:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5e       	subi	r16, 0xEF	; 239
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	ce 01       	movw	r24, r28
    15e6:	05 96       	adiw	r24, 0x05	; 5
    15e8:	b8 01       	movw	r22, r16
    15ea:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	40 f0       	brcs	.+16     	; 0x1604 <__ltsf2+0x56>
    15f4:	89 89       	ldd	r24, Y+17	; 0x11
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	28 f0       	brcs	.+10     	; 0x1604 <__ltsf2+0x56>
    15fa:	c7 01       	movw	r24, r14
    15fc:	b8 01       	movw	r22, r16
    15fe:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fpcmp_parts_f>
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <__ltsf2+0x58>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	68 96       	adiw	r28, 0x18	; 24
    1608:	e6 e0       	ldi	r30, 0x06	; 6
    160a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000160e <__fixsfsi>:
    160e:	ac e0       	ldi	r26, 0x0C	; 12
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
    161a:	69 83       	std	Y+1, r22	; 0x01
    161c:	7a 83       	std	Y+2, r23	; 0x02
    161e:	8b 83       	std	Y+3, r24	; 0x03
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	be 01       	movw	r22, r28
    1628:	6b 5f       	subi	r22, 0xFB	; 251
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	0e 94 30 0c 	call	0x1860	; 0x1860 <__unpack_f>
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	61 f1       	breq	.+88     	; 0x168e <__fixsfsi+0x80>
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	50 f1       	brcs	.+84     	; 0x168e <__fixsfsi+0x80>
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	21 f4       	brne	.+8      	; 0x1646 <__fixsfsi+0x38>
    163e:	8e 81       	ldd	r24, Y+6	; 0x06
    1640:	88 23       	and	r24, r24
    1642:	51 f1       	breq	.+84     	; 0x1698 <__fixsfsi+0x8a>
    1644:	2e c0       	rjmp	.+92     	; 0x16a2 <__fixsfsi+0x94>
    1646:	2f 81       	ldd	r18, Y+7	; 0x07
    1648:	38 85       	ldd	r19, Y+8	; 0x08
    164a:	37 fd       	sbrc	r19, 7
    164c:	20 c0       	rjmp	.+64     	; 0x168e <__fixsfsi+0x80>
    164e:	6e 81       	ldd	r22, Y+6	; 0x06
    1650:	2f 31       	cpi	r18, 0x1F	; 31
    1652:	31 05       	cpc	r19, r1
    1654:	1c f0       	brlt	.+6      	; 0x165c <__fixsfsi+0x4e>
    1656:	66 23       	and	r22, r22
    1658:	f9 f0       	breq	.+62     	; 0x1698 <__fixsfsi+0x8a>
    165a:	23 c0       	rjmp	.+70     	; 0x16a2 <__fixsfsi+0x94>
    165c:	8e e1       	ldi	r24, 0x1E	; 30
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	82 1b       	sub	r24, r18
    1662:	93 0b       	sbc	r25, r19
    1664:	29 85       	ldd	r18, Y+9	; 0x09
    1666:	3a 85       	ldd	r19, Y+10	; 0x0a
    1668:	4b 85       	ldd	r20, Y+11	; 0x0b
    166a:	5c 85       	ldd	r21, Y+12	; 0x0c
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <__fixsfsi+0x68>
    166e:	56 95       	lsr	r21
    1670:	47 95       	ror	r20
    1672:	37 95       	ror	r19
    1674:	27 95       	ror	r18
    1676:	8a 95       	dec	r24
    1678:	d2 f7       	brpl	.-12     	; 0x166e <__fixsfsi+0x60>
    167a:	66 23       	and	r22, r22
    167c:	b1 f0       	breq	.+44     	; 0x16aa <__fixsfsi+0x9c>
    167e:	50 95       	com	r21
    1680:	40 95       	com	r20
    1682:	30 95       	com	r19
    1684:	21 95       	neg	r18
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	4f 4f       	sbci	r20, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <__fixsfsi+0x9c>
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <__fixsfsi+0x9c>
    1698:	2f ef       	ldi	r18, 0xFF	; 255
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f ef       	ldi	r20, 0xFF	; 255
    169e:	5f e7       	ldi	r21, 0x7F	; 127
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__fixsfsi+0x9c>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e8       	ldi	r21, 0x80	; 128
    16aa:	b9 01       	movw	r22, r18
    16ac:	ca 01       	movw	r24, r20
    16ae:	2c 96       	adiw	r28, 0x0c	; 12
    16b0:	e2 e0       	ldi	r30, 0x02	; 2
    16b2:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000016b6 <__pack_f>:
    16b6:	df 92       	push	r13
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	fc 01       	movw	r30, r24
    16c2:	e4 80       	ldd	r14, Z+4	; 0x04
    16c4:	f5 80       	ldd	r15, Z+5	; 0x05
    16c6:	06 81       	ldd	r16, Z+6	; 0x06
    16c8:	17 81       	ldd	r17, Z+7	; 0x07
    16ca:	d1 80       	ldd	r13, Z+1	; 0x01
    16cc:	80 81       	ld	r24, Z
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	48 f4       	brcc	.+18     	; 0x16e4 <__pack_f+0x2e>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e1       	ldi	r26, 0x10	; 16
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e8 2a       	or	r14, r24
    16dc:	f9 2a       	or	r15, r25
    16de:	0a 2b       	or	r16, r26
    16e0:	1b 2b       	or	r17, r27
    16e2:	a5 c0       	rjmp	.+330    	; 0x182e <__pack_f+0x178>
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	09 f4       	brne	.+2      	; 0x16ea <__pack_f+0x34>
    16e8:	9f c0       	rjmp	.+318    	; 0x1828 <__pack_f+0x172>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <__pack_f+0x40>
    16ee:	ee 24       	eor	r14, r14
    16f0:	ff 24       	eor	r15, r15
    16f2:	87 01       	movw	r16, r14
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <__pack_f+0x4a>
    16f6:	e1 14       	cp	r14, r1
    16f8:	f1 04       	cpc	r15, r1
    16fa:	01 05       	cpc	r16, r1
    16fc:	11 05       	cpc	r17, r1
    16fe:	19 f4       	brne	.+6      	; 0x1706 <__pack_f+0x50>
    1700:	e0 e0       	ldi	r30, 0x00	; 0
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	96 c0       	rjmp	.+300    	; 0x1832 <__pack_f+0x17c>
    1706:	62 81       	ldd	r22, Z+2	; 0x02
    1708:	73 81       	ldd	r23, Z+3	; 0x03
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	62 38       	cpi	r22, 0x82	; 130
    170e:	79 07       	cpc	r23, r25
    1710:	0c f0       	brlt	.+2      	; 0x1714 <__pack_f+0x5e>
    1712:	5b c0       	rjmp	.+182    	; 0x17ca <__pack_f+0x114>
    1714:	22 e8       	ldi	r18, 0x82	; 130
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	26 1b       	sub	r18, r22
    171a:	37 0b       	sbc	r19, r23
    171c:	2a 31       	cpi	r18, 0x1A	; 26
    171e:	31 05       	cpc	r19, r1
    1720:	2c f0       	brlt	.+10     	; 0x172c <__pack_f+0x76>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	2a c0       	rjmp	.+84     	; 0x1780 <__pack_f+0xca>
    172c:	b8 01       	movw	r22, r16
    172e:	a7 01       	movw	r20, r14
    1730:	02 2e       	mov	r0, r18
    1732:	04 c0       	rjmp	.+8      	; 0x173c <__pack_f+0x86>
    1734:	76 95       	lsr	r23
    1736:	67 95       	ror	r22
    1738:	57 95       	ror	r21
    173a:	47 95       	ror	r20
    173c:	0a 94       	dec	r0
    173e:	d2 f7       	brpl	.-12     	; 0x1734 <__pack_f+0x7e>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__pack_f+0x9c>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	aa 1f       	adc	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	2a 95       	dec	r18
    1754:	d2 f7       	brpl	.-12     	; 0x174a <__pack_f+0x94>
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	a1 09       	sbc	r26, r1
    175a:	b1 09       	sbc	r27, r1
    175c:	8e 21       	and	r24, r14
    175e:	9f 21       	and	r25, r15
    1760:	a0 23       	and	r26, r16
    1762:	b1 23       	and	r27, r17
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	a1 05       	cpc	r26, r1
    1768:	b1 05       	cpc	r27, r1
    176a:	21 f0       	breq	.+8      	; 0x1774 <__pack_f+0xbe>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	9a 01       	movw	r18, r20
    1776:	ab 01       	movw	r20, r22
    1778:	28 2b       	or	r18, r24
    177a:	39 2b       	or	r19, r25
    177c:	4a 2b       	or	r20, r26
    177e:	5b 2b       	or	r21, r27
    1780:	da 01       	movw	r26, r20
    1782:	c9 01       	movw	r24, r18
    1784:	8f 77       	andi	r24, 0x7F	; 127
    1786:	90 70       	andi	r25, 0x00	; 0
    1788:	a0 70       	andi	r26, 0x00	; 0
    178a:	b0 70       	andi	r27, 0x00	; 0
    178c:	80 34       	cpi	r24, 0x40	; 64
    178e:	91 05       	cpc	r25, r1
    1790:	a1 05       	cpc	r26, r1
    1792:	b1 05       	cpc	r27, r1
    1794:	39 f4       	brne	.+14     	; 0x17a4 <__pack_f+0xee>
    1796:	27 ff       	sbrs	r18, 7
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <__pack_f+0xf6>
    179a:	20 5c       	subi	r18, 0xC0	; 192
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	4f 4f       	sbci	r20, 0xFF	; 255
    17a0:	5f 4f       	sbci	r21, 0xFF	; 255
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <__pack_f+0xf6>
    17a4:	21 5c       	subi	r18, 0xC1	; 193
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	4f 4f       	sbci	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	e0 e0       	ldi	r30, 0x00	; 0
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	20 30       	cpi	r18, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	3a 07       	cpc	r19, r26
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	4a 07       	cpc	r20, r26
    17ba:	a0 e4       	ldi	r26, 0x40	; 64
    17bc:	5a 07       	cpc	r21, r26
    17be:	10 f0       	brcs	.+4      	; 0x17c4 <__pack_f+0x10e>
    17c0:	e1 e0       	ldi	r30, 0x01	; 1
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	79 01       	movw	r14, r18
    17c6:	8a 01       	movw	r16, r20
    17c8:	27 c0       	rjmp	.+78     	; 0x1818 <__pack_f+0x162>
    17ca:	60 38       	cpi	r22, 0x80	; 128
    17cc:	71 05       	cpc	r23, r1
    17ce:	64 f5       	brge	.+88     	; 0x1828 <__pack_f+0x172>
    17d0:	fb 01       	movw	r30, r22
    17d2:	e1 58       	subi	r30, 0x81	; 129
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	d8 01       	movw	r26, r16
    17d8:	c7 01       	movw	r24, r14
    17da:	8f 77       	andi	r24, 0x7F	; 127
    17dc:	90 70       	andi	r25, 0x00	; 0
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	80 34       	cpi	r24, 0x40	; 64
    17e4:	91 05       	cpc	r25, r1
    17e6:	a1 05       	cpc	r26, r1
    17e8:	b1 05       	cpc	r27, r1
    17ea:	39 f4       	brne	.+14     	; 0x17fa <__pack_f+0x144>
    17ec:	e7 fe       	sbrs	r14, 7
    17ee:	0d c0       	rjmp	.+26     	; 0x180a <__pack_f+0x154>
    17f0:	80 e4       	ldi	r24, 0x40	; 64
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <__pack_f+0x14c>
    17fa:	8f e3       	ldi	r24, 0x3F	; 63
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e8 0e       	add	r14, r24
    1804:	f9 1e       	adc	r15, r25
    1806:	0a 1f       	adc	r16, r26
    1808:	1b 1f       	adc	r17, r27
    180a:	17 ff       	sbrs	r17, 7
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <__pack_f+0x162>
    180e:	16 95       	lsr	r17
    1810:	07 95       	ror	r16
    1812:	f7 94       	ror	r15
    1814:	e7 94       	ror	r14
    1816:	31 96       	adiw	r30, 0x01	; 1
    1818:	87 e0       	ldi	r24, 0x07	; 7
    181a:	16 95       	lsr	r17
    181c:	07 95       	ror	r16
    181e:	f7 94       	ror	r15
    1820:	e7 94       	ror	r14
    1822:	8a 95       	dec	r24
    1824:	d1 f7       	brne	.-12     	; 0x181a <__pack_f+0x164>
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <__pack_f+0x17c>
    1828:	ee 24       	eor	r14, r14
    182a:	ff 24       	eor	r15, r15
    182c:	87 01       	movw	r16, r14
    182e:	ef ef       	ldi	r30, 0xFF	; 255
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	6e 2f       	mov	r22, r30
    1834:	67 95       	ror	r22
    1836:	66 27       	eor	r22, r22
    1838:	67 95       	ror	r22
    183a:	90 2f       	mov	r25, r16
    183c:	9f 77       	andi	r25, 0x7F	; 127
    183e:	d7 94       	ror	r13
    1840:	dd 24       	eor	r13, r13
    1842:	d7 94       	ror	r13
    1844:	8e 2f       	mov	r24, r30
    1846:	86 95       	lsr	r24
    1848:	49 2f       	mov	r20, r25
    184a:	46 2b       	or	r20, r22
    184c:	58 2f       	mov	r21, r24
    184e:	5d 29       	or	r21, r13
    1850:	b7 01       	movw	r22, r14
    1852:	ca 01       	movw	r24, r20
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	08 95       	ret

00001860 <__unpack_f>:
    1860:	fc 01       	movw	r30, r24
    1862:	db 01       	movw	r26, r22
    1864:	40 81       	ld	r20, Z
    1866:	51 81       	ldd	r21, Z+1	; 0x01
    1868:	22 81       	ldd	r18, Z+2	; 0x02
    186a:	62 2f       	mov	r22, r18
    186c:	6f 77       	andi	r22, 0x7F	; 127
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	22 1f       	adc	r18, r18
    1872:	22 27       	eor	r18, r18
    1874:	22 1f       	adc	r18, r18
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	89 2f       	mov	r24, r25
    187a:	88 0f       	add	r24, r24
    187c:	82 2b       	or	r24, r18
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	99 1f       	adc	r25, r25
    1884:	99 27       	eor	r25, r25
    1886:	99 1f       	adc	r25, r25
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	9c 93       	st	X, r25
    188c:	11 97       	sbiw	r26, 0x01	; 1
    188e:	21 15       	cp	r18, r1
    1890:	31 05       	cpc	r19, r1
    1892:	a9 f5       	brne	.+106    	; 0x18fe <__unpack_f+0x9e>
    1894:	41 15       	cp	r20, r1
    1896:	51 05       	cpc	r21, r1
    1898:	61 05       	cpc	r22, r1
    189a:	71 05       	cpc	r23, r1
    189c:	11 f4       	brne	.+4      	; 0x18a2 <__unpack_f+0x42>
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	37 c0       	rjmp	.+110    	; 0x1910 <__unpack_f+0xb0>
    18a2:	82 e8       	ldi	r24, 0x82	; 130
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
    18a6:	13 96       	adiw	r26, 0x03	; 3
    18a8:	9c 93       	st	X, r25
    18aa:	8e 93       	st	-X, r24
    18ac:	12 97       	sbiw	r26, 0x02	; 2
    18ae:	9a 01       	movw	r18, r20
    18b0:	ab 01       	movw	r20, r22
    18b2:	67 e0       	ldi	r22, 0x07	; 7
    18b4:	22 0f       	add	r18, r18
    18b6:	33 1f       	adc	r19, r19
    18b8:	44 1f       	adc	r20, r20
    18ba:	55 1f       	adc	r21, r21
    18bc:	6a 95       	dec	r22
    18be:	d1 f7       	brne	.-12     	; 0x18b4 <__unpack_f+0x54>
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	8c 93       	st	X, r24
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <__unpack_f+0x80>
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	44 1f       	adc	r20, r20
    18cc:	55 1f       	adc	r21, r21
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	8d 91       	ld	r24, X+
    18d2:	9c 91       	ld	r25, X
    18d4:	13 97       	sbiw	r26, 0x03	; 3
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	13 96       	adiw	r26, 0x03	; 3
    18da:	9c 93       	st	X, r25
    18dc:	8e 93       	st	-X, r24
    18de:	12 97       	sbiw	r26, 0x02	; 2
    18e0:	20 30       	cpi	r18, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	38 07       	cpc	r19, r24
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	48 07       	cpc	r20, r24
    18ea:	80 e4       	ldi	r24, 0x40	; 64
    18ec:	58 07       	cpc	r21, r24
    18ee:	58 f3       	brcs	.-42     	; 0x18c6 <__unpack_f+0x66>
    18f0:	14 96       	adiw	r26, 0x04	; 4
    18f2:	2d 93       	st	X+, r18
    18f4:	3d 93       	st	X+, r19
    18f6:	4d 93       	st	X+, r20
    18f8:	5c 93       	st	X, r21
    18fa:	17 97       	sbiw	r26, 0x07	; 7
    18fc:	08 95       	ret
    18fe:	2f 3f       	cpi	r18, 0xFF	; 255
    1900:	31 05       	cpc	r19, r1
    1902:	79 f4       	brne	.+30     	; 0x1922 <__unpack_f+0xc2>
    1904:	41 15       	cp	r20, r1
    1906:	51 05       	cpc	r21, r1
    1908:	61 05       	cpc	r22, r1
    190a:	71 05       	cpc	r23, r1
    190c:	19 f4       	brne	.+6      	; 0x1914 <__unpack_f+0xb4>
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	8c 93       	st	X, r24
    1912:	08 95       	ret
    1914:	64 ff       	sbrs	r22, 4
    1916:	03 c0       	rjmp	.+6      	; 0x191e <__unpack_f+0xbe>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	8c 93       	st	X, r24
    191c:	12 c0       	rjmp	.+36     	; 0x1942 <__unpack_f+0xe2>
    191e:	1c 92       	st	X, r1
    1920:	10 c0       	rjmp	.+32     	; 0x1942 <__unpack_f+0xe2>
    1922:	2f 57       	subi	r18, 0x7F	; 127
    1924:	30 40       	sbci	r19, 0x00	; 0
    1926:	13 96       	adiw	r26, 0x03	; 3
    1928:	3c 93       	st	X, r19
    192a:	2e 93       	st	-X, r18
    192c:	12 97       	sbiw	r26, 0x02	; 2
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	8c 93       	st	X, r24
    1932:	87 e0       	ldi	r24, 0x07	; 7
    1934:	44 0f       	add	r20, r20
    1936:	55 1f       	adc	r21, r21
    1938:	66 1f       	adc	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	8a 95       	dec	r24
    193e:	d1 f7       	brne	.-12     	; 0x1934 <__unpack_f+0xd4>
    1940:	70 64       	ori	r23, 0x40	; 64
    1942:	14 96       	adiw	r26, 0x04	; 4
    1944:	4d 93       	st	X+, r20
    1946:	5d 93       	st	X+, r21
    1948:	6d 93       	st	X+, r22
    194a:	7c 93       	st	X, r23
    194c:	17 97       	sbiw	r26, 0x07	; 7
    194e:	08 95       	ret

00001950 <__fpcmp_parts_f>:
    1950:	1f 93       	push	r17
    1952:	dc 01       	movw	r26, r24
    1954:	fb 01       	movw	r30, r22
    1956:	9c 91       	ld	r25, X
    1958:	92 30       	cpi	r25, 0x02	; 2
    195a:	08 f4       	brcc	.+2      	; 0x195e <__fpcmp_parts_f+0xe>
    195c:	47 c0       	rjmp	.+142    	; 0x19ec <__fpcmp_parts_f+0x9c>
    195e:	80 81       	ld	r24, Z
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	08 f4       	brcc	.+2      	; 0x1966 <__fpcmp_parts_f+0x16>
    1964:	43 c0       	rjmp	.+134    	; 0x19ec <__fpcmp_parts_f+0x9c>
    1966:	94 30       	cpi	r25, 0x04	; 4
    1968:	51 f4       	brne	.+20     	; 0x197e <__fpcmp_parts_f+0x2e>
    196a:	11 96       	adiw	r26, 0x01	; 1
    196c:	1c 91       	ld	r17, X
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	99 f5       	brne	.+102    	; 0x19d8 <__fpcmp_parts_f+0x88>
    1972:	81 81       	ldd	r24, Z+1	; 0x01
    1974:	68 2f       	mov	r22, r24
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	61 1b       	sub	r22, r17
    197a:	71 09       	sbc	r23, r1
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <__fpcmp_parts_f+0xac>
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	21 f0       	breq	.+8      	; 0x198a <__fpcmp_parts_f+0x3a>
    1982:	92 30       	cpi	r25, 0x02	; 2
    1984:	31 f4       	brne	.+12     	; 0x1992 <__fpcmp_parts_f+0x42>
    1986:	82 30       	cpi	r24, 0x02	; 2
    1988:	b9 f1       	breq	.+110    	; 0x19f8 <__fpcmp_parts_f+0xa8>
    198a:	81 81       	ldd	r24, Z+1	; 0x01
    198c:	88 23       	and	r24, r24
    198e:	89 f1       	breq	.+98     	; 0x19f2 <__fpcmp_parts_f+0xa2>
    1990:	2d c0       	rjmp	.+90     	; 0x19ec <__fpcmp_parts_f+0x9c>
    1992:	11 96       	adiw	r26, 0x01	; 1
    1994:	1c 91       	ld	r17, X
    1996:	11 97       	sbiw	r26, 0x01	; 1
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	f1 f0       	breq	.+60     	; 0x19d8 <__fpcmp_parts_f+0x88>
    199c:	81 81       	ldd	r24, Z+1	; 0x01
    199e:	18 17       	cp	r17, r24
    19a0:	d9 f4       	brne	.+54     	; 0x19d8 <__fpcmp_parts_f+0x88>
    19a2:	12 96       	adiw	r26, 0x02	; 2
    19a4:	2d 91       	ld	r18, X+
    19a6:	3c 91       	ld	r19, X
    19a8:	13 97       	sbiw	r26, 0x03	; 3
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	93 81       	ldd	r25, Z+3	; 0x03
    19ae:	82 17       	cp	r24, r18
    19b0:	93 07       	cpc	r25, r19
    19b2:	94 f0       	brlt	.+36     	; 0x19d8 <__fpcmp_parts_f+0x88>
    19b4:	28 17       	cp	r18, r24
    19b6:	39 07       	cpc	r19, r25
    19b8:	bc f0       	brlt	.+46     	; 0x19e8 <__fpcmp_parts_f+0x98>
    19ba:	14 96       	adiw	r26, 0x04	; 4
    19bc:	8d 91       	ld	r24, X+
    19be:	9d 91       	ld	r25, X+
    19c0:	0d 90       	ld	r0, X+
    19c2:	bc 91       	ld	r27, X
    19c4:	a0 2d       	mov	r26, r0
    19c6:	24 81       	ldd	r18, Z+4	; 0x04
    19c8:	35 81       	ldd	r19, Z+5	; 0x05
    19ca:	46 81       	ldd	r20, Z+6	; 0x06
    19cc:	57 81       	ldd	r21, Z+7	; 0x07
    19ce:	28 17       	cp	r18, r24
    19d0:	39 07       	cpc	r19, r25
    19d2:	4a 07       	cpc	r20, r26
    19d4:	5b 07       	cpc	r21, r27
    19d6:	18 f4       	brcc	.+6      	; 0x19de <__fpcmp_parts_f+0x8e>
    19d8:	11 23       	and	r17, r17
    19da:	41 f0       	breq	.+16     	; 0x19ec <__fpcmp_parts_f+0x9c>
    19dc:	0a c0       	rjmp	.+20     	; 0x19f2 <__fpcmp_parts_f+0xa2>
    19de:	82 17       	cp	r24, r18
    19e0:	93 07       	cpc	r25, r19
    19e2:	a4 07       	cpc	r26, r20
    19e4:	b5 07       	cpc	r27, r21
    19e6:	40 f4       	brcc	.+16     	; 0x19f8 <__fpcmp_parts_f+0xa8>
    19e8:	11 23       	and	r17, r17
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <__fpcmp_parts_f+0xa2>
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <__fpcmp_parts_f+0xac>
    19f2:	6f ef       	ldi	r22, 0xFF	; 255
    19f4:	7f ef       	ldi	r23, 0xFF	; 255
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <__fpcmp_parts_f+0xac>
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	cb 01       	movw	r24, r22
    19fe:	1f 91       	pop	r17
    1a00:	08 95       	ret

00001a02 <fdevopen>:
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	8c 01       	movw	r16, r24
    1a0c:	eb 01       	movw	r28, r22
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	31 f4       	brne	.+12     	; 0x1a1e <fdevopen+0x1c>
    1a12:	61 15       	cp	r22, r1
    1a14:	71 05       	cpc	r23, r1
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <fdevopen+0x1c>
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	38 c0       	rjmp	.+112    	; 0x1a8e <fdevopen+0x8c>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	6e e0       	ldi	r22, 0x0E	; 14
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <calloc>
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	9c 01       	movw	r18, r24
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	71 f1       	breq	.+92     	; 0x1a8e <fdevopen+0x8c>
    1a32:	80 e8       	ldi	r24, 0x80	; 128
    1a34:	83 83       	std	Z+3, r24	; 0x03
    1a36:	20 97       	sbiw	r28, 0x00	; 0
    1a38:	71 f0       	breq	.+28     	; 0x1a56 <fdevopen+0x54>
    1a3a:	d3 87       	std	Z+11, r29	; 0x0b
    1a3c:	c2 87       	std	Z+10, r28	; 0x0a
    1a3e:	81 e8       	ldi	r24, 0x81	; 129
    1a40:	83 83       	std	Z+3, r24	; 0x03
    1a42:	80 91 9a 02 	lds	r24, 0x029A
    1a46:	90 91 9b 02 	lds	r25, 0x029B
    1a4a:	89 2b       	or	r24, r25
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <fdevopen+0x54>
    1a4e:	f0 93 9b 02 	sts	0x029B, r31
    1a52:	e0 93 9a 02 	sts	0x029A, r30
    1a56:	01 15       	cp	r16, r1
    1a58:	11 05       	cpc	r17, r1
    1a5a:	c9 f0       	breq	.+50     	; 0x1a8e <fdevopen+0x8c>
    1a5c:	11 87       	std	Z+9, r17	; 0x09
    1a5e:	00 87       	std	Z+8, r16	; 0x08
    1a60:	83 81       	ldd	r24, Z+3	; 0x03
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	83 83       	std	Z+3, r24	; 0x03
    1a66:	80 91 9c 02 	lds	r24, 0x029C
    1a6a:	90 91 9d 02 	lds	r25, 0x029D
    1a6e:	89 2b       	or	r24, r25
    1a70:	71 f4       	brne	.+28     	; 0x1a8e <fdevopen+0x8c>
    1a72:	f0 93 9d 02 	sts	0x029D, r31
    1a76:	e0 93 9c 02 	sts	0x029C, r30
    1a7a:	80 91 9e 02 	lds	r24, 0x029E
    1a7e:	90 91 9f 02 	lds	r25, 0x029F
    1a82:	89 2b       	or	r24, r25
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <fdevopen+0x8c>
    1a86:	f0 93 9f 02 	sts	0x029F, r31
    1a8a:	e0 93 9e 02 	sts	0x029E, r30
    1a8e:	c9 01       	movw	r24, r18
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <printf>:
    1a9a:	a0 e0       	ldi	r26, 0x00	; 0
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e3 e5       	ldi	r30, 0x53	; 83
    1aa0:	fd e0       	ldi	r31, 0x0D	; 13
    1aa2:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	35 96       	adiw	r30, 0x05	; 5
    1aaa:	61 91       	ld	r22, Z+
    1aac:	71 91       	ld	r23, Z+
    1aae:	80 91 9c 02 	lds	r24, 0x029C
    1ab2:	90 91 9d 02 	lds	r25, 0x029D
    1ab6:	af 01       	movw	r20, r30
    1ab8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vfprintf>
    1abc:	20 96       	adiw	r28, 0x00	; 0
    1abe:	e2 e0       	ldi	r30, 0x02	; 2
    1ac0:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

00001ac4 <putchar>:
    1ac4:	60 91 9c 02 	lds	r22, 0x029C
    1ac8:	70 91 9d 02 	lds	r23, 0x029D
    1acc:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1ad0:	08 95       	ret

00001ad2 <puts>:
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	8c 01       	movw	r16, r24
    1adc:	e0 91 9c 02 	lds	r30, 0x029C
    1ae0:	f0 91 9d 02 	lds	r31, 0x029D
    1ae4:	83 81       	ldd	r24, Z+3	; 0x03
    1ae6:	81 ff       	sbrs	r24, 1
    1ae8:	21 c0       	rjmp	.+66     	; 0x1b2c <puts+0x5a>
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
    1aee:	0d c0       	rjmp	.+26     	; 0x1b0a <puts+0x38>
    1af0:	e0 91 9c 02 	lds	r30, 0x029C
    1af4:	f0 91 9d 02 	lds	r31, 0x029D
    1af8:	20 85       	ldd	r18, Z+8	; 0x08
    1afa:	31 85       	ldd	r19, Z+9	; 0x09
    1afc:	bf 01       	movw	r22, r30
    1afe:	f9 01       	movw	r30, r18
    1b00:	09 95       	icall
    1b02:	89 2b       	or	r24, r25
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <puts+0x38>
    1b06:	cf ef       	ldi	r28, 0xFF	; 255
    1b08:	df ef       	ldi	r29, 0xFF	; 255
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	8f 01       	movw	r16, r30
    1b10:	88 23       	and	r24, r24
    1b12:	71 f7       	brne	.-36     	; 0x1af0 <puts+0x1e>
    1b14:	e0 91 9c 02 	lds	r30, 0x029C
    1b18:	f0 91 9d 02 	lds	r31, 0x029D
    1b1c:	20 85       	ldd	r18, Z+8	; 0x08
    1b1e:	31 85       	ldd	r19, Z+9	; 0x09
    1b20:	8a e0       	ldi	r24, 0x0A	; 10
    1b22:	bf 01       	movw	r22, r30
    1b24:	f9 01       	movw	r30, r18
    1b26:	09 95       	icall
    1b28:	89 2b       	or	r24, r25
    1b2a:	11 f0       	breq	.+4      	; 0x1b30 <puts+0x5e>
    1b2c:	cf ef       	ldi	r28, 0xFF	; 255
    1b2e:	df ef       	ldi	r29, 0xFF	; 255
    1b30:	ce 01       	movw	r24, r28
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	08 95       	ret

00001b3c <vfprintf>:
    1b3c:	ab e0       	ldi	r26, 0x0B	; 11
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e4 ea       	ldi	r30, 0xA4	; 164
    1b42:	fd e0       	ldi	r31, 0x0D	; 13
    1b44:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
    1b48:	3c 01       	movw	r6, r24
    1b4a:	2b 01       	movw	r4, r22
    1b4c:	5a 01       	movw	r10, r20
    1b4e:	fc 01       	movw	r30, r24
    1b50:	17 82       	std	Z+7, r1	; 0x07
    1b52:	16 82       	std	Z+6, r1	; 0x06
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	81 fd       	sbrc	r24, 1
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <vfprintf+0x24>
    1b5a:	6f ef       	ldi	r22, 0xFF	; 255
    1b5c:	7f ef       	ldi	r23, 0xFF	; 255
    1b5e:	c6 c1       	rjmp	.+908    	; 0x1eec <vfprintf+0x3b0>
    1b60:	9a e0       	ldi	r25, 0x0A	; 10
    1b62:	89 2e       	mov	r8, r25
    1b64:	1e 01       	movw	r2, r28
    1b66:	08 94       	sec
    1b68:	21 1c       	adc	r2, r1
    1b6a:	31 1c       	adc	r3, r1
    1b6c:	f3 01       	movw	r30, r6
    1b6e:	23 81       	ldd	r18, Z+3	; 0x03
    1b70:	f2 01       	movw	r30, r4
    1b72:	23 fd       	sbrc	r18, 3
    1b74:	85 91       	lpm	r24, Z+
    1b76:	23 ff       	sbrs	r18, 3
    1b78:	81 91       	ld	r24, Z+
    1b7a:	2f 01       	movw	r4, r30
    1b7c:	88 23       	and	r24, r24
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <vfprintf+0x46>
    1b80:	b2 c1       	rjmp	.+868    	; 0x1ee6 <vfprintf+0x3aa>
    1b82:	85 32       	cpi	r24, 0x25	; 37
    1b84:	39 f4       	brne	.+14     	; 0x1b94 <vfprintf+0x58>
    1b86:	23 fd       	sbrc	r18, 3
    1b88:	85 91       	lpm	r24, Z+
    1b8a:	23 ff       	sbrs	r18, 3
    1b8c:	81 91       	ld	r24, Z+
    1b8e:	2f 01       	movw	r4, r30
    1b90:	85 32       	cpi	r24, 0x25	; 37
    1b92:	29 f4       	brne	.+10     	; 0x1b9e <vfprintf+0x62>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	b3 01       	movw	r22, r6
    1b98:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1b9c:	e7 cf       	rjmp	.-50     	; 0x1b6c <vfprintf+0x30>
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	ff 24       	eor	r15, r15
    1ba2:	ee 24       	eor	r14, r14
    1ba4:	99 24       	eor	r9, r9
    1ba6:	ff e1       	ldi	r31, 0x1F	; 31
    1ba8:	ff 15       	cp	r31, r15
    1baa:	d0 f0       	brcs	.+52     	; 0x1be0 <vfprintf+0xa4>
    1bac:	9b 32       	cpi	r25, 0x2B	; 43
    1bae:	69 f0       	breq	.+26     	; 0x1bca <vfprintf+0x8e>
    1bb0:	9c 32       	cpi	r25, 0x2C	; 44
    1bb2:	28 f4       	brcc	.+10     	; 0x1bbe <vfprintf+0x82>
    1bb4:	90 32       	cpi	r25, 0x20	; 32
    1bb6:	59 f0       	breq	.+22     	; 0x1bce <vfprintf+0x92>
    1bb8:	93 32       	cpi	r25, 0x23	; 35
    1bba:	91 f4       	brne	.+36     	; 0x1be0 <vfprintf+0xa4>
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <vfprintf+0x9e>
    1bbe:	9d 32       	cpi	r25, 0x2D	; 45
    1bc0:	49 f0       	breq	.+18     	; 0x1bd4 <vfprintf+0x98>
    1bc2:	90 33       	cpi	r25, 0x30	; 48
    1bc4:	69 f4       	brne	.+26     	; 0x1be0 <vfprintf+0xa4>
    1bc6:	41 e0       	ldi	r20, 0x01	; 1
    1bc8:	24 c0       	rjmp	.+72     	; 0x1c12 <vfprintf+0xd6>
    1bca:	52 e0       	ldi	r21, 0x02	; 2
    1bcc:	f5 2a       	or	r15, r21
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	f8 2a       	or	r15, r24
    1bd2:	28 c0       	rjmp	.+80     	; 0x1c24 <vfprintf+0xe8>
    1bd4:	98 e0       	ldi	r25, 0x08	; 8
    1bd6:	f9 2a       	or	r15, r25
    1bd8:	25 c0       	rjmp	.+74     	; 0x1c24 <vfprintf+0xe8>
    1bda:	e0 e1       	ldi	r30, 0x10	; 16
    1bdc:	fe 2a       	or	r15, r30
    1bde:	22 c0       	rjmp	.+68     	; 0x1c24 <vfprintf+0xe8>
    1be0:	f7 fc       	sbrc	r15, 7
    1be2:	29 c0       	rjmp	.+82     	; 0x1c36 <vfprintf+0xfa>
    1be4:	89 2f       	mov	r24, r25
    1be6:	80 53       	subi	r24, 0x30	; 48
    1be8:	8a 30       	cpi	r24, 0x0A	; 10
    1bea:	70 f4       	brcc	.+28     	; 0x1c08 <vfprintf+0xcc>
    1bec:	f6 fe       	sbrs	r15, 6
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <vfprintf+0xbe>
    1bf0:	98 9c       	mul	r9, r8
    1bf2:	90 2c       	mov	r9, r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	98 0e       	add	r9, r24
    1bf8:	15 c0       	rjmp	.+42     	; 0x1c24 <vfprintf+0xe8>
    1bfa:	e8 9c       	mul	r14, r8
    1bfc:	e0 2c       	mov	r14, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	e8 0e       	add	r14, r24
    1c02:	f0 e2       	ldi	r31, 0x20	; 32
    1c04:	ff 2a       	or	r15, r31
    1c06:	0e c0       	rjmp	.+28     	; 0x1c24 <vfprintf+0xe8>
    1c08:	9e 32       	cpi	r25, 0x2E	; 46
    1c0a:	29 f4       	brne	.+10     	; 0x1c16 <vfprintf+0xda>
    1c0c:	f6 fc       	sbrc	r15, 6
    1c0e:	6b c1       	rjmp	.+726    	; 0x1ee6 <vfprintf+0x3aa>
    1c10:	40 e4       	ldi	r20, 0x40	; 64
    1c12:	f4 2a       	or	r15, r20
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <vfprintf+0xe8>
    1c16:	9c 36       	cpi	r25, 0x6C	; 108
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <vfprintf+0xe4>
    1c1a:	50 e8       	ldi	r21, 0x80	; 128
    1c1c:	f5 2a       	or	r15, r21
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <vfprintf+0xe8>
    1c20:	98 36       	cpi	r25, 0x68	; 104
    1c22:	49 f4       	brne	.+18     	; 0x1c36 <vfprintf+0xfa>
    1c24:	f2 01       	movw	r30, r4
    1c26:	23 fd       	sbrc	r18, 3
    1c28:	95 91       	lpm	r25, Z+
    1c2a:	23 ff       	sbrs	r18, 3
    1c2c:	91 91       	ld	r25, Z+
    1c2e:	2f 01       	movw	r4, r30
    1c30:	99 23       	and	r25, r25
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <vfprintf+0xfa>
    1c34:	b8 cf       	rjmp	.-144    	; 0x1ba6 <vfprintf+0x6a>
    1c36:	89 2f       	mov	r24, r25
    1c38:	85 54       	subi	r24, 0x45	; 69
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	18 f0       	brcs	.+6      	; 0x1c44 <vfprintf+0x108>
    1c3e:	80 52       	subi	r24, 0x20	; 32
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	38 f4       	brcc	.+14     	; 0x1c52 <vfprintf+0x116>
    1c44:	44 e0       	ldi	r20, 0x04	; 4
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	a4 0e       	add	r10, r20
    1c4a:	b5 1e       	adc	r11, r21
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	59 83       	std	Y+1, r21	; 0x01
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <vfprintf+0x134>
    1c52:	93 36       	cpi	r25, 0x63	; 99
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <vfprintf+0x126>
    1c56:	93 37       	cpi	r25, 0x73	; 115
    1c58:	79 f0       	breq	.+30     	; 0x1c78 <vfprintf+0x13c>
    1c5a:	93 35       	cpi	r25, 0x53	; 83
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <vfprintf+0x124>
    1c5e:	56 c0       	rjmp	.+172    	; 0x1d0c <vfprintf+0x1d0>
    1c60:	20 c0       	rjmp	.+64     	; 0x1ca2 <vfprintf+0x166>
    1c62:	f5 01       	movw	r30, r10
    1c64:	80 81       	ld	r24, Z
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	42 e0       	ldi	r20, 0x02	; 2
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	a4 0e       	add	r10, r20
    1c6e:	b5 1e       	adc	r11, r21
    1c70:	61 01       	movw	r12, r2
    1c72:	01 e0       	ldi	r16, 0x01	; 1
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	12 c0       	rjmp	.+36     	; 0x1c9c <vfprintf+0x160>
    1c78:	f5 01       	movw	r30, r10
    1c7a:	c0 80       	ld	r12, Z
    1c7c:	d1 80       	ldd	r13, Z+1	; 0x01
    1c7e:	f6 fc       	sbrc	r15, 6
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <vfprintf+0x14c>
    1c82:	6f ef       	ldi	r22, 0xFF	; 255
    1c84:	7f ef       	ldi	r23, 0xFF	; 255
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <vfprintf+0x150>
    1c88:	69 2d       	mov	r22, r9
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	42 e0       	ldi	r20, 0x02	; 2
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	a4 0e       	add	r10, r20
    1c92:	b5 1e       	adc	r11, r21
    1c94:	c6 01       	movw	r24, r12
    1c96:	0e 94 ae 10 	call	0x215c	; 0x215c <strnlen>
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	5f e7       	ldi	r21, 0x7F	; 127
    1c9e:	f5 22       	and	r15, r21
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <vfprintf+0x18e>
    1ca2:	f5 01       	movw	r30, r10
    1ca4:	c0 80       	ld	r12, Z
    1ca6:	d1 80       	ldd	r13, Z+1	; 0x01
    1ca8:	f6 fc       	sbrc	r15, 6
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <vfprintf+0x176>
    1cac:	6f ef       	ldi	r22, 0xFF	; 255
    1cae:	7f ef       	ldi	r23, 0xFF	; 255
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <vfprintf+0x17a>
    1cb2:	69 2d       	mov	r22, r9
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	42 e0       	ldi	r20, 0x02	; 2
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	a4 0e       	add	r10, r20
    1cbc:	b5 1e       	adc	r11, r21
    1cbe:	c6 01       	movw	r24, r12
    1cc0:	0e 94 9c 10 	call	0x2138	; 0x2138 <strnlen_P>
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	50 e8       	ldi	r21, 0x80	; 128
    1cc8:	f5 2a       	or	r15, r21
    1cca:	f3 fe       	sbrs	r15, 3
    1ccc:	07 c0       	rjmp	.+14     	; 0x1cdc <vfprintf+0x1a0>
    1cce:	1a c0       	rjmp	.+52     	; 0x1d04 <vfprintf+0x1c8>
    1cd0:	80 e2       	ldi	r24, 0x20	; 32
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	b3 01       	movw	r22, r6
    1cd6:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1cda:	ea 94       	dec	r14
    1cdc:	8e 2d       	mov	r24, r14
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	08 17       	cp	r16, r24
    1ce2:	19 07       	cpc	r17, r25
    1ce4:	a8 f3       	brcs	.-22     	; 0x1cd0 <vfprintf+0x194>
    1ce6:	0e c0       	rjmp	.+28     	; 0x1d04 <vfprintf+0x1c8>
    1ce8:	f6 01       	movw	r30, r12
    1cea:	f7 fc       	sbrc	r15, 7
    1cec:	85 91       	lpm	r24, Z+
    1cee:	f7 fe       	sbrs	r15, 7
    1cf0:	81 91       	ld	r24, Z+
    1cf2:	6f 01       	movw	r12, r30
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	b3 01       	movw	r22, r6
    1cf8:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1cfc:	e1 10       	cpse	r14, r1
    1cfe:	ea 94       	dec	r14
    1d00:	01 50       	subi	r16, 0x01	; 1
    1d02:	10 40       	sbci	r17, 0x00	; 0
    1d04:	01 15       	cp	r16, r1
    1d06:	11 05       	cpc	r17, r1
    1d08:	79 f7       	brne	.-34     	; 0x1ce8 <vfprintf+0x1ac>
    1d0a:	ea c0       	rjmp	.+468    	; 0x1ee0 <vfprintf+0x3a4>
    1d0c:	94 36       	cpi	r25, 0x64	; 100
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <vfprintf+0x1d8>
    1d10:	99 36       	cpi	r25, 0x69	; 105
    1d12:	69 f5       	brne	.+90     	; 0x1d6e <vfprintf+0x232>
    1d14:	f7 fe       	sbrs	r15, 7
    1d16:	08 c0       	rjmp	.+16     	; 0x1d28 <vfprintf+0x1ec>
    1d18:	f5 01       	movw	r30, r10
    1d1a:	20 81       	ld	r18, Z
    1d1c:	31 81       	ldd	r19, Z+1	; 0x01
    1d1e:	42 81       	ldd	r20, Z+2	; 0x02
    1d20:	53 81       	ldd	r21, Z+3	; 0x03
    1d22:	84 e0       	ldi	r24, 0x04	; 4
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0a c0       	rjmp	.+20     	; 0x1d3c <vfprintf+0x200>
    1d28:	f5 01       	movw	r30, r10
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	9c 01       	movw	r18, r24
    1d30:	44 27       	eor	r20, r20
    1d32:	37 fd       	sbrc	r19, 7
    1d34:	40 95       	com	r20
    1d36:	54 2f       	mov	r21, r20
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a8 0e       	add	r10, r24
    1d3e:	b9 1e       	adc	r11, r25
    1d40:	9f e6       	ldi	r25, 0x6F	; 111
    1d42:	f9 22       	and	r15, r25
    1d44:	57 ff       	sbrs	r21, 7
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <vfprintf+0x21e>
    1d48:	50 95       	com	r21
    1d4a:	40 95       	com	r20
    1d4c:	30 95       	com	r19
    1d4e:	21 95       	neg	r18
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	4f 4f       	sbci	r20, 0xFF	; 255
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	e0 e8       	ldi	r30, 0x80	; 128
    1d58:	fe 2a       	or	r15, r30
    1d5a:	ca 01       	movw	r24, r20
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	a1 01       	movw	r20, r2
    1d60:	2a e0       	ldi	r18, 0x0A	; 10
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__ultoa_invert>
    1d68:	d8 2e       	mov	r13, r24
    1d6a:	d2 18       	sub	r13, r2
    1d6c:	40 c0       	rjmp	.+128    	; 0x1dee <vfprintf+0x2b2>
    1d6e:	95 37       	cpi	r25, 0x75	; 117
    1d70:	29 f4       	brne	.+10     	; 0x1d7c <vfprintf+0x240>
    1d72:	1f 2d       	mov	r17, r15
    1d74:	1f 7e       	andi	r17, 0xEF	; 239
    1d76:	2a e0       	ldi	r18, 0x0A	; 10
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	1d c0       	rjmp	.+58     	; 0x1db6 <vfprintf+0x27a>
    1d7c:	1f 2d       	mov	r17, r15
    1d7e:	19 7f       	andi	r17, 0xF9	; 249
    1d80:	9f 36       	cpi	r25, 0x6F	; 111
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <vfprintf+0x260>
    1d84:	90 37       	cpi	r25, 0x70	; 112
    1d86:	20 f4       	brcc	.+8      	; 0x1d90 <vfprintf+0x254>
    1d88:	98 35       	cpi	r25, 0x58	; 88
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <vfprintf+0x252>
    1d8c:	ac c0       	rjmp	.+344    	; 0x1ee6 <vfprintf+0x3aa>
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <vfprintf+0x272>
    1d90:	90 37       	cpi	r25, 0x70	; 112
    1d92:	39 f0       	breq	.+14     	; 0x1da2 <vfprintf+0x266>
    1d94:	98 37       	cpi	r25, 0x78	; 120
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <vfprintf+0x25e>
    1d98:	a6 c0       	rjmp	.+332    	; 0x1ee6 <vfprintf+0x3aa>
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <vfprintf+0x268>
    1d9c:	28 e0       	ldi	r18, 0x08	; 8
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	0a c0       	rjmp	.+20     	; 0x1db6 <vfprintf+0x27a>
    1da2:	10 61       	ori	r17, 0x10	; 16
    1da4:	14 fd       	sbrc	r17, 4
    1da6:	14 60       	ori	r17, 0x04	; 4
    1da8:	20 e1       	ldi	r18, 0x10	; 16
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <vfprintf+0x27a>
    1dae:	14 fd       	sbrc	r17, 4
    1db0:	16 60       	ori	r17, 0x06	; 6
    1db2:	20 e1       	ldi	r18, 0x10	; 16
    1db4:	32 e0       	ldi	r19, 0x02	; 2
    1db6:	17 ff       	sbrs	r17, 7
    1db8:	08 c0       	rjmp	.+16     	; 0x1dca <vfprintf+0x28e>
    1dba:	f5 01       	movw	r30, r10
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	44 e0       	ldi	r20, 0x04	; 4
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <vfprintf+0x29e>
    1dca:	f5 01       	movw	r30, r10
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	42 e0       	ldi	r20, 0x02	; 2
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	a4 0e       	add	r10, r20
    1ddc:	b5 1e       	adc	r11, r21
    1dde:	a1 01       	movw	r20, r2
    1de0:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__ultoa_invert>
    1de4:	d8 2e       	mov	r13, r24
    1de6:	d2 18       	sub	r13, r2
    1de8:	8f e7       	ldi	r24, 0x7F	; 127
    1dea:	f8 2e       	mov	r15, r24
    1dec:	f1 22       	and	r15, r17
    1dee:	f6 fe       	sbrs	r15, 6
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <vfprintf+0x2cc>
    1df2:	5e ef       	ldi	r21, 0xFE	; 254
    1df4:	f5 22       	and	r15, r21
    1df6:	d9 14       	cp	r13, r9
    1df8:	38 f4       	brcc	.+14     	; 0x1e08 <vfprintf+0x2cc>
    1dfa:	f4 fe       	sbrs	r15, 4
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <vfprintf+0x2d0>
    1dfe:	f2 fc       	sbrc	r15, 2
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <vfprintf+0x2d0>
    1e02:	8f ee       	ldi	r24, 0xEF	; 239
    1e04:	f8 22       	and	r15, r24
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <vfprintf+0x2d0>
    1e08:	1d 2d       	mov	r17, r13
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <vfprintf+0x2d2>
    1e0c:	19 2d       	mov	r17, r9
    1e0e:	f4 fe       	sbrs	r15, 4
    1e10:	0d c0       	rjmp	.+26     	; 0x1e2c <vfprintf+0x2f0>
    1e12:	fe 01       	movw	r30, r28
    1e14:	ed 0d       	add	r30, r13
    1e16:	f1 1d       	adc	r31, r1
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 33       	cpi	r24, 0x30	; 48
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <vfprintf+0x2e8>
    1e1e:	99 ee       	ldi	r25, 0xE9	; 233
    1e20:	f9 22       	and	r15, r25
    1e22:	08 c0       	rjmp	.+16     	; 0x1e34 <vfprintf+0x2f8>
    1e24:	1f 5f       	subi	r17, 0xFF	; 255
    1e26:	f2 fe       	sbrs	r15, 2
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <vfprintf+0x2f8>
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <vfprintf+0x2f6>
    1e2c:	8f 2d       	mov	r24, r15
    1e2e:	86 78       	andi	r24, 0x86	; 134
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <vfprintf+0x2f8>
    1e32:	1f 5f       	subi	r17, 0xFF	; 255
    1e34:	0f 2d       	mov	r16, r15
    1e36:	f3 fc       	sbrc	r15, 3
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <vfprintf+0x326>
    1e3a:	f0 fe       	sbrs	r15, 0
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <vfprintf+0x320>
    1e3e:	1e 15       	cp	r17, r14
    1e40:	10 f0       	brcs	.+4      	; 0x1e46 <vfprintf+0x30a>
    1e42:	9d 2c       	mov	r9, r13
    1e44:	0b c0       	rjmp	.+22     	; 0x1e5c <vfprintf+0x320>
    1e46:	9d 2c       	mov	r9, r13
    1e48:	9e 0c       	add	r9, r14
    1e4a:	91 1a       	sub	r9, r17
    1e4c:	1e 2d       	mov	r17, r14
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <vfprintf+0x320>
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	b3 01       	movw	r22, r6
    1e56:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1e5a:	1f 5f       	subi	r17, 0xFF	; 255
    1e5c:	1e 15       	cp	r17, r14
    1e5e:	c0 f3       	brcs	.-16     	; 0x1e50 <vfprintf+0x314>
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <vfprintf+0x32e>
    1e62:	1e 15       	cp	r17, r14
    1e64:	10 f4       	brcc	.+4      	; 0x1e6a <vfprintf+0x32e>
    1e66:	e1 1a       	sub	r14, r17
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <vfprintf+0x330>
    1e6a:	ee 24       	eor	r14, r14
    1e6c:	04 ff       	sbrs	r16, 4
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <vfprintf+0x352>
    1e70:	80 e3       	ldi	r24, 0x30	; 48
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	b3 01       	movw	r22, r6
    1e76:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1e7a:	02 ff       	sbrs	r16, 2
    1e7c:	1d c0       	rjmp	.+58     	; 0x1eb8 <vfprintf+0x37c>
    1e7e:	01 fd       	sbrc	r16, 1
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <vfprintf+0x34c>
    1e82:	88 e7       	ldi	r24, 0x78	; 120
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e c0       	rjmp	.+28     	; 0x1ea4 <vfprintf+0x368>
    1e88:	88 e5       	ldi	r24, 0x58	; 88
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0b c0       	rjmp	.+22     	; 0x1ea4 <vfprintf+0x368>
    1e8e:	80 2f       	mov	r24, r16
    1e90:	86 78       	andi	r24, 0x86	; 134
    1e92:	91 f0       	breq	.+36     	; 0x1eb8 <vfprintf+0x37c>
    1e94:	01 ff       	sbrs	r16, 1
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <vfprintf+0x360>
    1e98:	8b e2       	ldi	r24, 0x2B	; 43
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <vfprintf+0x362>
    1e9c:	80 e2       	ldi	r24, 0x20	; 32
    1e9e:	f7 fc       	sbrc	r15, 7
    1ea0:	8d e2       	ldi	r24, 0x2D	; 45
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	b3 01       	movw	r22, r6
    1ea6:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <vfprintf+0x37c>
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b3 01       	movw	r22, r6
    1eb2:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1eb6:	9a 94       	dec	r9
    1eb8:	d9 14       	cp	r13, r9
    1eba:	c0 f3       	brcs	.-16     	; 0x1eac <vfprintf+0x370>
    1ebc:	da 94       	dec	r13
    1ebe:	f1 01       	movw	r30, r2
    1ec0:	ed 0d       	add	r30, r13
    1ec2:	f1 1d       	adc	r31, r1
    1ec4:	80 81       	ld	r24, Z
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	b3 01       	movw	r22, r6
    1eca:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1ece:	dd 20       	and	r13, r13
    1ed0:	a9 f7       	brne	.-22     	; 0x1ebc <vfprintf+0x380>
    1ed2:	06 c0       	rjmp	.+12     	; 0x1ee0 <vfprintf+0x3a4>
    1ed4:	80 e2       	ldi	r24, 0x20	; 32
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	b3 01       	movw	r22, r6
    1eda:	0e 94 b9 10 	call	0x2172	; 0x2172 <fputc>
    1ede:	ea 94       	dec	r14
    1ee0:	ee 20       	and	r14, r14
    1ee2:	c1 f7       	brne	.-16     	; 0x1ed4 <vfprintf+0x398>
    1ee4:	43 ce       	rjmp	.-890    	; 0x1b6c <vfprintf+0x30>
    1ee6:	f3 01       	movw	r30, r6
    1ee8:	66 81       	ldd	r22, Z+6	; 0x06
    1eea:	77 81       	ldd	r23, Z+7	; 0x07
    1eec:	cb 01       	movw	r24, r22
    1eee:	2b 96       	adiw	r28, 0x0b	; 11
    1ef0:	e2 e1       	ldi	r30, 0x12	; 18
    1ef2:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00001ef6 <calloc>:
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	68 9f       	mul	r22, r24
    1f00:	80 01       	movw	r16, r0
    1f02:	69 9f       	mul	r22, r25
    1f04:	10 0d       	add	r17, r0
    1f06:	78 9f       	mul	r23, r24
    1f08:	10 0d       	add	r17, r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <malloc>
    1f12:	ec 01       	movw	r28, r24
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	29 f0       	breq	.+10     	; 0x1f22 <calloc+0x2c>
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	a8 01       	movw	r20, r16
    1f1e:	0e 94 a7 10 	call	0x214e	; 0x214e <memset>
    1f22:	ce 01       	movw	r24, r28
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	08 95       	ret

00001f2e <malloc>:
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	bc 01       	movw	r22, r24
    1f34:	82 30       	cpi	r24, 0x02	; 2
    1f36:	91 05       	cpc	r25, r1
    1f38:	10 f4       	brcc	.+4      	; 0x1f3e <malloc+0x10>
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	a0 91 a2 02 	lds	r26, 0x02A2
    1f42:	b0 91 a3 02 	lds	r27, 0x02A3
    1f46:	ed 01       	movw	r28, r26
    1f48:	e0 e0       	ldi	r30, 0x00	; 0
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	21 c0       	rjmp	.+66     	; 0x1f94 <malloc+0x66>
    1f52:	88 81       	ld	r24, Y
    1f54:	99 81       	ldd	r25, Y+1	; 0x01
    1f56:	86 17       	cp	r24, r22
    1f58:	97 07       	cpc	r25, r23
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <malloc+0x48>
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	30 97       	sbiw	r30, 0x00	; 0
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <malloc+0x3c>
    1f64:	93 83       	std	Z+3, r25	; 0x03
    1f66:	82 83       	std	Z+2, r24	; 0x02
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <malloc+0x44>
    1f6a:	90 93 a3 02 	sts	0x02A3, r25
    1f6e:	80 93 a2 02 	sts	0x02A2, r24
    1f72:	fe 01       	movw	r30, r28
    1f74:	34 c0       	rjmp	.+104    	; 0x1fde <malloc+0xb0>
    1f76:	68 17       	cp	r22, r24
    1f78:	79 07       	cpc	r23, r25
    1f7a:	38 f4       	brcc	.+14     	; 0x1f8a <malloc+0x5c>
    1f7c:	41 15       	cp	r20, r1
    1f7e:	51 05       	cpc	r21, r1
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <malloc+0x5a>
    1f82:	84 17       	cp	r24, r20
    1f84:	95 07       	cpc	r25, r21
    1f86:	08 f4       	brcc	.+2      	; 0x1f8a <malloc+0x5c>
    1f88:	ac 01       	movw	r20, r24
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	9c 01       	movw	r18, r24
    1f92:	e9 01       	movw	r28, r18
    1f94:	20 97       	sbiw	r28, 0x00	; 0
    1f96:	e9 f6       	brne	.-70     	; 0x1f52 <malloc+0x24>
    1f98:	41 15       	cp	r20, r1
    1f9a:	51 05       	cpc	r21, r1
    1f9c:	a9 f1       	breq	.+106    	; 0x2008 <malloc+0xda>
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	86 1b       	sub	r24, r22
    1fa2:	97 0b       	sbc	r25, r23
    1fa4:	04 97       	sbiw	r24, 0x04	; 4
    1fa6:	08 f4       	brcc	.+2      	; 0x1faa <malloc+0x7c>
    1fa8:	ba 01       	movw	r22, r20
    1faa:	e0 e0       	ldi	r30, 0x00	; 0
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	2a c0       	rjmp	.+84     	; 0x2004 <malloc+0xd6>
    1fb0:	8d 91       	ld	r24, X+
    1fb2:	9c 91       	ld	r25, X
    1fb4:	11 97       	sbiw	r26, 0x01	; 1
    1fb6:	84 17       	cp	r24, r20
    1fb8:	95 07       	cpc	r25, r21
    1fba:	f9 f4       	brne	.+62     	; 0x1ffa <malloc+0xcc>
    1fbc:	64 17       	cp	r22, r20
    1fbe:	75 07       	cpc	r23, r21
    1fc0:	81 f4       	brne	.+32     	; 0x1fe2 <malloc+0xb4>
    1fc2:	12 96       	adiw	r26, 0x02	; 2
    1fc4:	8d 91       	ld	r24, X+
    1fc6:	9c 91       	ld	r25, X
    1fc8:	13 97       	sbiw	r26, 0x03	; 3
    1fca:	30 97       	sbiw	r30, 0x00	; 0
    1fcc:	19 f0       	breq	.+6      	; 0x1fd4 <malloc+0xa6>
    1fce:	93 83       	std	Z+3, r25	; 0x03
    1fd0:	82 83       	std	Z+2, r24	; 0x02
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <malloc+0xae>
    1fd4:	90 93 a3 02 	sts	0x02A3, r25
    1fd8:	80 93 a2 02 	sts	0x02A2, r24
    1fdc:	fd 01       	movw	r30, r26
    1fde:	32 96       	adiw	r30, 0x02	; 2
    1fe0:	4f c0       	rjmp	.+158    	; 0x2080 <malloc+0x152>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	86 1b       	sub	r24, r22
    1fe6:	97 0b       	sbc	r25, r23
    1fe8:	fd 01       	movw	r30, r26
    1fea:	e8 0f       	add	r30, r24
    1fec:	f9 1f       	adc	r31, r25
    1fee:	61 93       	st	Z+, r22
    1ff0:	71 93       	st	Z+, r23
    1ff2:	02 97       	sbiw	r24, 0x02	; 2
    1ff4:	8d 93       	st	X+, r24
    1ff6:	9c 93       	st	X, r25
    1ff8:	43 c0       	rjmp	.+134    	; 0x2080 <malloc+0x152>
    1ffa:	fd 01       	movw	r30, r26
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	9c 01       	movw	r18, r24
    2002:	d9 01       	movw	r26, r18
    2004:	10 97       	sbiw	r26, 0x00	; 0
    2006:	a1 f6       	brne	.-88     	; 0x1fb0 <malloc+0x82>
    2008:	80 91 a0 02 	lds	r24, 0x02A0
    200c:	90 91 a1 02 	lds	r25, 0x02A1
    2010:	89 2b       	or	r24, r25
    2012:	41 f4       	brne	.+16     	; 0x2024 <malloc+0xf6>
    2014:	80 91 96 02 	lds	r24, 0x0296
    2018:	90 91 97 02 	lds	r25, 0x0297
    201c:	90 93 a1 02 	sts	0x02A1, r25
    2020:	80 93 a0 02 	sts	0x02A0, r24
    2024:	40 91 98 02 	lds	r20, 0x0298
    2028:	50 91 99 02 	lds	r21, 0x0299
    202c:	41 15       	cp	r20, r1
    202e:	51 05       	cpc	r21, r1
    2030:	41 f4       	brne	.+16     	; 0x2042 <malloc+0x114>
    2032:	4d b7       	in	r20, 0x3d	; 61
    2034:	5e b7       	in	r21, 0x3e	; 62
    2036:	80 91 94 02 	lds	r24, 0x0294
    203a:	90 91 95 02 	lds	r25, 0x0295
    203e:	48 1b       	sub	r20, r24
    2040:	59 0b       	sbc	r21, r25
    2042:	20 91 a0 02 	lds	r18, 0x02A0
    2046:	30 91 a1 02 	lds	r19, 0x02A1
    204a:	24 17       	cp	r18, r20
    204c:	35 07       	cpc	r19, r21
    204e:	b0 f4       	brcc	.+44     	; 0x207c <malloc+0x14e>
    2050:	ca 01       	movw	r24, r20
    2052:	82 1b       	sub	r24, r18
    2054:	93 0b       	sbc	r25, r19
    2056:	86 17       	cp	r24, r22
    2058:	97 07       	cpc	r25, r23
    205a:	80 f0       	brcs	.+32     	; 0x207c <malloc+0x14e>
    205c:	ab 01       	movw	r20, r22
    205e:	4e 5f       	subi	r20, 0xFE	; 254
    2060:	5f 4f       	sbci	r21, 0xFF	; 255
    2062:	84 17       	cp	r24, r20
    2064:	95 07       	cpc	r25, r21
    2066:	50 f0       	brcs	.+20     	; 0x207c <malloc+0x14e>
    2068:	42 0f       	add	r20, r18
    206a:	53 1f       	adc	r21, r19
    206c:	50 93 a1 02 	sts	0x02A1, r21
    2070:	40 93 a0 02 	sts	0x02A0, r20
    2074:	f9 01       	movw	r30, r18
    2076:	61 93       	st	Z+, r22
    2078:	71 93       	st	Z+, r23
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <malloc+0x152>
    207c:	e0 e0       	ldi	r30, 0x00	; 0
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	cf 01       	movw	r24, r30
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	08 95       	ret

00002088 <free>:
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	09 f4       	brne	.+2      	; 0x2092 <free+0xa>
    2090:	50 c0       	rjmp	.+160    	; 0x2132 <free+0xaa>
    2092:	ec 01       	movw	r28, r24
    2094:	22 97       	sbiw	r28, 0x02	; 2
    2096:	1b 82       	std	Y+3, r1	; 0x03
    2098:	1a 82       	std	Y+2, r1	; 0x02
    209a:	a0 91 a2 02 	lds	r26, 0x02A2
    209e:	b0 91 a3 02 	lds	r27, 0x02A3
    20a2:	10 97       	sbiw	r26, 0x00	; 0
    20a4:	09 f1       	breq	.+66     	; 0x20e8 <free+0x60>
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	ac 17       	cp	r26, r28
    20ac:	bd 07       	cpc	r27, r29
    20ae:	08 f1       	brcs	.+66     	; 0x20f2 <free+0x6a>
    20b0:	bb 83       	std	Y+3, r27	; 0x03
    20b2:	aa 83       	std	Y+2, r26	; 0x02
    20b4:	fe 01       	movw	r30, r28
    20b6:	21 91       	ld	r18, Z+
    20b8:	31 91       	ld	r19, Z+
    20ba:	e2 0f       	add	r30, r18
    20bc:	f3 1f       	adc	r31, r19
    20be:	ae 17       	cp	r26, r30
    20c0:	bf 07       	cpc	r27, r31
    20c2:	79 f4       	brne	.+30     	; 0x20e2 <free+0x5a>
    20c4:	8d 91       	ld	r24, X+
    20c6:	9c 91       	ld	r25, X
    20c8:	11 97       	sbiw	r26, 0x01	; 1
    20ca:	28 0f       	add	r18, r24
    20cc:	39 1f       	adc	r19, r25
    20ce:	2e 5f       	subi	r18, 0xFE	; 254
    20d0:	3f 4f       	sbci	r19, 0xFF	; 255
    20d2:	39 83       	std	Y+1, r19	; 0x01
    20d4:	28 83       	st	Y, r18
    20d6:	12 96       	adiw	r26, 0x02	; 2
    20d8:	8d 91       	ld	r24, X+
    20da:	9c 91       	ld	r25, X
    20dc:	13 97       	sbiw	r26, 0x03	; 3
    20de:	9b 83       	std	Y+3, r25	; 0x03
    20e0:	8a 83       	std	Y+2, r24	; 0x02
    20e2:	41 15       	cp	r20, r1
    20e4:	51 05       	cpc	r21, r1
    20e6:	71 f4       	brne	.+28     	; 0x2104 <free+0x7c>
    20e8:	d0 93 a3 02 	sts	0x02A3, r29
    20ec:	c0 93 a2 02 	sts	0x02A2, r28
    20f0:	20 c0       	rjmp	.+64     	; 0x2132 <free+0xaa>
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	8d 91       	ld	r24, X+
    20f6:	9c 91       	ld	r25, X
    20f8:	13 97       	sbiw	r26, 0x03	; 3
    20fa:	ad 01       	movw	r20, r26
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	11 f0       	breq	.+4      	; 0x2104 <free+0x7c>
    2100:	dc 01       	movw	r26, r24
    2102:	d3 cf       	rjmp	.-90     	; 0x20aa <free+0x22>
    2104:	fa 01       	movw	r30, r20
    2106:	d3 83       	std	Z+3, r29	; 0x03
    2108:	c2 83       	std	Z+2, r28	; 0x02
    210a:	21 91       	ld	r18, Z+
    210c:	31 91       	ld	r19, Z+
    210e:	e2 0f       	add	r30, r18
    2110:	f3 1f       	adc	r31, r19
    2112:	ce 17       	cp	r28, r30
    2114:	df 07       	cpc	r29, r31
    2116:	69 f4       	brne	.+26     	; 0x2132 <free+0xaa>
    2118:	88 81       	ld	r24, Y
    211a:	99 81       	ldd	r25, Y+1	; 0x01
    211c:	28 0f       	add	r18, r24
    211e:	39 1f       	adc	r19, r25
    2120:	2e 5f       	subi	r18, 0xFE	; 254
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	fa 01       	movw	r30, r20
    2126:	31 83       	std	Z+1, r19	; 0x01
    2128:	20 83       	st	Z, r18
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	93 83       	std	Z+3, r25	; 0x03
    2130:	82 83       	std	Z+2, r24	; 0x02
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <strnlen_P>:
    2138:	fc 01       	movw	r30, r24
    213a:	05 90       	lpm	r0, Z+
    213c:	61 50       	subi	r22, 0x01	; 1
    213e:	70 40       	sbci	r23, 0x00	; 0
    2140:	01 10       	cpse	r0, r1
    2142:	d8 f7       	brcc	.-10     	; 0x213a <strnlen_P+0x2>
    2144:	80 95       	com	r24
    2146:	90 95       	com	r25
    2148:	8e 0f       	add	r24, r30
    214a:	9f 1f       	adc	r25, r31
    214c:	08 95       	ret

0000214e <memset>:
    214e:	dc 01       	movw	r26, r24
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <memset+0x6>
    2152:	6d 93       	st	X+, r22
    2154:	41 50       	subi	r20, 0x01	; 1
    2156:	50 40       	sbci	r21, 0x00	; 0
    2158:	e0 f7       	brcc	.-8      	; 0x2152 <memset+0x4>
    215a:	08 95       	ret

0000215c <strnlen>:
    215c:	fc 01       	movw	r30, r24
    215e:	61 50       	subi	r22, 0x01	; 1
    2160:	70 40       	sbci	r23, 0x00	; 0
    2162:	01 90       	ld	r0, Z+
    2164:	01 10       	cpse	r0, r1
    2166:	d8 f7       	brcc	.-10     	; 0x215e <strnlen+0x2>
    2168:	80 95       	com	r24
    216a:	90 95       	com	r25
    216c:	8e 0f       	add	r24, r30
    216e:	9f 1f       	adc	r25, r31
    2170:	08 95       	ret

00002172 <fputc>:
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	8c 01       	movw	r16, r24
    217c:	eb 01       	movw	r28, r22
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	81 ff       	sbrs	r24, 1
    2182:	1b c0       	rjmp	.+54     	; 0x21ba <fputc+0x48>
    2184:	82 ff       	sbrs	r24, 2
    2186:	0d c0       	rjmp	.+26     	; 0x21a2 <fputc+0x30>
    2188:	2e 81       	ldd	r18, Y+6	; 0x06
    218a:	3f 81       	ldd	r19, Y+7	; 0x07
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	9d 81       	ldd	r25, Y+5	; 0x05
    2190:	28 17       	cp	r18, r24
    2192:	39 07       	cpc	r19, r25
    2194:	64 f4       	brge	.+24     	; 0x21ae <fputc+0x3c>
    2196:	e8 81       	ld	r30, Y
    2198:	f9 81       	ldd	r31, Y+1	; 0x01
    219a:	01 93       	st	Z+, r16
    219c:	f9 83       	std	Y+1, r31	; 0x01
    219e:	e8 83       	st	Y, r30
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <fputc+0x3c>
    21a2:	e8 85       	ldd	r30, Y+8	; 0x08
    21a4:	f9 85       	ldd	r31, Y+9	; 0x09
    21a6:	80 2f       	mov	r24, r16
    21a8:	09 95       	icall
    21aa:	89 2b       	or	r24, r25
    21ac:	31 f4       	brne	.+12     	; 0x21ba <fputc+0x48>
    21ae:	8e 81       	ldd	r24, Y+6	; 0x06
    21b0:	9f 81       	ldd	r25, Y+7	; 0x07
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	9f 83       	std	Y+7, r25	; 0x07
    21b6:	8e 83       	std	Y+6, r24	; 0x06
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <fputc+0x4c>
    21ba:	0f ef       	ldi	r16, 0xFF	; 255
    21bc:	1f ef       	ldi	r17, 0xFF	; 255
    21be:	c8 01       	movw	r24, r16
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	08 95       	ret

000021ca <__ultoa_invert>:
    21ca:	fa 01       	movw	r30, r20
    21cc:	aa 27       	eor	r26, r26
    21ce:	28 30       	cpi	r18, 0x08	; 8
    21d0:	51 f1       	breq	.+84     	; 0x2226 <__ultoa_invert+0x5c>
    21d2:	20 31       	cpi	r18, 0x10	; 16
    21d4:	81 f1       	breq	.+96     	; 0x2236 <__ultoa_invert+0x6c>
    21d6:	e8 94       	clt
    21d8:	6f 93       	push	r22
    21da:	6e 7f       	andi	r22, 0xFE	; 254
    21dc:	6e 5f       	subi	r22, 0xFE	; 254
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	8f 4f       	sbci	r24, 0xFF	; 255
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	af 4f       	sbci	r26, 0xFF	; 255
    21e6:	b1 e0       	ldi	r27, 0x01	; 1
    21e8:	3e d0       	rcall	.+124    	; 0x2266 <__ultoa_invert+0x9c>
    21ea:	b4 e0       	ldi	r27, 0x04	; 4
    21ec:	3c d0       	rcall	.+120    	; 0x2266 <__ultoa_invert+0x9c>
    21ee:	67 0f       	add	r22, r23
    21f0:	78 1f       	adc	r23, r24
    21f2:	89 1f       	adc	r24, r25
    21f4:	9a 1f       	adc	r25, r26
    21f6:	a1 1d       	adc	r26, r1
    21f8:	68 0f       	add	r22, r24
    21fa:	79 1f       	adc	r23, r25
    21fc:	8a 1f       	adc	r24, r26
    21fe:	91 1d       	adc	r25, r1
    2200:	a1 1d       	adc	r26, r1
    2202:	6a 0f       	add	r22, r26
    2204:	71 1d       	adc	r23, r1
    2206:	81 1d       	adc	r24, r1
    2208:	91 1d       	adc	r25, r1
    220a:	a1 1d       	adc	r26, r1
    220c:	20 d0       	rcall	.+64     	; 0x224e <__ultoa_invert+0x84>
    220e:	09 f4       	brne	.+2      	; 0x2212 <__ultoa_invert+0x48>
    2210:	68 94       	set
    2212:	3f 91       	pop	r19
    2214:	2a e0       	ldi	r18, 0x0A	; 10
    2216:	26 9f       	mul	r18, r22
    2218:	11 24       	eor	r1, r1
    221a:	30 19       	sub	r19, r0
    221c:	30 5d       	subi	r19, 0xD0	; 208
    221e:	31 93       	st	Z+, r19
    2220:	de f6       	brtc	.-74     	; 0x21d8 <__ultoa_invert+0xe>
    2222:	cf 01       	movw	r24, r30
    2224:	08 95       	ret
    2226:	46 2f       	mov	r20, r22
    2228:	47 70       	andi	r20, 0x07	; 7
    222a:	40 5d       	subi	r20, 0xD0	; 208
    222c:	41 93       	st	Z+, r20
    222e:	b3 e0       	ldi	r27, 0x03	; 3
    2230:	0f d0       	rcall	.+30     	; 0x2250 <__ultoa_invert+0x86>
    2232:	c9 f7       	brne	.-14     	; 0x2226 <__ultoa_invert+0x5c>
    2234:	f6 cf       	rjmp	.-20     	; 0x2222 <__ultoa_invert+0x58>
    2236:	46 2f       	mov	r20, r22
    2238:	4f 70       	andi	r20, 0x0F	; 15
    223a:	40 5d       	subi	r20, 0xD0	; 208
    223c:	4a 33       	cpi	r20, 0x3A	; 58
    223e:	18 f0       	brcs	.+6      	; 0x2246 <__ultoa_invert+0x7c>
    2240:	49 5d       	subi	r20, 0xD9	; 217
    2242:	31 fd       	sbrc	r19, 1
    2244:	40 52       	subi	r20, 0x20	; 32
    2246:	41 93       	st	Z+, r20
    2248:	02 d0       	rcall	.+4      	; 0x224e <__ultoa_invert+0x84>
    224a:	a9 f7       	brne	.-22     	; 0x2236 <__ultoa_invert+0x6c>
    224c:	ea cf       	rjmp	.-44     	; 0x2222 <__ultoa_invert+0x58>
    224e:	b4 e0       	ldi	r27, 0x04	; 4
    2250:	a6 95       	lsr	r26
    2252:	97 95       	ror	r25
    2254:	87 95       	ror	r24
    2256:	77 95       	ror	r23
    2258:	67 95       	ror	r22
    225a:	ba 95       	dec	r27
    225c:	c9 f7       	brne	.-14     	; 0x2250 <__ultoa_invert+0x86>
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	61 05       	cpc	r22, r1
    2262:	71 05       	cpc	r23, r1
    2264:	08 95       	ret
    2266:	9b 01       	movw	r18, r22
    2268:	ac 01       	movw	r20, r24
    226a:	0a 2e       	mov	r0, r26
    226c:	06 94       	lsr	r0
    226e:	57 95       	ror	r21
    2270:	47 95       	ror	r20
    2272:	37 95       	ror	r19
    2274:	27 95       	ror	r18
    2276:	ba 95       	dec	r27
    2278:	c9 f7       	brne	.-14     	; 0x226c <__ultoa_invert+0xa2>
    227a:	62 0f       	add	r22, r18
    227c:	73 1f       	adc	r23, r19
    227e:	84 1f       	adc	r24, r20
    2280:	95 1f       	adc	r25, r21
    2282:	a0 1d       	adc	r26, r0
    2284:	08 95       	ret

00002286 <__udivmodsi4>:
    2286:	a1 e2       	ldi	r26, 0x21	; 33
    2288:	1a 2e       	mov	r1, r26
    228a:	aa 1b       	sub	r26, r26
    228c:	bb 1b       	sub	r27, r27
    228e:	fd 01       	movw	r30, r26
    2290:	0d c0       	rjmp	.+26     	; 0x22ac <__udivmodsi4_ep>

00002292 <__udivmodsi4_loop>:
    2292:	aa 1f       	adc	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	ee 1f       	adc	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	a2 17       	cp	r26, r18
    229c:	b3 07       	cpc	r27, r19
    229e:	e4 07       	cpc	r30, r20
    22a0:	f5 07       	cpc	r31, r21
    22a2:	20 f0       	brcs	.+8      	; 0x22ac <__udivmodsi4_ep>
    22a4:	a2 1b       	sub	r26, r18
    22a6:	b3 0b       	sbc	r27, r19
    22a8:	e4 0b       	sbc	r30, r20
    22aa:	f5 0b       	sbc	r31, r21

000022ac <__udivmodsi4_ep>:
    22ac:	66 1f       	adc	r22, r22
    22ae:	77 1f       	adc	r23, r23
    22b0:	88 1f       	adc	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	1a 94       	dec	r1
    22b6:	69 f7       	brne	.-38     	; 0x2292 <__udivmodsi4_loop>
    22b8:	60 95       	com	r22
    22ba:	70 95       	com	r23
    22bc:	80 95       	com	r24
    22be:	90 95       	com	r25
    22c0:	9b 01       	movw	r18, r22
    22c2:	ac 01       	movw	r20, r24
    22c4:	bd 01       	movw	r22, r26
    22c6:	cf 01       	movw	r24, r30
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
